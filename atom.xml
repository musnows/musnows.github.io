<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>慕雪的寒舍</title>
  
  <subtitle>雪下了一夜</subtitle>
  <link href="https://blog.musnow.top/atom.xml" rel="self"/>
  
  <link href="https://blog.musnow.top/"/>
  <updated>2025-04-12T05:33:10.000Z</updated>
  <id>https://blog.musnow.top/</id>
  
  <author>
    <name>慕雪年华</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【图床】Picgo/Piclist图片上传之前转webp（pic2webp插件）</title>
    <link href="https://blog.musnow.top/posts/5825720428/"/>
    <id>https://blog.musnow.top/posts/5825720428/</id>
    <published>2025-04-10T12:29:36.000Z</published>
    <updated>2025-04-12T05:33:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍了picgo、piclist的图片上传之前转webp的pic2webp插件，webp格式的压缩率优于截图常用的png格式，能降低站点图床运行压力，同时提升博客内图片加载体验。</p><h2 id="1-说明"><a href="#1-说明" class="headerlink" title="1. 说明"></a>1. 说明</h2><p>慕雪在编写博客的时候，都是使用snipaste软件截图并粘贴在obsidain、typora中，粘贴过程中会自动使用picgo（目前使用的是piclist，二者功能基本一致）将图片上传至图床，并返回markdown格式的图片链接。</p><p>不过，诸如snipaste截图软件，返回的截图基本都是PNG格式的，在压缩率上并不是特别理想。将PNG格式转成webp格式，至少能减少图片30%的体积，同时图片的质量没有明显变化。</p><h2 id="2-安装pic2webp插件"><a href="#2-安装pic2webp插件" class="headerlink" title="2. 安装pic2webp插件"></a>2. 安装pic2webp插件</h2><blockquote><p>插件开源地址：<a href="https://github.com/lemonsuo/picgo-plugin-pic2webp">https://github.com/lemonsuo/picgo-plugin-pic2webp</a></p></blockquote><p>在piclist的插件列表中搜索webp，安装pic2webp插件。安装了之后，无序任何配置，只要启用插件，所有经过piclist上传的图片，在上传之前都会转成webp格式。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/04/f1efd4f400650545cfda0313bf72edbe.webp" alt="image.png"></p><h3 id="2-1-遇到的问题"><a href="#2-1-遇到的问题" class="headerlink" title="2.1. 遇到的问题"></a>2.1. 遇到的问题</h3><p>既然那么无脑，为啥还要编写本文呢？那是因为我在安装插件的时候遇到了问题：<a href="https://github.com/lemonsuo/picgo-plugin-pic2webp/issues/1">无法安装插件，提示Please verify that the package.json has a valid “main” entry</a>；</p><p>ERROR日志如下所示，picgo和piclist的插件其实都是使用npm安装的，在下面的报错中，提到了package.json的main entry可能无效，其实就是<strong>文件不存在</strong>。在插件源码中能找到package.json，其中main的定义为<code>&quot;main&quot;: &quot;dist/index.js&quot;</code>，这里的问题就在于<code>node_modules</code>目录下的插件里面没有<code>dist/index.js</code>文件，导致插件安装失败。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">2025-04-09 08:59:53 [PicList ERROR] </span><br><span class="line">------Error Stack Begin------</span><br><span class="line">Error: Cannot find module &#x27;~/Library/Application Support/piclist/node_modules/picgo-plugin-pic2webp/dist/index.js&#x27;. Please verify that the package.json has a valid &quot;main&quot; entry</span><br><span class="line">    at tryPackage (node:internal/modules/cjs/loader:371:19)</span><br><span class="line">    at Module._findPath (node:internal/modules/cjs/loader:584:18)</span><br><span class="line">    at Module._resolveFilename (node:internal/modules/cjs/loader:949:27)</span><br><span class="line">    at n._resolveFilename (node:electron/js2c/browser_init:2:109827)</span><br><span class="line">    at Module._load (node:internal/modules/cjs/loader:811:27)</span><br><span class="line">    at f._load (node:electron/js2c/asar_bundle:2:13377)</span><br><span class="line">    at Module.require (node:internal/modules/cjs/loader:1035:19)</span><br><span class="line">    at require (node:internal/modules/cjs/helpers:102:18)</span><br><span class="line">    at Bt.getPlugin (/Applications/PicList.app/Contents/Resources/app.asar/node_modules/piclist/dist/index.cjs.js:1:38151)</span><br><span class="line">    at Bt.registerPlugin (/Applications/PicList.app/Contents/Resources/app.asar/node_modules/piclist/dist/index.cjs.js:1:37274)</span><br><span class="line">-------Error Stack End------- </span><br></pre></td></tr></table></figure><p>既然直接通过GUI安装插件失败了，那就尝试一下手动安装，所以编写了本文，记录手动安装的步骤。</p><h3 id="2-2-本地手动安装"><a href="#2-2-本地手动安装" class="headerlink" title="2.2. 本地手动安装"></a>2.2. 本地手动安装</h3><p>在github下载仓库<a href="https://github.com/lemonsuo/picgo-plugin-pic2webp/archive/refs/tags/1.0.0.zip">zip压缩包</a>，然后解压到本地某一个目录中（确保该目录不要变动也不要删除，否则插件也会失效），进入目录中，执行<code>npm install</code>和<code>npm run build</code>命令，构建插件。构建完毕之后，就会有<code>dist/index.js</code>文件了。</p><p>慕雪使用的是<code>npm 10.8.2</code>，构建插件的时候没有遇到任何报错，一切顺利。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">~/data/code/other/picgo-plugin-pic2webp-1.0.0                                9s</span><br><span class="line">❯ npm run build</span><br><span class="line"></span><br><span class="line">&gt; picgo-plugin-pic2webp@1.0.0 build</span><br><span class="line">&gt; tsc -p .</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">~/data/code/other/picgo-plugin-pic2webp-1.0.0                                  </span><br><span class="line">❯ ls</span><br><span class="line">License           logo.ico          package.json</span><br><span class="line">README.md         node_modules      src</span><br><span class="line">dist              package-lock.json tsconfig.json</span><br></pre></td></tr></table></figure><p>然后，再在piclist的插件列表中，点击这个下箭头按钮，选择本地目录，安装插件即可。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/04/d51568050a84d54fafc729b04abd3eea.webp" alt="image.png"></p><h2 id="3-插件效果"><a href="#3-插件效果" class="headerlink" title="3. 插件效果"></a>3. 插件效果</h2><p>以下是同一张图片的PNG和插件转换后的WEBP的效果，被插件处理后的WEBP</p><table><thead><tr><th>PNG</th><th>WEBP</th></tr></thead><tbody><tr><td><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/04/afb6ebffe4262eeea5b6985789d21b2f.png" alt="png图片"></td><td><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/04/1557c739ddb67c9e22ccc4e243c340b5.webp" alt="webp图片"></td></tr><tr><td>图片大小：72KB</td><td>图片大小：24KB</td></tr></tbody></table><p>对比来看，WEBP的图片并没有非常明显的压缩痕迹，对于博客的插图来说完全够用了！相比于图片质量，图像大小的显著变化更加值得。毕竟，图片占用空间越小，维护成本就更低，加载速度也更快，对于博客访问者和维护者来说都是一件好事。</p><p><strong>从2025年4月10日起，本站所有博客插图一律使用WEBP上传，不支持WEBP的浏览器将无法查看本站图片</strong>！</p>]]></content>
    
    
    <summary type="html">本文介绍了picgo、piclist的图片上传之前转webp的pic2webp插件，webp格式的压缩率优于截图常用的png格式，能降低站点图床运行压力，同时提升博客内图片加载体验。</summary>
    
    
    
    <category term="差生文具多" scheme="https://blog.musnow.top/categories/%E5%B7%AE%E7%94%9F%E6%96%87%E5%85%B7%E5%A4%9A/"/>
    
    <category term="博客建站" scheme="https://blog.musnow.top/categories/%E5%B7%AE%E7%94%9F%E6%96%87%E5%85%B7%E5%A4%9A/%E5%8D%9A%E5%AE%A2%E5%BB%BA%E7%AB%99/"/>
    
    
    <category term="博客建站" scheme="https://blog.musnow.top/tags/%E5%8D%9A%E5%AE%A2%E5%BB%BA%E7%AB%99/"/>
    
    <category term="图床" scheme="https://blog.musnow.top/tags/%E5%9B%BE%E5%BA%8A/"/>
    
    <category term="Hexo" scheme="https://blog.musnow.top/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>【SLAM】使用ROS的camera_calibration工具标定D435相机</title>
    <link href="https://blog.musnow.top/posts/9762190903/"/>
    <id>https://blog.musnow.top/posts/9762190903/</id>
    <published>2025-04-07T00:09:24.000Z</published>
    <updated>2025-04-07T12:58:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍了如何使用ROS的camera_calibration工具标定D435相机，包括标定工具的安装和标定的步骤。阅读本文之前，请先参考<a href="https://blog.musnow.top/posts/3771271576/">博客</a>安装ROS环境。</p><p>本文参考资料：</p><ul><li>主要参考博客：<a href="https://zhaoxuhui.top/blog/2021/02/02/ros-camera-calibration.html#3-%E6%89%93%E5%BC%80%E6%A0%87%E5%AE%9A%E5%B7%A5%E5%85%B7" title="利用ROS的Camera Calibration工具进行相机标定(USB相机与D435i)">利用ROS的Camera Calibration工具进行相机标定(USB相机与D435i)</a>；</li><li>ROS官网：<a href="http://wiki.ros.org/action/fullsearch/camera_calibration">wiki.ros.org&#x2F;action&#x2F;fullsearch&#x2F;camera_calibration</a>；</li><li>可选，使用intel官方Depth Quality Tool进行标定：<a href="https://blog.csdn.net/ahelloyou/article/details/106966192">realsense D435 标定(calibration)_d435标定-CSDN博客</a>；</li></ul><h2 id="安装标定工具"><a href="#安装标定工具" class="headerlink" title="安装标定工具"></a>安装标定工具</h2><p>使用如下命令安装<code>camera_calibration</code>工具</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install -y \</span><br><span class="line">    ros-melodic-rostest \</span><br><span class="line">    ros-melodic-camera-calibration</span><br></pre></td></tr></table></figure><p>命令执行结果如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">king@ubuntu:~/slam/ORB_SLAM2$ sudo apt-get install -y \</span><br><span class="line">&gt;     ros-melodic-rostest \</span><br><span class="line">&gt;     ros-melodic-camera-calibration</span><br><span class="line">Reading package lists... Done</span><br><span class="line">Building dependency tree     </span><br><span class="line">Reading state information... Done</span><br><span class="line">ros-melodic-camera-calibration is already the newest version (1.15.2-1bionic.20221025.191201).</span><br><span class="line">ros-melodic-rostest is already the newest version (1.14.13-1bionic.20221025.183909).</span><br><span class="line">ros-melodic-rostest set to manually installed.</span><br><span class="line">The following packages were automatically installed and are no longer required:</span><br><span class="line">  fonts-liberation2 fonts-opensymbol gir1.2-goa-1.0 gir1.2-gst-plugins-base-1.0 gir1.2-gstreamer-1.0 gir1.2-gudev-1.0 gir1.2-snapd-1 gir1.2-udisks-2.0 grilo-plugins-0.3-base gstreamer1.0-gtk3 libcdr-0.1-1 libclucene-contribs1v5 libclucene-core1v5 libcmis-0.5-5v5 libcolamd2</span><br><span class="line">  libdazzle-1.0-0 libe-book-0.1-1 libedataserverui-1.2-2 libeot0 libepubgen-0.1-1 libetonyek-0.1-1 libevent-2.1-6 libexiv2-14 libfreerdp-client2-2 libfreerdp2-2 libgc1c2 libgee-0.8-2 libgexiv2-2 libgom-1.0-0 libgpgmepp6 libgpod-common libgpod4 liblangtag-common liblangtag1</span><br><span class="line">  liblirc-client0 liblua5.3-0 libmediaart-2.0-0 libmspub-0.1-1 libodfgen-0.1-1 libqqwing2v5 librevenge-0.0-0 libsgutils2-2 libssh-4 libsuitesparseconfig5 libvncclient1 libwinpr2-2 libxapian30 libxmlsec1-nss lp-solve media-player-info python3-mako python3-markupsafe</span><br><span class="line">  syslinux syslinux-common syslinux-legacy usb-creator-common</span><br><span class="line">Use &#x27;sudo apt autoremove&#x27; to remove them.</span><br><span class="line">0 upgraded, 0 newly installed, 0 to remove and 3 not upgraded.</span><br></pre></td></tr></table></figure><h2 id="准备棋盘格标定板"><a href="#准备棋盘格标定板" class="headerlink" title="准备棋盘格标定板"></a>准备棋盘格标定板</h2><p>ROS camera_calibration工具基于OpenCV和张正友标定法对相机进行标定。张正友标定法核心工具就是棋盘格标定板。如果有条件，可以去淘宝购买标准的棋盘格标定板。一般情况下，直接用A4纸打印出标定板也足够使用。</p><p>A4纸格式标定板下载链接：<a href="https://gitcode.com/Open-source-documentation-tutorial/3bb25/blob/main/%E6%A3%8B%E7%9B%98%E6%A0%BC-A4.pdf">A4尺寸张正友标定法专用棋盘格</a>；</p><p>在线生成标定板：<a href="https://calib.io/pages/camera-calibration-pattern-generator">Camera Calibration Pattern Generator – calib.io</a>；</p><h2 id="启动D435和标定工具"><a href="#启动D435和标定工具" class="headerlink" title="启动D435和标定工具"></a>启动D435和标定工具</h2><h3 id="启动命令"><a href="#启动命令" class="headerlink" title="启动命令"></a>启动命令</h3><p>先链接D435，然后启动相机和标定工具（不需要额外启动roscore）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 终端a启动相机</span></span><br><span class="line">roslaunch realsense2_camera rs_camera.launch</span><br><span class="line"><span class="comment"># 终端b启动标定工具（RGB相机）</span></span><br><span class="line">rosrun camera_calibration cameracalibrator.py \</span><br><span class="line">    --size 8x6 --square 0.025 \</span><br><span class="line">    --no-service-check \</span><br><span class="line">    image:=/camera/color/image_raw \</span><br><span class="line">    camera:=/camera/color</span><br></pre></td></tr></table></figure><p>命令执行结果如下</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/04/e737131db52258715c73bec8f6444566.png" alt="image.png"></p><h3 id="命令参数介绍"><a href="#命令参数介绍" class="headerlink" title="命令参数介绍"></a>命令参数介绍</h3><p>启动命令参数介绍：</p><ul><li><code>--size 8x6</code>代表棋盘格内部的角点数量（不是格子数量），棋盘格一般是<code>9x7</code>个格子，但是计算的时候只使用棋盘格的内部角点。</li><li><code>--square 0.025</code>是每个棋盘格的边长（米），也就是2.5厘米。上文给出的A4棋盘格打印出来之后就是2.5厘米的，可以用尺子量一下验证一下。</li></ul><p>命令最后的topic映射，我们需要映射成D435的RGB相机或者红外相机，分别对其进行标定。三个相机对应的topic如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/camera/color/image_raw          <span class="comment"># RGB相机</span></span><br><span class="line">/camera/infra1/image_rect_raw    <span class="comment"># 左红外</span></span><br><span class="line">/camera/infra2/image_rect_raw    <span class="comment"># 右红外</span></span><br></pre></td></tr></table></figure><p>映射<code>image</code>是获取相机拍摄的图像，映射<code>camera:=/camera/color</code>的作用是让ROS能找到我们相机的<code>/camera/color/image_raw</code>和<code>/camera/color/camera_info</code>。</p><p>注意，默认情况下是不存在infra红外相机的topic的，是因为红外的topic没有被打开广播。使用如下命令主动开启红外摄像头的topic广播。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">roslaunch realsense2_camera rs_camera.launch \</span><br><span class="line">    enable_infra1:=<span class="literal">true</span> enable_infra2:=<span class="literal">true</span></span><br></pre></td></tr></table></figure><p>此时可以看到topic列表，里面包含了infra的topic</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">[root:/]<span class="comment"># rostopic list</span></span><br><span class="line">/camera/color/camera_info</span><br><span class="line">/camera/color/image_raw</span><br><span class="line">/camera/color/image_raw/compressed</span><br><span class="line">/camera/color/image_raw/compressed/parameter_descriptions</span><br><span class="line">/camera/color/image_raw/compressed/parameter_updates</span><br><span class="line">/camera/color/image_raw/compressedDepth</span><br><span class="line">/camera/color/image_raw/compressedDepth/parameter_descriptions</span><br><span class="line">/camera/color/image_raw/compressedDepth/parameter_updates</span><br><span class="line">/camera/color/image_raw/theora</span><br><span class="line">/camera/color/image_raw/theora/parameter_descriptions</span><br><span class="line">/camera/color/image_raw/theora/parameter_updates</span><br><span class="line">/camera/color/metadata</span><br><span class="line">/camera/depth/camera_info</span><br><span class="line">/camera/depth/image_rect_raw</span><br><span class="line">/camera/depth/image_rect_raw/compressed</span><br><span class="line">/camera/depth/image_rect_raw/compressed/parameter_descriptions</span><br><span class="line">/camera/depth/image_rect_raw/compressed/parameter_updates</span><br><span class="line">/camera/depth/image_rect_raw/compressedDepth</span><br><span class="line">/camera/depth/image_rect_raw/compressedDepth/parameter_descriptions</span><br><span class="line">/camera/depth/image_rect_raw/compressedDepth/parameter_updates</span><br><span class="line">/camera/depth/image_rect_raw/theora</span><br><span class="line">/camera/depth/image_rect_raw/theora/parameter_descriptions</span><br><span class="line">/camera/depth/image_rect_raw/theora/parameter_updates</span><br><span class="line">/camera/depth/metadata</span><br><span class="line">/camera/extrinsics/depth_to_color</span><br><span class="line">/camera/extrinsics/depth_to_infra1</span><br><span class="line">/camera/extrinsics/depth_to_infra2</span><br><span class="line">/camera/infra1/camera_info</span><br><span class="line">/camera/infra1/image_rect_raw</span><br><span class="line">/camera/infra1/image_rect_raw/compressed</span><br><span class="line">/camera/infra1/image_rect_raw/compressed/parameter_descriptions</span><br><span class="line">/camera/infra1/image_rect_raw/compressed/parameter_updates</span><br><span class="line">/camera/infra1/image_rect_raw/compressedDepth</span><br><span class="line">/camera/infra1/image_rect_raw/compressedDepth/parameter_descriptions</span><br><span class="line">/camera/infra1/image_rect_raw/compressedDepth/parameter_updates</span><br><span class="line">/camera/infra1/image_rect_raw/theora</span><br><span class="line">/camera/infra1/image_rect_raw/theora/parameter_descriptions</span><br><span class="line">/camera/infra1/image_rect_raw/theora/parameter_updates</span><br><span class="line">/camera/infra1/metadata</span><br><span class="line">/camera/infra2/camera_info</span><br><span class="line">/camera/infra2/image_rect_raw</span><br><span class="line">/camera/infra2/image_rect_raw/compressed</span><br><span class="line">/camera/infra2/image_rect_raw/compressed/parameter_descriptions</span><br><span class="line">/camera/infra2/image_rect_raw/compressed/parameter_updates</span><br><span class="line">/camera/infra2/image_rect_raw/compressedDepth</span><br><span class="line">/camera/infra2/image_rect_raw/compressedDepth/parameter_descriptions</span><br><span class="line">/camera/infra2/image_rect_raw/compressedDepth/parameter_updates</span><br><span class="line">/camera/infra2/image_rect_raw/theora</span><br><span class="line">/camera/infra2/image_rect_raw/theora/parameter_descriptions</span><br><span class="line">/camera/infra2/image_rect_raw/theora/parameter_updates</span><br><span class="line">/camera/infra2/metadata</span><br><span class="line">/camera/realsense2_camera_manager/bond</span><br><span class="line">/camera/rgb_camera/auto_exposure_roi/parameter_descriptions</span><br><span class="line">/camera/rgb_camera/auto_exposure_roi/parameter_updates</span><br><span class="line">/camera/rgb_camera/parameter_descriptions</span><br><span class="line">/camera/rgb_camera/parameter_updates</span><br><span class="line">/camera/stereo_module/auto_exposure_roi/parameter_descriptions</span><br><span class="line">/camera/stereo_module/auto_exposure_roi/parameter_updates</span><br><span class="line">/camera/stereo_module/parameter_descriptions</span><br><span class="line">/camera/stereo_module/parameter_updates</span><br><span class="line">/diagnostics</span><br><span class="line">/rosout</span><br><span class="line">/rosout_agg</span><br><span class="line">/tf</span><br><span class="line">/tf_static</span><br><span class="line">[root:/]<span class="comment"># </span></span><br></pre></td></tr></table></figure><p>因为ROS会主动查询相机的<code>set_camera_info</code>节点，如果相机不存在此节点就会报错。可以添加<code>--no-service-check</code>参数跳过检查。如果不加这个参数，就会出现“Service not found”的报错。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root:/]# rosrun camera_calibration cameracalibrator.py \</span><br><span class="line">&gt;     --size 8x6 --square 0.025 \</span><br><span class="line">&gt;     image:=/camera/color/image_raw \</span><br><span class="line">&gt;     camera:=/camera/color</span><br><span class="line">Waiting for service /camera/color/set_camera_info ...</span><br><span class="line">Service not found</span><br></pre></td></tr></table></figure><h2 id="开始标定"><a href="#开始标定" class="headerlink" title="开始标定"></a>开始标定</h2><h3 id="标定步骤"><a href="#标定步骤" class="headerlink" title="标定步骤"></a>标定步骤</h3><p>启动了标定工具，且显示出摄像头的画面之后，将棋盘标定板放在<strong>平面</strong>上（一定要是平面），<strong>然后从不同方向移动摄像头拍摄标定板</strong>，ROS会自动拍摄多角度的标定板图片。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/04/68e19416b1b2cd97faa533ae2272e3d1.png" alt="image.png"></p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/04/1bc53f02e9b36185f82369ae6349cfbd.png" alt="image.png"></p><p>标定完成后，calibration按钮会变绿可供点击。点击calibration后，save和commit按钮会亮起，点击save按钮之后会将标定结果数据写入到<code>/tmp</code>目录下去。注意一定要将其cp挪出来，因为linux的tmp目录每次启动系统都会清理掉。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(&#x27;Wrote calibration data to&#x27;, &#x27;/tmp/calibrationdata.tar.gz&#x27;)</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/04/044b7300423283efcd757d952abc87bf.png" alt="image.png"></p><p>而commit按钮就是将我们的标定结果写入到相机的固件中，后续<code>rostopic echo /camera/color/camera_info</code>的时候就会输出此次的标定结果。</p><h3 id="标定输出"><a href="#标定输出" class="headerlink" title="标定输出"></a>标定输出</h3><p>标定过程中，终端输出如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">*** Added sample 34, p_x = 0.593, p_y = 0.624, p_size = 0.568, skew = 0.121</span><br><span class="line">*** Added sample 35, p_x = 0.488, p_y = 0.598, p_size = 0.560, skew = 0.335</span><br><span class="line">*** Added sample 36, p_x = 0.433, p_y = 0.486, p_size = 0.575, skew = 0.358</span><br><span class="line">*** Added sample 37, p_x = 0.544, p_y = 0.345, p_size = 0.580, skew = 0.248</span><br><span class="line">*** Added sample 38, p_x = 0.522, p_y = 0.179, p_size = 0.568, skew = 0.055</span><br><span class="line">*** Added sample 39, p_x = 0.511, p_y = 0.019, p_size = 0.591, skew = 0.106</span><br><span class="line">*** Added sample 40, p_x = 0.496, p_y = 0.547, p_size = 0.577, skew = 0.143</span><br><span class="line">*** Added sample 41, p_x = 0.502, p_y = 0.344, p_size = 0.599, skew = 0.004</span><br></pre></td></tr></table></figure><p>标定完成后会输出相机内参。其中camera matrix是相机的内参矩阵（对应开头矩阵K），distortion是相机的畸变系数（对应开头的矩阵D），R是旋转举证，P是投影矩阵。<code>[narrow_stereo]</code>之后的内容是opencv格式的ost.txt标定文件格式，可以用于发布<code>camera_info</code>话题</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">**** Calibrating ****</span><br><span class="line">mono pinhole calibration...</span><br><span class="line">D = [0.1234477524818914, -0.24186083107572148, 0.010573738134724179, -0.0018947635408389889, 0.0]</span><br><span class="line">K = [609.8463473151232, 0.0, 318.16312952971543, 0.0, 610.5650055668543, 255.8048346565674, 0.0, 0.0, 1.0]</span><br><span class="line">R = [1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0]</span><br><span class="line">P = [621.8898315429688, 0.0, 317.1112464092075, 0.0, 0.0, 620.319091796875, 259.4397678761525, 0.0, 0.0, 0.0, 1.0, 0.0]</span><br><span class="line">None</span><br><span class="line"># oST version 5.0 parameters</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[image]</span><br><span class="line"></span><br><span class="line">width</span><br><span class="line">640</span><br><span class="line"></span><br><span class="line">height</span><br><span class="line">480</span><br><span class="line"></span><br><span class="line">[narrow_stereo]</span><br><span class="line"></span><br><span class="line">camera matrix</span><br><span class="line">609.846347 0.000000 318.163130</span><br><span class="line">0.000000 610.565006 255.804835</span><br><span class="line">0.000000 0.000000 1.000000</span><br><span class="line"></span><br><span class="line">distortion</span><br><span class="line">0.123448 -0.241861 0.010574 -0.001895 0.000000</span><br><span class="line"></span><br><span class="line">rectification</span><br><span class="line">1.000000 0.000000 0.000000</span><br><span class="line">0.000000 1.000000 0.000000</span><br><span class="line">0.000000 0.000000 1.000000</span><br><span class="line"></span><br><span class="line">projection</span><br><span class="line">621.889832 0.000000 317.111246 0.000000</span><br><span class="line">0.000000 620.319092 259.439768 0.000000</span><br><span class="line">0.000000 0.000000 1.000000 0.000000</span><br><span class="line"></span><br><span class="line">(&#x27;Wrote calibration data to&#x27;, &#x27;/tmp/calibrationdata.tar.gz&#x27;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="关闭红外点阵投影"><a href="#关闭红外点阵投影" class="headerlink" title="关闭红外点阵投影"></a>关闭红外点阵投影</h2><p>参考：<a href="https://zhaoxuhui.top/blog/2020/09/09/intel-realsense-d435i-installation-and-use.html#4%E7%BA%A2%E5%A4%96%E5%8F%91%E5%B0%84%E5%99%A8%E7%9A%84%E5%BC%80%E5%85%B3">https://zhaoxuhui.top/blog/2020/09/09/intel-realsense-d435i-installation-and-use.html#4%E7%BA%A2%E5%A4%96%E5%8F%91%E5%B0%84%E5%99%A8%E7%9A%84%E5%BC%80%E5%85%B3</a>；</p><p>前文给出的标定步骤对于RGB相机和红外相机都是一样的操作，但是在标定红外相机的时候，需要将D435的红外投影给关闭，否则会影响标定结果（因为画面里面全是红外点阵投影）。</p><p>首先启动相机：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">roslaunch realsense2_camera rs_camera.launch \</span><br><span class="line">    enable_infra1:=<span class="literal">true</span> enable_infra2:=<span class="literal">true</span></span><br></pre></td></tr></table></figure><p>然后启动ROS的前端工具，启动Reconfigure节点，随后会打开一个工具</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rosrun rqt_reconfigure rqt_reconfigure</span><br></pre></td></tr></table></figure><p>找到<code>stereo_module</code>，然后找到<code>emitter_enabled</code>选项，将其关闭即可</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/04/a4cae51651e97200ff58d8c661bdb9bc.png" alt="image.png"></p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/04/9ea9b24a840d6630f210d38ccaffe1ed.png" alt="image.png"></p><p>关闭了之后，再尝试启动标定工具，可以看到没有红外投影点阵了。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/04/7d22bea0a73c705e70e2d4ec8d49a0ec.png" alt="image.png"></p><h2 id="The-end"><a href="#The-end" class="headerlink" title="The end"></a>The end</h2><p>D435相机的标定步骤就是这些啦，希望能帮到大家。</p>]]></content>
    
    
    <summary type="html">本文介绍了如何使用ROS的camera_calibration工具标定D435相机，包括标定工具的安装和标定的步骤。</summary>
    
    
    
    <category term="编程学习" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="项目开发记录" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="Linux" scheme="https://blog.musnow.top/tags/Linux/"/>
    
    <category term="SLAM" scheme="https://blog.musnow.top/tags/SLAM/"/>
    
    <category term="RealSenseD435" scheme="https://blog.musnow.top/tags/RealSenseD435/"/>
    
  </entry>
  
  <entry>
    <title>【SLAM】在ORB_SLAM2的ROS模式下使用RealSense D435相机</title>
    <link href="https://blog.musnow.top/posts/9149643829/"/>
    <id>https://blog.musnow.top/posts/9149643829/</id>
    <published>2025-04-06T09:09:24.000Z</published>
    <updated>2025-04-06T10:52:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍了如何在ORB_SLAM2项目中使用RealSense D435相机作为RGB-D输入源，包括ROS下启动D435相机、ORB_SLAM2订阅Topic、ORB_SLAM2读取realsense-viewer录制的rosbag文件等步骤。。</p><h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h2><p>先前已经编写了<a href="https://blog.musnow.top/posts/7873538113/">如何用TUM数据集运行ORB_SLAM3</a>以及<a href="https://blog.musnow.top/posts/5090585017/">如何在ROS模式下运行ORB_SLAM3</a>的博客，ORB_SLAM3是基于ORB_SLAM2的，甚至代码仓库中还有遗留的ORB_SLAM2命名空间namespace没有修正，二者不管是用TUM RGB-D数据集直接运行还是在ROS模式下运行的命令都<strong>完全一致</strong>。所以，在阅读本文之前，先参考上面给出的两篇博客，安装ORB_SLAM2的依赖库和ROS环境。</p><p>注意：若想在ROS模式下运行ORB_SLAM2，则一定要安装OpenCV 3.2.0版本，否则会因为系统中存在多个不同版本的OpenCV从而导致动态库链接错误！</p><p>RealSense D435在Ubuntu 18.04中realsense驱动安装的步骤也在<a href="https://blog.musnow.top/posts/9107049817/">【SLAM】ubuntu 18.04 安装 RealSense D435 相机驱动（ARM64&#x2F;AMD64）</a>一文里面介绍过了，继续阅读本文之前，需要先把D435的驱动搞定。</p><p>测试使用的操作系统为 Ubuntu 18.04 LTS，平台为AMD64。</p><h2 id="2-运行步骤"><a href="#2-运行步骤" class="headerlink" title="2. 运行步骤"></a>2. 运行步骤</h2><h3 id="2-1-编译ORB-SLAM2"><a href="#2-1-编译ORB-SLAM2" class="headerlink" title="2.1. 编译ORB_SLAM2"></a>2.1. 编译ORB_SLAM2</h3><p>阅读到这里，就默认你已经根据上面给出的参考博客把相关依赖项、ROS环境和realsense驱动都已经安装完毕了，这里给出ORB_SLAM2的编译步骤，和ORB_SLAM3也是如出一辙的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/raulmur/ORB_SLAM2.git</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> ORB_SLAM2</span><br><span class="line"><span class="built_in">chmod</span> +x build.sh</span><br><span class="line">./build.sh</span><br></pre></td></tr></table></figure><p>注意，编译之前需要先修改<a href="https://github.com/raulmur/ORB_SLAM2/blob/master/build.sh">build.sh</a>脚本，把所有<code>make -j</code>修改成<code>make -j4</code>，避免make编译的时候无止尽地吃掉所有系统资源，这个在ORB_SLAM3的博客中也提到过。</p><blockquote><p>make命令<code>-j</code>选项后面跟着的数字是<strong>编译使用的线程数量</strong>，建议改成linux系统cpu线程数量的一半或者2&#x2F;3，避免吃光所有系统资源。选项<code>-j</code>后面不跟数字的时候，编译项目时会无止尽地吃掉所有系统内存和CPU，直到被操作系统KILL掉，编译失败（在我的测试环境中是这个现象）。</p></blockquote><p>编译完毕普通版本后，再编译ROS版本，同样需要把<code>build_ros.sh</code>脚本里面的<code>make -j</code>改成<code>make -j4</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> +x ./build_ros.sh</span><br><span class="line">./build_ros.sh</span><br></pre></td></tr></table></figure><p>如果你的依赖项环境一切正常，这两个脚本无需任何额外操作即可编译成功。</p><h3 id="2-2-ROS下启动D435相机"><a href="#2-2-ROS下启动D435相机" class="headerlink" title="2.2. ROS下启动D435相机"></a>2.2. ROS下启动D435相机</h3><p>参考博客：</p><ul><li><a href="https://www.jianshu.com/p/9e3d31ba35da" title="基于深度相机 RealSense D435i 的 ORB SLAM 2 - 简书">基于深度相机 RealSense D435i 的 ORB SLAM 2 - 简书</a>；</li><li><a href="https://github.com/IntelRealSense/realsense-ros">github.com&#x2F;IntelRealSense&#x2F;realsense-ros</a>；</li></ul><p>使用如下命令安装D435的ROS驱动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install -y ros-melodic-rgbd-launch \</span><br><span class="line">ros-melodic-realsense2-camera \</span><br><span class="line">ros-melodic-realsense2-description</span><br></pre></td></tr></table></figure><p>安装完毕驱动后，系统中会多出realsense相机的ROS启动文件，可以使用<code>roscd realsense2_camera</code>命令进入apt安装的ros realsense的工作空间，这里就有各种launch文件。</p><p>我们需要的是<code>rs_rgbd.launch</code>这个启动文件，以RGB-D模式启动我们的D435相机。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">king@ubuntu:~/slam$ roscd realsense2_camera</span><br><span class="line">king@ubuntu:/opt/ros/melodic/share/realsense2_camera$ ls</span><br><span class="line">cmake  launch  msg  nodelet_plugins.xml  package.xml  rviz  srv</span><br><span class="line">king@ubuntu:/opt/ros/melodic/share/realsense2_camera$ ls launch/</span><br><span class="line">demo_pointcloud.launch      rs_aligned_depth.launch           rs_from_file.launch         rs_t265.launch</span><br><span class="line">demo_t265.launch            rs_camera.launch                  rs_multiple_devices.launch</span><br><span class="line">includes                    rs_d400_and_t265.launch           rs_rgbd.launch</span><br><span class="line">opensource_tracking.launch  rs_d435_camera_with_model.launch  rs_rtabmap.launch</span><br></pre></td></tr></table></figure><p>注意检查一下<code>rs_rgbd.launch</code>启动文件中的下面这两个选项是否为true，如果不是，需要修改为true。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">&quot;enable_sync&quot;</span>         <span class="attr">default</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">&quot;align_depth&quot;</span>         <span class="attr">default</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>这两个参数的前者是让不同传感器数据（Depth, RGB, IMU）实现时间同步，即具有相同的 timestamp；后者会增加若干 rostopic，其中我们比较关心的是 <code>/camera/aligned_depth_to_color/image_raw</code>这个主题，对应D435相机的深度图像数据。</p><p>确认启动文件配置无误后，用下面的roslaunch命令就可以启动D435相机了。<strong>执行启动命令之前，需要先在另外一个终端执行roscore命令</strong>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">roslaunch realsense2_camera rs_rgbd.launch</span><br></pre></td></tr></table></figure><p>命令执行结果如下</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/04/c3c8958b59c5adceca3bbfa60e35cbec.png" alt="image.png"></p><p>使用<code>rostopic list</code>能看到D435相机发布的<strong>topic列表</strong>，如下所示。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">[root:/]<span class="comment"># rostopic list</span></span><br><span class="line">/camera/align_to_color/parameter_descriptions</span><br><span class="line">/camera/align_to_color/parameter_updates</span><br><span class="line">/camera/aligned_depth_to_color/camera_info</span><br><span class="line">/camera/aligned_depth_to_color/image_raw</span><br><span class="line">/camera/aligned_depth_to_color/image_raw/compressed</span><br><span class="line">/camera/aligned_depth_to_color/image_raw/compressed/parameter_descriptions</span><br><span class="line">/camera/aligned_depth_to_color/image_raw/compressed/parameter_updates</span><br><span class="line">/camera/aligned_depth_to_color/image_raw/compressedDepth</span><br><span class="line">/camera/aligned_depth_to_color/image_raw/compressedDepth/parameter_descriptions</span><br><span class="line">/camera/aligned_depth_to_color/image_raw/compressedDepth/parameter_updates</span><br><span class="line">/camera/aligned_depth_to_color/image_raw/theora</span><br><span class="line">/camera/aligned_depth_to_color/image_raw/theora/parameter_descriptions</span><br><span class="line">/camera/aligned_depth_to_color/image_raw/theora/parameter_updates</span><br><span class="line">/camera/color/camera_info</span><br><span class="line">/camera/color/image_raw</span><br><span class="line">/camera/color/image_raw/compressed</span><br><span class="line">/camera/color/image_raw/compressed/parameter_descriptions</span><br><span class="line">/camera/color/image_raw/compressed/parameter_updates</span><br><span class="line">/camera/color/image_raw/compressedDepth</span><br><span class="line">/camera/color/image_raw/compressedDepth/parameter_descriptions</span><br><span class="line">/camera/color/image_raw/compressedDepth/parameter_updates</span><br><span class="line">/camera/color/image_raw/theora</span><br><span class="line">/camera/color/image_raw/theora/parameter_descriptions</span><br><span class="line">/camera/color/image_raw/theora/parameter_updates</span><br><span class="line">/camera/color/image_rect_color</span><br><span class="line">/camera/color/image_rect_color/compressed</span><br><span class="line">/camera/color/image_rect_color/compressed/parameter_descriptions</span><br><span class="line">/camera/color/image_rect_color/compressed/parameter_updates</span><br><span class="line">/camera/color/image_rect_color/compressedDepth</span><br><span class="line">/camera/color/image_rect_color/compressedDepth/parameter_descriptions</span><br><span class="line">/camera/color/image_rect_color/compressedDepth/parameter_updates</span><br><span class="line">/camera/color/image_rect_color/theora</span><br><span class="line">/camera/color/image_rect_color/theora/parameter_descriptions</span><br><span class="line">/camera/color/image_rect_color/theora/parameter_updates</span><br><span class="line">/camera/color/metadata</span><br><span class="line">/camera/color_rectify_color/parameter_descriptions</span><br><span class="line">/camera/color_rectify_color/parameter_updates</span><br><span class="line">/camera/depth/camera_info</span><br><span class="line">/camera/depth/image_rect_raw</span><br><span class="line">/camera/depth/image_rect_raw/compressed</span><br><span class="line">/camera/depth/image_rect_raw/compressed/parameter_descriptions</span><br><span class="line">/camera/depth/image_rect_raw/compressed/parameter_updates</span><br><span class="line">/camera/depth/image_rect_raw/compressedDepth</span><br><span class="line">/camera/depth/image_rect_raw/compressedDepth/parameter_descriptions</span><br><span class="line">/camera/depth/image_rect_raw/compressedDepth/parameter_updates</span><br><span class="line">/camera/depth/image_rect_raw/theora</span><br><span class="line">/camera/depth/image_rect_raw/theora/parameter_descriptions</span><br><span class="line">/camera/depth/image_rect_raw/theora/parameter_updates</span><br><span class="line">/camera/depth/metadata</span><br><span class="line">/camera/depth_registered/points</span><br><span class="line">/camera/extrinsics/depth_to_color</span><br><span class="line">/camera/realsense2_camera_manager/bond</span><br><span class="line">/camera/rgb_camera/parameter_descriptions</span><br><span class="line">/camera/rgb_camera/parameter_updates</span><br><span class="line">/camera/stereo_module/parameter_descriptions</span><br><span class="line">/camera/stereo_module/parameter_updates</span><br><span class="line">/diagnostics</span><br><span class="line">/rosout</span><br><span class="line">/rosout_agg</span><br><span class="line">/tf</span><br><span class="line">/tf_static</span><br><span class="line">[root:/]<span class="comment"># </span></span><br></pre></td></tr></table></figure><p>其中我们需要的是<code>/camera/color/image_raw</code> 和 <code>/camera/aligned_depth_to_color/image_raw</code> 这两个topic，分别对应 RGB 图像和深度图像数据流。</p><h3 id="2-3-ORB-SLAM2在ROS下订阅D435发布的topic"><a href="#2-3-ORB-SLAM2在ROS下订阅D435发布的topic" class="headerlink" title="2.3. ORB_SLAM2在ROS下订阅D435发布的topic"></a>2.3. ORB_SLAM2在ROS下订阅D435发布的topic</h3><p>接下来需要创建一个相机内参文件（类似<code>Examples/RGB-D/TUM1.yaml</code>），填写D435相机的内外参数。内外参数最好的获取方式是通过ROS的camera_calibration工具，需要打印一个棋盘格标定板对D435相机进行标定。</p><p>本文不介绍如何标定D435相机，直接使用D435相机发布的相机信息的<code>/camera/color/camera_info</code>主题，通过如下命令获取D435相机的内外参数，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rostopic <span class="built_in">echo</span> /camera/color/camera_info</span><br></pre></td></tr></table></figure><p>该命令的输出结果如下所示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">header: </span><br><span class="line">  seq: 8477</span><br><span class="line">  stamp: </span><br><span class="line">    secs: 1740896373</span><br><span class="line">    nsecs: 113253355</span><br><span class="line">  frame_id: &quot;camera_color_optical_frame&quot;</span><br><span class="line">height: 480</span><br><span class="line">width: 640</span><br><span class="line">distortion_model: &quot;plumb_bob&quot;</span><br><span class="line">D: [0.0, 0.0, 0.0, 0.0, 0.0]</span><br><span class="line">K: [605.8230590820312, 0.0, 323.6572570800781, 0.0, 604.4893798828125, 242.0369110107422, 0.0, 0.0, 1.0]</span><br><span class="line">R: [1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0]</span><br><span class="line">P: [605.8230590820312, 0.0, 323.6572570800781, 0.0, 0.0, 604.4893798828125, 242.0369110107422, 0.0, 0.0, 0.0, 1.0, 0.0]</span><br><span class="line">binning_x: 0</span><br><span class="line">binning_y: 0</span><br><span class="line">roi: </span><br><span class="line">  x_offset: 0</span><br><span class="line">  y_offset: 0</span><br><span class="line">  height: 0</span><br><span class="line">  width: 0</span><br><span class="line">  do_rectify: False</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>这个输出中：</p><ul><li><code>K</code> 是 <strong>相机内参矩阵</strong>（<code>fx</code>, <code>fy</code>, <code>cx</code>, <code>cy</code>）</li><li><code>D</code> 是 <strong>畸变系数</strong>（ORB_SLAM2 只用前 4 个 <code>k1, k2, p1, p2</code>）</li><li><code>width</code> 和 <code>height</code> 是相机拍摄的图像分辨率；</li></ul><p>Camera.bf的计算公式如下，其中baseline是D435两颗摄像头之间的间距，官方的参数是50mm，将其和fx相乘就能得到bf。</p><p>$$<br>bf&#x3D;baseline×fx&#x3D;0.05×605.8230590820312≈30.29<br>$$</p><p>收集了这些数据后，参考ORB_SLAM2代码仓库中的<code>Examples/ROS/ORB_SLAM2/Asus.yaml</code>文件，把上述命令的结果中的参数写到文件<code>Examples/RGB-D/RealSenseD435.yaml</code>中。</p><p>最终我依照上述命令结果制作了如下yaml文件，每一个参数都取值都用注释标注出来了，没有中文注释的部分保持不变，不用修改。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">%YAML:1.0</span></span><br><span class="line"><span class="comment">#--------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># 通过`rostopic echo /camera/color/camera_info`获取并编写</span></span><br><span class="line"><span class="comment">#--------------------------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 相机内参 Camera Parameters</span></span><br><span class="line"><span class="attr">Camera.fx:</span> <span class="number">605.8230590820312</span>  <span class="comment"># K[0]</span></span><br><span class="line"><span class="attr">Camera.fy:</span> <span class="number">604.4893798828125</span>  <span class="comment"># K[4]</span></span><br><span class="line"><span class="attr">Camera.cx:</span> <span class="number">323.6572570800781</span>  <span class="comment"># K[2]</span></span><br><span class="line"><span class="attr">Camera.cy:</span> <span class="number">242.0369110107422</span>  <span class="comment"># K[5]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 畸变参数 (D)</span></span><br><span class="line"><span class="attr">Camera.k1:</span> <span class="number">0.0</span>  <span class="comment"># D[0]</span></span><br><span class="line"><span class="attr">Camera.k2:</span> <span class="number">0.0</span>  <span class="comment"># D[1]</span></span><br><span class="line"><span class="attr">Camera.p1:</span> <span class="number">0.0</span>  <span class="comment"># D[2]</span></span><br><span class="line"><span class="attr">Camera.p2:</span> <span class="number">0.0</span>  <span class="comment"># D[3]</span></span><br><span class="line"><span class="attr">Camera.k3:</span> <span class="number">0.0</span>  <span class="comment"># D[4]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 图像分辨率</span></span><br><span class="line"><span class="string">Camera.width:640</span></span><br><span class="line"><span class="string">Camera.height:480</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Camera frames per second 相机帧数</span></span><br><span class="line"><span class="string">Camera.fps:30.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># IR projector baseline times fx (aprox.)</span></span><br><span class="line"><span class="comment"># bf = baseline × fx = 0.05 × 605.8230590820312 ≈ 30.29</span></span><br><span class="line"><span class="comment"># baseline是d435两个摄像头的基线距离，为50mm</span></span><br><span class="line"><span class="string">Camera.bf:30.29</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Color order of the images (0: BGR, 1: RGB. It is ignored if images are grayscale)</span></span><br><span class="line"><span class="string">Camera.RGB:1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Close/Far threshold. Baseline times.</span></span><br><span class="line"><span class="string">ThDepth:40.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Deptmap values factor，将深度像素值转化为实际距离，原来单位是mm，转化成m</span></span><br><span class="line"><span class="string">DepthMapFactor:1000.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下面这部分都不需要修改，直接从Asus.yaml复制过来</span></span><br><span class="line"><span class="comment">#--------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># ORB Parameters</span></span><br><span class="line"><span class="comment">#--------------------------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ORB Extractor: Number of features per image</span></span><br><span class="line"><span class="attr">ORBextractor.nFeatures:</span> <span class="number">1000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ORB Extractor: Scale factor between levels in the scale pyramid </span></span><br><span class="line"><span class="attr">ORBextractor.scaleFactor:</span> <span class="number">1.2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ORB Extractor: Number of levels in the scale pyramid</span></span><br><span class="line"><span class="attr">ORBextractor.nLevels:</span> <span class="number">8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ORB Extractor: Fast threshold</span></span><br><span class="line"><span class="comment"># Image is divided in a grid. At each cell FAST are extracted imposing a minimum response.</span></span><br><span class="line"><span class="comment"># Firstly we impose iniThFAST. If no corners are detected we impose a lower value minThFAST</span></span><br><span class="line"><span class="comment"># You can lower these values if your images have low contrast</span></span><br><span class="line"><span class="attr">ORBextractor.iniThFAST:</span> <span class="number">20</span></span><br><span class="line"><span class="attr">ORBextractor.minThFAST:</span> <span class="number">7</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#--------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Viewer Parameters</span></span><br><span class="line"><span class="comment">#--------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="attr">Viewer.KeyFrameSize:</span> <span class="number">0.05</span></span><br><span class="line"><span class="attr">Viewer.KeyFrameLineWidth:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">Viewer.GraphLineWidth:</span> <span class="number">0.9</span></span><br><span class="line"><span class="string">Viewer.PointSize:2</span></span><br><span class="line"><span class="attr">Viewer.CameraSize:</span> <span class="number">0.08</span></span><br><span class="line"><span class="attr">Viewer.CameraLineWidth:</span> <span class="number">3</span></span><br><span class="line"><span class="attr">Viewer.ViewpointX:</span> <span class="number">0</span></span><br><span class="line"><span class="attr">Viewer.ViewpointY:</span> <span class="number">-0.7</span></span><br><span class="line"><span class="attr">Viewer.ViewpointZ:</span> <span class="number">-1.8</span></span><br><span class="line"><span class="attr">Viewer.ViewpointF:</span> <span class="number">500</span></span><br></pre></td></tr></table></figure><h3 id="2-4-运行ORB-SLAM2"><a href="#2-4-运行ORB-SLAM2" class="headerlink" title="2.4. 运行ORB_SLAM2"></a>2.4. 运行ORB_SLAM2</h3><p>相机参数文件准备好之后，就可以启动ORB_SLAM2了，先执行export命令设置一下ROS的环境变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> ROS_PACKAGE_PATH=<span class="variable">$ROS_PACKAGE_PATH</span>:<span class="variable">$PWD</span>/Examples/ROS/ORB_SLAM2</span><br></pre></td></tr></table></figure><p>启动命令如下，这里指定了我们刚刚自己制作的yaml文件，然后指定了两个topic的绑定</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">rosrun ORB_SLAM2 RGBD \</span><br><span class="line">    Vocabulary/ORBvoc.txt \</span><br><span class="line">    Examples/RGB-D/RealSenseD435.yaml \</span><br><span class="line">    /camera/rgb/image_raw:=/camera/color/image_raw \</span><br><span class="line">    /camera/depth_registered/image_raw:=/camera/aligned_depth_to_color/image_raw</span><br></pre></td></tr></table></figure><p>命令中<code>:=</code>左侧为订阅的topic，右侧为输入的topic，ORB_SLAM2订阅的topic可以在<code>Examples/ROS/ORB_SLAM2/src/ros_rgbd.cc</code>代码里面找到</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">message_filters::Subscriber&lt;sensor_msgs::Image&gt; <span class="title">rgb_sub</span><span class="params">(nh, <span class="string">&quot;/camera/rgb/image_raw&quot;</span>, <span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="function">message_filters::Subscriber&lt;sensor_msgs::Image&gt; <span class="title">depth_sub</span><span class="params">(nh, <span class="string">&quot;camera/depth_registered/image_raw&quot;</span>, <span class="number">1</span>)</span></span>;</span><br></pre></td></tr></table></figure><p>一切正常的话，应该已经可以在ORB_SLAM2的GUI中看到D435相机拍摄到的画面了。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/04/68402467357181a2c1c9a5ff3b54ac32.png" alt="image.png"></p><p>缓慢移动D435相机，可以在GUI中观察SLAM的追踪和建图结果。注意必须缓慢移动相机，过快移动相机会导致ORB_SLAM2直接丢跟踪（tracking lost）。</p><p><strong>至此，在ORB_SLAM2中通过ROS使用D435相机的全步骤结束</strong>。</p><h3 id="2-5-可能遇到的问题"><a href="#2-5-可能遇到的问题" class="headerlink" title="2.5. 可能遇到的问题"></a>2.5. 可能遇到的问题</h3><p>roslaunch启动D435相机的时候可能会直接报错，如下所示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">king@ubuntu:/opt/ros/melodic/share/realsense2_camera$ roslaunch realsense2_camera rs_rgbd.launch</span><br><span class="line">... logging to /home/king/.ros/log/292703ba-f72c-11ef-a6ca-000c29839929/roslaunch-ubuntu-11850.log</span><br><span class="line">Checking log directory for disk usage. This may take a while.</span><br><span class="line">Press Ctrl-C to interrupt</span><br><span class="line">Done checking log file disk usage. Usage is &lt;1GB.</span><br><span class="line"></span><br><span class="line">Resource not found: rgbd_launch</span><br><span class="line">ROS path [0]=/opt/ros/melodic/share/ros</span><br><span class="line">ROS path [1]=/opt/ros/melodic/share</span><br><span class="line">The traceback for the exception was written to the log file</span><br></pre></td></tr></table></figure><p>这个问题是因为缺少安装一个ros的包，安装了之后就OK了，可以正常执行roslaunch命令了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install -y ros-melodic-rgbd-launch</span><br></pre></td></tr></table></figure><p>前文的D435 ROS驱动安装命令中已经包含了这个软件包了。</p><h2 id="3-ORB-SLAM2读取realsense-viewer录制的rosbag文件"><a href="#3-ORB-SLAM2读取realsense-viewer录制的rosbag文件" class="headerlink" title="3. ORB_SLAM2读取realsense-viewer录制的rosbag文件"></a>3. ORB_SLAM2读取realsense-viewer录制的rosbag文件</h2><p>D435相机的realsense-viewer软件是可以直接提前录制视频成rosbag格式的<code>.bag</code>文件的，这样能方便我们用同一个数据集测试SLAM系统，并以此改进SLAM算法。本质上和TUM数据集提供的rosbag格式文件没有什么区别。</p><p>在realsense-viewer中同时开启深度相机和RGB相机，点击record录制视频后，默认会存放在<code>~/Documents</code>文件夹下，找到录制的bag文件，使用<code>rostopic -b 文件名</code>的方式查看录制的bag文件中的topic列表，需要找到下面这两个主题，分别对应深度数据和彩色数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/device_0/sensor_1/Color_0/image/data</span><br><span class="line">/device_0/sensor_0/Depth_0/image/data</span><br></pre></td></tr></table></figure><p>修改ORB_SLAM2的启动命令如下，主要是订阅的主题不同。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">rosrun ORB_SLAM2 RGBD \</span><br><span class="line">    Vocabulary/ORBvoc.txt \</span><br><span class="line">    Examples/RGB-D/RealSenseD435.yaml \</span><br><span class="line">    /camera/rgb/image_raw:=/device_0/sensor_1/Color_0/image/data \</span><br><span class="line">    /camera/depth_registered/image_raw:=/device_0/sensor_0/Depth_0/image/data</span><br></pre></td></tr></table></figure><p>启动之后，使用rosplay发布bag文件中的topic即可，注意修改命令中的<code>exmaple.bag</code>为你录制的bag文件的路径</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rosbag play exmaple.bag \</span><br><span class="line">    --topics \</span><br><span class="line">    /device_0/sensor_1/Color_0/image/data \</span><br><span class="line">    /device_0/sensor_0/Depth_0/image/data</span><br></pre></td></tr></table></figure><p>如图所示，ORB_SLAM2同样可以读取D435提前录制的视频。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/04/c461138807328f77bf4c5972e1278969.png" alt="image.png"></p><h2 id="4-The-end"><a href="#4-The-end" class="headerlink" title="4. The end"></a>4. The end</h2><p>关于ORB_SLAM2和SLAM的专题博客到这里就基本结束啦，能记录的点都已经写成博客了，后续如果有其他的再继续更新吧。主要是希望能帮到其他SLAM初学者学会咋运行ORB_SLAM2。</p><p>为了毕设临时学了这么多东西，挺累人的说实话。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2023/02/202211031204848.jpg" alt="QQ图片20220507141811"></p>]]></content>
    
    
    <summary type="html">本文介绍了如何在ORB_SLAM2项目中使用RealSense D435相机作为RGB-D输入源，包括ROS下启动D435相机、ORB_SLAM2订阅Topic、ORB_SLAM2读取realsense-viewer录制的rosbag文件等步骤。</summary>
    
    
    
    <category term="编程学习" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="项目开发记录" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="Linux" scheme="https://blog.musnow.top/tags/Linux/"/>
    
    <category term="SLAM" scheme="https://blog.musnow.top/tags/SLAM/"/>
    
    <category term="RealSenseD435" scheme="https://blog.musnow.top/tags/RealSenseD435/"/>
    
  </entry>
  
  <entry>
    <title>【SLAM】使用realsense-viewer对Realsense D435进行自校准</title>
    <link href="https://blog.musnow.top/posts/8572288919/"/>
    <id>https://blog.musnow.top/posts/8572288919/</id>
    <published>2025-04-06T00:51:08.000Z</published>
    <updated>2025-04-06T09:09:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍了如何使用realsense-viewer的自校准工具对RealSense D435相机进行自校准。</p><blockquote><p>阅读本文前，请先参考本站博客<a href="https://blog.musnow.top/posts/9107049817/">【SLAM】ubuntu 18.04 安装 RealSense D435 相机驱动（ARM64&#x2F;AMD64）</a>安装realsense-viewer工具。</p></blockquote><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>官网：<a href="https://www.intelrealsense.com/self-calibration-for-depth-cameras/">www.intelrealsense.com/self-calibration-for-depth-cameras/</a>；</p><p>先前的博客提到过，RealSense D435基于双目视觉方案获取场景中的深度，双目视觉的数学原理中，有一个参数是<strong>基线长度</strong>，即左右相机之间的距离。为了确保D435相机在使用寿命内能够保持良好的校准和性能，D400系列的相机都采用了激光熔融钢笼（laser-fused steel cages）的设计，保证两颗摄像头稳固的保持在它们的位置上，也就是保证<strong>基线长度</strong>不出现变化。</p><p>不过，再好的设计随着时间的推移也是可能退化的，比如相机暴露在极端的温度循环（突然从低温环境进入高温环境）、过度的冲击（撞到东西了）或者高频振动中，就可能会导致相机出现失真。失真分为两种情况：</p><ul><li>外部失真：与安装传感器的加强筋的微小弯曲有关；</li><li>内部失真：传感器镜头位置的微小移动引起；</li></ul><p>不管咋样，相机都可能出现失真的情况，这就需要我们对相机的内外参数进行校准，让相机的固件适应相机的失真，从而恢复原本的精度。</p><h2 id="使用realsense-viewer进行自校准"><a href="#使用realsense-viewer进行自校准" class="headerlink" title="使用realsense-viewer进行自校准"></a>使用realsense-viewer进行自校准</h2><p>解决失真问题，最好的方式还是使用<strong>张正友标定法</strong>来对相机进行标定，重新获取相机的内外参数，常用的张正友标定法工具是ROS的camera_calibration。为了简化这个问题的处理，intel在realsense-viewer中集成了一个板载校准工具，让我们可以对D435相机进行临时的校准。</p><p>将D435相机用USB 3.0数据线链接电脑后，打开realsense-viewer，选择左上角more里面的<code>on-chip calibration</code>板载校准，就可以打开自带的校准工具。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/04/afe602ce28ec381ae3618e4de90f2edd.png" alt="image.png"></p><p>此时界面右侧会弹出来一个窗口，选择calibration。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/04/91bd2e644ae5f53e38bbc51b8a6655de.png"></p><p>随后将相机<strong>直面一个白色墙壁</strong>且保持静止，等待相机自动扫描。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/04/1298e9625ec0444e258c845560b4e98e.png" alt="image.png"></p><p>这个过程中可能会出现红色报错，比如<code>invalid value in rs2_run_on_chip_calibration</code>，不用管他，再次对准墙壁retry重试，总是能成功的。</p><p>如下图所示，右上角显示的health-check的值小于0.25，就可以接受，将其apply new写入相机固件中。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/04/3081ea9bf586e629546460aca518fac5.png" alt="image.png"></p><p>上述步骤可以运行多次，每次只要health-check的值变小了就可以apply到固件中。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/04/5ab253299d507e6102c0b998faddb993.png" alt="image.png"></p><p>至此，便完成了相机自校准的步骤。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>除了自校准工具，intel同时提供了一个<strong>动态校准</strong> (Dynamic Calibrator) 工具，官网：<a href="https://www.intel.cn/content/www/cn/zh/download/645988/intel-realsense-d400-series-dynamic-calibration-tool.html">https://www.intel.cn/content/www/cn/zh/download/645988/intel-realsense-d400-series-dynamic-calibration-tool.html</a></p><p>其借鉴了张正友标定法的思路，也是采用特定格式的标定板对相机进行校准。慕雪暂未尝试过此工具，具体操作步骤可以参考b站视频：<a href="https://www.bilibili.com/video/av825234267?vd_source=b302188e80c9f377914b70d6f93c84dc&spm_id_from=333.788.videopod.sections">[2023Q2更新] Intel英特尔RealSense实感深度摄像头 动态校准(Dynamic Calibrator) 操作步骤讲解 D400系列适用</a>。</p>]]></content>
    
    
    <summary type="html">本文介绍了如何使用realsense-viewer的自校准工具对RealSense D435相机进行自校准</summary>
    
    
    
    <category term="编程学习" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="项目开发记录" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="Linux" scheme="https://blog.musnow.top/tags/Linux/"/>
    
    <category term="SLAM" scheme="https://blog.musnow.top/tags/SLAM/"/>
    
    <category term="RealSenseD435" scheme="https://blog.musnow.top/tags/RealSenseD435/"/>
    
  </entry>
  
  <entry>
    <title>【SLAM】解决ORB_SLAM2运行时出现的&quot;maybe forgot to call initializeOptimization()&quot;警告</title>
    <link href="https://blog.musnow.top/posts/2588231435/"/>
    <id>https://blog.musnow.top/posts/2588231435/</id>
    <published>2025-04-05T06:51:23.000Z</published>
    <updated>2025-04-05T13:33:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文说明了如何解决ORB_SLAM2在ubuntu18.04运行时可能出现的”forgot to call initializeOptimization()”警告，包括代码修改和修复结果验证。</p><blockquote><p>为了让博客的seo更加优化，遵循bing站长工具的建议，把每篇博客的description都适当加长一些。</p></blockquote><h2 id="问题说明"><a href="#问题说明" class="headerlink" title="问题说明"></a>问题说明</h2><p>在Ubuntu 18.04上运行ORB_SLAM2的时候可能遇到如下g2o警告</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virtual int g2o::SparseOptimizer::optimize(int, bool): 0 vertices to optimize, maybe forgot to call initializeOptimization()</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/04/db21d9845f7fe82b622c96110cc989a9.png" alt="image.png"></p><p>在github仓库中找到了相关的issue：<a href="https://github.com/raulmur/ORB_SLAM2/issues/463">github.com&#x2F;raulmur&#x2F;ORB_SLAM2&#x2F;issues&#x2F;463</a>；</p><p>根据<a href="https://github.com/raulmur/ORB_SLAM2/issues/211">github.com&#x2F;raulmur&#x2F;ORB_SLAM2&#x2F;issues&#x2F;211</a>里面的描述，这个报错是g2o提出的，而且是一个harmless报错，也就是它虽然爆出来了但是没关系，也不会影响进程运行。</p><h2 id="修复代码"><a href="#修复代码" class="headerlink" title="修复代码"></a>修复代码</h2><p>虽然这问题不会影响运行吧，但对于有些许强迫症的我来说，更想知道怎么操作才能修复掉这个告警。根据issue 211里面的文字描述，找到了代码修改点：</p><blockquote><p>Did you find where the problem is? I met the same problem in PoseOptimization because after n iterations probably all correspondences is bad. I just add the following check.<br><code>if((nInitialCorrespondences-nBad)&lt;5) break;</code><br>It fixes my problem. Hope it helps.</p><p>I put this in the function Optimizer::PoseOptimization. Try to find the place where it performs 4 optimizations (for loop in there). At the end of each optimization, I add this check to make sure there are still enough vertices in the optimized graph.</p></blockquote><p>修改点是ORB_SLAM2代码<code>src/Optimizer.cc</code>中的441行之后。在函数<code>Optimizer::PoseOptimization</code>的<code>for(size_t it=0; it&lt;4; it++)</code>的末尾添加。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(optimizer.<span class="built_in">edges</span>().<span class="built_in">size</span>()&lt;<span class="number">10</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="comment">// 441行之后添加下面的代码</span></span><br><span class="line"><span class="keyword">if</span>((nInitialCorrespondences-nBad)&lt;<span class="number">5</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><p>具体的修改位置可以参考我fork的源码提交记录：<a href="https://github.com/musnows/ORB_SLAM2/commit/4840cdccdee0842896a637e57de47acecb7d75ac">https://github.com/musnows/ORB_SLAM2&#x2F;commit&#x2F;4840cdccdee0842896a637e57de47acecb7d75ac</a>，截图如下：</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/04/cb9bfb985699aeb80b6a486d2b46e988.png" alt="image.png"></p><p>新增代码后完整for循环代码如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/Optimizer.cc</span></span><br><span class="line"><span class="comment">// 函数 Optimizer::PoseOptimization</span></span><br><span class="line"><span class="type">int</span> nBad=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">size_t</span> it=<span class="number">0</span>; it&lt;<span class="number">4</span>; it++)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">vSE3-&gt;<span class="built_in">setEstimate</span>(Converter::<span class="built_in">toSE3Quat</span>(pFrame-&gt;mTcw));</span><br><span class="line">optimizer.<span class="built_in">initializeOptimization</span>(<span class="number">0</span>);</span><br><span class="line">optimizer.<span class="built_in">optimize</span>(its[it]);</span><br><span class="line"></span><br><span class="line">nBad=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">size_t</span> i=<span class="number">0</span>, iend=vpEdgesMono.<span class="built_in">size</span>(); i&lt;iend; i++)</span><br><span class="line">&#123;</span><br><span class="line">g2o::EdgeSE3ProjectXYZOnlyPose* e = vpEdgesMono[i];</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">size_t</span> idx = vnIndexEdgeMono[i];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(pFrame-&gt;mvbOutlier[idx])</span><br><span class="line">&#123;</span><br><span class="line">e-&gt;<span class="built_in">computeError</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">float</span> chi2 = e-&gt;<span class="built_in">chi2</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(chi2&gt;chi2Mono[it])</span><br><span class="line">&#123;                </span><br><span class="line">pFrame-&gt;mvbOutlier[idx]=<span class="literal">true</span>;</span><br><span class="line">e-&gt;<span class="built_in">setLevel</span>(<span class="number">1</span>);</span><br><span class="line">nBad++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">pFrame-&gt;mvbOutlier[idx]=<span class="literal">false</span>;</span><br><span class="line">e-&gt;<span class="built_in">setLevel</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(it==<span class="number">2</span>)</span><br><span class="line">e-&gt;<span class="built_in">setRobustKernel</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">size_t</span> i=<span class="number">0</span>, iend=vpEdgesStereo.<span class="built_in">size</span>(); i&lt;iend; i++)</span><br><span class="line">&#123;</span><br><span class="line">g2o::EdgeStereoSE3ProjectXYZOnlyPose* e = vpEdgesStereo[i];</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">size_t</span> idx = vnIndexEdgeStereo[i];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(pFrame-&gt;mvbOutlier[idx])</span><br><span class="line">&#123;</span><br><span class="line">e-&gt;<span class="built_in">computeError</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">float</span> chi2 = e-&gt;<span class="built_in">chi2</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(chi2&gt;chi2Stereo[it])</span><br><span class="line">&#123;</span><br><span class="line">pFrame-&gt;mvbOutlier[idx]=<span class="literal">true</span>;</span><br><span class="line">e-&gt;<span class="built_in">setLevel</span>(<span class="number">1</span>);</span><br><span class="line">nBad++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;                </span><br><span class="line">e-&gt;<span class="built_in">setLevel</span>(<span class="number">0</span>);</span><br><span class="line">pFrame-&gt;mvbOutlier[idx]=<span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(it==<span class="number">2</span>)</span><br><span class="line">e-&gt;<span class="built_in">setRobustKernel</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(optimizer.<span class="built_in">edges</span>().<span class="built_in">size</span>()&lt;<span class="number">10</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="comment">// 添加如下代码</span></span><br><span class="line"><span class="keyword">if</span>((nInitialCorrespondences-nBad)&lt;<span class="number">5</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;     </span><br></pre></td></tr></table></figure><h2 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h2><p>修改之后，重新编译ORB_SLAM2，再次运行，告警应该消失了。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/04/7c1f4bdc9b998cb8aad2c61d3b10ef6f.png" alt="image.png"></p><p>至此，问题解决~</p>]]></content>
    
    
    <summary type="html">本文说明了如何解决ORB_SLAM2在ubuntu18.04运行时可能出现的&quot;maybe forgot to call initializeOptimization()&quot;警告，包括代码修改和修复结果验证</summary>
    
    
    
    <category term="编程学习" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="项目开发记录" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="Linux" scheme="https://blog.musnow.top/tags/Linux/"/>
    
    <category term="SLAM" scheme="https://blog.musnow.top/tags/SLAM/"/>
    
  </entry>
  
  <entry>
    <title>【SLAM】ubuntu 18.04 安装 RealSense D435 相机驱动（ARM64/AMD64）</title>
    <link href="https://blog.musnow.top/posts/9107049817/"/>
    <id>https://blog.musnow.top/posts/9107049817/</id>
    <published>2025-04-04T12:04:47.000Z</published>
    <updated>2025-04-06T08:36:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>ubuntu 18.04 安装 realsense d435 驱动和 realsense-viewer。</p><h2 id="RealSense-D435简介"><a href="#RealSense-D435简介" class="headerlink" title="RealSense D435简介"></a>RealSense D435简介</h2><p>RealSense D435是英特尔推出的一款RGB-D相机：<a href="https://www.intelrealsense.com/depth-camera-d435/">官网</a>，后文使用D435简称此相机。</p><p>RGB-D相机和我们平时使用的相机的不同之处在于，RGB-D相机可以在拍摄彩色画面（RGB）的同时，提供拍摄场景的深度数据（Depth），D435就是这样的一款相机。</p><p>D435采用的是RGB-D相机中的<strong>双目视觉方案</strong>来获取深度数据，介绍双目视觉方案之前，需要先引入<strong>视差</strong>的概念。我们左眼和右眼看到同一个物品的位置是不同的，这个位置的不同被称作“视差”。举个例子，你可以把一个物品放在你的正前方，尝试单独闭上左眼或右眼，你面前的这个物品在左眼和右眼看到的画面中会出现位置变化，这便是“视差”的现象。</p><blockquote><p>关于双目视觉方案的原理可以进一步阅读：<a href="https://zhuanlan.zhihu.com/p/361195131">【知乎】视觉深度、标定、立体匹配</a>，本文只做基础介绍。</p></blockquote><p>所谓<strong>双目视觉方案</strong>，就是模拟人的双眼，用两颗焦距相同的镜头（下图中的Left&#x2F;Right Imager，D435使用的是两颗红外镜头），从不同的角度拍摄图像，然后通过特征匹配计算<strong>视差</strong>，进而推导场景的深度。</p><p>双目视觉方案的主要缺陷在于场景中的纹理较弱的情况下，<strong>比如白墙，两颗摄像头看到的都是一个相对光滑的平面</strong>，这种弱纹理场景无法找到足够的匹配点，视差计算精度降低，进一步导致推导出的深度数据精度降低。为此，D435在双目视觉方案的基础上，新增了一个<strong>红外点阵投影仪</strong>（下图中的IR Projector），向场景中投射肉眼不可见的红外点阵，以加强环境中的纹理，辅助双目视觉匹配，提高深度数据的精度。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/04/9ff735152042b328f2125ed811d9a8ec.png" alt="image.png"></p><p>RealSense D435相机需要通过一根USB 3.1 TypeC高速数据线与电脑相连，一定要是USB 3.0及以上的数据线，<strong>不能使用USB 2.0数据线</strong>，传输速率不够。这里特别提醒一下，手机厂家给的数据线一般都不能用（尝试过vivo和华为的TypeC线，都只识别出了USB 2.0），即便链接手机的时候支持USB 3.0，链接D435相机的时候也可能无法支持，建议购买一根绿联的USB 3.0 TypeC数据线。</p><p>准备好相机和USB 3.0数据线后，就可以开始本文的驱动安装操作了。</p><h2 id="在AMD64上安装realsense驱动"><a href="#在AMD64上安装realsense驱动" class="headerlink" title="在AMD64上安装realsense驱动"></a>在AMD64上安装realsense驱动</h2><blockquote><p>操作系统：AMD64，Ubuntu 18.04 LTS，VMware虚拟机安装</p></blockquote><p>x86的机器安装realsense驱动比较简单，直接根据github仓库中的文档进行安装就可以了：<a href="https://github.com/IntelRealSense/librealsense/blob/master/doc/distribution_linux.md">https://github.com/IntelRealSense/librealsense/blob/master/doc/distribution_linux.md</a>；</p><p>这里把安装命令拷贝如下，注意安装过程中不要将D435链接至电脑。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">mkdir</span> -p /etc/apt/keyrings</span><br><span class="line"></span><br><span class="line">curl -sSf https://librealsense.intel.com/Debian/librealsense.pgp | sudo <span class="built_in">tee</span> /etc/apt/keyrings/librealsense.pgp &gt; /dev/null</span><br><span class="line"></span><br><span class="line"><span class="comment"># add new server</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;deb [signed-by=/etc/apt/keyrings/librealsense.pgp] https://librealsense.intel.com/Debian/apt-repo `lsb_release -cs` main&quot;</span> | \</span><br><span class="line">sudo <span class="built_in">tee</span> /etc/apt/sources.list.d/librealsense.list</span><br><span class="line"></span><br><span class="line">sudo apt-get update -y</span><br></pre></td></tr></table></figure><p>命令执行结果如下图所示</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/04/dda63d9b9072de8bd7f3d7e014d62f11.png" alt="image.png"></p><p>随后安装四个软件包，前两个必装，后两个选装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install librealsense2-dkms</span><br><span class="line">sudo apt-get install librealsense2-utils</span><br><span class="line"><span class="comment"># 可选</span></span><br><span class="line">sudo apt-get install librealsense2-dev <span class="comment"># 可以使用-lrealsense2来编译代码</span></span><br><span class="line">sudo apt-get install librealsense2-dbg</span><br></pre></td></tr></table></figure><p>安装好了之后查看版本信息，确保包含realsense字样。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">king@ubuntu:~$ modinfo uvcvideo | grep &quot;version:&quot;</span><br><span class="line">version:        1.1.2.realsense-1.3.18</span><br><span class="line">srcversion:     51A4A0210E91BE50A7BA2BB</span><br><span class="line">king@ubuntu:~$ dkms status</span><br><span class="line">librealsense2-dkms, 1.3.18, 5.4.0-150-generic, x86_64: installed</span><br></pre></td></tr></table></figure><p>现在可以插上D435相机了（注意VMware中选择D435链接至虚拟机），使用<code>realsense-viewer</code>命令启动软件，如下图所示，此时就是已经识别到我们的D435相机了。这里有一个很明显的USB 2.1的标识，代表我们的数据线不支持USB 3.0，这会影响到D435相机的数据传输。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/04/5518ca3d1d9953fd27c7024db94fbf14.png" alt="image.png"></p><p>以绿联的USB 3.0数据线为例，插上之后会显示USB 3.2，此时就是符合需求的。在左侧面板中，可以分别打开深度相机和RGB相机，开启之后会在右侧的主界面中显示相机拍摄的画面。在Stereo Module选项关闭状态的时候，还可以勾选上左右红外相机，让红外相机的原始图像也显示在右侧界面中。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/04/c5c06627856ef2bdf5daebd5eda0048c.png" alt="image.png"></p><p>在我的测试中，执行了realsense-viewer命令还会出现如下警告</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">king@ubuntu:~$ realsense-viewer</span><br><span class="line"> 05/04 18:06:56,380 INFO [139813411274368] (backend-v4l2.cpp:646) Cannot access /sys/class/video4linux</span><br></pre></td></tr></table></figure><p>虽然出现了这个警告，但似乎并不影响realsense-viewer程序的使用，整个操作、录制视频的过程都没有出现崩溃。我执行realsense-viewer命令的时候D435相机并没有连接到电脑上，不确定是否和相机没有链接有关系。</p><h3 id="ROS环境下使用D435"><a href="#ROS环境下使用D435" class="headerlink" title="ROS环境下使用D435"></a>ROS环境下使用D435</h3><p>如果想要在ROS环境下使用D435相机，还需要安装ROS的realsense驱动（请先保证本地已经安装ROS环境）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install -y ros-melodic-realsense2-camera</span><br><span class="line">sudo apt-get install -y ros-melodic-realsense2-description</span><br><span class="line">sudo apt-get install -y ros-melodic-rgbd-launch</span><br></pre></td></tr></table></figure><p>至此，AMD64下的realsense驱动就已经安装好了，可以正常使用相机了。你可以尝试用如下命令在ROS环境下启动D435相机，开始广播深度和彩色图像的Topic。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">roslaunch realsense2_camera rs_camera.launch</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/04/c3c8958b59c5adceca3bbfa60e35cbec.png" alt="image.png"></p><h2 id="在ARM64上安装realsense驱动"><a href="#在ARM64上安装realsense驱动" class="headerlink" title="在ARM64上安装realsense驱动"></a>在ARM64上安装realsense驱动</h2><blockquote><p>操作系统：ARM64（MAC M3），Ubuntu 22.04 LTS虚拟机，Docker启动的ubuntu:18.04容器</p></blockquote><p>在ARM64的设备上安装realsense驱动就有点难办了，不能直接一股脑执行上面的安装命令了，需要我们从源码编译realsense，这里给出几个参考博客：</p><ul><li><a href="https://blog.csdn.net/qq_45779334/article/details/123595872" title="Ubuntu18.04——基于X86和Arm安装并配置Realsense-ros环境_librealsense-CSDN博客">Ubuntu18.04——基于X86和Arm安装并配置Realsense-ros环境_librealsense-CSDN博客</a></li><li><a href="https://blog.csdn.net/qq_45779334/article/details/124304087" title="Ubuntu——librealsense编译报错：The RandR headers were not found等类似报错解决方案汇总-CSDN博客">Ubuntu——librealsense编译报错：The RandR headers were not found等类似报错解决方案汇总-CSDN博客</a></li><li><a href="https://github.com/IntelRealSense/librealsense/blob/master/doc/installation_jetson.md">github.com&#x2F;IntelRealSense&#x2F;librealsense&#x2F;blob&#x2F;master&#x2F;doc&#x2F;installat…</a></li></ul><p>首先安装如下依赖项</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install -y cmake git </span><br><span class="line">sudo apt-get install -y libusb-1.0-0-dev pkg-config</span><br><span class="line">sudo apt-get install -y libglfw3-dev libgl1-mesa-dev libglu1-mesa-dev</span><br><span class="line">sudo apt-get install -y openssl libssl-dev</span><br></pre></td></tr></table></figure><p>克隆源代码，进入目录中，cmake构建项目</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 克隆代码</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/IntelRealSense/librealsense.git</span><br><span class="line"><span class="built_in">cd</span> ~/librealsense</span><br><span class="line"><span class="built_in">mkdir</span> build &amp;&amp; <span class="built_in">cd</span> build</span><br><span class="line"><span class="comment"># 使用RSUSB版本的后端</span></span><br><span class="line">cmake .. \</span><br><span class="line">    -DBUILD_EXAMPLES=<span class="literal">true</span> \</span><br><span class="line">    -DCMAKE_BUILD_TYPE=release \</span><br><span class="line">    -DFORCE_RSUSB_BACKEND=ON</span><br><span class="line">make -j4</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure><p>cmake构建成功的截图如下，构建过程中涉及从github拉代码，可能会出现各类网络问题，自行解决啦。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/04/12674f5bc9229f9d7b0f2541daf9fef7.png" alt="image.png"></p><p>make编译完成的输出如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[ 98%] Building CXX object tools/depth-quality/CMakeFiles/rs-depth-quality.dir/depth-quality-model.cpp.o</span><br><span class="line">[ 99%] Linking CXX executable ../../Release/realsense-viewer</span><br><span class="line">[ 99%] Built target realsense-viewer</span><br><span class="line">[ 99%] Building CXX object tools/depth-quality/CMakeFiles/rs-depth-quality.dir/__/__/third-party/imgui/imgui.cpp.o</span><br><span class="line">[ 99%] Building CXX object tools/depth-quality/CMakeFiles/rs-depth-quality.dir/__/__/third-party/imgui/imgui_draw.cpp.o</span><br><span class="line">[ 99%] Building CXX object tools/depth-quality/CMakeFiles/rs-depth-quality.dir/__/__/third-party/imgui/imgui_impl_glfw.cpp.o</span><br><span class="line">[ 99%] Building C object tools/depth-quality/CMakeFiles/rs-depth-quality.dir/__/__/third-party/glad/glad.c.o</span><br><span class="line">[100%] Building C object tools/depth-quality/CMakeFiles/rs-depth-quality.dir/__/__/third-party/tinyfiledialogs/tinyfiledialogs.c.o</span><br><span class="line">[100%] Linking CXX executable ../../Release/rs-depth-quality</span><br><span class="line">[100%] Built target rs-depth-quality</span><br><span class="line">[root:/work/pkg/librealsense-master/build]#</span><br></pre></td></tr></table></figure><p>make install的部分输出如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">-- Installing: /usr/local/bin/rs-fw-update</span><br><span class="line">-- Set runtime path of &quot;/usr/local/bin/rs-fw-update&quot; to &quot;&quot;</span><br><span class="line">-- Installing: /usr/local/bin/rs-embed</span><br><span class="line">-- Installing: /usr/local/bin/rs-data-collect</span><br><span class="line">-- Set runtime path of &quot;/usr/local/bin/rs-data-collect&quot; to &quot;&quot;</span><br><span class="line">-- Installing: /usr/local/bin/realsense-viewer</span><br><span class="line">-- Set runtime path of &quot;/usr/local/bin/realsense-viewer&quot; to &quot;&quot;</span><br><span class="line">-- Installing: /root/Documents/librealsense2/presets</span><br><span class="line">-- Installing: /root/Documents/librealsense2/presets/sample.preset</span><br><span class="line">-- Installing: /usr/local/bin/rs-depth-quality</span><br><span class="line">-- Set runtime path of &quot;/usr/local/bin/rs-depth-quality&quot; to &quot;&quot;</span><br><span class="line">-- Installing: /usr/local/bin/rs-rosbag-inspector</span><br><span class="line">-- Set runtime path of &quot;/usr/local/bin/rs-rosbag-inspector&quot; to &quot;&quot;</span><br><span class="line">-- Installing: /usr/local/bin/rs-benchmark</span><br><span class="line">-- Set runtime path of &quot;/usr/local/bin/rs-benchmark&quot; to &quot;&quot;</span><br><span class="line">-- Installing: /usr/local/lib/libfw.a</span><br><span class="line">[root:/work/pkg/librealsense-master/build]#</span><br></pre></td></tr></table></figure><p>此时环境中就已经有realsense-viewer了，可以使用该命令启动程序了</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/04/361dee9ef034e5b20477450d54bd7df0.png" alt="image.png"></p><p>将D435通过数据线连接MAC，可以在MAC的设备详情中找到USB一栏，确定是链接在USB 3.1总线而不是USB 2.0总线上。设备详情页面通过按下option+点击左上角苹果图标，点击<strong>系统信息</strong>可以打开。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/04/fb1a566d217183488c3bbc5263e80f17.png" alt="image.png"></p><p>在parallels顶栏的设备选项中，在USB与蓝牙设置中找到D435相机，勾选它让它直连虚拟机。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/04/7eb4dd27f928597139e4374513372589.png" alt="image.png"></p><p>注意，docker容器必须用特权模式创建，才能和宿主机共享USB设备，可以在容器内终端执行命令确认相机是否已经连接。插入d435相机后需要重启容器，才能看到USB设备。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root:/]# ls /dev/video* -l</span><br><span class="line">crw-rw---- 1 root video 81, 0 Mar  2 13:16 /dev/video0</span><br><span class="line">crw-rw---- 1 root video 81, 1 Mar  2 13:16 /dev/video1</span><br><span class="line">crw-rw---- 1 root video 81, 2 Mar  2 13:16 /dev/video2</span><br><span class="line">crw-rw---- 1 root video 81, 3 Mar  2 13:16 /dev/video3</span><br><span class="line">crw-rw---- 1 root video 81, 4 Mar  2 13:16 /dev/video4</span><br><span class="line">crw-rw---- 1 root video 81, 5 Mar  2 13:16 /dev/video5</span><br><span class="line">crw-rw---- 1 root video 81, 6 Mar  2 13:16 /dev/video6</span><br><span class="line">crw-rw---- 1 root video 81, 7 Mar  2 13:16 /dev/video7</span><br><span class="line">crw-rw---- 1 root video 81, 8 Mar  2 13:16 /dev/video8</span><br><span class="line">crw-rw---- 1 root video 81, 9 Mar  2 13:16 /dev/video9</span><br><span class="line">[root:/]#</span><br></pre></td></tr></table></figure><p>此时再执行realsense-viewer命令，已经能正常使用相机了</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/04/891768ed886d032b2465526554ad5afd.png" alt="image.png"></p><p>因为在docker容器内是以root身份执行的realsense-viewer，右上角会弹出一个提示</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/04/85bf9f17b266cda941532e646efeffc5.png" alt="image.png"></p><p>可以根据里面的命令修复一下，就不会弹出这个提示了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> ~/.99-realsense-libusb.rules /etc/udev/rules.d/99-realsense-libusb.rules &amp;&amp; udevadm control --reload-rules &amp;&amp; udevadm trigger</span><br></pre></td></tr></table></figure><h3 id="ROS环境下使用D435-1"><a href="#ROS环境下使用D435-1" class="headerlink" title="ROS环境下使用D435"></a>ROS环境下使用D435</h3><p>如果想在ROS环境下使用realsense-viewer，同样是安装依赖包，安装了之后就能和x86的机器一样正常使用相机了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install -y \</span><br><span class="line">    ros-melodic-realsense2-camera \</span><br><span class="line">    ros-melodic-realsense2-description \</span><br><span class="line">    ros-melodic-rgbd-launch</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/04/4f00ed19bde18cb665c0d9dad0597703.png" alt="image.png"></p><p>不过，在我的测试中，在ARM64上使用D435相机执行ORB-SLAM2的时候会出现严重掉帧（在x86机器上不会出现），不确定是否和我在虚拟机里面套娃docker有关系。建议还是优先使用x86设备来操作D435相机。</p><h2 id="The-end"><a href="#The-end" class="headerlink" title="The end"></a>The end</h2><p>希望本文能帮到你，主要是提供了arm64设备上安装realsense驱动的方式，很多博客针对这部分的记录都不够详细。</p>]]></content>
    
    
    <summary type="html">本文介绍了在 ubuntu 18.04 中安装 realsense d435 驱动和 realsense-viewer，本文内容同时适用于ARM64/AMD64平台</summary>
    
    
    
    <category term="编程学习" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="项目开发记录" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="Linux" scheme="https://blog.musnow.top/tags/Linux/"/>
    
    <category term="SLAM" scheme="https://blog.musnow.top/tags/SLAM/"/>
    
    <category term="RealSenseD435" scheme="https://blog.musnow.top/tags/RealSenseD435/"/>
    
  </entry>
  
  <entry>
    <title>【SLAM】将realsense-viewer录制的rosbag视频导出成图片序列（Realsense D435）</title>
    <link href="https://blog.musnow.top/posts/1391481152/"/>
    <id>https://blog.musnow.top/posts/1391481152/</id>
    <published>2025-04-04T07:08:46.000Z</published>
    <updated>2025-04-06T08:30:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍了如何将realsense-viewer录制的rosbag格式的视频导出成图片序列，方便合并成mp4视频或插入到论文中。</p><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>Intel提供的realsense-viewer软件录制的视频都是rosbag格式的，为了编写论文，需要从录制的视频中截取一两帧作为论文插图，所以需要使用工具把rosbag中的视频导出为图片。</p><p>最简单的方式肯定是直接rosplay播放bag里面的视频流然后使用image_view读取视频流然后截图，但是这个方式不太好，因为手动截图非常容易出现分辨率差异（框选的区域不一样），而且rosplay播放视频的时候不能暂停，也不好精确的截到自己想要的那张图片。</p><p>更好的方式是使用ros自带的工具把rosbag里面的视频流直接导出成图片序列，避免自己手动截图。在最终导出的图片序列里面选一两个插入到论文里面就ok了。</p><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><p>首先，realsense-viewer录制的视频默认存放在用户的<code>~/Documents</code>文件夹里面，命名格式一般是今天的日期加上一串数字，比如<code>20250331_172324.bag</code>。首先要做的是确定我们需要的视频数据topic名称，使用如下命令查看</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rostopic list -b example.bag</span><br></pre></td></tr></table></figure><p>以我使用的RealSense D435为例，图像topic是下面这俩个，分别对应深度数据和RGB数据。我要的是RGB数据。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/device_0/sensor_1/Color_0/image/data</span><br><span class="line">/device_0/sensor_0/Depth_0/image/data</span><br></pre></td></tr></table></figure><p>先使用另外一个终端A，开启roscore，然后在终端B里面执行如下命令，工具<strong>会在这个命令执行的目录中输出图片序列</strong>。这个命令中使用了extract_images工具，并通过<code>_sec_per_frame</code>指定每0.01秒截取一张图片，通过<code>image:=</code>订阅的topic正是我需要的RGB图像topic。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rosrun image_view extract_images \</span><br><span class="line">    _sec_per_frame:=0.01 \</span><br><span class="line">    image:=/device_0/sensor_1/Color_0/image/data</span><br></pre></td></tr></table></figure><p>再开启一个终端C，执行rosbag play命令来播放bag文件里面的视频，其中<code>--topics</code>选项用于列出我们想要广播的topic是谁。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rosbag play exmaple.bag \</span><br><span class="line">    --topics /device_0/sensor_1/Color_0/image/data</span><br></pre></td></tr></table></figure><p>执行之后，extract_images工具就会自动从这个订阅的topic中截取视频流，输出到执行这个命令的PWD里面了，如下所示。图片文件的默认命名格式是<code>frame%04.jpg</code>，工具会自动命名序号。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">king@ubuntu:~/Documents$ ls images/</span><br><span class="line">frame0000.jpg  frame0164.jpg  frame0328.jpg  frame0492.jpg  frame0656.jpg</span><br><span class="line">frame0001.jpg  frame0165.jpg  frame0329.jpg  frame0493.jpg  frame0657.jpg</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>图片输出结果如下图所示：</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/04/89508777ffaf43eabd0273d73f406fd4.png" alt="image.png"></p><p>注：如果你想把这些图片重新组成一个mp4格式的视频，可以用ffmpeg工具实现。</p><h2 id="The-end"><a href="#The-end" class="headerlink" title="The end"></a>The end</h2><p>至此，问题解决。</p>]]></content>
    
    
    <summary type="html">本文介绍了如何将realsense-viewer录制的rosbag格式的视频导出成图片序列，方便合并成mp4视频或插入到论文中（Realsense D435）</summary>
    
    
    
    <category term="编程学习" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="项目开发记录" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="Linux" scheme="https://blog.musnow.top/tags/Linux/"/>
    
    <category term="SLAM" scheme="https://blog.musnow.top/tags/SLAM/"/>
    
    <category term="RealSenseD435" scheme="https://blog.musnow.top/tags/RealSenseD435/"/>
    
  </entry>
  
  <entry>
    <title>【LaTex】使用natbib和gbt7714包时如何不显示参考文献DOI号</title>
    <link href="https://blog.musnow.top/posts/1728805040/"/>
    <id>https://blog.musnow.top/posts/1728805040/</id>
    <published>2025-03-30T00:47:07.000Z</published>
    <updated>2025-04-06T01:21:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>LaTex使用natbib+gbt7714包时如何不显示参考文献DOI号？</p><h2 id="1-说明"><a href="#1-说明" class="headerlink" title="1. 说明"></a>1. 说明</h2><p>最近在弄毕业设计，个人不太喜欢用word写这种包含大量图片的东西，每次用word排版图片的时候都要抓狂了，经常乱跑。好在我对markdown比较了解，也听说过latex，于是搜索我们学校的latex毕设论文模板，还真找到了学长开源的github模板，便拿来使用。</p><p>现在学校的毕设论文要求有一定更新，参考文献中不需要显示DOI号了，所以需要想办法将其隐藏。</p><h2 id="2-问题查看"><a href="#2-问题查看" class="headerlink" title="2. 问题查看"></a>2. 问题查看</h2><h3 id="2-1-原始模板"><a href="#2-1-原始模板" class="headerlink" title="2.1. 原始模板"></a>2.1. 原始模板</h3><p>原始模板中采用了如下语句定义了参考文献部分的格式，使用的是natbib和gbt7714的格式。</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">% 使用gbt7714</span></span><br><span class="line"><span class="keyword">\usepackage</span>&#123;natbib&#125;</span><br><span class="line"><span class="keyword">\usepackage</span>[sort<span class="built_in">&amp;</span>compress]&#123;gbt7714&#125;</span><br><span class="line"><span class="comment">% 加载参考文献</span></span><br><span class="line"><span class="keyword">\newcommand</span>&#123;<span class="keyword">\thesisreference</span>&#125;&#123;</span><br><span class="line"><span class="keyword">\titleformat</span>&#123;<span class="keyword">\chapter</span>&#125;[block]</span><br><span class="line">&#123;<span class="keyword">\fontsize</span>&#123;16pt&#125;&#123;16pt&#125;<span class="keyword">\selectfont</span><span class="keyword">\heiti</span><span class="keyword">\thispagestyle</span>&#123;fancy&#125;&#125;</span><br><span class="line">&#123;<span class="keyword">\thechapter</span>&#125;&#123;30pt&#125;&#123;&#125;</span><br><span class="line"><span class="keyword">\titlespacing</span>&#123;<span class="keyword">\chapter</span>&#125;&#123;0pt&#125;&#123;0pt&#125;&#123;10pt&#125; <span class="comment">% 最后一个用于设置‘参考文献’和文献列表之间的空隙</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">\fontsize</span>&#123;10.5pt&#125;&#123;10.5pt&#125;<span class="keyword">\selectfont</span>&#123;</span><br><span class="line"><span class="keyword">\bibliographystyle</span>&#123;gbt7714-numerical&#125;</span><br><span class="line"><span class="keyword">\bibliography</span>&#123;reference&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\titleformat</span>&#123;<span class="keyword">\chapter</span>&#125;[block]</span><br><span class="line">&#123;<span class="keyword">\centering</span><span class="keyword">\fontsize</span>&#123;15pt&#125;&#123;15pt&#125;<span class="keyword">\selectfont</span><span class="keyword">\heiti</span><span class="keyword">\thispagestyle</span>&#123;fancy&#125;&#125;</span><br><span class="line">&#123;<span class="keyword">\thechapter</span>&#125;&#123;30pt&#125;&#123;&#125;</span><br><span class="line"><span class="keyword">\titlespacing</span>&#123;<span class="keyword">\chapter</span>&#125;&#123;0pt&#125;&#123;0pt&#125;&#123;15pt&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-咨询AI"><a href="#2-2-咨询AI" class="headerlink" title="2.2. 咨询AI"></a>2.2. 咨询AI</h3><p>由于我在网上直接搜索没有找到解决方案，于是问起来AI，他们给出了下面两种方案</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">\usepackage</span>[nodoi, sort<span class="built_in">&amp;</span>compress]&#123;gbt7714&#125;</span><br><span class="line"><span class="comment">% 或者</span></span><br><span class="line"><span class="keyword">\usepackage</span>[doi=false, sort<span class="built_in">&amp;</span>compress]&#123;gbt7714&#125;</span><br></pre></td></tr></table></figure><p>经过测试，这两种方案都不行，虽然编译没有报错，但是DOI号还是显示出来了。</p><p>AI还给出了一个方案就是从natbib切换成biblatex，但是这个模板并不是我编写的，我不太清楚biblatex要怎么定义成现在这个样式，所以还是不做这种大规模修改了。</p><h2 id="3-问题解决"><a href="#3-问题解决" class="headerlink" title="3. 问题解决"></a>3. 问题解决</h2><h3 id="3-1-方法一：取巧办法"><a href="#3-1-方法一：取巧办法" class="headerlink" title="3.1. 方法一：取巧办法"></a>3.1. 方法一：取巧办法</h3><p>首先说个<strong>取巧办法</strong>，那就是在参考文献列表的bib文件中把所有的<code>doi = </code>都给替换成<code>note =</code>（或者直接注释掉<code>doi =</code>），让它们直接不被当作DOI号，也就不会渲染出来，问题解决。</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">% 原始</span></span><br><span class="line">@article&#123;example,</span><br><span class="line">  author = &#123;Author, A.&#125;,</span><br><span class="line">  title = &#123;Title&#125;,</span><br><span class="line">  journal = &#123;Journal&#125;,</span><br><span class="line">  year = &#123;2023&#125;,</span><br><span class="line">  doi = &#123;10.1234/example&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">% 修改后</span></span><br><span class="line">@article&#123;example,</span><br><span class="line">  author = &#123;Author, A.&#125;,</span><br><span class="line">  title = &#123;Title&#125;,</span><br><span class="line">  journal = &#123;Journal&#125;,</span><br><span class="line">  year = &#123;2023&#125;,</span><br><span class="line">  note = &#123;10.1234/example&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-方法二：修改bst文件"><a href="#3-2-方法二：修改bst文件" class="headerlink" title="3.2. 方法二：修改bst文件"></a>3.2. 方法二：修改bst文件</h3><p>最开始我没有理解原始模板中<code>\bibliographystyle&#123;gbt7714-numerical&#125;</code>的含义，在搜索相关资料的时候无意间看到了一篇<a href="https://blog.csdn.net/weixin_41380712/article/details/141969500">博客</a>里面提到了<code>\bibliographystyle</code>会引用一个bst文件，果然，在模板目录中找到了<code>gbt7714-numerical.bst</code>文件，并在里面找到了输出DOI号的部分。</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">FUNCTION &#123;output.doi&#125;</span><br><span class="line">&#123; doi empty<span class="built_in">$</span> not show.doi and</span><br><span class="line">  show.english.translation entry.lang lang.zh = and not and</span><br><span class="line">    &#123; new.block</span><br><span class="line">      format.doi output</span><br><span class="line">    &#125;</span><br><span class="line">    &#x27;skip<span class="built_in">$</span></span><br><span class="line">  if<span class="built_in">$</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里面有一个判断条件是<code>show.doi</code>，它是一个整形变量，当这个变量为1，而且满足<code>doi empty$ not</code>即<strong>DOI字段不为空</strong>的时候才会去显示DOI信息。</p><p>要做的就是在bst文件的开头针对<code>show.doi</code>变量的赋值部分，将原本赋值的1改成0就可以了！</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">FUNCTION &#123;load.config&#125;</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">% 原本赋值成了1（显示doi）</span></span><br><span class="line"><span class="params">#1</span> &#x27;show.doi :=</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改后如下，将<code>#1</code>改成<code>#0</code>，即不显示DOI号。</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">FUNCTION &#123;load.config&#125;</span><br><span class="line">&#123;</span><br><span class="line"><span class="params">#0</span> &#x27;show.doi :=</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经过测试，确实不显示DOI号了！</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/03/a6ac3cc9c15aaa0c81e8c2c9683a34a5.png" alt="image.png"></p><p>这种方法肯定比把bib文件里面的<code>doi =</code>全都改成<code>note =</code>更好！</p>]]></content>
    
    
    <summary type="html">本文介绍了LaTex使用natbib和gbt7714包时如何不显示参考文献DOI号的操作步骤</summary>
    
    
    
    <category term="差生文具多" scheme="https://blog.musnow.top/categories/%E5%B7%AE%E7%94%9F%E6%96%87%E5%85%B7%E5%A4%9A/"/>
    
    <category term="笔记软件" scheme="https://blog.musnow.top/categories/%E5%B7%AE%E7%94%9F%E6%96%87%E5%85%B7%E5%A4%9A/%E7%AC%94%E8%AE%B0%E8%BD%AF%E4%BB%B6/"/>
    
    
    <category term="LaTex" scheme="https://blog.musnow.top/tags/LaTex/"/>
    
  </entry>
  
  <entry>
    <title>【SLAM】ubuntu 18.04 下 OpenCV 3.2.0 的 opencv_example 运行闪退</title>
    <link href="https://blog.musnow.top/posts/7683466939/"/>
    <id>https://blog.musnow.top/posts/7683466939/</id>
    <published>2025-03-01T04:59:29.000Z</published>
    <updated>2025-03-01T05:54:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>ubuntu 18.04 下 OpenCV 3.2.0 的 opencv_example 运行闪退问题探究。</p><h2 id="1-问题说明"><a href="#1-问题说明" class="headerlink" title="1. 问题说明"></a>1. 问题说明</h2><p>在之前的<a href="https://blog.musnow.top/posts/5090585017/">ORB-SLAM3项目于ROS运行</a>的博客中，提到过安装ROS时会自己安装一个OpenCV 3.2.0版本，所以最好不要安装其他版本的OpenCV，避免和OpenCV 3.2.0产生冲突，导致ROS链接失败。</p><p>今天尝试在ubuntu18.04的虚拟机里面安装OpenCV 3.2.0时，先是遇到了<a href="https://blog.musnow.top/posts/8846864150/">CMake构建问题</a>，又遇到了OpenCV 3.2.0提供的demo代码无法正常运行的问题。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 编译demo文件并运行</span></span><br><span class="line"><span class="built_in">cd</span> opencv-3.2.0/samples/cpp/example_cmake</span><br><span class="line"><span class="built_in">mkdir</span> build &amp;&amp; <span class="built_in">cd</span> build </span><br><span class="line">cmake .. &amp;&amp; make</span><br><span class="line">./opencv_example</span><br></pre></td></tr></table></figure><p>出现的状况就是，当我执行<code>./opencv_example</code>的时候，<strong>程序没有任何反应就直接终止了</strong>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">king@ubuntu:~/slam/pkg/opencv-3.2.0/samples/cpp/example_cmake/build$ ./opencv_example </span><br><span class="line">Built with OpenCV 3.2.0</span><br><span class="line">Capture is opened</span><br><span class="line">king@ubuntu:~/slam/pkg/opencv-3.2.0/samples/cpp/example_cmake/build$</span><br></pre></td></tr></table></figure><p>理论上执行<code>./opencv_example</code>的时候，应该弹出一个摄像头画面的窗口，且该窗口应一直存在。如下图所示</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/01/cf9ec531bb3ead1d358fb888106eeab2.png" alt="image.png"></p><p>所以，窗口没有弹出程序就终止了，肯定是有问题的。我们就要看看问题到底在哪里。</p><h2 id="2-问题探究"><a href="#2-问题探究" class="headerlink" title="2. 问题探究"></a>2. 问题探究</h2><h3 id="2-1-是否识别了摄像头设备"><a href="#2-1-是否识别了摄像头设备" class="headerlink" title="2.1. 是否识别了摄像头设备"></a>2.1. 是否识别了摄像头设备</h3><p>首先是确认我们的usb摄像头到底有没有连到主机上。因为我使用的是虚拟机，所以需要在VMware里面设置让摄像头连接到虚拟机上而不是连到宿主机上。</p><p>在VMware的顶栏上，选择<code>虚拟机-可移动设备</code>，在可移动设备的列表里面应该能看到你的USB摄像头。如果看不到，<strong>说明windows上都没认出来这个摄像头</strong>，请检查USB链接或确认摄像头自身是否损坏。</p><p>如下图所示，这里出现了我的USB Camera，且前面有一个勾勾代表摄像头已经练到了虚拟机上。如果没有连接到虚拟机而是宿主机上，这里的弹出菜单会显示“<strong>连接（断开与 主机 的链接）</strong>”，点击它即可让USB设备连接到虚拟机。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/03/b132bc0c1281bd934b2c3a1f24993b1e.png" alt="image.png"></p><p>另外，如果你在虚拟机开启的情况下将摄像头插入电脑，VMware会主动弹窗咨询你新的usb设备是要插入到虚拟机还是宿主机。选择虚拟机即可。</p><p>现在VMware里面已经配置好了USB摄像头连到虚拟机，我们就可以进虚拟机内部检查一下是否有摄像头设备了。首先执行<code>ls /dev/video* -l</code>命令，可以看到有两个video设备。说明至少系统是认到了视频输入设备的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">king@ubuntu:~$ ls /dev/video* -l</span><br><span class="line">crw-rw----+ 1 root video 81, 0 Feb 28 18:08 /dev/video0</span><br><span class="line">crw-rw----+ 1 root video 81, 1 Feb 28 18:08 /dev/video1</span><br></pre></td></tr></table></figure><p>随后安装一下<code>v4l-utils</code>软件包，它提供了一些摄像头相关的工具，可供我们检测当前主机上的摄像头设备。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install -y v4l-utils</span><br></pre></td></tr></table></figure><p>我们可以通过<code>v4l2-ctl -d /dev/video0 --all</code>命令查看某个设备的详细信息，这里可以看到<code>/dev/video0</code>就是我插入的USB摄像头，分辨率是<code>640*480</code>。说明linux系统已经成功识别了摄像头。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">king@ubuntu:~$ v4l2-ctl -d  /dev/video0 --all</span><br><span class="line">Driver Info (not using libv4l2):</span><br><span class="line">        Driver name   : uvcvideo</span><br><span class="line">        Card type     : USB Camera: USB Camera</span><br><span class="line">        Bus info      : usb-0000:02:03.0-1</span><br><span class="line">        Driver version: 5.4.233</span><br><span class="line">        Capabilities  : 0x84A00001</span><br><span class="line">                Video Capture</span><br><span class="line">                Metadata Capture</span><br><span class="line">                Streaming</span><br><span class="line">                Extended Pix Format</span><br><span class="line">                Device Capabilities</span><br><span class="line">        Device Caps   : 0x04200001</span><br><span class="line">                Video Capture</span><br><span class="line">                Streaming</span><br><span class="line">                Extended Pix Format</span><br><span class="line">Priority: 2</span><br><span class="line">Video input : 0 (Camera 1: ok)</span><br><span class="line">Format Video Capture:</span><br><span class="line">        Width/Height      : 640/480</span><br><span class="line">        Pixel Format      : &#x27;MJPG&#x27;</span><br><span class="line">        Field             : None</span><br><span class="line">        Bytes per Line    : 0</span><br><span class="line">        Size Image        : 614400</span><br><span class="line">        Colorspace        : sRGB</span><br><span class="line">        Transfer Function : Default (maps to sRGB)</span><br><span class="line">        YCbCr/HSV Encoding: Default (maps to ITU-R 601)</span><br><span class="line">        Quantization      : Default (maps to Full Range)</span><br><span class="line">        Flags             : </span><br><span class="line">Crop Capability Video Capture:</span><br><span class="line">        Bounds      : Left 0, Top 0, Width 640, Height 480</span><br><span class="line">        Default     : Left 0, Top 0, Width 640, Height 480</span><br><span class="line">        Pixel Aspect: 1/1</span><br><span class="line">Selection: crop_default, Left 0, Top 0, Width 640, Height 480</span><br><span class="line">Selection: crop_bounds, Left 0, Top 0, Width 640, Height 480</span><br><span class="line">Streaming Parameters Video Capture:</span><br><span class="line">        Capabilities     : timeperframe</span><br><span class="line">        Frames per second: 30.000 (30/1)</span><br><span class="line">        Read buffers     : 0</span><br><span class="line">                     brightness 0x00980900 (int)    : min=-64 max=64 step=1 default=0 value=0</span><br><span class="line">                       contrast 0x00980901 (int)    : min=0 max=95 step=1 default=34 value=34</span><br><span class="line">                     saturation 0x00980902 (int)    : min=0 max=100 step=1 default=56 value=56</span><br><span class="line">                            hue 0x00980903 (int)    : min=-2000 max=2000 step=100 default=0 value=0</span><br><span class="line"> white_balance_temperature_auto 0x0098090c (bool)   : default=1 value=1</span><br><span class="line">                          gamma 0x00980910 (int)    : min=100 max=300 step=1 default=120 value=120</span><br><span class="line">           power_line_frequency 0x00980918 (menu)   : min=0 max=2 default=1 value=1</span><br><span class="line">      white_balance_temperature 0x0098091a (int)    : min=2800 max=6500 step=1 default=4600 value=4600 flags=inactive</span><br><span class="line">                      sharpness 0x0098091b (int)    : min=0 max=7 step=1 default=0 value=0</span><br><span class="line">         backlight_compensation 0x0098091c (int)    : min=0 max=3 step=1 default=2 value=2</span><br><span class="line">                  exposure_auto 0x009a0901 (menu)   : min=0 max=3 default=3 value=3</span><br><span class="line">              exposure_absolute 0x009a0902 (int)    : min=78 max=10000 step=1 default=312 value=312 flags=inactive</span><br><span class="line">                 focus_absolute 0x009a090a (int)    : min=0 max=15 step=1 default=0 value=0 flags=inactive</span><br><span class="line">                     focus_auto 0x009a090c (bool)   : default=1 value=1</span><br></pre></td></tr></table></figure><h3 id="2-2-摄像头驱动问题？"><a href="#2-2-摄像头驱动问题？" class="headerlink" title="2.2. 摄像头驱动问题？"></a>2.2. 摄像头驱动问题？</h3><p>既然摄像头设备存在，则需要确认摄像头本身是否能被linux正常调用。</p><p>测试的方法很简单，下载ubuntu的cheese茄子软件（其实就是windows的相机软件），看看是否能正常打开摄像头。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install -y cheese</span><br></pre></td></tr></table></figure><p>安装完毕后，使用cheese命令即可打开摄像头。结果发现，弹窗是黑的。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/03/757c04ae77f8590101503248edb539bb.png" alt="image.png"></p><p>这里我拔除了摄像头，可以看到cheese会显示“no device found”（找不到设备），这就说明，<strong>上图中黑屏的情况并不是正常情况</strong>。如果摄像头不存在，会直接提示我们找不到设备，而不会黑屏。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/03/bb2a463bad129932f7cac49ca44d411d.png" alt="image.png"></p><p>结合之前的信息，可知我们现在linux系统已经识别到了USB摄像头，<strong>但没有办法调用它来拍照</strong>。</p><p>用<a href="https://blog.csdn.net/flyingcys/article/details/57406701">ubuntu下摄像头启动与黑屏问题解决</a>博客里面的方式解决了，在VMware的虚拟机设置里面，把usb兼容性改成3.1就可以了（原本是usb2.0）。修改了之后vm会自动重置虚拟机。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/03/15a4a260b11cca8f6281fb2a16572fb4.png" alt="image.png"></p><p>虚拟机重置了之后，重新连接一下usb摄像头到虚拟机就ok了。此时cheese已经能识别到我们的摄像头并拍摄画面了。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/03/0ed00a1fdc06faa7e174e181a7f0aa27.png" alt="image.png"></p><p>到这里，说明摄像头能被linux成功识别并调用，摄像头本身并没有问题。</p><h3 id="2-3-opencv-example代码探究"><a href="#2-3-opencv-example代码探究" class="headerlink" title="2.3. opencv_example代码探究"></a>2.3. opencv_example代码探究</h3><p>既然摄像头本身没有问题，那问题就是在OpenCV3.2.0或者说是在示例代码上了。示例代码<code>samples/cpp/example_cmake/exmaple.cpp</code>的主体并不长，这里直接给出。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// opencv-3.2.0/samples/cpp/example_cmake/exmaple.cpp</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Built with OpenCV &quot;</span> &lt;&lt; CV_VERSION &lt;&lt; endl;</span><br><span class="line">    Mat image;</span><br><span class="line">    VideoCapture capture;</span><br><span class="line">    capture.<span class="built_in">open</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>(capture.<span class="built_in">isOpened</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Capture is opened&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">for</span>(;;)</span><br><span class="line">        &#123;</span><br><span class="line">            capture &gt;&gt; image;</span><br><span class="line">            <span class="keyword">if</span>(image.<span class="built_in">empty</span>())</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="built_in">drawText</span>(image);</span><br><span class="line">            <span class="built_in">imshow</span>(<span class="string">&quot;Sample&quot;</span>, image);</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">waitKey</span>(<span class="number">10</span>) &gt;= <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;No capture&quot;</span> &lt;&lt; endl;</span><br><span class="line">        image = Mat::<span class="built_in">zeros</span>(<span class="number">480</span>, <span class="number">640</span>, CV_8UC1);</span><br><span class="line">        <span class="built_in">drawText</span>(image);</span><br><span class="line">        <span class="built_in">imshow</span>(<span class="string">&quot;Sample&quot;</span>, image);</span><br><span class="line">        <span class="built_in">waitKey</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先尝试将代码中的<code>capture.open(0)</code>改成<code>capture.open(&quot;/dev/video0&quot;);</code>，会发现问题依旧，启动之后未出现任何弹窗程序就终止了。</p><p>尝试将其改成<code>capture.open(1);</code>，可以看到这个设备是不存在的，open函数失败了并打印了错误信息，随后程序走到了<code>No capture</code>并正常显示了黑屏的Hello OpenCV页面。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/03/5f012640fe78dcf0558ff11f052626e6.png" alt="image.png"></p><p>这里我发现了一个问题，其实在没有修改代码之前，程序已经打印了<code>Capture is opened</code>，说明摄像头其实已经被open成功了，进入了<code>if(capture.isOpened())</code>为真的分支中。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">king@ubuntu:~/slam/pkg/opencv-3.2.0/samples/cpp/example_cmake/build$ ./opencv_example </span><br><span class="line">Built with OpenCV 3.2.0</span><br><span class="line">Capture is opened</span><br><span class="line">king@ubuntu:~/slam/pkg/opencv-3.2.0/samples/cpp/example_cmake/build$</span><br></pre></td></tr></table></figure><p>那么我们就来看看这个分支里面有啥问题会导致程序没有任何报错就退出吧。其中<code>for(;;)</code>是一个死循环，退出条件是内部的两个break。程序没有任何报错就终止，只能是这两个break导致的。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(capture.<span class="built_in">isOpened</span>())</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Capture is opened&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">for</span>(;;)</span><br><span class="line">&#123;</span><br><span class="line">capture &gt;&gt; image;</span><br><span class="line"><span class="keyword">if</span>(image.<span class="built_in">empty</span>())</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="built_in">drawText</span>(image);</span><br><span class="line"><span class="built_in">imshow</span>(<span class="string">&quot;Sample&quot;</span>, image);</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">waitKey</span>(<span class="number">10</span>) &gt;= <span class="number">0</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以我们可以修改代码，给这两个break之前加上打印</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">cout &lt;&lt; <span class="string">&quot;Capture is opened&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">for</span>(;;)</span><br><span class="line">&#123;</span><br><span class="line">capture &gt;&gt; image;</span><br><span class="line"><span class="keyword">if</span>(image.<span class="built_in">empty</span>())&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Image is empty! break.&quot;</span> &lt;&lt; endl; </span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">drawText</span>(image);</span><br><span class="line"><span class="built_in">imshow</span>(<span class="string">&quot;Sample&quot;</span>, image);</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">waitKey</span>(<span class="number">10</span>) &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;waitKey() &gt;= 0! break.&quot;</span> &lt;&lt; endl; </span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再次运行，会发现是第二个break导致程序终止了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">king@ubuntu:~/slam/pkg/opencv-3.2.0/samples/cpp/example_cmake/build$ ./opencv_example </span><br><span class="line">Built with OpenCV 3.2.0</span><br><span class="line">Capture is opened</span><br><span class="line">waitKey() &gt;= 0! break.</span><br><span class="line">king@ubuntu:~/slam/pkg/opencv-3.2.0/samples/cpp/example_cmake/build$</span><br></pre></td></tr></table></figure><p>那肯定是waitKey的返回值大于等于0命中了判断导致的。该函数的原型如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">cv::waitKey</span><span class="params">(<span class="type">int</span> delay = <span class="number">0</span>)</span></span></span><br></pre></td></tr></table></figure><p>这个函数是干啥用的呢？官方的说明如下：</p><blockquote><p>Waits for a pressed key.</p><p>The function waitKey waits for a key event infinitely (when delay &#x3D; 0) or for delay milliseconds, when it is positive. Since the OS has a minimum time between switching threads, the function will not wait exactly delay ms, it will wait at least delay ms, depending on what else is running on your computer at that time. It returns the code of the pressed key or -1 if no key was pressed before the specified time had elapsed.</p></blockquote><p>这个函数会至少等待delay毫秒的键盘输入，并返回键盘输入的ASCII值。当没有键盘被按下的时候，会返回<code>-1</code>。如果delay传入0则代表永久等待。</p><p>既然返回值是按键的ASCII码，我们可以打印一下这个函数的返回值，看看它收到了什么</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> key = <span class="built_in">waitKey</span>(<span class="number">10</span>);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;waitKey() return: &quot;</span> &lt;&lt; key  &lt;&lt; endl; </span><br><span class="line"><span class="keyword">if</span>(key &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;waitKey() &gt;= 0! break.&quot;</span> &lt;&lt; endl; </span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打印的结果是255，<strong>但是ASCII码的最大值只到127</strong>，这里的255已经超出键盘上按键可能返回的值了，肯定是个无意义的返回值！</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">waitKey() return: 255</span><br><span class="line">waitKey() &gt;= 0! break.</span><br></pre></td></tr></table></figure><p>bing一搜，就找到了类似的帖子：<a href="https://blog.csdn.net/m0_47700906/article/details/123305720" title="opencv中waitkey()函数返回值为255_以下哪个选项是使用opencv的waitkey函数的返回值的正确描述?-CSDN博客">opencv中waitkey()函数返回值为255_以下哪个选项是使用opencv的waitkey函数的返回值的正确描述?-CSDN博客</a></p><p>说白了就是，因为操作系统缘故，原本在没有任何键盘输入时应该返回的<code>-1</code>函数，被当作了一字节的无符号整数处理，返回成了255。</p><h2 id="3-问题解决"><a href="#3-问题解决" class="headerlink" title="3. 问题解决"></a>3. 问题解决</h2><p>现在已经知道了问题的来源了，解决方案就是在判断中过滤掉255这个值，或者直接把判断写死成键盘上的某个按键，只有按下键盘上的特定按键的时候才会退出。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> key = <span class="built_in">waitKey</span>(<span class="number">10</span>);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;waitKey() return: &quot;</span> &lt;&lt; key  &lt;&lt; endl; </span><br><span class="line"><span class="keyword">if</span>(key &gt;= <span class="number">0</span> &amp;&amp; key != <span class="number">255</span>)&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;waitKey() &gt;= 0! break.&quot;</span> &lt;&lt; endl; </span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>过滤掉返回值255之后重新编译，demo就能正常显示摄像头的画面了。左侧可以看到waitKey一直在返回255。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/03/d213fa5ceb5be1a4b3f4a31d3fcd8d50.png" alt="image.png"></p><p>此时按下键盘上的数字1，可以看到它识别到了ASCII 49并成功退出程序了。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/03/57e1cbf54baaa25b1a48d0ab4d9d6e79.png" alt="image.png"></p><h2 id="4-The-end"><a href="#4-The-end" class="headerlink" title="4. The end"></a>4. The end</h2><p>不管咋样，这个困扰了我大半个上午的问题总算是解决啦！</p><p>最开始我没想起来去看源码，以为一直是OpenCV没办法正常打开摄像头的问题，搜了一圈都没有找到解决方案。最后给代码加上了打印调试大法才找到了问题所在。感觉前面的折腾有点钻牛角尖了。</p>]]></content>
    
    
    <summary type="html">本文探究了 ubuntu 18.04 下 OpenCV 3.2.0 的 opencv_example 运行闪退问题，并给出了问题原因与解决方案</summary>
    
    
    
    <category term="编程学习" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="项目开发记录" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="Linux" scheme="https://blog.musnow.top/tags/Linux/"/>
    
    <category term="ubuntu" scheme="https://blog.musnow.top/tags/ubuntu/"/>
    
    <category term="SLAM" scheme="https://blog.musnow.top/tags/SLAM/"/>
    
  </entry>
  
  <entry>
    <title>【SLAM】ubuntu 18.04 编译安装 OpenCV 3.2.0 时出现哈希错误</title>
    <link href="https://blog.musnow.top/posts/8846864150/"/>
    <id>https://blog.musnow.top/posts/8846864150/</id>
    <published>2025-03-01T01:40:48.000Z</published>
    <updated>2025-03-06T02:42:10.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>ubuntu 18.04 使用 cmake 编译安装 OpenCV 3.2.0 时出现哈希错误。</p></blockquote><h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h2><h3 id="1-1-问题说明"><a href="#1-1-问题说明" class="headerlink" title="1.1. 问题说明"></a>1.1. 问题说明</h3><p>在amd64的ubuntu 18.04 desktop上编译安装 OpenCV 3.2.0 的时候，我遇到了cmake构建错误。错误的核心报错如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for file: [/home/king/slam/pkg/opencv-3.2.0/3rdparty/ippicv/downloads/linux-808b791a6eac9ed78d32a7666804320e/ippicv_linux_20151201.tgz]</span><br><span class="line">  expected hash: [808b791a6eac9ed78d32a7666804320e]</span><br><span class="line">    actual hash: [d41d8cd98f00b204e9800998ecf8427e]</span><br><span class="line">         status: [7;&quot;Couldn&#x27;t connect to server&quot;]</span><br></pre></td></tr></table></figure><p>说来奇怪，之前在 ubuntu 22.04 arm 中启动的 ubuntu 18.04 <strong>docker</strong>容器内编译安装 OpenCV 3.2.0 时并没有遇到此报错。可能是网络因素导致<code>ippicv_linux_20151201.tgz</code>文件无法正常下载。</p><p>完整的错误输出如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">-- Looking for sys/videoio.h</span><br><span class="line">-- Looking for sys/videoio.h - not found</span><br><span class="line">CMake Warning at 3rdparty/ippicv/downloader.cmake:56 (message):</span><br><span class="line">  ICV: Local copy of ICV package has invalid MD5 hash:</span><br><span class="line">  8b449a536a2157bcad08a2b9f266828b (expected:</span><br><span class="line">  808b791a6eac9ed78d32a7666804320e)</span><br><span class="line">Call Stack (most recent call first):</span><br><span class="line">  3rdparty/ippicv/downloader.cmake:110 (_icv_downloader)</span><br><span class="line">  cmake/OpenCVFindIPP.cmake:243 (include)</span><br><span class="line">  cmake/OpenCVFindLibsPerf.cmake:37 (include)</span><br><span class="line">  CMakeLists.txt:558 (include)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- ICV: Downloading ippicv_linux_20151201.tgz...</span><br><span class="line">CMake Error at 3rdparty/ippicv/downloader.cmake:73 (file):</span><br><span class="line">  file DOWNLOAD HASH mismatch</span><br><span class="line"></span><br><span class="line">    for file: [/home/king/slam/pkg/opencv-3.2.0/3rdparty/ippicv/downloads/linux-808b791a6eac9ed78d32a7666804320e/ippicv_linux_20151201.tgz]</span><br><span class="line">      expected hash: [808b791a6eac9ed78d32a7666804320e]</span><br><span class="line">        actual hash: [d41d8cd98f00b204e9800998ecf8427e]</span><br><span class="line">             status: [7;&quot;Couldn&#x27;t connect to server&quot;]</span><br><span class="line"></span><br><span class="line">Call Stack (most recent call first):</span><br><span class="line">  3rdparty/ippicv/downloader.cmake:110 (_icv_downloader)</span><br><span class="line">  cmake/OpenCVFindIPP.cmake:243 (include)</span><br><span class="line">  cmake/OpenCVFindLibsPerf.cmake:37 (include)</span><br><span class="line">  CMakeLists.txt:558 (include)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">CMake Error at 3rdparty/ippicv/downloader.cmake:77 (message):</span><br><span class="line">  ICV: Failed to download ICV package: ippicv_linux_20151201.tgz.</span><br><span class="line">  Status=7;&quot;Couldn&#x27;t connect to server&quot;</span><br><span class="line">Call Stack (most recent call first):</span><br><span class="line">  3rdparty/ippicv/downloader.cmake:110 (_icv_downloader)</span><br><span class="line">  cmake/OpenCVFindIPP.cmake:243 (include)</span><br><span class="line">  cmake/OpenCVFindLibsPerf.cmake:37 (include)</span><br><span class="line">  CMakeLists.txt:558 (include)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- Configuring incomplete, errors occurred!</span><br><span class="line">See also &quot;/home/king/slam/pkg/opencv-3.2.0/build/CMakeFiles/CMakeOutput.log&quot;.</span><br><span class="line">See also &quot;/home/king/slam/pkg/opencv-3.2.0/build/CMakeFiles/CMakeError.log&quot;.</span><br></pre></td></tr></table></figure><h3 id="1-2-使用的安装命令"><a href="#1-2-使用的安装命令" class="headerlink" title="1.2. 使用的安装命令"></a>1.2. 使用的安装命令</h3><p>提出解决方案之前，先把我使用的 OpenCV 3.2.0 安装命令给出。先是依赖项安装命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 依赖项</span></span><br><span class="line">sudo apt-get install -y \</span><br><span class="line">build-essential libgtk2.0-dev \</span><br><span class="line">libavcodec-dev libavformat-dev \</span><br><span class="line">libjpeg.dev libtiff5.dev libswscale-dev \</span><br><span class="line">libcanberra-gtk-module \</span><br><span class="line">libavresample-dev libgphoto2-dev</span><br><span class="line"><span class="comment"># 添加新源后继续安装</span></span><br><span class="line">sudo apt-get install -y software-properties-common </span><br><span class="line">sudo add-apt-repository <span class="string">&quot;deb http://security.ubuntu.com/ubuntu xenial-security main&quot;</span></span><br><span class="line">sudo apt-get -y update </span><br><span class="line">sudo apt-get install -y libjasper1 libjasper-dev</span><br></pre></td></tr></table></figure><p>随后是下载软件包和构建安装命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载和解压</span></span><br><span class="line">wget -O opencv-3.2.0.tar.gz https://github.com/opencv/opencv/archive/refs/tags/3.2.0.tar.gz</span><br><span class="line">tar -zxvf opencv-3.2.0.tar.gz</span><br><span class="line"><span class="comment"># 开始编译和安装</span></span><br><span class="line"><span class="built_in">pushd</span> opencv-3.2.0</span><br><span class="line">    <span class="built_in">rm</span> -rf build</span><br><span class="line">    <span class="built_in">mkdir</span> build &amp;&amp; <span class="built_in">cd</span> build </span><br><span class="line">    <span class="comment"># 构建和编译安装，-j4代表4线程并发</span></span><br><span class="line">    cmake -D CMAKE_BUILD_TYPE=Release -D CMAKE_INSTALL_PREFIX=/usr/local ..</span><br><span class="line">    make -j$(<span class="built_in">nproc</span>)</span><br><span class="line">    make install</span><br><span class="line">    <span class="comment"># 刷新动态库</span></span><br><span class="line">    ldconfig</span><br><span class="line"><span class="built_in">popd</span></span><br></pre></td></tr></table></figure><p>出现问题的是cmake的这一步</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmake -D CMAKE_BUILD_TYPE=Release -D CMAKE_INSTALL_PREFIX=/usr/local ..</span><br></pre></td></tr></table></figure><h2 id="2-解决方案"><a href="#2-解决方案" class="headerlink" title="2. 解决方案"></a>2. 解决方案</h2><blockquote><p>参考：<a href="https://github.com/opencv/opencv/issues/5973">https://github.com/opencv/opencv/issues/5973</a></p></blockquote><p>报错提到了一个文件，这个文件其实是要被cmake主动下载的，但是并没有被下载下来。在<code>opencv-3.2.0/3rdparty/ippicv/</code>目录下可以找到一个<code>downloader.cmake</code>文件，里面就有文件的下载链接。链接的域名是<code>raw.githubusercontent.com</code>链接，这个域名的国内联通性比<code>github.com</code>还差，所以我估计大概率是因为<strong>网络问题</strong>导致的这个错误。</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span>(OPENCV_ICV_URL <span class="string">&quot;https://raw.githubusercontent.com/opencv/opencv_3rdparty/$&#123;IPPICV_BINARIES_COMMIT&#125;/ippicv&quot;</span>)</span><br></pre></td></tr></table></figure><p>cmake的报错中给出了两个哈希值，我们本地已有的文件hash是<code>d41d8cd98f00b204e9800998ecf8427e</code>，这是md5的空文件哈希。如果使用<code>ls -l</code>查看这个文件，你会发现它就是一个0KB的空文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> -l /home/king/slam/pkg/opencv-3.2.0/3rdparty/ippicv/downloads/linux-808b791a6eac9ed78d32a7666804320e/ippicv_linux_20151201.tgz</span><br></pre></td></tr></table></figure><p>所以我们要做的就是把正确的文件手动下载下来，这里给出github的下载链接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/opencv/opencv_3rdparty/raw/ippicv/master_20151201/ippicv/ippicv_linux_20151201.tgz</span><br></pre></td></tr></table></figure><p>注意，上面贴出的<a href="https://github.com/opencv/opencv/issues/5973">issue 5973</a>中给出的ippicv下载链接<strong>版本</strong>是不对的，要和cmake报错中提到的版本号<code>ippicv_linux_20151201.tgz</code>保持一致。否则即便你重新下载了版本号不对的文件，cmake依旧会报错hash值不一致。</p><p>下载好了<code>ippicv_linux_20151201.tgz</code>这个文件之后，将其放置到<code>/home/king/slam/pkg/opencv-3.2.0/3rdparty/ippicv/downloads/linux-808b791a6eac9ed78d32a7666804320e/</code>目录中，替换掉刚刚的<code>ippicv_linux_20151201.tgz</code>空文件即可。有效文件大小约36.5MB。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ ls -l /home/king/slam/pkg/opencv-3.2.0/3rdparty/ippicv/downloads/linux-808b791a6eac9ed78d32a7666804320e/</span><br><span class="line">total 35680</span><br><span class="line">-rw-rw-r-- 1 king king 36533175 Feb 28 17:37 ippicv_linux_20151201.tgz</span><br></pre></td></tr></table></figure><p>替换完毕之后重新执行cmake命令（注意不要删除缓存文件夹），就可以正常构建成功了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cmake -D CMAKE_BUILD_TYPE=Release \</span><br><span class="line">-D CMAKE_INSTALL_PREFIX=/usr/local ..</span><br></pre></td></tr></table></figure><h2 id="3-问题解决"><a href="#3-问题解决" class="headerlink" title="3. 问题解决"></a>3. 问题解决</h2><p>cmake构建成功的最终输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-- Configuring done</span><br><span class="line">-- Generating done</span><br><span class="line">-- Build files have been written to: /home/king/slam/pkg/opencv-3.2.0/build</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/03/b1f8fe34bacaef7b58b4a0481fca6296.png" alt="image.png"></p><p>后续的编译也没有问题：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[100%] Linking CXX executable ../../bin/opencv_test_calib3d</span><br><span class="line">[100%] Built target opencv_test_calib3d</span><br><span class="line">[100%] Linking CXX executable ../../bin/opencv_perf_stitching</span><br><span class="line">[100%] Built target opencv_perf_stitching</span><br><span class="line">king@ubuntu:~/slam/pkg/opencv-3.2.0/build$</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/03/fb97ffa1ee97596d1ff49f7834560e3f.png" alt="image.png"></p><p>执行<code>sudo make install</code>，成功安装OpenCV 3.2.0，以下是<code>make install</code>最终的输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-- Installing: /usr/local/bin/opencv_visualisation</span><br><span class="line">-- Set runtime path of &quot;/usr/local/bin/opencv_visualisation&quot; to &quot;/usr/local/lib&quot;</span><br><span class="line">-- Installing: /usr/local/bin/opencv_version</span><br><span class="line">-- Set runtime path of &quot;/usr/local/bin/opencv_version&quot; to &quot;/usr/local/lib&quot;</span><br></pre></td></tr></table></figure><p>至此，问题解决。</p>]]></content>
    
    
    <summary type="html">本文引入了 ubuntu 18.04 使用 cmake 编译安装 OpenCV 3.2.0 时出现哈希错误的问题，并给出了解决方案</summary>
    
    
    
    <category term="编程学习" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="项目开发记录" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="Linux" scheme="https://blog.musnow.top/tags/Linux/"/>
    
    <category term="ubuntu" scheme="https://blog.musnow.top/tags/ubuntu/"/>
    
    <category term="SLAM" scheme="https://blog.musnow.top/tags/SLAM/"/>
    
  </entry>
  
  <entry>
    <title>【Linux】ubuntu 22.04 通过 apt 安装 python2</title>
    <link href="https://blog.musnow.top/posts/3862916255/"/>
    <id>https://blog.musnow.top/posts/3862916255/</id>
    <published>2025-03-01T00:41:16.000Z</published>
    <updated>2025-03-01T00:48:38.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>ubuntu 22.04 通过 apt 安装 python2。</p></blockquote><p>在老版本的 ubuntu 18.04 上，可以使用如下命令安装python2</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install -y \</span><br><span class="line">    python-dev \</span><br><span class="line">    python-pip \</span><br><span class="line">    python3-dev \</span><br><span class="line">    python3-pip \</span><br><span class="line">    python-all-dev \</span><br><span class="line">    python3-all-dev</span><br></pre></td></tr></table></figure><p>但是在ubuntu 22.04上，会提示<code>python-dev</code>、<code>python-pip</code>、<code>python-all-dev</code>这些包都不存在了，没有办法通过它们安装python2。</p><p>在ubuntu 22.04上，需要使用如下命令来安装python2，再通过官方的脚本获取pip2。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ubuntu 22.04 </span></span><br><span class="line"><span class="comment"># 安装python2</span></span><br><span class="line">sudo apt-get install -y python2</span><br><span class="line"><span class="comment"># 安装python2的pip</span></span><br><span class="line">wget https://bootstrap.pypa.io/pip/2.7/get-pip.py</span><br><span class="line">python2 get-pip.py</span><br></pre></td></tr></table></figure><p>在部分主机上，python2包也会提示不存在，尝试使用<code>python-dev-is-python2</code>作为替代。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install -y python-dev-is-python2</span><br></pre></td></tr></table></figure><p>注意，使用<code>get-pip.py</code>脚本安装的pip2默认会安装在当前用户的<code>~/.local/bin</code>目录下，如果是子用户，需要将这个目录加入PATH，才能正常使用pip2命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ pip2 -V</span><br><span class="line">pip 20.3.4 from /home/用户名/.local/lib/python2.7/site-packages/pip (python 2.7)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">ubuntu 22.04 通过 apt 安装 python2</summary>
    
    
    
    <category term="编程学习" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="Linux" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/Linux/"/>
    
    
    <category term="Linux" scheme="https://blog.musnow.top/tags/Linux/"/>
    
    <category term="ubuntu" scheme="https://blog.musnow.top/tags/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>【Hexo】hexo-butterfly主题添加影评书评页面</title>
    <link href="https://blog.musnow.top/posts/8855455861/"/>
    <id>https://blog.musnow.top/posts/8855455861/</id>
    <published>2025-02-12T05:49:29.000Z</published>
    <updated>2025-02-12T06:31:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>hexo-butterfly主题添加影评书评页面。</p><h2 id="1-说明"><a href="#1-说明" class="headerlink" title="1. 说明"></a>1. 说明</h2><p>在25年1月份，我的博客站点新增了一个<a href="https://blog.musnow.top/rating/">影评书评</a>页面，这个页面是基于之前添加的<a href="https://blog.musnow.top/equipment/">装备</a>页面的修改而来的。</p><blockquote><p>有关添加装备页面的教程，可以参考这篇博客：<a href="https://blog.musnow.top/posts/2383339565/">【Hexo】hexo-butterfly主题添加装备展示页面 | 慕雪的寒舍</a></p></blockquote><p>后续我在这个装备页面的基础上，让GPT帮忙修改了一下前端代码，实现了一个影评和书评的画廊视图页面。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/02/e65c6d2622d08322a542f681ee89b31b.png" alt="image.png"></p><p>本文将给出这个页面的css和pug文件，以及如何使用github action自动从我们的书评和影评文章来创建对应的yaml配置，用于最终生成这个页面。</p><h2 id="2-主题修改"><a href="#2-主题修改" class="headerlink" title="2. 主题修改"></a>2. 主题修改</h2><p>本站的butterfly主题停留在古早的4.9.5版本，此项修改可能对最新版的butterfly主题无效！</p><p>另外，修改hexo主题的前提是使用GIT方式来安装hexo主题（主题文件在themes文件夹内），如果你使用npm方式安装主题，换了一个环境或者npm更新主题版本之后你的主题修改就丢失了。</p><h3 id="2-1-前端文件修改"><a href="#2-1-前端文件修改" class="headerlink" title="2.1. 前端文件修改"></a>2.1. 前端文件修改</h3><p>这部分修改和添加装备页面需要做的修改一致。</p><p>修改<code>blog/themes/butterfly/layout/page.pug</code>文件，在<code>case page.type</code>的判断语句中新增一个rating的判断，添加在default之前即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">when &#x27;rating&#x27;</span><br><span class="line">  include includes/page/rating.pug</span><br></pre></td></tr></table></figure><p>随后再创建一个<code>blog/themes/butterfly/layout/includes/page/rating.pug</code>文件，写入如下内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">#rating</span><br><span class="line">  if site.data.rating</span><br><span class="line">    each i in site.data.rating</span><br><span class="line">      .rating-item</span><br><span class="line">        h2.rating-item-title= i.class_name</span><br><span class="line">        .rating-item-description= i.description</span><br><span class="line">        .rating-item-content</span><br><span class="line">          each item, index in i.rating_list</span><br><span class="line">            .rating-item-content-item</span><br><span class="line">              .rating-item-content-item-cover</span><br><span class="line">                img.rating-item-content-item-image(data-lazy-src=url_for(item.image) onerror=`this.onerror=null;this.src=&#x27;` + url_for(theme.error_img.flink) + `&#x27;` alt=item.name)</span><br><span class="line">              .rating-item-content-item-info</span><br><span class="line">                .rating-item-content-item-name= item.name</span><br><span class="line">                .rating-item-content-item-specification</span><br><span class="line">                  // 定义评分渲染函数</span><br><span class="line">                  - const renderRating = (rating) =&gt; &#123;</span><br><span class="line">                  -   const fullStar = &#x27;★&#x27;;</span><br><span class="line">                  -   const emptyStar = &#x27;☆&#x27;;</span><br><span class="line">                  -   const maxRating = 5;</span><br><span class="line">                  -   let stars = &#x27;&#x27;;</span><br><span class="line">                  -   for (let i = 0; i &lt; maxRating; i++) &#123;</span><br><span class="line">                  -     stars += i &lt; rating ? fullStar : emptyStar;</span><br><span class="line">                  -   &#125;</span><br><span class="line">                  -   // 格式化评分数字（保留一位小数）</span><br><span class="line">                  -   const formattedRating = Number(rating).toFixed(1);</span><br><span class="line">                  -   return `评分：$&#123;formattedRating&#125; $&#123;stars&#125;`;</span><br><span class="line">                  - &#125;</span><br><span class="line">                  | #&#123;renderRating(item.specification)&#125;</span><br><span class="line">                .rating-item-content-item-description= item.description</span><br><span class="line">                .rating-item-content-item-toolbar</span><br><span class="line">                  if item.link.includes(&#x27;https://&#x27;) || item.link.includes(&#x27;http://&#x27;)</span><br><span class="line">                    a.rating-item-content-item-link(href= item.link, target=&#x27;_blank&#x27;) 详情</span><br><span class="line">                  else</span><br><span class="line">                    a.rating-item-content-item-link(href= item.link, target=&#x27;_blank&#x27;) 查看文章</span><br></pre></td></tr></table></figure><p>随后在source文件夹下创建一个rating文件夹，在该文件夹内创建一个<code>index.md</code>文件，写入如下内容。其中title可以根据你的喜好修改，<code>aside: false</code>的含义是关闭侧边栏。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 影评 · 书评</span><br><span class="line">date: 2025-01-04 16:45:12</span><br><span class="line">aside: false</span><br><span class="line"><span class="section">type: rating</span></span><br><span class="line"><span class="section">---</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>再在<code>source/rating/</code>目录下创建一个<code>rating.css</code>文件，写入如下内容</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.rating-item-content</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">flex-direction</span>: row;</span><br><span class="line">    <span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> -<span class="number">8px</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.rating-item-content-item</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="built_in">calc</span>(<span class="number">25%</span> - <span class="number">12px</span>);</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">2px</span> solid <span class="number">#979797</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">8px</span> <span class="number">6px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">var</span>(--heo-card-bg);</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="built_in">var</span>(--heo-shadow-border);</span><br><span class="line">    <span class="attribute">min-height</span>: <span class="number">400px</span>;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">1200px</span>) &#123;</span><br><span class="line">    <span class="selector-class">.rating-item-content-item</span> &#123;</span><br><span class="line">      <span class="attribute">width</span>: <span class="built_in">calc</span>(<span class="number">50%</span> - <span class="number">12px</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">768px</span>) &#123;</span><br><span class="line">    <span class="selector-class">.rating-item-content-item</span> &#123;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.rating-item-content-item-info</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">8px</span> <span class="number">16px</span> <span class="number">16px</span> <span class="number">16px</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">12px</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.rating-item-content-item-name</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">18px</span>;</span><br><span class="line">    <span class="attribute">font-weight</span>: bold;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">8px</span>;</span><br><span class="line">    <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">    <span class="attribute">width</span>: fit-content;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.rating-item-content-item-specification</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">var</span>(--heo-secondtext);</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.rating-item-content-item-description</span> &#123;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">var</span>(--heo-secondtext);</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">60px</span>;</span><br><span class="line">    <span class="attribute">display</span>: -webkit-box;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    -webkit-line-clamp: <span class="number">3</span>;</span><br><span class="line">    -webkit-box-orient: vertical;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">a</span><span class="selector-class">.rating-item-content-item-link</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">var</span>(--heo-gray-op);</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">4px</span> <span class="number">8px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">8px</span>;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">a</span><span class="selector-class">.rating-item-content-item-link</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">var</span>(--heo-main);</span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">var</span>(--heo-white);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">h2</span><span class="selector-class">.rating-item-title</span> &#123;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.rating-item-description</span> &#123;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">4px</span> <span class="number">0</span> <span class="number">8px</span> <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">var</span>(--heo-secondtext);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.rating-item-content-item-cover</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">var</span>(--heo-secondbg);</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">img</span><span class="selector-class">.rating-item-content-item-image</span> &#123;</span><br><span class="line">    <span class="attribute">object-fit</span>: cover;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">div</span><span class="selector-id">#rating</span> &#123;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">26px</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.rating-item-content-item-toolbar</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: space-between;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">16px</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">a</span><span class="selector-class">.bber-reply</span> &#123;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>到这里，主题的修改就完成了。</p><h3 id="2-2-评分配置文件"><a href="#2-2-评分配置文件" class="headerlink" title="2.2. 评分配置文件"></a>2.2. 评分配置文件</h3><p>接下来要做的是新增一个对应的yaml配置文件，在<code>source/_data/</code>下新增一个<code>rating.yml</code>，评分项目的格式如下，包含了书评影评的名字、描述、文章链接、封面、评分（1到5的整数）</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">class_name:</span> <span class="string">电影世界</span></span><br><span class="line">  <span class="attr">description:</span> <span class="string">光影交织，大梦一场</span></span><br><span class="line">  <span class="attr">rating_list:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">桑尼的优势</span></span><br><span class="line">      <span class="attr">specification:</span> <span class="number">5</span></span><br><span class="line">      <span class="attr">description:</span> <span class="string">制作精良，剧情在线，神级反转，好看！</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">https://img.musnow.top/i/2025/01/a35d66e1ea8ffae6bb5ff248d1f53c63.png</span></span><br><span class="line">      <span class="attr">link:</span> <span class="string">/posts/1438650502/</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">class_name:</span> <span class="string">书籍海洋</span></span><br><span class="line">  <span class="attr">description:</span> <span class="string">行万里路，读万卷书</span></span><br><span class="line">  <span class="attr">rating_list:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">占位符</span></span><br><span class="line">      <span class="attr">specification:</span> <span class="number">4</span></span><br><span class="line">      <span class="attr">description:</span> <span class="string">占位符</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">/img/bg/op32.webp</span></span><br><span class="line">      <span class="attr">link:</span> <span class="string">/</span></span><br></pre></td></tr></table></figure><p>到这里，就应该搞定了，可以在本地<code>hexo s</code>然后访问<code>/rating</code>路径看看是否有新增的页面了。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/02/e65c6d2622d08322a542f681ee89b31b.png" alt="image.png"></p><h2 id="3-Github-Action自动化配置"><a href="#3-Github-Action自动化配置" class="headerlink" title="3. Github Action自动化配置"></a>3. Github Action自动化配置</h2><p>现在页面已经创建好了，但我不想每次写个影评之后都要自己去修改<code>rating.yml</code>文件，那样太过麻烦，所以写了一个python脚本，来自动化生成这个文件。</p><h3 id="3-1-新增的front-matter"><a href="#3-1-新增的front-matter" class="headerlink" title="3.1. 新增的front-matter"></a>3.1. 新增的front-matter</h3><p>既然需要python脚本来处理，那么第一步就是把yaml文件里面的内容写到markdown文件的front-matter里面。这里新增了下面几个字段</p><table><thead><tr><th>字段</th><th>含义</th><th>说明</th></tr></thead><tbody><tr><td>rating_name</td><td>书籍或电影的名字</td><td>如果缺少此字段，则会使用title</td></tr><tr><td>rating_desc</td><td>书籍或电影的简述</td><td>如果缺少此字段，则使用description</td></tr><tr><td>rating_point</td><td>评分（1到5的整数）</td><td>默认为0</td></tr><tr><td>rating_cover</td><td>书籍或电影的封面</td><td>如果缺少此字段，则使用cover；若没有cover，则使用提前配置好的默认封面</td></tr></tbody></table><p>书评和影评文章的link会根据front-matter里面的abbrlink来生成。</p><h3 id="3-2-Python处理脚本"><a href="#3-2-Python处理脚本" class="headerlink" title="3.2. Python处理脚本"></a>3.2. Python处理脚本</h3><p>下面给出半GPT写的完整的Python脚本，顶部Config是需要配置的条目，<strong>分别是书评和影评的md文件路径、当没有设置rating_cover时使用的默认封面、abbrlink的前缀</strong>。</p><p>其中<code>POST_LINK_PREFIX</code>参数是abbrlink前缀，在我的站点中，文章的链接都是<code>/posts/&lt;abbrlink&gt;/</code>，abbrlink的前缀就是<code>/posts/</code>。这个参数根据你自己站点内abbrlink插件的配置来修改这个配置项。</p><p>剩下的代码，如果你不知道它们是怎么工作的，请不要修改。你可以丢给GPT让它根据你的需要来微调代码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> yaml</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Config</span>:</span><br><span class="line">    <span class="comment"># 书籍、影评md文件路径</span></span><br><span class="line">    MOVIE_FILE_PATH = <span class="string">&quot;Notes/CODE/blog/rating/movies&quot;</span></span><br><span class="line">    BOOK_FILE_PATH = <span class="string">&quot;Notes/CODE/blog/rating/books&quot;</span></span><br><span class="line">    <span class="comment"># 默认封面</span></span><br><span class="line">    DEFAULT_COVER = <span class="string">&#x27;/img/bg/op32.jpg&#x27;</span></span><br><span class="line">    <span class="comment"># abbrlink前缀</span></span><br><span class="line">    POST_LINK_PREFIX = <span class="string">&#x27;/posts/&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Rating</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;评价列表类&quot;&quot;&quot;</span></span><br><span class="line">    MOVIE = <span class="string">&#x27;电影世界&#x27;</span></span><br><span class="line">    MOVIE_DESC = <span class="string">&#x27;光影交织，大梦一场&#x27;</span></span><br><span class="line">    BOOK = <span class="string">&#x27;书籍海洋&#x27;</span></span><br><span class="line">    BOOK_DESC = <span class="string">&#x27;行万里路，读万卷书&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># RatingItem类</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Item</span>:</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, specification, description, image, link</span>):</span><br><span class="line">            self.name = name</span><br><span class="line">            self.specification = specification</span><br><span class="line">            self.description = description</span><br><span class="line">            self.image = image</span><br><span class="line">            self.link = link</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">to_dict</span>(<span class="params">self</span>):</span><br><span class="line">            <span class="string">&quot;&quot;&quot;将 Rating 对象转换为字典格式&quot;&quot;&quot;</span></span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                <span class="string">&#x27;name&#x27;</span>: self.name,</span><br><span class="line">                <span class="string">&#x27;specification&#x27;</span>: self.specification,</span><br><span class="line">                <span class="string">&#x27;description&#x27;</span>: self.description,</span><br><span class="line">                <span class="string">&#x27;image&#x27;</span>: self.image,</span><br><span class="line">                <span class="string">&#x27;link&#x27;</span>: self.link</span><br><span class="line">            &#125;</span><br><span class="line">        </span><br><span class="line"><span class="meta">        @staticmethod</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">default</span>():</span><br><span class="line">            <span class="string">&quot;&quot;&quot;获取到一个默认的item&quot;&quot;&quot;</span></span><br><span class="line">            <span class="keyword">return</span> Rating.Item(<span class="string">&#x27;占位符&#x27;</span>,<span class="number">0</span>,<span class="string">&#x27;占位符&#x27;</span>,Config.DEFAULT_COVER,<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建class内容的函数</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_class</span>(<span class="params">class_name, description, rating_list</span>):</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="string">&#x27;class_name&#x27;</span>: class_name,</span><br><span class="line">            <span class="string">&#x27;description&#x27;</span>: description,</span><br><span class="line">            <span class="string">&#x27;rating_list&#x27;</span>: rating_list</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MarkdownParser</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;md文件处理&quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">extract_front_matter</span>(<span class="params">file_path</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        提取 Markdown 文件中的 front-matter 内容。</span></span><br><span class="line"><span class="string">        假设 front-matter 是以 &#x27;---&#x27; 包围的 YAML 格式内容。</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">            content = file.read()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 使用正则表达式匹配 front-matter</span></span><br><span class="line">        <span class="keyword">match</span> = re.<span class="keyword">match</span>(<span class="string">r&#x27;---\n(.*?)\n---\n&#x27;</span>, content, re.DOTALL)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">match</span>:</span><br><span class="line">            front_matter = <span class="keyword">match</span>.group(<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> yaml.safe_load(front_matter)  <span class="comment"># 使用 yaml 解析 front-matter</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">extract_front_matter_from_dir</span>(<span class="params">dir_path</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        遍历指定目录及其子目录下的所有 .md 文件，提取它们的 front-matter 内容，并将所有内容添加到列表中。</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        front_matter_list = []</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 遍历目录中的所有文件和子目录</span></span><br><span class="line">        <span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(dir_path):</span><br><span class="line">            <span class="keyword">for</span> filename <span class="keyword">in</span> files:</span><br><span class="line">                file_path = os.path.join(root, filename)</span><br><span class="line">                </span><br><span class="line">                <span class="comment"># 只处理 .md 文件</span></span><br><span class="line">                <span class="keyword">if</span> filename.endswith(<span class="string">&#x27;.md&#x27;</span>):</span><br><span class="line">                    front_matter = MarkdownParser.extract_front_matter(file_path)</span><br><span class="line">                    <span class="keyword">if</span> front_matter:</span><br><span class="line">                        front_matter_list.append(front_matter)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> front_matter_list</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_rating_list</span>(<span class="params">file_path:<span class="built_in">str</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;遍历目录下的所有md文件，构建rating列表&quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 遍历md文件</span></span><br><span class="line">    front_matter_list = MarkdownParser.extract_front_matter_from_dir(file_path)</span><br><span class="line">    <span class="comment"># 目录下没有有效文件</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> front_matter_list:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Err: no md file in <span class="subst">&#123;file_path&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> [Rating.Item.default().to_dict()]</span><br><span class="line"></span><br><span class="line">    rating_list = []</span><br><span class="line">    <span class="keyword">for</span> fm <span class="keyword">in</span> front_matter_list:</span><br><span class="line">        <span class="comment"># 电影名字</span></span><br><span class="line">        name = fm.get(<span class="string">&#x27;rating_name&#x27;</span>, fm.get(<span class="string">&#x27;title&#x27;</span>, <span class="literal">None</span>))</span><br><span class="line">        <span class="comment"># 评价</span></span><br><span class="line">        desc = fm.get(<span class="string">&#x27;rating_desc&#x27;</span>, fm.get(<span class="string">&#x27;description&#x27;</span>, <span class="literal">None</span>))</span><br><span class="line">        <span class="comment"># md文件里面没有电影名字和描述，直接跳过这个md文件</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> name <span class="keyword">and</span> <span class="keyword">not</span> desc: </span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="comment"># 获取评分</span></span><br><span class="line">        rating_point = <span class="built_in">abs</span>(fm.get(<span class="string">&#x27;rating_point&#x27;</span>, <span class="number">0</span>))</span><br><span class="line">        <span class="keyword">if</span> rating_point &gt; <span class="number">5</span>: </span><br><span class="line">            rating_point = <span class="number">5</span></span><br><span class="line">        <span class="comment"># 封面</span></span><br><span class="line">        cover = fm.get(<span class="string">&#x27;rating_cover&#x27;</span>, fm.get(<span class="string">&#x27;cover&#x27;</span>, Config.DEFAULT_COVER))</span><br><span class="line">        link = Config.POST_LINK_PREFIX + <span class="built_in">str</span>(fm.get(<span class="string">&#x27;abbrlink&#x27;</span>,<span class="string">&#x27;&#x27;</span>)) + <span class="string">&#x27;/&#x27;</span></span><br><span class="line">        item = Rating.Item(name, rating_point, desc, cover, link)</span><br><span class="line">        rating_list.append(item.to_dict())</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 如果列表为空，添加默认的占位符</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> rating_list:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Err: no validate md file in <span class="subst">&#123;file_path&#125;</span>&quot;</span>)</span><br><span class="line">        rating_list.append(Rating.Item.default().to_dict())</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> rating_list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成整个YAML结构</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_rating_yaml</span>():</span><br><span class="line">    <span class="comment"># 电影世界的rating list</span></span><br><span class="line">    movie_ratings = generate_rating_list(Config.MOVIE_FILE_PATH)</span><br><span class="line">    <span class="comment"># 书籍海洋的rating list</span></span><br><span class="line">    book_ratings = generate_rating_list(Config.BOOK_FILE_PATH)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 创建每个class的字典</span></span><br><span class="line">    classes = [</span><br><span class="line">        Rating.create_class(Rating.MOVIE, Rating.MOVIE_DESC, movie_ratings),</span><br><span class="line">        Rating.create_class(Rating.BOOK, Rating.BOOK_DESC, book_ratings),</span><br><span class="line">    ]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 返回整个YAML数据结构</span></span><br><span class="line">    <span class="keyword">return</span> classes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存数据到YAML文件</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">save_yaml</span>(<span class="params">data, file_path</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">        yaml.dump(data, file, allow_unicode=<span class="literal">True</span>, default_flow_style=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 主函数</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 检查命令行参数是否传入文件路径</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) &lt; <span class="number">2</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Input Err: Please provide the YAML file path.&quot;</span>)</span><br><span class="line">        sys.exit(<span class="number">1</span>)  <span class="comment"># 退出程序并返回错误代码</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 获取命令行传入的文件路径</span></span><br><span class="line">    file_path = sys.argv[<span class="number">1</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 生成YAML数据</span></span><br><span class="line">    data = generate_rating_yaml()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 保存到文件</span></span><br><span class="line">    save_yaml(data, file_path)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;Rating Yaml save to <span class="subst">&#123;file_path&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>脚本依赖于pyyaml库，使用<code>pip install pyyaml</code>安装了这个库后，使用如下命令调用脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 test.py 目标YAML文件路径</span><br></pre></td></tr></table></figure><p>最终会在给定的<strong>目标文件路径</strong>写入生成的yaml内容，比如<code>python3 test.py ./rating.yml</code>就会在当前目录创建一个<code>rating.yml</code>文件并写入生成的内容。</p><h3 id="3-3-Github-Action文件"><a href="#3-3-Github-Action文件" class="headerlink" title="3.3. Github Action文件"></a>3.3. Github Action文件</h3><p>配置Github Action之前，请先参考<a href="https://blog.musnow.top/posts/8608489065/">【博客】使用GithubAction自动同步obisidian和hexo仓库 | 慕雪的寒舍</a>一文配置obsidian和hexo仓库的自动同步。后续的Action配置是在这个配置的基础之上的。</p><p>首先需要添加两个step，配置python环境并安装解析yaml文件需要的pyyaml库</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置 Python 环境</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Set</span> <span class="string">up</span> <span class="string">Python</span> <span class="number">3.10</span></span><br><span class="line">  <span class="attr">uses:</span> <span class="string">actions/setup-python@v4</span></span><br><span class="line">  <span class="attr">with:</span></span><br><span class="line">    <span class="attr">python-version:</span> <span class="string">&#x27;3.10&#x27;</span>  <span class="comment"># 使用的 Python 版本，可以根据需求选择 3.x 或具体版本号</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 pip 依赖</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">pip</span> <span class="string">dependencies</span></span><br><span class="line">  <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">    python -m pip install --upgrade pip</span></span><br><span class="line"><span class="string">    pip install pyyaml</span></span><br></pre></td></tr></table></figure><p>然后再在push之前添加一个脚本调用就可以了。脚本提供的参数是目标yaml文件的路径。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 处理影视和书评评分的yaml文件</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Generate</span> <span class="string">rating.yml</span> <span class="string">from</span> <span class="string">raw</span> <span class="string">markdown</span></span><br><span class="line">  <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">    <span class="string">python</span> <span class="string">Data/python_scripts/gen_rating.py</span> <span class="string">HexoBlog/source/_data/rating.yml</span></span><br></pre></td></tr></table></figure><p>最终的完整action文件如下。这个yaml文件其他部分的内容的作用参考上面贴出来的博客。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Sync</span> <span class="string">CODE</span> <span class="string">to</span> <span class="string">_posts</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;Notes/CODE/**&#x27;</span>   <span class="comment"># 监听 CODE 文件夹内的文件变化</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">sync:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">steps:</span>      </span><br><span class="line">      <span class="comment"># 检出 Obsidian 仓库的代码</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">obsidian</span> <span class="string">repository</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v3</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># 设置 Python 环境</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Set</span> <span class="string">up</span> <span class="string">Python</span> <span class="number">3.10</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/setup-python@v4</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">python-version:</span> <span class="string">&#x27;3.10&#x27;</span>  <span class="comment"># 使用的 Python 版本，可以根据需求选择 3.x 或具体版本号</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># 安装 pip 依赖</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">pip</span> <span class="string">dependencies</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          python -m pip install --upgrade pip</span></span><br><span class="line"><span class="string">          pip install pyyaml</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">      <span class="comment"># 设置 Git 配置</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Set</span> <span class="string">up</span> <span class="string">Git</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">ACTIONS_KEY:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.HEXO_PRI_KEY</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          mkdir -p ~/.ssh/</span></span><br><span class="line"><span class="string">          echo &quot;$ACTIONS_KEY&quot; &gt; ~/.ssh/id_rsa</span></span><br><span class="line"><span class="string">          chmod 700 ~/.ssh</span></span><br><span class="line"><span class="string">          chmod 600 ~/.ssh/id_rsa</span></span><br><span class="line"><span class="string">          ssh-keyscan github.com &gt;&gt; ~/.ssh/known_hosts</span></span><br><span class="line"><span class="string">          git config --global user.name &quot;musnows&quot;</span></span><br><span class="line"><span class="string">          git config --global user.email &quot;ezplayingd@126.com&quot;</span></span><br><span class="line"><span class="string">          git config --global core.quotepath false</span></span><br><span class="line"><span class="string">          git config --global i18n.commitEncoding utf-8 </span></span><br><span class="line"><span class="string">          git config --global i18n.logOutputEncoding utf-8 </span></span><br><span class="line"><span class="string"></span></span><br><span class="line">      <span class="comment"># 克隆 HexoBlog 仓库（私密仓库），使用 ssh 来进行认证</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">HexoBlog</span> <span class="string">repository</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          git clone git@github.com:musnows/Hexo-Blog.git HexoBlog</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">      <span class="comment"># 同步文件：将 A 仓库中的 CODE 文件夹内容复制到 HexoBlog 仓库的 _posts 文件夹</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Sync</span> <span class="string">files</span> <span class="string">from</span> <span class="string">CODE</span> <span class="string">to</span> <span class="string">_posts</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          rsync -av --delete Notes/CODE/ HexoBlog/source/_posts/</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">      <span class="comment"># 处理影视和书评评分的yaml文件</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Generate</span> <span class="string">rating.yml</span> <span class="string">from</span> <span class="string">raw</span> <span class="string">markdown</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          python Data/python_scripts/gen_rating.py HexoBlog/source/_data/rating.yml</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">      <span class="comment"># 提交更改并推送到 HexoBlog 仓库</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Commit</span> <span class="string">and</span> <span class="string">push</span> <span class="string">changes</span> <span class="string">to</span> <span class="string">HexoBlog</span> <span class="string">repository</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          cd HexoBlog</span></span><br><span class="line"><span class="string">          git add .</span></span><br><span class="line"><span class="string">          git commit -m &quot;Sync CODE to _posts at $(TZ=&#x27;Asia/Shanghai&#x27; date &#x27;+%Y-%m-%d %H:%M:%S&#x27;)&quot;</span></span><br><span class="line"><span class="string">          git push origin hexo</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure><h3 id="3-4-测试Action"><a href="#3-4-测试Action" class="headerlink" title="3.4. 测试Action"></a>3.4. 测试Action</h3><p>将脚本和更新后的action文件push到远端，触发action之后，就能看到结果了，成功根据md文件里面的配置生成出了yaml文件。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/02/c477eecbddcbf372c3721ce93e3e4f6c.png" alt="image.png"></p>]]></content>
    
    
    <summary type="html">hexo-butterfly主题添加影评书评页面，并用action实现自动化更新</summary>
    
    
    
    <category term="差生文具多" scheme="https://blog.musnow.top/categories/%E5%B7%AE%E7%94%9F%E6%96%87%E5%85%B7%E5%A4%9A/"/>
    
    <category term="博客建站" scheme="https://blog.musnow.top/categories/%E5%B7%AE%E7%94%9F%E6%96%87%E5%85%B7%E5%A4%9A/%E5%8D%9A%E5%AE%A2%E5%BB%BA%E7%AB%99/"/>
    
    
    <category term="博客建站" scheme="https://blog.musnow.top/tags/%E5%8D%9A%E5%AE%A2%E5%BB%BA%E7%AB%99/"/>
    
    <category term="Hexo" scheme="https://blog.musnow.top/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>【SLAM】在 ubuntu 18.04 arm 中以ROS环境编译与运行ORB_SLAM3</title>
    <link href="https://blog.musnow.top/posts/5090585017/"/>
    <id>https://blog.musnow.top/posts/5090585017/</id>
    <published>2025-02-09T08:18:59.000Z</published>
    <updated>2025-03-03T01:51:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>在ubuntu18.04arm中于ROS环境编译与运行ORB_SLAM3，并以TUM和EuRoC数据集测试了ROS下单目、双目和RGB-D运行。</p><h2 id="1-引言"><a href="#1-引言" class="headerlink" title="1. 引言"></a>1. 引言</h2><p>在之前的博客中，已经介绍了<a href="https://blog.musnow.top/posts/7873538113/">基于虚拟机docker环境以及云端的AutoDL环境运行ORB_SLAM3</a>的步骤。</p><p>在实际场景中，SLAM通常是需要在机器人平台上运行的，ROS就是一个比较常见的机器人开发平台，在ROS环境中运行，可以方便我们的SLAM系统与其他机器人功能模块（比如导航和路径规划）进行通信，而且在ros node模式下运行的SLAM更适合<strong>多机通讯环境</strong>，比如实现多机器人协同建图、机器人和PC交互等等功能。</p><p>ORB_SLAM3在本地运行的基础上，提供了在ROS中运行的机制，本文简述了如何在ubuntu 18.04 arm环境中安装ROS环境、编译ORB_SLAM3 ROS版本，以及用现有的数据集模拟摄像头信号输入来使用ORB_SLAM3的全流程。</p><p>本文示例环境：ubuntu 22.04 arm虚拟机下启动的ubuntu18.04 docker容器。</p><h2 id="2-安装ROS环境"><a href="#2-安装ROS环境" class="headerlink" title="2. 安装ROS环境"></a>2. 安装ROS环境</h2><p>参考<a href="https://blog.musnow.top/posts/3771271576/">【Linux】在ubuntu18.04arm中安装ROS环境</a>一文进行安装，主要基于ROS官网的教程。</p><h2 id="3-编译ROS环境的ORB-SLAM3"><a href="#3-编译ROS环境的ORB-SLAM3" class="headerlink" title="3. 编译ROS环境的ORB_SLAM3"></a>3. 编译ROS环境的ORB_SLAM3</h2><p>本文撰写时<code>UZ-SLAMLab/ORB_SLAM3</code>的最新提交为2022年2月10日的<code>4452a3c4ab75b1cde34e5505a36ec3f9edcdc4c4</code>，后文的教程基于此提交点。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/02/335d01e00274144aad4d37adaace52ad.png" alt="image.png"></p><h3 id="3-1-编译命令"><a href="#3-1-编译命令" class="headerlink" title="3.1. 编译命令"></a>3.1. 编译命令</h3><h4 id="3-1-1-先编译普通版本"><a href="#3-1-1-先编译普通版本" class="headerlink" title="3.1.1. 先编译普通版本"></a>3.1.1. 先编译普通版本</h4><p>本文不赘述安装ORB_SLAM3依赖项的步骤，您可以参考<a href="https://blog.musnow.top/posts/1589125738/">【SLAM】于ubuntu18.04上纯CPU运行GCNv2_SLAM的记录（ARM64&#x2F;AMD64） | 慕雪的寒舍</a> 一文中的依赖项安装步骤。参考博客里面的步骤安装opencv、eigen3、Pangolin6.0就可以了，不需要安装libtorch。</p><p>其中需要注意的是，如果你需要编译ROS的ORB_SLAM3，<strong>opencv不能安装3.4.5版本，必须安装3.2.0版本</strong>！好消息是，如果你是跟随者本站或者ROS官网的教程安装的ROS，那么opencv 3.2.0版本已经和ROS一起安装在你的系统里面了。</p><blockquote><p>经过博主的尝试，原文中给出的OpenCV 3.4.5的编译安装方法同样可以用于3.2.0版本，只需要将下载链接中的版本号更换为3.2.0即可。</p></blockquote><p>安装完毕依赖后，先<strong>以普通模式编译ORB_SLAM3</strong>，因为ROS版本依赖于普通版本才能进行编译，这一点必须要注意。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/UZ-SLAMLab/ORB_SLAM3.git ORB_SLAM3</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> ORB_SLAM3</span><br><span class="line"><span class="built_in">chmod</span> +x build.sh</span><br><span class="line">./build.sh</span><br></pre></td></tr></table></figure><h4 id="3-1-2-修改build-ros-sh脚本"><a href="#3-1-2-修改build-ros-sh脚本" class="headerlink" title="3.1.2. 修改build_ros.sh脚本"></a>3.1.2. 修改build_ros.sh脚本</h4><p>编译完毕普通版本后，才可以执行<code>build_ros.sh</code>脚本。但是先别急，cat这个脚本，看看里面写了啥</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu-linux-22-04-02-desktop:/work/ORB_SLAM3# cat build_ros.sh </span><br><span class="line">echo &quot;Building ROS nodes&quot;</span><br><span class="line"></span><br><span class="line">cd Examples/ROS/ORB_SLAM3</span><br><span class="line">mkdir build</span><br><span class="line">cd build</span><br><span class="line">cmake .. -DROS_BUILD_TYPE=Release</span><br><span class="line">make -j</span><br></pre></td></tr></table></figure><p>其中第一个命令就有问题了，最新版本的ORB_SLAM3源码里面，Examples路径下已经没有ROS目录了，这个目录现在是<code>Examples_old/ROS/ORB_SLAM3</code>。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/02/bee0b045b18a1fe693aea1048fd22862.png" alt="image.png"></p><p>如果你没有注意这个问题就开始执行<code>build_ros.sh</code>脚本，问题就会出现，因为<code>Examples/ROS/ORB_SLAM3</code>目录当前不存在，该脚本实际上是直接在项目根目录下创建了build目录然后cmake开始编译的，编译的完全不是ROS版本。</p><p>这个脚本里面还有另外一个坑，那就是<code>make -j</code>后面没有写任何数字。这会导致make无休止地使用系统资源，直到把你的整个系统内存和swap都吃光光。根据我找到的博客，ORB_SLAM3的编译最多能吃掉16GB内存，完全是个洪水猛兽。</p><p>最开始我没有注意这个脚本，以为它没有任何问题，就直接执行了，最终在编译时遇到了如下错误。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">c++: internal compiler error: Killed (program cc1plus)</span><br><span class="line">Please submit a full bug report,</span><br><span class="line">with preprocessed source if appropriate.</span><br><span class="line">See &lt;file:///usr/share/doc/gcc-7/README.Bugs&gt; for instructions.</span><br></pre></td></tr></table></figure><p>这个错误就是因为系统没有资源了。开另外一个终端，再启动编译，你可以轻易地观察到编译是怎么把整个系统内存给吃光光的，最终物理内存和swap都没了，操作系统自然会kill掉编译进程，从而导致了上述报错。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/02/53a81ab5712af2c3f117d62f91fe5211.png" alt="image.png"></p><p>如果你直接搜索“ORB_SLAM3编译失败”等字样，可能会搜到相关教程让你加大swap文件，这是一个可选项，但还不够可选，因为在我的测试中，即便再给出2GB的swap文件，编译依旧会因为内存不足而失败。下面给出新增swap文件的命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">apt install util-linux</span><br><span class="line"><span class="comment"># 分配2G</span></span><br><span class="line">sudo fallocate -l 2G /swapfile</span><br><span class="line"><span class="comment"># 给予权限</span></span><br><span class="line">sudo <span class="built_in">chmod</span> 600 /swapfile</span><br><span class="line"><span class="comment"># 激活权限（执行了之后swap就生效了）</span></span><br><span class="line">sudo mkswap /swapfile</span><br><span class="line">sudo swapon /swapfile</span><br><span class="line"><span class="comment"># 不需要的时候，使用如下命令删除swap文件</span></span><br><span class="line">swapoff -v /swapfile</span><br><span class="line"><span class="built_in">rm</span> /swapfile</span><br></pre></td></tr></table></figure><p>实际上，在物理内存大于8GB的环境中不需要这么麻烦，前文提到了脚本里面make没有写线程数，解决办法就是修正这个脚本，首先是修正目录，其次是将make后面加上<code>-j4</code>来限制make使用的资源，这样就能绕过内存不足导致的编译错误了。修改后的脚本如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Building ROS nodes&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> Examples_old/ROS/ORB_SLAM3</span><br><span class="line"><span class="built_in">mkdir</span> build</span><br><span class="line"><span class="built_in">cd</span> build</span><br><span class="line">cmake .. -DROS_BUILD_TYPE=Release</span><br><span class="line">make -j4</span><br></pre></td></tr></table></figure><p>如果你的环境物理内存低于8GB，可以考虑在加大swap文件的同时进一步减少make使用的线程数，比如<code>make -j2</code>。</p><h4 id="3-1-3-编译ROS版本"><a href="#3-1-3-编译ROS版本" class="headerlink" title="3.1.3. 编译ROS版本"></a>3.1.3. 编译ROS版本</h4><p>修正了build_ros.sh脚本之后，就可以开始编译ROS版本了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> +x build_ros.sh</span><br><span class="line">./build_ros.sh</span><br></pre></td></tr></table></figure><p>再次提醒，ROS版本的编译依赖于普通版本，需要先编译普通版本！</p><h3 id="3-2-编译期间遇到的各种问题"><a href="#3-2-编译期间遇到的各种问题" class="headerlink" title="3.2. 编译期间遇到的各种问题"></a>3.2. 编译期间遇到的各种问题</h3><p>部分问题参考：<a href="https://blog.csdn.net/shikaiaixuexi/article/details/143749912">记录配置ubuntu18.04下运行ORBSLAM3的ros接口的过程及执行单目imu模式遇到的问题</a></p><h4 id="3-2-1-cmake错误ROS-PACKAGE-PATH"><a href="#3-2-1-cmake错误ROS-PACKAGE-PATH" class="headerlink" title="3.2.1. cmake错误ROS_PACKAGE_PATH"></a>3.2.1. cmake错误ROS_PACKAGE_PATH</h4><p>遇到的第一个错误应该是环境变量有关，编译ros版本的时候，需要将源码路径加入到环境变量中，才可以正常编译。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">CMake Error at /opt/ros/melodic/share/ros/core/rosbuild/private.cmake:99 (message):</span><br><span class="line">  [rosbuild] rospack found package &quot;ORB_SLAM3&quot; at &quot;&quot;, but the current</span><br><span class="line">  directory is &quot;/work/ORB_SLAM3/Examples_old/ROS/ORB_SLAM3&quot;.  You should</span><br><span class="line">  double-check your ROS_PACKAGE_PATH to ensure that packages are found in the</span><br><span class="line">  correct precedence order.</span><br><span class="line">Call Stack (most recent call first):</span><br><span class="line">  /opt/ros/melodic/share/ros/core/rosbuild/public.cmake:177 (_rosbuild_check_package_location)</span><br><span class="line">  CMakeLists.txt:4 (rosbuild_init)</span><br></pre></td></tr></table></figure><p>在ORB_SLAM3项目根目录下执行如下命令即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> ROS_PACKAGE_PATH=<span class="variable">$ROS_PACKAGE_PATH</span>:<span class="variable">$PWD</span>/Examples_old/ROS/ORB_SLAM3</span><br></pre></td></tr></table></figure><p>修正之后即可正常开始编译。注意后续执行rosrun的bash也需要执行此命令，建议直接将其写入<code>~/.bashrc</code>中!</p><h4 id="3-2-2-头文件se3-hpp找不到"><a href="#3-2-2-头文件se3-hpp找不到" class="headerlink" title="3.2.2. 头文件se3.hpp找不到"></a>3.2.2. 头文件se3.hpp找不到</h4><p>编译到30%的时候，会提示<code>&lt;sophus/se3.hpp&gt;</code>头文件找不到</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[ 30%] Building CXX object CMakeFiles/Mono_Inertial.dir/src/ros_mono_inertial.cc.o</span><br><span class="line">In file included from /work/ORB_SLAM3/Examples_old/ROS/ORB_SLAM3/../../../include/Frame.h:30:0,</span><br><span class="line">                 from /work/ORB_SLAM3/Examples_old/ROS/ORB_SLAM3/../../../include/KeyFrame.h:28,</span><br><span class="line">                 from /work/ORB_SLAM3/Examples_old/ROS/ORB_SLAM3/../../../include/MapPoint.h:23,</span><br><span class="line">                 from /work/ORB_SLAM3/Examples_old/ROS/ORB_SLAM3/../../../include/FrameDrawer.h:24,</span><br><span class="line">                 from /work/ORB_SLAM3/Examples_old/ROS/ORB_SLAM3/../../../include/Viewer.h:23,</span><br><span class="line">                 from /work/ORB_SLAM3/Examples_old/ROS/ORB_SLAM3/../../../include/Tracking.h:26,</span><br><span class="line">                 from /work/ORB_SLAM3/Examples_old/ROS/ORB_SLAM3/../../../include/System.h:31,</span><br><span class="line">                 from /work/ORB_SLAM3/Examples_old/ROS/ORB_SLAM3/src/ros_mono_inertial.cc:34:</span><br><span class="line">/work/ORB_SLAM3/Examples_old/ROS/ORB_SLAM3/../../../include/ImuTypes.h:29:10: fatal error: sophus/se3.hpp: No such file or directory</span><br><span class="line"> #include &lt;sophus/se3.hpp&gt;</span><br><span class="line">          ^~~~~~~~~~~~~~~~****</span><br></pre></td></tr></table></figure><p>这个第三方库sophus已经在Thirdparty文件夹里面自带了，刚刚我们编译普通版本的时候，其实也已经编译好了这个第三方库了。要做的就是进它的目录make install安装一下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> Thirdparty/Sophus/build/</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><p>安装以后就解决这个问题了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu-linux-22-04-02-desktop:/work/ORB_SLAM3# cd Thirdparty/Sophus/build/</span><br><span class="line">root@ubuntu-linux-22-04-02-desktop:/work/ORB_SLAM3/Thirdparty/Sophus/build# make install</span><br><span class="line">[  8%] Built target test_sim2</span><br><span class="line">[ 16%] Built target test_se2</span><br><span class="line">[ 25%] Built target test_so3</span><br><span class="line">[ 33%] Built target test_rxso2</span><br><span class="line">[ 41%] Built target test_so2</span><br><span class="line">[ 50%] Built target test_se3</span><br><span class="line">[ 58%] Built target test_geometry</span><br><span class="line">[ 66%] Built target test_rxso3</span><br><span class="line">[ 75%] Built target test_sim3</span><br><span class="line">[ 83%] Built target test_velocities</span><br><span class="line">[ 91%] Built target test_common</span><br><span class="line">[100%] Built target HelloSO3</span><br><span class="line">Install the project...</span><br><span class="line">-- Install configuration: &quot;Release&quot;</span><br><span class="line">-- Installing: /usr/local/share/sophus/cmake/SophusTargets.cmake</span><br><span class="line">-- Installing: /usr/local/share/sophus/cmake/SophusConfig.cmake</span><br><span class="line">-- Installing: /usr/local/share/sophus/cmake/SophusConfigVersion.cmake</span><br><span class="line">-- Installing: /usr/local/include/sophus/average.hpp</span><br><span class="line">-- Installing: /usr/local/include/sophus/common.hpp</span><br><span class="line">-- Installing: /usr/local/include/sophus/geometry.hpp</span><br><span class="line">-- Installing: /usr/local/include/sophus/interpolate.hpp</span><br><span class="line">-- Installing: /usr/local/include/sophus/interpolate_details.hpp</span><br><span class="line">-- Installing: /usr/local/include/sophus/num_diff.hpp</span><br><span class="line">-- Installing: /usr/local/include/sophus/rotation_matrix.hpp</span><br><span class="line">-- Installing: /usr/local/include/sophus/rxso2.hpp</span><br><span class="line">-- Installing: /usr/local/include/sophus/rxso3.hpp</span><br><span class="line">-- Installing: /usr/local/include/sophus/se2.hpp</span><br><span class="line">-- Installing: /usr/local/include/sophus/se3.hpp</span><br><span class="line">-- Installing: /usr/local/include/sophus/sim2.hpp</span><br><span class="line">-- Installing: /usr/local/include/sophus/sim3.hpp</span><br><span class="line">-- Installing: /usr/local/include/sophus/sim_details.hpp</span><br><span class="line">-- Installing: /usr/local/include/sophus/so2.hpp</span><br><span class="line">-- Installing: /usr/local/include/sophus/so3.hpp</span><br><span class="line">-- Installing: /usr/local/include/sophus/types.hpp</span><br><span class="line">-- Installing: /usr/local/include/sophus/velocities.hpp</span><br><span class="line">-- Installing: /usr/local/include/sophus/formatstring.hpp</span><br></pre></td></tr></table></figure><h4 id="3-2-3-OpenCV-版本不匹配"><a href="#3-2-3-OpenCV-版本不匹配" class="headerlink" title="3.2.3. OpenCV 版本不匹配"></a>3.2.3. OpenCV 版本不匹配</h4><p>前文提到过，OpenCV必须安装 3.2.0 版本，是因为cv_bridge默认会指向ROS自带的3.2.0版本，而不是我们自己安装的其他版本，最终编译或者运行的时候就会导致链接错误或者coredump错误。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/ld: warning: libopencv_core.so.3.2, needed by /opt/ros/melodic/lib/libcv_bridge.so, may conflict with libopencv_core.so.3.4</span><br></pre></td></tr></table></figure><p>如果你已经安装了其他版本的opencv，需要删掉它们。从源码安装的话，直接进入opencv源码的build目录执行<code>make uninstall</code>就可以卸载掉自己安装的opencv。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/02/b1905e7093dcb9ee085ce7f23784385b.png" alt="image.png"></p><p>删掉了之后就会发现系统里面只剩下和ros一起安装的3.2.0版本opencv了，应该是下载ros环境的时候自动安装的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu-linux-22-04-02-desktop:/work/ORB_SLAM3# pkg-config --modversion opencv</span><br><span class="line">3.2.0</span><br></pre></td></tr></table></figure><p>随后我们需要修改CMakeLists文件，让编译的时候使用opencv 3.2.0版本。首先是根目录下的CMakeLists，修改如下部分的版本号为3.2即可</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ORB_SLAM3/CMakeLists.txt</span></span><br><span class="line"><span class="keyword">find_package</span>(OpenCV <span class="number">3.2</span>)</span><br><span class="line">   <span class="keyword">if</span>(<span class="keyword">NOT</span> OpenCV_FOUND)</span><br><span class="line">      <span class="keyword">message</span>(FATAL_ERROR <span class="string">&quot;OpenCV &gt; 3.2 not found.&quot;</span>)</span><br><span class="line">   <span class="keyword">endif</span>()</span><br></pre></td></tr></table></figure><p>然后是<code>Examples_old/ROS/ORB_SLAM3</code>里面的CMakeLists文件，修改如下部分为3.2.0版本</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ORB_SLAM3/Examples_old/ROS/ORB_SLAM3/CMakeLists.txt</span></span><br><span class="line"><span class="keyword">find_package</span>(OpenCV <span class="number">3.2</span>.<span class="number">0</span> QUIET) <span class="comment"># 修改为3.2.0</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">NOT</span> OpenCV_FOUND)</span><br><span class="line">   <span class="keyword">find_package</span>(OpenCV <span class="number">2.4</span>.<span class="number">3</span> QUIET)</span><br><span class="line">   <span class="keyword">if</span>(<span class="keyword">NOT</span> OpenCV_FOUND)</span><br><span class="line">      <span class="keyword">message</span>(FATAL_ERROR <span class="string">&quot;OpenCV &gt; 2.4.3 not found.&quot;</span>)</span><br><span class="line">   <span class="keyword">endif</span>()</span><br><span class="line"><span class="keyword">endif</span>()</span><br></pre></td></tr></table></figure><p>接下来就要删除所有编译缓存，重新编译一遍。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">rm -rf Thirdparty/g2o/build/</span><br><span class="line">rm -rf Thirdparty/DBoW2/build/</span><br><span class="line">rm -rf Thirdparty/Sophus/build/</span><br><span class="line">rm -rf Vocabulary/*.bin</span><br><span class="line">rm -rf ./build</span><br><span class="line">rm -rf Examples_old/ROS/ORB_SLAM3/build</span><br></pre></td></tr></table></figure><p><strong>注意ORB_SLAM3的普通版本也需要重新编译</strong>！因为最开始编译的时候我的普通版本是基于opecv 3.4.5编译的，如果不重新基于opencv 3.2.0编译普通版本，编译ROS的时候就会提示<code>libORB_SLAM3.so</code>需要3.4.5版本的opencv才能正常链接，终究还是版本对不上。</p><hr><p>另外，我们从源码使用cmake构建安装的opencv 3.2.0一般设置的安装目录都会和ROS自带的目录不同，比如cmake构建的安装目录是<code>/usr/local/lib</code>，ROS安装的目录是<code>/usr/lib/aarch64-linux-gnu</code>。所以cmake构建的时候会出现多个如下关于opencv的warning，可以不用管，不会影响程序编译和运行，因为它们都是opencv 3.2.0版本。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">runtime library [libopencv_core.so.3.2] in /usr/lib/aarch64-linux-gnu may be hidden by files in:</span><br><span class="line">  /usr/local/lib</span><br></pre></td></tr></table></figure><p>当然，你也可以选择直接使用ROS携带的opencv 3.2.0，不自己重新编译安装一个版本了（其实也不需要）。</p><h4 id="3-2-4-AR代码错误（四处）"><a href="#3-2-4-AR代码错误（四处）" class="headerlink" title="3.2.4. AR代码错误（四处）"></a>3.2.4. AR代码错误（四处）</h4><p>修复了opencv版本问题后，接下来就会遇到一堆由于<code>Examples_old/ROS/ORB_SLAM3/src/AR</code>路径下的代码问题导致的错误。如果你不需要使用MonoAR也就是<strong>单目AR</strong>功能，可以直接<strong>注释掉</strong>CMakeLists文件里面71行的如下部分，跳过AR代码的编译。</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ORB_SLAM3/Examples_old/ROS/ORB_SLAM3/CMakeLists.txt</span></span><br><span class="line"><span class="comment"># Node for monocular camera (Augmented Reality Demo)</span></span><br><span class="line">rosbuild_add_executable(MonoAR</span><br><span class="line"> src/AR/ros_mono_ar.cc</span><br><span class="line"> src/AR/ViewerAR.h</span><br><span class="line"> src/AR/ViewerAR.cc</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">target_link_libraries</span>(MonoAR</span><br><span class="line"> <span class="variable">$&#123;LIBS&#125;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>注释掉之后，应该就可以成功编译其他部分了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[rosbuild] Including /opt/ros/melodic/share/roslisp/rosbuild/roslisp.cmake</span><br><span class="line">[rosbuild] Including /opt/ros/melodic/share/roscpp/rosbuild/roscpp.cmake</span><br><span class="line">[rosbuild] Including /opt/ros/melodic/share/rospy/rosbuild/rospy.cmake</span><br><span class="line">Build type: Release</span><br><span class="line">-- Using flag -std=c++11.</span><br><span class="line">-- Configuring done</span><br><span class="line">-- Generating done</span><br><span class="line">-- Build files have been written to: /work/ORB_SLAM3/Examples_old/ROS/ORB_SLAM3/build</span><br><span class="line">[  0%] Built target rospack_genmsg_libexe</span><br><span class="line">[  0%] Built target rosbuild_precompile</span><br><span class="line">[ 40%] Built target RGBD</span><br><span class="line">[ 40%] Built target Stereo</span><br><span class="line">[ 80%] Built target Mono_Inertial</span><br><span class="line">[ 80%] Built target Stereo_Inertial</span><br><span class="line">[100%] Built target Mono</span><br></pre></td></tr></table></figure><p>如果你需要MonoAR，<strong>就需要上手改代码了</strong>。参考<a href="https://github.com/UZ-SLAMLab/ORB_SLAM3/issues/442">github.com&#x2F;UZ-SLAMLab&#x2F;ORB_SLAM3&#x2F;issues&#x2F;442</a>，依次修复问题。</p><p>这部分修改很杂，你可以直接根据我的提交记录来修改：<a href="https://github.com/musnows/ORB_SLAM3/commit/4e1cbdb5b9d18e0b9eb0f07ad70595d3f274200f">Fix compile error of ROS AR, used opencv 3.2.0 for ROS compile. · musnows&#x2F;ORB_SLAM3@4e1cbdb · GitHub</a></p><hr><p>1）类型<code>Sophus::SE3&lt;float&gt;</code>和<code>cv::Mat</code>不匹配</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/work/ORB_SLAM3/Examples_old/ROS/ORB_SLAM3/src/AR/ros_mono_ar.cc: In member function &#x27;void ImageGrabber::GrabImage(const ImageConstPtr&amp;)&#x27;:</span><br><span class="line">/work/ORB_SLAM3/Examples_old/ROS/ORB_SLAM3/src/AR/ros_mono_ar.cc:151:41: error: conversion from &#x27;Sophus::SE3f &#123;aka Sophus::SE3&lt;float&gt;&#125;&#x27; to non-scalar type &#x27;cv::Mat&#x27; requested</span><br><span class="line">     cv::Mat Tcw = mpSLAM-&gt;TrackMonocular(cv_ptr-&gt;image,cv_ptr-&gt;header.stamp.toSec());</span><br><span class="line">                   ~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br><span class="line">CMakeFiles/MonoAR.dir/build.make:198: recipe for target &#x27;CMakeFiles/MonoAR.dir/src/AR/ViewerAR.cc.o&#x27; failed</span><br></pre></td></tr></table></figure><p>修改<code>ORB_SLAM3/Examples_old/ROS/ORB_SLAM3/src/AR/ros_mono_ar.cc</code>的151行，被注释掉的是源代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// cv::Mat Tcw = mpSLAM-&gt;TrackMonocular(cv_ptr-&gt;image,cv_ptr-&gt;header.stamp.toSec());</span></span><br><span class="line">cv::Mat Tcw;</span><br><span class="line">Sophus::SE3f Tcw_SE3f = mpSLAM-&gt;<span class="built_in">TrackMonocular</span>(cv_ptr-&gt;image,cv_ptr-&gt;header.stamp.<span class="built_in">toSec</span>());</span><br><span class="line">Eigen::Matrix4f Tcw_Matrix = Tcw_SE3f.<span class="built_in">matrix</span>();</span><br><span class="line">cv::<span class="built_in">eigen2cv</span>(Tcw_Matrix, Tcw);</span><br></pre></td></tr></table></figure><p>2）<code>&#39;eigen2cv&#39; is not a member of &#39;cv&#39;</code> 错误</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/work/ORB_SLAM3/Examples_old/ROS/ORB_SLAM3/src/AR/ros_mono_ar.cc:155:9: error: &#x27;eigen2cv&#x27; is not a member of &#x27;cv&#x27;</span><br><span class="line">     cv::eigen2cv(Tcw_Matrix, Tcw);</span><br><span class="line">         ^~~~~~~~</span><br><span class="line">/work/ORB_SLAM3/Examples_old/ROS/ORB_SLAM3/src/AR/ros_mono_ar.cc:155:9: note: suggested alternative: &#x27;eigen&#x27;</span><br><span class="line">     cv::eigen2cv(Tcw_Matrix, Tcw);</span><br><span class="line">         ^~~~~~~~</span><br><span class="line">         eigen</span><br></pre></td></tr></table></figure><p>在<code>ORB_SLAM3/Examples_old/ROS/ORB_SLAM3/src/AR/ros_mono_ar.cc</code>和<code>ORB_SLAM3/Examples_old/ROS/ORB_SLAM3/src/AR/ViewerAR.h</code>顶部添加三个头文件</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Eigen/Dense&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;opencv2/core/eigen.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;opencv2/opencv.hpp&gt;</span></span></span><br></pre></td></tr></table></figure><p>3）类型<code>Eigen::Matrix&lt;float, 3, 1&gt;</code>和<code>cv::Mat</code>不匹配</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/work/ORB_SLAM3/Examples_old/ROS/ORB_SLAM3/src/AR/ViewerAR.cc: In member function &#x27;void ORB_SLAM3::Plane::Recompute()&#x27;:</span><br><span class="line">/work/ORB_SLAM3/Examples_old/ROS/ORB_SLAM3/src/AR/ViewerAR.cc:530:42: error: conversion from &#x27;Eigen::Vector3f &#123;aka Eigen::Matrix&lt;float, 3, 1&gt;&#125;&#x27; to non-scalar type &#x27;cv::Mat&#x27; requested</span><br><span class="line">             cv::Mat Xw = pMP-&gt;GetWorldPos();</span><br><span class="line">                          ~~~~~~~~~~~~~~~~^~</span><br></pre></td></tr></table></figure><p>修改<code>ORB_SLAM3/Examples_old/ROS/ORB_SLAM3/src/AR/ViewerAR.cc:530</code>处代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// cv::Mat Xw = pMP-&gt;GetWorldPos();</span></span><br><span class="line">cv::Mat Xw;</span><br><span class="line">cv::<span class="built_in">eigen2cv</span>(pMP-&gt;<span class="built_in">GetWorldPos</span>(), Xw);</span><br></pre></td></tr></table></figure><p>4）尾插错误 <code>no matching function for call to &#39;std::vector&lt;cv::Mat&gt;::push_back(Eigen::Vector3f)&#39;</code></p><p>这个问题也是类型不匹配</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/work/ORB_SLAM3/Examples_old/ROS/ORB_SLAM3/src/AR/ViewerAR.cc: In member function &#x27;ORB_SLAM3::Plane* ORB_SLAM3::ViewerAR::DetectPlane(cv::Mat, const std::vector&lt;ORB_SLAM3::MapPoint*&gt;&amp;, int)&#x27;:</span><br><span class="line">/work/ORB_SLAM3/Examples_old/ROS/ORB_SLAM3/src/AR/ViewerAR.cc:405:53: error: no matching function for call to &#x27;std::vector&lt;cv::Mat&gt;::push_back(Eigen::Vector3f)&#x27;</span><br><span class="line">                 vPoints.push_back(pMP-&gt;GetWorldPos());</span><br><span class="line">                                                     ^</span><br></pre></td></tr></table></figure><p>修改<code>ORB_SLAM3/Examples_old/ROS/ORB_SLAM3/src/AR/ViewerAR.cc:405</code>的代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vPoints.push_back(pMP-&gt;GetWorldPos());</span></span><br><span class="line">cv::Mat WorldPos;</span><br><span class="line">cv::<span class="built_in">eigen2cv</span>(pMP-&gt;<span class="built_in">GetWorldPos</span>(), WorldPos);</span><br><span class="line">vPoints.<span class="built_in">push_back</span>(WorldPos);</span><br></pre></td></tr></table></figure><h3 id="3-3-成功编译"><a href="#3-3-成功编译" class="headerlink" title="3.3. 成功编译"></a>3.3. 成功编译</h3><p>修改完毕上述四个问题后，就应该可以编译成功了。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/02/ecf71dac31b76332a3415d6ea13211a2.png" alt="image.png"></p><p>编译完成后会多出很多可执行文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu-linux-22-04-02-desktop:/work/ORB_SLAM3/Examples_old/ROS/ORB_SLAM3# ls</span><br><span class="line">Asus.yaml  CMakeLists.txt  Mono  MonoAR  Mono_Inertial  RGBD  Stereo  Stereo_Inertial  build  lib  manifest.xml  src</span><br></pre></td></tr></table></figure><p>注意这些可执行文件是不能直接运行的，因为它们是针对ROS设计的文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu-linux-22-04-02-desktop:/work/ORB_SLAM3/Examples_old/ROS/ORB_SLAM3# ./Mono</span><br><span class="line">[ERROR] [1739083807.698375008]: [registerPublisher] Failed to contact master at [localhost:11311].  Retrying...</span><br><span class="line">^C</span><br><span class="line">Usage: rosrun ORB_SLAM3 Mono path_to_vocabulary path_to_settings</span><br></pre></td></tr></table></figure><h2 id="4-在ROS下运行项目"><a href="#4-在ROS下运行项目" class="headerlink" title="4. 在ROS下运行项目"></a>4. 在ROS下运行项目</h2><p>参考博客：<a href="https://zhaoxuhui.top/blog/2020/09/30/orb-slam3-cmake-ros-compilation-and-test.html">ORB-SLAM3的CMake与ROS编译以及测试</a>；<a href="https://www.jianshu.com/p/31c95d9a5f97">ORB SLAM 2 demo 复现（普通模式 + ROS 模式） - 简书</a>；</p><h3 id="4-1-下载TUM和EuRoC数据集"><a href="#4-1-下载TUM和EuRoC数据集" class="headerlink" title="4.1. 下载TUM和EuRoC数据集"></a>4.1. 下载TUM和EuRoC数据集</h3><p>因为是在ROS环境下运行，所以数据集不能用之前下载的tgz格式的了，必须使用ROS专门的bag格式的数据集。</p><ul><li>TUM RGB-D数据集：<a href="https://cvg.cit.tum.de/data/datasets/rgbd-dataset/download">cvg.cit.tum.de&#x2F;data&#x2F;datasets&#x2F;rgbd-dataset&#x2F;download</a>；</li><li>EuRoC双目数据集：<a href="http://robotics.ethz.ch/~asl-datasets/ijrr_euroc_mav_dataset/machine_hall/MH_01_easy/MH_01_easy.bag">robotics.ethz.ch&#x2F;~asl-datasets&#x2F;ijrr_euroc_mav_dataset&#x2F;machine_ha…</a></li></ul><p>在TUM数据集的下载页面中，往下滑可以看到每个数据集的简单介绍，这里就能下载到bag格式的数据集。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/02/2ec14dc5b2954aba91c9d2b437da6038.png" alt="image.png"></p><p>比如<code>fr1/desk</code>对应的rosbag文件的下载链接：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://cvg.cit.tum.de/rgbd/dataset/freiburg1/rgbd_dataset_freiburg1_desk.bag</span><br></pre></td></tr></table></figure><p>下载完毕后，可以使用rosbag info命令查看数据集中有的topic信息：</p><ul><li>Topic是一个命名的通信管道，用于在不同的ROS节点之间传递信息；</li><li>每个Topic都有一个唯一的名称，节点可以通过这个名称来订阅这个topic的信息；</li><li>Topic中的数据以message的格式传输，message是ROS中定义好的数据结构，如 <code>sensor_msgs/Image</code>、<code>geometry_msgs/Pose</code> 等；</li></ul><p>举个例子，<code>fr1/desk</code>数据集的Topic信息如下，其中depth就是深度数据，rgb就是普通的彩色录像数据。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu-linux-22-04-02-desktop:/work/ORB_SLAM3# rosbag info datasets/TUM/rgbd_dataset_freiburg1_desk.bag</span><br><span class="line">path:         datasets/TUM/rgbd_dataset_freiburg1_desk.bag</span><br><span class="line">version:      2.0</span><br><span class="line">duration:     23.8s</span><br><span class="line">start:        May 10 2011 20:44:09.56 (1305031449.56)</span><br><span class="line">end:          May 10 2011 20:44:33.32 (1305031473.32)</span><br><span class="line">size:         371.7 MB</span><br><span class="line">messages:     19893</span><br><span class="line">compression:  bz2 [1210/1210 chunks; 29.85%]</span><br><span class="line">uncompressed:   1.2 GB @ 52.3 MB/s</span><br><span class="line">compressed:   370.9 MB @ 15.6 MB/s (29.85%)</span><br><span class="line">types:        sensor_msgs/CameraInfo         [c9a58c1b0b154e0e6da7578cb991d214]</span><br><span class="line">              sensor_msgs/Image              [060021388200f6f0f447d0fcd9c64743]</span><br><span class="line">              sensor_msgs/Imu                [6a62c6daae103f4ff57a132d6f95cec2]</span><br><span class="line">              tf/tfMessage                   [94810edda583a504dfda3829e70d7eec]</span><br><span class="line">              visualization_msgs/MarkerArray [f10fe193d6fac1bf68fad5d31da421a7]</span><br><span class="line">topics:       /camera/depth/camera_info     595 msgs    : sensor_msgs/CameraInfo        </span><br><span class="line">              /camera/depth/image           595 msgs    : sensor_msgs/Image             </span><br><span class="line">              /camera/rgb/camera_info       613 msgs    : sensor_msgs/CameraInfo        </span><br><span class="line">              /camera/rgb/image_color       613 msgs    : sensor_msgs/Image             </span><br><span class="line">              /cortex_marker_array         2360 msgs    : visualization_msgs/MarkerArray</span><br><span class="line">              /imu                        11815 msgs    : sensor_msgs/Imu               </span><br><span class="line">              /tf                          3302 msgs    : tf/tfMessage</span><br></pre></td></tr></table></figure><p>而给出的EuRoC双目数据集的Topic如下，有两个cam就对应了左侧和右侧的两个相机。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu-linux-22-04-02-desktop:/work/ORB_SLAM3/datasets# rosbag info MH_01_easy.bag </span><br><span class="line">path:        MH_01_easy.bag</span><br><span class="line">version:     2.0</span><br><span class="line">duration:    3:06s (186s)</span><br><span class="line">start:       Jun 25 2014 03:02:59.81 (1403636579.81)</span><br><span class="line">end:         Jun 25 2014 03:06:06.70 (1403636766.70)</span><br><span class="line">size:        2.5 GB</span><br><span class="line">messages:    47283</span><br><span class="line">compression: none [2456/2456 chunks]</span><br><span class="line">types:       geometry_msgs/PointStamped [c63aecb41bfdfd6b7e1fac37c7cbe7bf]</span><br><span class="line">             sensor_msgs/Image          [060021388200f6f0f447d0fcd9c64743]</span><br><span class="line">             sensor_msgs/Imu            [6a62c6daae103f4ff57a132d6f95cec2]</span><br><span class="line">topics:      /cam0/image_raw    3682 msgs    : sensor_msgs/Image         </span><br><span class="line">             /cam1/image_raw    3682 msgs    : sensor_msgs/Image         </span><br><span class="line">             /imu0             36820 msgs    : sensor_msgs/Imu           </span><br><span class="line">             /leica/position    3099 msgs    : geometry_msgs/PointStamped</span><br></pre></td></tr></table></figure><p>假设我们使用自己的摄像头的话，也是利用ROS的工具将我们摄像头的数据输入到一个Topic中，这样就可以供系统的其他组件，比如SLAM系统来读取，以此实现在ROS系统上硬件输入和软件的读取。这便是使用ROS模式和普通模式的最大区别，普通模式下我们必须要直接提供程序的数据输入源，才能让程序运行起来；而ROS模式下我们可以先把整个SLAM系统启动起来，再通过我们想要的方式往SLAM系统订阅的Topic里面喂数据即可。</p><h3 id="4-2-单目运行"><a href="#4-2-单目运行" class="headerlink" title="4.2. 单目运行"></a>4.2. 单目运行</h3><p>刚刚我们下载的TUM fr1/desk的数据集，即可以用作RGB-D模式的输入，又可以做单目摄像头的输入，因为深度数据是独立于RGB单目数据的。</p><p>刚刚我们直接运行Mono的时候，就打印出了一个Usage</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu-linux-22-04-02-desktop:/work/ORB_SLAM3/Examples_old/ROS/ORB_SLAM3# ./Mono</span><br><span class="line">[ERROR] [1739083807.698375008]: [registerPublisher] Failed to contact master at [localhost:11311].  Retrying...</span><br><span class="line">^C</span><br><span class="line">Usage: rosrun ORB_SLAM3 Mono path_to_vocabulary path_to_settings</span><br></pre></td></tr></table></figure><p>我们要使用的就是这个命令，rosrun代表启动一个节点，<code>ORB_SLAM3</code>是我们当前使用的包名称，也就是CMakeLists里面注册的项目名称，Mono是我们要执行的可执行文件名称。后面的两个参数分别是词袋文件和相机的配置文件。</p><p>最终执行的命令如下，需要在两个终端中执行（在项目根目录执行）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打开终端A</span></span><br><span class="line">roscore</span><br><span class="line"><span class="comment"># 打开终端B</span></span><br><span class="line">rosrun ORB_SLAM3 Mono Vocabulary/ORBvoc.txt Examples_old/Monocular/TUM1.yaml</span><br></pre></td></tr></table></figure><p>如果执行rosrun的时候提示ORB_SLAM3找不到，则需要执行如下命令（前文提到过）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> ROS_PACKAGE_PATH=<span class="variable">$ROS_PACKAGE_PATH</span>:<span class="variable">$PWD</span>/Examples_old/ROS/ORB_SLAM3</span><br></pre></td></tr></table></figure><p>执行了之后，就会启动ORB_SLAM3的Map Viewer，此时是黑屏的，因为么有任何数据被送到ORB_SLAM3订阅的Topic中。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/02/3fb20983c6b8e63056fa3ab9f7dc80a0.png" alt="image.png"></p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/02/6f1ba02f88e3314c3040368b1af6aec9.png" alt="image.png"></p><p>再新建一个终端，执行如下命令，将TUM数据集bag文件里面的Topic绑定到ORB_SLAM3订阅的Topic上，这样就能获取到数据了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rosbag play \</span><br><span class="line">datasets/TUM/rgbd_dataset_freiburg1_desk.bag \</span><br><span class="line">/camera/rgb/image_color:=/camera/image_raw</span><br></pre></td></tr></table></figure><p>其中，最后一个参数<code>/camera/rgb/image_color:=/camera/image_raw</code>指代将bag文件中的<code>/camera/rgb/image_color</code>绑定到<code>/camera/image_raw</code>上，后者就是ORB_SLAM3订阅的相机原始数据的Topic，相当于将bag中已有的图像数据重新喂给了我们的SLAM系统。</p><p>因为ROS的Topic机制，这种喂进去的数据集和接一个摄像头得到的实时数据，对于订阅这个Topic的SLAM系统而言是完全一样的！</p><p>执行这个命令后，就能在GUI里面看到相机的数据流和SLAM的建图了</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/02/713bc539193427764c593312fd392a8e.png" alt="image.png"></p><h3 id="4-3-RGB-D运行"><a href="#4-3-RGB-D运行" class="headerlink" title="4.3. RGB-D运行"></a>4.3. RGB-D运行</h3><p>RGB-D相机也是使用相同的命令来执行，先在另外一个终端执行roscore，然后执行如下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rosrun ORB_SLAM3 RGBD Vocabulary/ORBvoc.txt Examples_old/RGB-D/TUM1.yaml</span><br></pre></td></tr></table></figure><p>刚启动的时候也是黑屏</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/02/6f1ba02f88e3314c3040368b1af6aec9.png" alt="image.png"></p><p>再开另外一个终端，开始喂我们的数据集，这里用了两个<code>:=</code>号，分别绑定了原始的RGB相机数据到<code>/camera/rgb/image_raw </code>，绑定了深度数据到<code>/camera/depth_registered/image_raw</code>上</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rosbag play \</span><br><span class="line">datasets/TUM/rgbd_dataset_freiburg1_desk.bag \</span><br><span class="line">/camera/rgb/image_color:=/camera/rgb/image_raw \</span><br><span class="line">/camera/depth/image:=/camera/depth_registered/image_raw</span><br></pre></td></tr></table></figure><p>随后GUI里面也开始显示图像了</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/02/e5a78bd10e4b6514f7ed63f02ce7dacd.png" alt="image.png"></p><p>等运行结束后，会发现此时SLAM的建图结果是不对的，所有的点都在很小的一块区域中</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/02/51dc1236b065fbedcde4273dbea37972.png" alt="image.png"></p><p>作为对比，下图为本地虚拟机在普通模式下运行时的RGB-D建图结果，很明显和上图完全不一样。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/02/fb081dc6226497056b3613b2220e9aa9.png" alt="image.png"></p><p>这是因为<code>Examples_old/RGB-D/TUM1.yaml</code>数据配置有问题。在TUM官网上提到了这两个数据集在ROS和非ROS中是不一样的，实际上这个文件里面也有注释</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deptmap values factor </span></span><br><span class="line"><span class="attr">DepthMapFactor:</span> <span class="number">5000</span> <span class="comment"># 1.0 for ROS_bag</span></span><br></pre></td></tr></table></figure><p>官网说明：<a href="https://cvg.cit.tum.de/data/datasets/rgbd-dataset/file_formats#intrinsic_camera_calibration_of_the_kinect">cvg.cit.tum.de&#x2F;data&#x2F;datasets&#x2F;rgbd-dataset&#x2F;file_formats#intrinsic…</a></p><blockquote><p><strong>Color images and depth maps</strong></p><p>We provide the time-stamped color and depth images as a gzipped tar file (TGZ).</p><ul><li>The color images are stored as 640x480 8-bit RGB images in PNG format.</li><li>The depth maps are stored as 640x480 16-bit monochrome images in PNG format.</li><li>The color and depth images are already pre-registered using the OpenNI driver from PrimeSense, i.e., the pixels in the color and depth images correspond already 1:1.</li><li>The depth images are scaled by a factor of 5000, i.e., a pixel value of 5000 in the depth image corresponds to a distance of 1 meter from the camera, 10000 to 2 meter distance, etc. A pixel value of 0 means missing value&#x2F;no data.</li></ul></blockquote><p>这里是深度值的校正系数(factor)，使用时的计算公式为<code>Z = depth_image[v,u] / factor</code>，在ROS中要把它改成1才可以。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">factor</span> <span class="string">=</span> <span class="number">5000</span> <span class="comment"># for the 16-bit PNG files</span></span><br><span class="line"><span class="string">factor</span> <span class="string">=</span> <span class="number">1</span>    <span class="comment"># for the 32-bit float images in the ROS bag files</span></span><br></pre></td></tr></table></figure><p>将DepthMapFactor修改为<code>1.0</code>之后的建图就正常一些了</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/02/e867d520f01580ce93b865cfc9b56025.png" alt="image.png"></p><h3 id="4-4-双目运行"><a href="#4-4-双目运行" class="headerlink" title="4.4. 双目运行"></a>4.4. 双目运行</h3><p>下载EuRoC对应的rosbag：<a href="http://robotics.ethz.ch/~asl-datasets/ijrr_euroc_mav_dataset/machine_hall/MH_01_easy/MH_01_easy.bag">MH_01_easy.bag</a>，上文已经给出过该数据集对应的Topic了，其中要用到的 Topic 是左右两个摄像头的数据 <code>/cam0/image_raw</code> 和 <code>/cam1/image_raw</code>。ORB_SLAM3 中双目 Stereo 接收的 Topic 分别为 <code>/camera/left/image_raw</code> 和 <code>/camera/right/image_raw</code>，因此在运行时也需要绑定一下 Topic。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">topics:      /cam0/image_raw    3682 msgs    : sensor_msgs/Image         </span><br><span class="line">             /cam1/image_raw    3682 msgs    : sensor_msgs/Image         </span><br><span class="line">             /imu0             36820 msgs    : sensor_msgs/Imu           </span><br><span class="line">             /leica/position    3099 msgs    : geometry_msgs/PointStamped</span><br></pre></td></tr></table></figure><p>双目的rosrun命令最后多了一个bool类型参数<code>do_rectify</code>，含义为是否进行矫正，根据需要选择true或false。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Usage: rosrun ORB_SLAM3 Stereo path_to_vocabulary path_to_settings do_rectify</span><br></pre></td></tr></table></figure><p>执行如下命令，先启动Stereo双目模式下的SLAM，然后开始播放数据集，同样是使用<code>:=</code>分别绑定左侧和右侧两个摄像头的数据。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 终端a</span></span><br><span class="line">roscore</span><br><span class="line"><span class="comment"># 终端b</span></span><br><span class="line">rosrun ORB_SLAM3 Stereo Vocabulary/ORBvoc.txt Examples_old/Stereo/EuRoC.yaml <span class="literal">true</span></span><br><span class="line"><span class="comment"># 终端c</span></span><br><span class="line">rosbag play MH_01_easy.bag /cam0/image_raw:=/camera/left/image_raw /cam1/image_raw:=/camera/right/image_raw</span><br></pre></td></tr></table></figure><p>也是成功运行起来了</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/02/4532d161bce1a806b99e91a7f55c5097.png" alt="image.png"></p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/02/fa1f127cf0f7c119d434b75416c9f6c1.png" alt="image.png"></p><h2 id="5-The-end"><a href="#5-The-end" class="headerlink" title="5. The end"></a>5. The end</h2><p>本文介绍了如何在ROS环境下编译ORB_SLAM3，并使用TUM和EuRoC数据集测试单目、双目、RGB-D三种模式在ROS下运行的效果。希望对你有帮助！</p><p>更新：ORB_SLAM2的ROS运行命令和本文记录的完全一致，只需要把rosrun里面的包名改成ORB_SLAM2就可以了。下图是在ROS模式下运行ORB_SLAM2的RGB-D的截图。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/02/269ace5a14d78815e436b9633e0cd435.png" alt="image.png"></p>]]></content>
    
    
    <summary type="html">在 ubuntu 18.04 arm 中于ROS环境编译与运行ORB_SLAM3，并以TUM数据集测试了ROS下单目、双目和RGB-D运行</summary>
    
    
    
    <category term="编程学习" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="项目开发记录" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="Linux" scheme="https://blog.musnow.top/tags/Linux/"/>
    
    <category term="Cpp" scheme="https://blog.musnow.top/tags/Cpp/"/>
    
    <category term="SLAM" scheme="https://blog.musnow.top/tags/SLAM/"/>
    
  </entry>
  
  <entry>
    <title>【SLAM】在 ubuntu 18.04 arm 容器中安装ROS环境</title>
    <link href="https://blog.musnow.top/posts/3771271576/"/>
    <id>https://blog.musnow.top/posts/3771271576/</id>
    <published>2025-02-09T05:06:07.000Z</published>
    <updated>2025-03-08T05:25:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>在ubuntu 18.04 arm（docker容器）中安装ROS环境。本文所使用的ROS安装命令实测可用于<strong>ubuntu 18.04 amd64</strong>的设备。</p><h2 id="1-简述"><a href="#1-简述" class="headerlink" title="1. 简述"></a>1. 简述</h2><p>由于本人对ROS并不是特别了解，这里就不引入ROS的背景介绍了。</p><p>ROS的安装主要基于官网的教程，先选择你当前使用的ubuntu版本对应的ROS，然后根据具体版本的ROS官方教程来安装就可以了。</p><p>先打开ROS官网：<a href="https://wiki.ros.org/cn">cn - ROS Wiki</a>。</p><p>选择“安装”，会进入如下页面，这里会提示你不同版本的ROS以及推荐安装的ubuntu系统。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/02/0fd67ca21e085e04f3ab28ed1c4f0b5d.png" alt="image.png"></p><p>因为我当前使用的是ubuntu18.04，所以选择ROS Melodic Morenia这一发行版。点进去后可以看到这里列出来了支持的操作系统和对应的架构版本，我们当前使用的 ubuntu 18.04 对应的发行版本代号是Bionic，这个版本的ROS是支持arm64架构的。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/02/6927cfd276dbb15ba32d8ea56c04c509.png" alt="image.png"></p><p>点击ubuntu链接，就会跳转到 ubuntu 18.04 上安装ROS的教程了：<a href="https://wiki.ros.org/cn/melodic/Installation/Ubuntu">cn&#x2F;melodic&#x2F;Installation&#x2F;Ubuntu - ROS Wiki</a>。</p><p>跟着教程一步一来，本文主要记录遇到过的坑。</p><h2 id="2-安装ROS"><a href="#2-安装ROS" class="headerlink" title="2. 安装ROS"></a>2. 安装ROS</h2><h3 id="2-1-配置软件源"><a href="#2-1-配置软件源" class="headerlink" title="2.1. 配置软件源"></a>2.1. 配置软件源</h3><p>官网给出了两个软件源的命令，一个是官方的源，另外一个是国内清华源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 官方源</span></span><br><span class="line">sudo sh -c <span class="string">&#x27;echo &quot;deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main&quot; &gt; /etc/apt/sources.list.d/ros-latest.list&#x27;</span></span><br><span class="line"><span class="comment"># 清华源</span></span><br><span class="line">sudo sh -c <span class="string">&#x27;. /etc/lsb-release &amp;&amp; echo &quot;deb http://mirrors.tuna.tsinghua.edu.cn/ros/ubuntu/ `lsb_release -cs` main&quot; &gt; /etc/apt/sources.list.d/ros-latest.list&#x27;</span></span><br></pre></td></tr></table></figure><p>这里推荐直接使用国内的清华源。执行这个命令之后就会遇到第一个错误，环境中缺少<code>lsb_release</code>命令。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu-linux-22-04-02-desktop:/work# lsb_release -sc</span><br><span class="line">bash: lsb_release: command not found</span><br></pre></td></tr></table></figure><p>需要apt安装<code>lsb-release</code>包，执行<code>apt-get install lsb-release</code>命令即可。安装了之后就可以使用<code>lsb_release</code>命令了，命令的作用是显示当前发行版的名称，前文已经提到了ubuntu 18.04是bionic。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu-linux-22-04-02-desktop:/work# lsb_release -sc</span><br><span class="line">bionic</span><br></pre></td></tr></table></figure><p>安装了该软件包后，重新执行上述添加软件源的命令。注意如果你刚刚已经执行了命令，则会得到一个有问题的软件源文件，<strong>需要删掉文件，再重新添加</strong>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先删除原本的文件（因为命令不存在导致源有问题）</span></span><br><span class="line"><span class="built_in">rm</span> -rf /etc/apt/sources.list.d/ros-latest.list</span><br><span class="line"><span class="comment"># 重新添加清华源</span></span><br><span class="line">sudo sh -c <span class="string">&#x27;. /etc/lsb-release &amp;&amp; echo &quot;deb http://mirrors.tuna.tsinghua.edu.cn/ros/ubuntu/ `lsb_release -cs` main&quot; &gt; /etc/apt/sources.list.d/ros-latest.list&#x27;</span></span><br></pre></td></tr></table></figure><p>随后还需要执行命令添加一下密钥（不管是清华源还是官方源都是这个命令）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-key adv --keyserver <span class="string">&#x27;hkp://keyserver.ubuntu.com:80&#x27;</span> --recv-key C1CF6E31E6BADE8868B172B4F42ED6FBAB17C654</span><br></pre></td></tr></table></figure><p>随后更新一下软件源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get -y update</span><br></pre></td></tr></table></figure><h3 id="2-2-安装ROS的不同版本的命令"><a href="#2-2-安装ROS的不同版本的命令" class="headerlink" title="2.2. 安装ROS的不同版本的命令"></a>2.2. 安装ROS的不同版本的命令</h3><p>现在软件源已经更新好了，可以根据自己的需要安装不同版本的ros了。官网给出了下面四种不同的命令，这里我直接选了第一个安装了完整版。</p><p><strong>桌面完整版（推荐）：</strong>  : 包含 ROS、<a href="https://wiki.ros.org/rqt">rqt</a>、<a href="https://wiki.ros.org/rviz">rviz</a>、机器人通用库、2D&#x2F;3D 模拟器、导航以及 2D&#x2F;3D 感知包。或 <a href="apt:ros-melodic-desktop-full?refresh=yes">单击这里</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install ros-melodic-desktop-full</span><br></pre></td></tr></table></figure><p><strong>桌面版：</strong>   包含 ROS，<a href="https://wiki.ros.org/rqt">rqt</a>，<a href="https://wiki.ros.org/rviz">rviz</a> 和机器人通用库，或 <a href="apt:ros-melodic-desktop?refresh=yes">单击这里</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install ros-melodic-desktop</span><br></pre></td></tr></table></figure><p><strong>ROS-基础包：</strong>  包含 ROS 包，构建和通信库。没有图形界面工具。或 <a href="apt:ros-melodic-ros-base?refresh=yes">单击这里</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install ros-melodic-ros-base</span><br></pre></td></tr></table></figure><p><strong>单独的包：</strong>  你也可以安装某个指定的ROS软件包（使用软件包名称替换掉下面的PACKAGE）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install ros-melodic-PACKAGE</span><br></pre></td></tr></table></figure><p>如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install ros-melodic-slam-gmapping</span><br></pre></td></tr></table></figure><p>完整版需要安装的东西很多，耐心等待一下。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/02/a6f8b7db264e501d9f9a1ee61dc76de3.png" alt="image.png"></p><p>在安装的途中，会弹出两次让你选择tzdata的弹窗，直接选择GMT+8或者<code>Asia/Shanghai</code>就可以了。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/02/c7da389a7940c44845993c902a7ff481.png" alt="image.png"></p><h3 id="2-3-ROS初始化"><a href="#2-3-ROS初始化" class="headerlink" title="2.3. ROS初始化"></a>2.3. ROS初始化</h3><p>随后依照官网的教程，使用<code>sudo rosdep init</code>命令来初始化ros系统。</p><p>注意，rosdep命令是不会跟随上面的完整桌面版包一起安装的，需要我们手动安装一下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install python-rosdep</span><br></pre></td></tr></table></figure><p>第一次执行<code>rosdep init</code>的时候，遇到了网络问题（http错误），通过<code>apt install iputils-ping</code>安装了ping命令，发现<code>raw.githubusercontent.com</code>域名走了<code>127.0.0.1</code>，延迟低于1ms，肯定是不对的。</p><p>最开始我以为它是走了错误的代理，但是ping了github.com是没有问题的，所以问题在DNS解析上。解决方案采用了最粗暴的方式，直接将<code>raw.githubusercontent.com</code>域名的IP写入了<code>/etc/hosts</code>文件，避免修改系统的DNS设置。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">185.199.109.133 raw.githubusercontent.com</span><br></pre></td></tr></table></figure><p>修改了之后，<code>ping raw.githubusercontent.com</code> 正常了</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/02/fffebeaf3d3d08eb4f7cd9c97982989c.png" alt="image.png"></p><p>随后就能正常执行rosdep初始化命令了。命令执行输出如下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu-linux-22-04-02-desktop:/# rosdep init</span><br><span class="line">Wrote /etc/ros/rosdep/sources.list.d/20-default.list</span><br><span class="line">Recommended: please run</span><br><span class="line"></span><br><span class="line">rosdep update</span><br><span class="line"></span><br><span class="line">root@ubuntu-linux-22-04-02-desktop:/# rosdep update    </span><br><span class="line">reading in sources list data from /etc/ros/rosdep/sources.list.d</span><br><span class="line">Warning: running &#x27;rosdep update&#x27; as root is not recommended.</span><br><span class="line">  You should run &#x27;sudo rosdep fix-permissions&#x27; and invoke &#x27;rosdep update&#x27; again without sudo.</span><br><span class="line">Hit https://raw.githubusercontent.com/ros/rosdistro/master/rosdep/osx-homebrew.yaml</span><br><span class="line">Hit https://raw.githubusercontent.com/ros/rosdistro/master/rosdep/base.yaml</span><br><span class="line">Hit https://raw.githubusercontent.com/ros/rosdistro/master/rosdep/python.yaml</span><br><span class="line">Hit https://raw.githubusercontent.com/ros/rosdistro/master/rosdep/ruby.yaml</span><br><span class="line">Hit https://raw.githubusercontent.com/ros/rosdistro/master/releases/fuerte.yaml</span><br><span class="line">Query rosdistro index https://raw.githubusercontent.com/ros/rosdistro/master/index-v4.yaml</span><br><span class="line">Skip end-of-life distro &quot;ardent&quot;</span><br><span class="line">Skip end-of-life distro &quot;bouncy&quot;</span><br><span class="line">Skip end-of-life distro &quot;crystal&quot;</span><br><span class="line">Skip end-of-life distro &quot;dashing&quot;</span><br><span class="line">Skip end-of-life distro &quot;eloquent&quot;</span><br><span class="line">Skip end-of-life distro &quot;foxy&quot;</span><br><span class="line">Skip end-of-life distro &quot;galactic&quot;</span><br><span class="line">Skip end-of-life distro &quot;groovy&quot;</span><br><span class="line">Add distro &quot;humble&quot;</span><br><span class="line">Skip end-of-life distro &quot;hydro&quot;</span><br><span class="line">Skip end-of-life distro &quot;indigo&quot;</span><br><span class="line">Skip end-of-life distro &quot;iron&quot;</span><br><span class="line">Skip end-of-life distro &quot;jade&quot;</span><br><span class="line">Add distro &quot;jazzy&quot;</span><br><span class="line">Skip end-of-life distro &quot;kinetic&quot;</span><br><span class="line">Skip end-of-life distro &quot;lunar&quot;</span><br><span class="line">Skip end-of-life distro &quot;melodic&quot;</span><br><span class="line">Add distro &quot;noetic&quot;</span><br><span class="line">Add distro &quot;rolling&quot;</span><br><span class="line">updated cache in /root/.ros/rosdep/sources.cache</span><br></pre></td></tr></table></figure><h3 id="2-4-设置环境"><a href="#2-4-设置环境" class="headerlink" title="2.4. 设置环境"></a>2.4. 设置环境</h3><p>如果你用的是bash，执行如下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;source /opt/ros/melodic/setup.bash&quot;</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure><p>如果是zsh，执行如下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;source /opt/ros/melodic/setup.zsh&quot;</span> &gt;&gt; ~/.zshrc</span><br><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure><p>如果你不想让ROS环境始终生效，可以使用如下命令暂时在当前bash生效。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> /opt/ros/melodic/setup.bash</span><br></pre></td></tr></table></figure><p>注意：如果你不只安装了一个 ROS 发行版， <code>~/.bashrc</code> 只能使用你需要的 ROS 版本的 setup.bash脚本。</p><h3 id="2-5-ROS工具依赖"><a href="#2-5-ROS工具依赖" class="headerlink" title="2.5. ROS工具依赖"></a>2.5. ROS工具依赖</h3><p>rosinstall是一个常用的命令行工具，用于下载众多ROS包的 source tree。</p><p>可以通过下面的命令安装这个工具。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install -y \</span><br><span class="line">python-rosinstall \</span><br><span class="line">python-rosinstall-generator \</span><br><span class="line">python-wstool build-essential</span><br></pre></td></tr></table></figure><h2 id="3-确认安装是否成功"><a href="#3-确认安装是否成功" class="headerlink" title="3. 确认安装是否成功"></a>3. 确认安装是否成功</h2><h3 id="3-1-roscore命令"><a href="#3-1-roscore命令" class="headerlink" title="3.1. roscore命令"></a>3.1. roscore命令</h3><p>到这里，我们的ROS安装就完成了，可以使用<code>roscore</code>命令来确定ros是否成功安装，出现如下输出即为安装成功。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu-linux-22-04-02-desktop:/# roscore</span><br><span class="line">... logging to /root/.ros/log/cfad45ce-e696-11ef-bdf0-001c42a84d93/roslaunch-ubuntu-linux-22-04-02-desktop-522.log</span><br><span class="line">Checking log directory for disk usage. This may take a while.</span><br><span class="line">Press Ctrl-C to interrupt</span><br><span class="line">Done checking log file disk usage. Usage is &lt;1GB.</span><br><span class="line"></span><br><span class="line">started roslaunch server http://ubuntu-linux-22-04-02-desktop:38385/</span><br><span class="line">ros_comm version 1.14.13</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">SUMMARY</span><br><span class="line">========</span><br><span class="line"></span><br><span class="line">PARAMETERS</span><br><span class="line"> * /rosdistro: melodic</span><br><span class="line"> * /rosversion: 1.14.13</span><br><span class="line"></span><br><span class="line">NODES</span><br><span class="line"></span><br><span class="line">auto-starting new master</span><br><span class="line">process[master]: started with pid [536]</span><br><span class="line">ROS_MASTER_URI=http://ubuntu-linux-22-04-02-desktop:11311/</span><br><span class="line"></span><br><span class="line">setting /run_id to cfad45ce-e696-11ef-bdf0-001c42a84d93</span><br><span class="line">process[rosout-1]: started with pid [547]</span><br><span class="line">started core service [/rosout]</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/02/c3c69f410aa5adf78b2391d069cf2ff1.png" alt="image.png"></p><h3 id="3-2-可能遇到的问题"><a href="#3-2-可能遇到的问题" class="headerlink" title="3.2. 可能遇到的问题"></a>3.2. 可能遇到的问题</h3><p>执行roscore命令的时候可能遇到如下问题，报错的重点是Permission denied缺少权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">king@ubuntu:~/slam/pkg$ roscore</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;/opt/ros/melodic/lib/python2.7/dist-packages/roslaunch/__init__.py&quot;, line 290, in main</span><br><span class="line">    write_pid_file(options.pid_fn, options.core, options.port)</span><br><span class="line">  File &quot;/opt/ros/melodic/lib/python2.7/dist-packages/roslaunch/__init__.py&quot;, line 112, in write_pid_file</span><br><span class="line">    with open(pid_fn, &quot;w&quot;) as f:</span><br><span class="line">IOError: [Errno 13] Permission denied: &#x27;/home/king/.ros/roscore-11311.pid&#x27;</span><br></pre></td></tr></table></figure><p>这个权限缺少并不是因为没有加sudo导致的，因为这个目录就是我们当前子用户的目录。</p><p>解决方案是修改这个目录的权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">chmod</span> -R 777 /home/king/.ros/</span><br></pre></td></tr></table></figure><p>随后就可以正常启动roscore了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">king@ubuntu:~/slam/pkg$ roscore</span><br><span class="line">WARNING: cannot create log directory [/home/king/.ros/log/4322bfb0-f665-11ef-8ac7-000c29839929]. Please set ROS_LOG_DIR to a writable location.</span><br><span class="line">Checking log directory for disk usage. This may take a while.</span><br><span class="line">Press Ctrl-C to interrupt</span><br><span class="line">Done checking log file disk usage. Usage is &lt;1GB.</span><br><span class="line"></span><br><span class="line">started roslaunch server http://ubuntu:40095/</span><br><span class="line">ros_comm version 1.14.13</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">SUMMARY</span><br><span class="line">========</span><br><span class="line"></span><br><span class="line">PARAMETERS</span><br><span class="line"> * /rosdistro: melodic</span><br><span class="line"> * /rosversion: 1.14.13</span><br><span class="line"></span><br><span class="line">NODES</span><br><span class="line"></span><br><span class="line">auto-starting new master</span><br><span class="line">process[master]: started with pid [111860]</span><br><span class="line">ROS_MASTER_URI=http://ubuntu:11311/</span><br><span class="line"></span><br><span class="line">setting /run_id to 4322bfb0-f665-11ef-8ac7-000c29839929</span><br><span class="line">process[rosout-1]: started with pid [111878]</span><br><span class="line">started core service [/rosout]</span><br></pre></td></tr></table></figure><h2 id="4-The-end"><a href="#4-The-end" class="headerlink" title="4. The end"></a>4. The end</h2><p>至此，ROS安装完毕啦！</p>]]></content>
    
    
    <summary type="html">在 ubuntu 18.04 arm（docker容器）中安装ROS环境</summary>
    
    
    
    <category term="编程学习" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="项目开发记录" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="Linux" scheme="https://blog.musnow.top/tags/Linux/"/>
    
    <category term="ubuntu" scheme="https://blog.musnow.top/tags/ubuntu/"/>
    
    <category term="SLAM" scheme="https://blog.musnow.top/tags/SLAM/"/>
    
  </entry>
  
  <entry>
    <title>【Linux】解决使用apt时“unable to initialize frontend: Dialog”的警告</title>
    <link href="https://blog.musnow.top/posts/4540337725/"/>
    <id>https://blog.musnow.top/posts/4540337725/</id>
    <published>2025-02-08T09:39:23.000Z</published>
    <updated>2025-02-09T09:42:30.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>解决使用apt时“unable to initialize frontend: Dialog”的警告。</p></blockquote><p>最近在ubuntu 18.04里面执行apt命令的时候总是遇到如下警告</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">debconf: unable to initialize frontend: Dialog</span><br><span class="line">debconf: (No usable dialog-like program is installed, so the dialog based frontend cannot be used. at /usr/share/perl5/Debconf/FrontEnd/Dialog.pm line 76, &lt;&gt; line 2.)</span><br></pre></td></tr></table></figure><p>其实也算不上警告吧，但是总是弹出来，还带了个unable字样，多半是哪里有点问题。</p><p>搜索了一下相关信息，是因为缺少了一个包，安装一下就可以了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install -y dialog</span><br></pre></td></tr></table></figure><p>安装完毕之后，使用apt的时候就不会出现上述警告了。</p>]]></content>
    
    
    <summary type="html">解决使用apt时“unable to initialize frontend: Dialog”的警告</summary>
    
    
    
    <category term="编程学习" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="Linux" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/Linux/"/>
    
    
    <category term="Linux" scheme="https://blog.musnow.top/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>【SLAM】在本地虚拟机和AutoDL云端环境以TUM-RGBD数据集运行ORB_SLAM3</title>
    <link href="https://blog.musnow.top/posts/7873538113/"/>
    <id>https://blog.musnow.top/posts/7873538113/</id>
    <published>2025-02-04T00:36:23.000Z</published>
    <updated>2025-02-09T08:49:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>在本地虚拟机和AutoDL云端环境运行ORB_SLAM3的介绍。</p><h2 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1. 介绍"></a>1. 介绍</h2><p>ORB-SLAM3是西班牙萨拉戈萨大学于2020年7月中旬开源的作品，与ORB-SLAM、ORB-SLAM2一脉相承，是一个能够使用单目、立体、RGB-D相机，兼容针孔及鱼眼相机模型进行视觉、视觉+惯导和多地图的综合性SLAM方案。</p><ul><li>论文：<a href="https://arxiv.org/abs/2007.11898">ORB-SLAM3: An Accurate Open-Source Library for Visual, Visual-Inertial and Multi-Map SLAM</a>;</li><li>源码：<a href="https://github.com/UZ-SLAMLab/ORB_SLAM3">github.com&#x2F;UZ-SLAMLab&#x2F;ORB_SLAM3</a></li></ul><p>本文不关注ORB-SLAM3的理论实现，仅记录如何在本地环境中运行ORB-SLAM3。</p><p>更多参考资料：</p><ul><li><a href="https://blog.csdn.net/weixin_45947476/article/details/123595935">ORB-SLAM3论文详细解读_orbslam3论文-CSDN博客</a>；</li><li><a href="https://blog.csdn.net/hhaowang/article/details/117318737">ORB-SLAM3技术详解（1）简介与论文解读_西班牙zaragoza大学于2020年7月最新开源了orb-slam3的论文和源码-CSDN博客</a>；</li><li><a href="https://blog.csdn.net/m0_37605642/article/details/134016846">ORB-SLAM系列算法相关介绍（综合版）_orb slam-CSDN博客</a>；</li></ul><p>因为之前折腾过GCNv2-SLAM，在本地运行ORB-SLAM3比GCNv2-SLAM更简单。</p><h2 id="2-依赖安装"><a href="#2-依赖安装" class="headerlink" title="2. 依赖安装"></a>2. 依赖安装</h2><p>ORB-SLAM3的依赖项和GCNv2几乎完全一致，且ORB-SLAM3不需要PyTorch，依赖项如下所示：</p><ul><li>opencv大于3.0版本；</li><li>eigen3大于3.1.0版本；</li><li>Pangolin没有版本要求，用6.0没问题；</li><li>需要<code>libpython2.7-dev</code>包；</li></ul><p>ubuntu18.04系统安装依赖项可以参考我先前编写的GCNv2博客：</p><ul><li><a href="https://blog.musnow.top/posts/1589125738/">【SLAM】于ubuntu18.04上纯CPU运行GCNv2_SLAM的记录（ARM64&#x2F;AMD64） | 慕雪的寒舍</a>；</li><li><a href="https://blog.musnow.top/posts/1071165018/">【SLAM】于AutoDL云上GPU运行GCNv2_SLAM的记录 | 慕雪的寒舍</a>；</li></ul><p>参考博客里面的步骤安装opencv、eigen3、Pangolin6.0就可以了，不需要安装libtorch。</p><p>如果你想使用AutoDL云端环境运行，选择2080ti的PyTorch1.5.1版本镜像即可。</p><h2 id="3-编译项目"><a href="#3-编译项目" class="headerlink" title="3. 编译项目"></a>3. 编译项目</h2><p>项目的编译非常简单，安装好所有依赖项后，直接使用根目录下的build.sh脚本编译就可以了，不需要修改该脚本。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/UZ-SLAMLab/ORB_SLAM3.git ORB_SLAM3</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> ORB_SLAM3</span><br><span class="line"><span class="built_in">chmod</span> +x build.sh</span><br><span class="line">./build.sh</span><br></pre></td></tr></table></figure><p>初次编译的时候，会遇到如下cmake告警，提示需要opencv 4.4版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">CMake Warning at CMakeLists.txt:33 (find_package):</span><br><span class="line">  Could not find a configuration file for package &quot;OpenCV&quot; that is compatible</span><br><span class="line">  with requested version &quot;4.4&quot;.</span><br><span class="line"></span><br><span class="line">  The following configuration files were considered but not accepted:</span><br><span class="line"></span><br><span class="line">    /usr/local/share/OpenCV/OpenCVConfig.cmake, version: 3.4.5</span><br><span class="line">    /usr/share/OpenCV/OpenCVConfig.cmake, version: 3.2.0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">CMake Error at CMakeLists.txt:35 (message):</span><br><span class="line">  OpenCV &gt; 4.4 not found.</span><br></pre></td></tr></table></figure><p>但实际上Github的项目README里面已经说了只需要opencv大于3.0版本就可以了。根据Github Issue：<a href="https://github.com/UZ-SLAMLab/ORB_SLAM3/issues/456">github.com&#x2F;UZ-SLAMLab&#x2F;ORB_SLAM3&#x2F;issues&#x2F;456</a>，直接修改项目根目录下的<code>CMakeLists.txt</code>文件就能解决此问题，将如下部分从4.4改成3.4即可。</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">find_package</span>(OpenCV <span class="number">3.4</span>)</span><br><span class="line">   <span class="keyword">if</span>(<span class="keyword">NOT</span> OpenCV_FOUND)</span><br><span class="line">      <span class="keyword">message</span>(FATAL_ERROR <span class="string">&quot;OpenCV &gt; 3.4 not found.&quot;</span>)</span><br><span class="line">   <span class="keyword">endif</span>()</span><br></pre></td></tr></table></figure><p>修改了之后，需要先删除刚刚的编译缓存，重新运行脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rm</span> -rf Thirdparty/g2o/build/</span><br><span class="line"><span class="built_in">rm</span> -rf Thirdparty/DBoW2/build/</span><br><span class="line"><span class="built_in">rm</span> -rf Thirdparty/Sophus/build/</span><br><span class="line"><span class="built_in">rm</span> -rf Vocabulary/*.bin</span><br><span class="line"><span class="built_in">rm</span> -rf ./build</span><br></pre></td></tr></table></figure><p>AutoDL云端环境正常编译通过</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/02/907029347552b7f2d693eaeced1f865e.png" alt="image.png"></p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/02/32a03247e02290a884a86a8584e3a60d.png" alt="image.png"></p><p>本地arm64虚拟机ubuntu 18.04 docker容器内也能正常编译</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/02/ab0369af6d4ce3e2453b6fddb247f759.png" alt="image.png"></p><h2 id="4-使用TUM-RGB-D数据集运行项目"><a href="#4-使用TUM-RGB-D数据集运行项目" class="headerlink" title="4. 使用TUM RGB-D数据集运行项目"></a>4. 使用TUM RGB-D数据集运行项目</h2><h3 id="4-1-下载和处理数据集"><a href="#4-1-下载和处理数据集" class="headerlink" title="4.1. 下载和处理数据集"></a>4.1. 下载和处理数据集</h3><p>这里需要的操作和GCNv2是一样的，下载了RGB-D数据集后需要用python脚本处理一下。</p><p>下载地址：<a href="https://cvg.cit.tum.de/data/datasets/rgbd-dataset/download">cvg.cit.tum.de&#x2F;data&#x2F;datasets&#x2F;rgbd-dataset&#x2F;download</a></p><p>下载<code>fr1/desk</code>数据集，这是一个桌子的RGBD数据</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/01/6ebeb1fe9366e07ea5dd7f0697b72d4f.png" alt="image.png"></p><p>在GCNv2_SLAM工程下新建<code>datasets/TUM</code>,将数据集下载到其中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 新建datasets/TUM数据集文件夹</span></span><br><span class="line"><span class="built_in">mkdir</span> -p datasets/TUM </span><br><span class="line"><span class="built_in">cd</span> datasets/TUM</span><br><span class="line"><span class="comment"># 下载数据集到datasets/TUM文件夹内</span></span><br><span class="line">wget -O rgbd_dataset_freiburg1_desk.tgz https://cvg.cit.tum.de/rgbd/dataset/freiburg1/rgbd_dataset_freiburg1_desk.tgz</span><br><span class="line"><span class="comment"># 解压数据集</span></span><br><span class="line">tar -xvf rgbd_dataset_freiburg1_desk.tgz</span><br></pre></td></tr></table></figure><p>然后还需要下载一个<code>associate.py</code>脚本来处理一下数据集才能正常运行</p><p>下载地址：<a href="https://svncvpr.in.tum.de/cvpr-ros-pkg/trunk/rgbd_benchmark/rgbd_benchmark_tools/src/rgbd_benchmark_tools/associate.py">svncvpr.in.tum.de</a>，同时在<a href="https://github.com/musnows/GCNv2_SLAM/blob/86c1efc0cc6c40669df20c0a62017815e18771b7/docker/associate.py">我的Github仓库</a>也做了留档。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -O associate.py https://svncvpr.in.tum.de/cvpr-ros-pkg/trunk/rgbd_benchmark/rgbd_benchmark_tools/src/rgbd_benchmark_tools/associate.py</span><br></pre></td></tr></table></figure><p>这个脚本只能用python2运行，需要下载numpy库。注意AutoDL的环境中python绑定到了python3，环境中的python2被拦掉了，所以需要安装独立的python2命令来运行python2。</p><p>在Pytorch1.5.1版本的AutoDL镜像中，可以直接使用下面的命令来安装python2和pip2：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install -y python-dev python-pip</span><br></pre></td></tr></table></figure><blockquote><p>安装了以后，云端AutoDL环境需要使用python2和pip2命令，本地虚拟机中使用python和pip命令就可以了（本地的python和pip命令一般绑定的都是python2）</p></blockquote><p>随后安装numpy库就ok了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">root@autodl-container-e39d46b8d3-01da7b14:~/autodl-tmp/GCNv2_SLAM/datasets/TUM# pip2 install numpy</span><br><span class="line">DEPRECATION: Python 2.7 reached the end of its life on January 1st, 2020. Please upgrade your Python as Python 2.7 is no longer maintained. pip 21.0 will drop support for Python 2.7 in January 2021. More details about Python 2 support in pip can be found at https://pip.pypa.io/en/latest/development/release-process/#python-2-support pip 21.0 will remove support for this functionality.</span><br><span class="line">Looking in indexes: http://mirrors.aliyun.com/pypi/simple</span><br><span class="line">Collecting numpy</span><br><span class="line">  Downloading http://mirrors.aliyun.com/pypi/packages/3a/5f/47e578b3ae79e2624e205445ab77a1848acdaa2929a00eeef6b16eaaeb20/numpy-1.16.6-cp27-cp27mu-manylinux1_x86_64.whl (17.0 MB)</span><br><span class="line">     |████████████████████████████████| 17.0 MB 21.1 MB/s </span><br><span class="line">Installing collected packages: numpy</span><br><span class="line">Successfully installed numpy-1.16.6</span><br></pre></td></tr></table></figure><p>执行脚本来处理两个文件，在数据文件夹里执行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python2 associate.py rgbd_dataset_freiburg1_desk/rgb.txt rgbd_dataset_freiburg1_desk/depth.txt &gt; rgbd_dataset_freiburg1_desk/associate.txt</span><br></pre></td></tr></table></figure><p>执行python命令后可以看看合并成功了没有，如下应该就是没问题了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1305031472.895713 rgb/1305031472.895713.png 1305031472.892944 depth/1305031472.892944.png</span><br><span class="line">1305031472.927685 rgb/1305031472.927685.png 1305031472.924814 depth/1305031472.924814.png</span><br><span class="line">1305031472.963756 rgb/1305031472.963756.png 1305031472.961213 depth/1305031472.961213.png</span><br></pre></td></tr></table></figure><p>在同一个网站下载的其他TUM数据集也需要用相同的方式进行处理。</p><p>更新：突然发现其实在<code>ORB_SLAM3/Examples/RGB-D/associations</code>目录里面已经有处理好的文件了。但是这不代表不需要下载数据集，依旧需要下载TUM数据集获取原始的图像文件。</p><h3 id="4-2-运行项目"><a href="#4-2-运行项目" class="headerlink" title="4.2. 运行项目"></a>4.2. 运行项目</h3><p>在项目根目录下，使用如下命令运行项目，最后两个参数指向数据集的路径以及数据集整理后的<code>associate.txt</code>文件路径。第三个参数<code>TUM1.yaml</code>对应我们下载的freiburg1数据集。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">./Examples/RGB-D/rgbd_tum \</span><br><span class="line">    ./Vocabulary/ORBvoc.txt \</span><br><span class="line">    ./Examples/RGB-D/TUM1.yaml \</span><br><span class="line">    ./datasets/TUM/rgbd_dataset_freiburg1_desk \</span><br><span class="line">    ./datasets/TUM/rgbd_dataset_freiburg1_desk/associate.txt</span><br></pre></td></tr></table></figure><p>注意，最后两个参数一定要填对，如果你填写了错误的目录或文件名，执行命令后程序会阻塞，不会有任何有效输出（第一次运行的时候我就填错目录了，一直阻塞在那里，傻等了好久）</p><p>正常情况下，项目运行输出如下</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/02/a7fd2ea5ca2df3e3eedb44f18fb28660.png" alt="image.png"></p><h3 id="4-3-AutoDL云端运行"><a href="#4-3-AutoDL云端运行" class="headerlink" title="4.3. AutoDL云端运行"></a>4.3. AutoDL云端运行</h3><p>云端运行，VNC中能正常显示画面</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/02/081d1078f247d6de3efc232436fd7ef0.png" alt="image.png"></p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/02/d981c22438e163a0519b6446fcac1ef9.png" alt="image.png"></p><p>AutoDL云端运行后的输出如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">[root@autodl-container-0d454391d6-b3b7582b:~/gcn/ORB_SLAM3]$ ./Examples/RGB-D/rgbd_tum \</span><br><span class="line">&gt;     ./Vocabulary/ORBvoc.txt \</span><br><span class="line">&gt;     ./Examples/RGB-D/TUM1.yaml \</span><br><span class="line">&gt;     ./datasets/TUM/rgbd_dataset_freiburg1_desk \</span><br><span class="line">&gt;     ./datasets/TUM/rgbd_dataset_freiburg1_desk/associate.txt</span><br><span class="line"></span><br><span class="line">ORB-SLAM3 Copyright (C) 2017-2020 Carlos Campos, Richard Elvira, Juan J. Gómez, José M.M. Montiel and Juan D. Tardós, University of Zaragoza.</span><br><span class="line">ORB-SLAM2 Copyright (C) 2014-2016 Raúl Mur-Artal, José M.M. Montiel and Juan D. Tardós, University of Zaragoza.</span><br><span class="line">This program comes with ABSOLUTELY NO WARRANTY;</span><br><span class="line">This is free software, and you are welcome to redistribute it</span><br><span class="line">under certain conditions. See LICENSE.txt.</span><br><span class="line"></span><br><span class="line">Input sensor was set to: RGB-D</span><br><span class="line">Loading settings from ./Examples/RGB-D/TUM1.yaml</span><br><span class="line">        -Loaded camera 1</span><br><span class="line">Camera.newHeight optional parameter does not exist...</span><br><span class="line">Camera.newWidth optional parameter does not exist...</span><br><span class="line">        -Loaded image info</span><br><span class="line">        -Loaded RGB-D calibration</span><br><span class="line">        -Loaded ORB settings</span><br><span class="line">Viewer.imageViewScale optional parameter does not exist...</span><br><span class="line">        -Loaded viewer settings</span><br><span class="line">System.LoadAtlasFromFile optional parameter does not exist...</span><br><span class="line">System.SaveAtlasToFile optional parameter does not exist...</span><br><span class="line">        -Loaded Atlas settings</span><br><span class="line">System.thFarPoints optional parameter does not exist...</span><br><span class="line">        -Loaded misc parameters</span><br><span class="line">----------------------------------</span><br><span class="line">SLAM settings: </span><br><span class="line">        -Camera 1 parameters (Pinhole): [ 517.306 516.469 318.643 255.314 ]</span><br><span class="line">        -Camera 1 distortion parameters: [  0.262383 -0.953104 -0.005358 0.002628 1.16331 ]</span><br><span class="line">        -Original image size: [ 640 , 480 ]</span><br><span class="line">        -Current image size: [ 640 , 480 ]</span><br><span class="line">        -Sequence FPS: 30</span><br><span class="line">        -RGB-D depth map factor: 5000</span><br><span class="line">        -Features per image: 1000</span><br><span class="line">        -ORB scale factor: 1.2</span><br><span class="line">        -ORB number of scales: 8</span><br><span class="line">        -Initial FAST threshold: 20</span><br><span class="line">        -Min FAST threshold: 7</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Loading ORB Vocabulary. This could take a while...</span><br><span class="line">Vocabulary loaded!</span><br><span class="line"></span><br><span class="line">Initialization of Atlas from scratch </span><br><span class="line">Creation of new map with id: 0</span><br><span class="line">Creation of new map with last KF id: 0</span><br><span class="line">Seq. Name: </span><br><span class="line">There are 1 cameras in the atlas</span><br><span class="line">Camera 0 is pinhole</span><br><span class="line"></span><br><span class="line">-------</span><br><span class="line">Start processing sequence ...</span><br><span class="line">Images in the sequence: 573</span><br><span class="line"></span><br><span class="line">First KF:0; Map init KF:0</span><br><span class="line">New Map created with 937 points</span><br><span class="line">Framebuffer with requested attributes not available. Using available framebuffer. You may see visual artifacts.Starting the Viewer</span><br><span class="line">Shutdown</span><br><span class="line">-------</span><br><span class="line"></span><br><span class="line">median tracking time: 0.0371458</span><br><span class="line">mean tracking time: 0.0415715</span><br><span class="line"></span><br><span class="line">Saving camera trajectory to CameraTrajectory.txt ...</span><br><span class="line"></span><br><span class="line">Saving keyframe trajectory to KeyFrameTrajectory.txt ...</span><br></pre></td></tr></table></figure><h3 id="4-4-本地虚拟机运行"><a href="#4-4-本地虚拟机运行" class="headerlink" title="4.4. 本地虚拟机运行"></a>4.4. 本地虚拟机运行</h3><p>示例环境：ubuntu 22.04 arm虚拟机下启动的ubuntu18.04 docker容器。</p><h4 id="4-4-1-解决段错误"><a href="#4-4-1-解决段错误" class="headerlink" title="4.4.1. 解决段错误"></a>4.4.1. 解决段错误</h4><p>本地虚拟机初次运行的时候遇到了段错误（有图像输出，主要是Shutdown的时候段错误）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">-------</span><br><span class="line">Start processing sequence ...</span><br><span class="line">Images in the sequence: 573</span><br><span class="line"></span><br><span class="line">First KF:0; Map init KF:0</span><br><span class="line">New Map created with 939 points</span><br><span class="line">Starting the Viewer</span><br><span class="line">Shutdown</span><br><span class="line">-------</span><br><span class="line"></span><br><span class="line">median tracking time: 0.0136386</span><br><span class="line">mean tracking time: 0.0140401</span><br><span class="line"></span><br><span class="line">Saving camera trajectory to CameraTrajectory.txt ...</span><br><span class="line"></span><br><span class="line">Saving keyframe trajectory to KeyFrameTrajectory.txt ...</span><br><span class="line">Segmentation fault (core dumped)</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/02/fb081dc6226497056b3613b2220e9aa9.png" alt="image.png"></p><p>根据：<a href="https://github.com/UZ-SLAMLab/ORB_SLAM3/issues/452">github.com&#x2F;UZ-SLAMLab&#x2F;ORB_SLAM3&#x2F;issues&#x2F;452</a>，需要修改代码，主要修改<code>ORB_SLAM3/src/System.cc</code>中的<code>System::Shutdown()</code>函数，将函数中原有的注释去掉，并将最后一部分的<code>&quot;ORB-SLAM2: Map Viewer&quot;</code>改成<code>&quot;ORB-SLAM3: Map Viewer&quot;</code>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">System::Shutdown</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">unique_lock&lt;mutex&gt; <span class="title">lock</span><span class="params">(mMutexReset)</span></span>;</span><br><span class="line">        mbShutDown = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Shutdown&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    mpLocalMapper-&gt;<span class="built_in">RequestFinish</span>();</span><br><span class="line">    mpLoopCloser-&gt;<span class="built_in">RequestFinish</span>();</span><br><span class="line">    <span class="comment">// 取消这里代码的注释</span></span><br><span class="line">    <span class="keyword">if</span>(mpViewer)</span><br><span class="line">    &#123;</span><br><span class="line">        mpViewer-&gt;<span class="built_in">RequestFinish</span>();</span><br><span class="line">        <span class="keyword">while</span>(!mpViewer-&gt;<span class="built_in">isFinished</span>())</span><br><span class="line">            <span class="built_in">usleep</span>(<span class="number">5000</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Wait until all thread have effectively stopped</span></span><br><span class="line">    <span class="keyword">while</span>(!mpLocalMapper-&gt;<span class="built_in">isFinished</span>() || !mpLoopCloser-&gt;<span class="built_in">isFinished</span>() || mpLoopCloser-&gt;<span class="built_in">isRunningGBA</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!mpLocalMapper-&gt;<span class="built_in">isFinished</span>())</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;mpLocalMapper is not finished&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span>(!mpLoopCloser-&gt;<span class="built_in">isFinished</span>())</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;mpLoopCloser is not finished&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span>(mpLoopCloser-&gt;<span class="built_in">isRunningGBA</span>())&#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;mpLoopCloser is running GBA&quot;</span> &lt;&lt; endl;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;break anyway...&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">usleep</span>(<span class="number">5000</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!mStrSaveAtlasToFile.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        Verbose::<span class="built_in">PrintMess</span>(<span class="string">&quot;Atlas saving to file &quot;</span> + mStrSaveAtlasToFile, Verbose::VERBOSITY_NORMAL);</span><br><span class="line">        <span class="built_in">SaveAtlas</span>(FileType::BINARY_FILE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 此处注释取消并将ORB-SLAM2改成ORB-SLAM3</span></span><br><span class="line">    <span class="keyword">if</span>(mpViewer)</span><br><span class="line">        pangolin::<span class="built_in">BindToContext</span>(<span class="string">&quot;ORB-SLAM3: Map Viewer&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> REGISTER_TIMES</span></span><br><span class="line">    mpTracker-&gt;<span class="built_in">PrintTimeStats</span>();</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改后需要删除项目根目录下的build目录，重新编译</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/02/76d5b1f7b348d27099c2c4d5c075dee1.png" alt="image.png"></p><h4 id="4-4-2-运行结果"><a href="#4-4-2-运行结果" class="headerlink" title="4.4.2. 运行结果"></a>4.4.2. 运行结果</h4><p>重新编译后再次运行</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/02/7eaf968e45c9b489dff7572e15f1ca82.png" alt="image.png"></p><p>本地虚拟机运行结束后完整输出如下，这次没有段错误了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu-linux-22-04-02-desktop:/work/ORB_SLAM3# ./Examples/RGB-D/rgbd_tum \</span><br><span class="line">&gt;     ./Vocabulary/ORBvoc.txt \</span><br><span class="line">&gt;     ./Examples/RGB-D/TUM1.yaml \</span><br><span class="line">&gt;     ./datasets/TUM/rgbd_dataset_freiburg1_desk \</span><br><span class="line">&gt;     ./datasets/TUM/rgbd_dataset_freiburg1_desk/associate.txt</span><br><span class="line"></span><br><span class="line">ORB-SLAM3 Copyright (C) 2017-2020 Carlos Campos, Richard Elvira, Juan J. Gómez, José M.M. Montiel and Juan D. Tardós, University of Zaragoza.</span><br><span class="line">ORB-SLAM2 Copyright (C) 2014-2016 Raúl Mur-Artal, José M.M. Montiel and Juan D. Tardós, University of Zaragoza.</span><br><span class="line">This program comes with ABSOLUTELY NO WARRANTY;</span><br><span class="line">This is free software, and you are welcome to redistribute it</span><br><span class="line">under certain conditions. See LICENSE.txt.</span><br><span class="line"></span><br><span class="line">Input sensor was set to: RGB-D</span><br><span class="line">Loading settings from ./Examples/RGB-D/TUM1.yaml</span><br><span class="line">-Loaded camera 1</span><br><span class="line">Camera.newHeight optional parameter does not exist...</span><br><span class="line">Camera.newWidth optional parameter does not exist...</span><br><span class="line">-Loaded image info</span><br><span class="line">-Loaded RGB-D calibration</span><br><span class="line">-Loaded ORB settings</span><br><span class="line">Viewer.imageViewScale optional parameter does not exist...</span><br><span class="line">-Loaded viewer settings</span><br><span class="line">System.LoadAtlasFromFile optional parameter does not exist...</span><br><span class="line">System.SaveAtlasToFile optional parameter does not exist...</span><br><span class="line">-Loaded Atlas settings</span><br><span class="line">System.thFarPoints optional parameter does not exist...</span><br><span class="line">-Loaded misc parameters</span><br><span class="line">----------------------------------</span><br><span class="line">SLAM settings: </span><br><span class="line">-Camera 1 parameters (Pinhole): [ 517.306 516.469 318.643 255.314 ]</span><br><span class="line">-Camera 1 distortion parameters: [  0.262383 -0.953104 -0.005358 0.002628 1.16331 ]</span><br><span class="line">-Original image size: [ 640 , 480 ]</span><br><span class="line">-Current image size: [ 640 , 480 ]</span><br><span class="line">-Sequence FPS: 30</span><br><span class="line">-RGB-D depth map factor: 5000</span><br><span class="line">-Features per image: 1000</span><br><span class="line">-ORB scale factor: 1.2</span><br><span class="line">-ORB number of scales: 8</span><br><span class="line">-Initial FAST threshold: 20</span><br><span class="line">-Min FAST threshold: 7</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Loading ORB Vocabulary. This could take a while...</span><br><span class="line">Vocabulary loaded!</span><br><span class="line"></span><br><span class="line">Initialization of Atlas from scratch </span><br><span class="line">Creation of new map with id: 0</span><br><span class="line">Creation of new map with last KF id: 0</span><br><span class="line">Seq. Name: </span><br><span class="line">There are 1 cameras in the atlas</span><br><span class="line">Camera 0 is pinhole</span><br><span class="line"></span><br><span class="line">-------</span><br><span class="line">Start processing sequence ...</span><br><span class="line">Images in the sequence: 573</span><br><span class="line"></span><br><span class="line">First KF:0; Map init KF:0</span><br><span class="line">New Map created with 939 points</span><br><span class="line">Starting the Viewer</span><br><span class="line">Shutdown</span><br><span class="line">-------</span><br><span class="line"></span><br><span class="line">median tracking time: 0.0124658</span><br><span class="line">mean tracking time: 0.0127179</span><br><span class="line"></span><br><span class="line">Saving camera trajectory to CameraTrajectory.txt ...</span><br><span class="line"></span><br><span class="line">Saving keyframe trajectory to KeyFrameTrajectory.txt ...</span><br><span class="line">root@ubuntu-linux-22-04-02-desktop:/work/ORB_SLAM3# </span><br></pre></td></tr></table></figure><h3 id="4-5-结果对比"><a href="#4-5-结果对比" class="headerlink" title="4.5. 结果对比"></a>4.5. 结果对比</h3><p>从输出结果来看，本地4核8G的虚拟机环境运行速度为<code>0.0124658</code>，约合<code>80.2 HZ</code>，快于AutoDL云端12核+2080ti环境运行的<code>0.0371458</code>，约合<code>26.9 HZ</code>。由于ORB-SLAM3不依赖于PyTorch，<strong>应该</strong>没有使用显卡的解算能力（俺不确定哈），这部分差异主要是由于CPU造成的。云端CPU和GPU都是容器化共享的，因此影响了性能。</p><p>而且，在GCNv2的本地纯CPU运行中（相同环境），由于缺少显卡，只跑出了可怜巴巴的<code>0.5HZ</code>的速度，可见在无显卡环境中ORB-SLAM3运行速度快于GCNv2-SLAM。至于二者的性能和精度，暂时不太清楚如何对比。</p><h2 id="5-The-end"><a href="#5-The-end" class="headerlink" title="5. The end"></a>5. The end</h2><p>本文简单介绍了如何使用ORB-SLAM3运行TUM RGB-D数据集，纯CPU运行快于GCNv2-SLAM。</p>]]></content>
    
    
    <summary type="html">在本地虚拟机和AutoDL云端环境以TUM-RGBD数据集运行ORB_SLAM3的介绍</summary>
    
    
    
    <category term="编程学习" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="项目开发记录" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="Linux" scheme="https://blog.musnow.top/tags/Linux/"/>
    
    <category term="Cpp" scheme="https://blog.musnow.top/tags/Cpp/"/>
    
    <category term="SLAM" scheme="https://blog.musnow.top/tags/SLAM/"/>
    
  </entry>
  
  <entry>
    <title>【SLAM】于AutoDL云上GPU运行GCNv2_SLAM的记录</title>
    <link href="https://blog.musnow.top/posts/1071165018/"/>
    <id>https://blog.musnow.top/posts/1071165018/</id>
    <published>2025-02-02T01:57:33.000Z</published>
    <updated>2025-02-04T08:51:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>配置GCNv2_SLAM所需环境并实现AutoDL云端运行项目的全过程记录。</p><h2 id="1-引子"><a href="#1-引子" class="headerlink" title="1. 引子"></a>1. 引子</h2><p>前几天写了一篇在本地虚拟机里面CPU运行GCNv2_SLAM项目的博客：<a href="https://blog.musnow.top/posts/1589125738/">链接</a>，关于GCNv2_SLAM项目相关的介绍请移步此文章，本文不再重复说明。</p><ul><li><a href="https://ieeexplore.ieee.org/document/8758836">GCNv2: Efficient Correspondence Prediction for Real-Time SLAM</a>;</li><li><a href="https://github.com/jiexiong2016/GCNv2_SLAM">github.com&#x2F;jiexiong2016&#x2F;GCNv2_SLAM</a>;</li></ul><p>在之前的测试中，本地虚拟机CPU运行的效果非常差，推理速度只有可怜兮兮的<code>0.5 HZ</code>，但是我手头又没有带显卡的环境，所以想到了可以去网上租个带显卡的容器化环境。</p><p>AutoDL就是一个租GPU环境的平台: <a href="https://www.autodl.com/">https://www.autodl.com/</a>，而且autodl租显卡是可以按小时付费的，比按月付费的更加划算，更好过自己买个显卡在本地倒腾ubuntu环境，所以就直接开整了！</p><p>先注册一个AutoDL的账户，给里面充值一丢丢钱，然后就可以租一个显卡容器化环境来运行GCNv2_SLAM啦！</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/02/c16bf7fe837c06718a76843ba7b923eb.png" alt="image.png"></p><h2 id="2-AutoDL环境选择"><a href="#2-AutoDL环境选择" class="headerlink" title="2. AutoDL环境选择"></a>2. AutoDL环境选择</h2><p>老版本PyTorch的镜像由于4090无法使用太低的cuda版本导致无法选择，如果需要使用更低版本的pytorch镜像，则需要租用2080ti或者1080ti显卡的环境。</p><p>2080ti显卡可以选择如下环境，实测可用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PyTorch  1.5.1</span><br><span class="line">Python  3.8(ubuntu18.04)</span><br><span class="line">Cuda  10.1</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/02/9f33c7eb80a44080fd587573e315f769.png" alt="image.png"></p><p>创建环境后，建议使用左侧的ssh登录指令直接在本地终端里面执行，登录到云端。如果你没有本地的ssh终端，也可以点击JupyterLab里面的终端来运行命令。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/02/2a97018925b0281e8faeb64ef8cb5ff9.png" alt="image.png"></p><p>后文涉及到下载很多文件，如果从github下载很慢，可以在本地下好之后通过JupyterLab传到云端去。注意传文件之前要先在文件列表里面选好目标的目录。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/02/a924fd5dea1fa0ef7a020aa1487a8a37.png" alt="image.png"></p><p>还可以尝试autodl自带的代理：<a href="https://www.autodl.com/docs/network_turbo/">www.autodl.com/docs/network_turbo&#x2F;</a>，但是慕雪试用的时候这个代理一直返回503，不可用状态。</p><h2 id="3-依赖安装"><a href="#3-依赖安装" class="headerlink" title="3. 依赖安装"></a>3. 依赖安装</h2><h3 id="3-1-需要的apt包安装"><a href="#3-1-需要的apt包安装" class="headerlink" title="3.1. 需要的apt包安装"></a>3.1. 需要的apt包安装</h3><p>运行之前先更新一下环境，这部分操作和在本地虚拟机里面安装环境都是一样的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update -y</span><br><span class="line">sudo apt-get upgrade -y</span><br></pre></td></tr></table></figure><p>更新的时候会有一个新的sshd配置的提醒，这里直接选择1用新版本配置就可以了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">A new version (/tmp/file1bBLK4) of configuration file /etc/ssh/sshd_config is available, but the version installed currently has been</span><br><span class="line">locally modified.</span><br><span class="line"></span><br><span class="line">  1. install the package maintainer&#x27;s version             5. show a 3-way difference between available versions</span><br><span class="line">  2. keep the local version currently installed           6. do a 3-way merge between available versions</span><br><span class="line">  3. show the differences between the versions            7. start a new shell to examine the situation</span><br><span class="line">  4. show a side-by-side difference between the versions</span><br><span class="line">What do you want to do about modified configuration file sshd_config? 1</span><br></pre></td></tr></table></figure><p>因为选了Pytorch镜像，Python工具组系统已经自带了，不需要安装。</p><p>安装要用的到的工具包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 工具包</span></span><br><span class="line">sudo apt-get install -y \</span><br><span class="line">    apt-utils \</span><br><span class="line">    curl wget unzip zip \</span><br><span class="line">    cmake make automake \</span><br><span class="line">    openssh-server \</span><br><span class="line">    net-tools \</span><br><span class="line">    vim git gcc g++</span><br></pre></td></tr></table></figure><p>安装x11相关的依赖包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># x11 for gui</span></span><br><span class="line">sudo apt-get install -y  \</span><br><span class="line">    libx11-xcb1 \</span><br><span class="line">    libfreetype6 \</span><br><span class="line">    libdbus-1-3 \</span><br><span class="line">    libfontconfig1 \</span><br><span class="line">    libxkbcommon0   \</span><br><span class="line">    libxkbcommon-x11-0</span><br></pre></td></tr></table></figure><h3 id="3-2-Pangolin-6-0"><a href="#3-2-Pangolin-6-0" class="headerlink" title="3.2. Pangolin-6.0"></a>3.2. Pangolin-6.0</h3><h4 id="3-2-1-依赖项安装"><a href="#3-2-1-依赖项安装" class="headerlink" title="3.2.1. 依赖项安装"></a>3.2.1. 依赖项安装</h4><p>安装Pangolin之前先安装如下依赖包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># pangolin</span></span><br><span class="line">sudo apt-get install -y \</span><br><span class="line">    libgl1-mesa-dev \</span><br><span class="line">    libglew-dev \</span><br><span class="line">    libboost-dev \</span><br><span class="line">    libboost-thread-dev \</span><br><span class="line">    libboost-filesystem-dev \</span><br><span class="line">    libpython2.7-dev \</span><br><span class="line">    libglu1-mesa-dev freeglut3-dev</span><br></pre></td></tr></table></figure><p>在AutoDL的PyTorch 1.5.1镜像中，安装Pangolin依赖包的时候的终端输出如下，出现了<strong>依赖项版本冲突</strong>问题。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">root@autodl-container-e39d46b8d3-01da7b14:~# apt-get install -y     libgl1-mesa-dev     libglew-dev     libboost-dev     libboost-thread-dev     libboost-filesystem-dev     libpython2.7-dev     libglu1-mesa-dev freeglut3-dev</span><br><span class="line">Reading package lists... Done</span><br><span class="line">Building dependency tree     </span><br><span class="line">Reading state information... Done</span><br><span class="line">Some packages could not be installed. This may mean that you have</span><br><span class="line">requested an impossible situation or if you are using the unstable</span><br><span class="line">distribution that some required packages have not yet been created</span><br><span class="line">or been moved out of Incoming.</span><br><span class="line">The following information may help to resolve the situation:</span><br><span class="line"></span><br><span class="line">The following packages have unmet dependencies:</span><br><span class="line"> freeglut3-dev : Depends: libxext-dev but it is not going to be installed</span><br><span class="line">                 Depends: libxt-dev but it is not going to be installed</span><br><span class="line"> libgl1-mesa-dev : Depends: mesa-common-dev (= 20.0.8-0ubuntu1~18.04.1) but it is not going to be installed</span><br><span class="line">                   Depends: libx11-dev but it is not going to be installed</span><br><span class="line">                   Depends: libx11-xcb-dev but it is not going to be installed</span><br><span class="line">                   Depends: libxdamage-dev but it is not going to be installed</span><br><span class="line">                   Depends: libxext-dev but it is not going to be installed</span><br><span class="line">                   Depends: libxfixes-dev but it is not going to be installed</span><br><span class="line">                   Depends: libxxf86vm-dev but it is not going to be installed</span><br><span class="line">E: Unable to correct problems, you have held broken packages.</span><br></pre></td></tr></table></figure><p>这里依赖冲突的问题是安装的x11依赖包有两个版本过高了，需要降级下面这两个依赖包。<strong>如果你安装依赖项时没有出现依赖项冲突就成功安装了，则不需要执行下面的降级命令</strong>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">apt-get install -y \</span><br><span class="line">    libx11-xcb1=2:1.6.4-3ubuntu0.4 \</span><br><span class="line">    libx11-6=2:1.6.4-3ubuntu0.4</span><br></pre></td></tr></table></figure><p>降级成功后，重新执行上述安装Pangolin依赖项的命令，就能成功安装了。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/02/612a64181be8520b7fc2020b05279a54.png" alt="image.png"></p><h4 id="3-2-2-编译安装"><a href="#3-2-2-编译安装" class="headerlink" title="3.2.2. 编译安装"></a>3.2.2. 编译安装</h4><p>随后使用如下命令来编译安装Pangolin，Github地址：<a href="https://github.com/stevenlovegrove/Pangolin/releases/tag/v0.6">Pangolin-0.6</a>。</p><p>建议这些依赖包都进入<code>~/autodl-tmp</code>数据盘来下载和安装，这样即便后续需要更换镜像也能保留数据，不需要重新下载</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载</span></span><br><span class="line">wget -O Pangolin-0.6.tar.gz https://github.com/stevenlovegrove/Pangolin/archive/refs/tags/v0.6.tar.gz</span><br><span class="line"><span class="comment"># 解压</span></span><br><span class="line">tar -zxvf Pangolin-0.6.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="built_in">pushd</span> Pangolin-0.6</span><br><span class="line">    <span class="built_in">rm</span> -rf build</span><br><span class="line">    <span class="built_in">mkdir</span> build &amp;&amp; <span class="built_in">cd</span> build</span><br><span class="line">    <span class="comment"># 编译安装 </span></span><br><span class="line">    cmake -DCPP11_NO_BOOST=1 ..</span><br><span class="line">    make -j$(<span class="built_in">nproc</span>)</span><br><span class="line">    make install</span><br><span class="line">    <span class="comment"># 刷新动态库</span></span><br><span class="line">    ldconfig</span><br><span class="line"><span class="built_in">popd</span></span><br></pre></td></tr></table></figure><p>编译安装成功</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/02/1c07fc6dbf06de466e2a7e2a231cb489.png" alt="image.png"></p><p>示例代码HelloPangolin也能编译成功，只不过当前我们还没有配置GUI，所以会有x11错误无法运行（后文会讲述如何配置GUI和VNC）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">root@autodl-container-e39d46b8d3-01da7b14:~/pkg/Pangolin-0.6/build# cd ../examples/HelloPangolin</span><br><span class="line">root@autodl-container-e39d46b8d3-01da7b14:~/pkg/Pangolin-0.6/examples/HelloPangolin# mkdir build &amp;&amp; cd build</span><br><span class="line">root@autodl-container-e39d46b8d3-01da7b14:~/pkg/Pangolin-0.6/examples/HelloPangolin/build# cmake ..</span><br><span class="line">-- The C compiler identification is GNU 7.5.0</span><br><span class="line">-- The CXX compiler identification is GNU 7.5.0</span><br><span class="line">-- Check for working C compiler: /usr/bin/cc</span><br><span class="line">-- Check for working C compiler: /usr/bin/cc -- works</span><br><span class="line">-- Detecting C compiler ABI info</span><br><span class="line">-- Detecting C compiler ABI info - done</span><br><span class="line">-- Detecting C compile features</span><br><span class="line">-- Detecting C compile features - done</span><br><span class="line">-- Check for working CXX compiler: /usr/bin/c++</span><br><span class="line">-- Check for working CXX compiler: /usr/bin/c++ -- works</span><br><span class="line">-- Detecting CXX compiler ABI info</span><br><span class="line">-- Detecting CXX compiler ABI info - done</span><br><span class="line">-- Detecting CXX compile features</span><br><span class="line">-- Detecting CXX compile features - done</span><br><span class="line">CMake Warning (dev) in CMakeLists.txt:</span><br><span class="line">  No cmake_minimum_required command is present.  A line of code such as</span><br><span class="line"></span><br><span class="line">    cmake_minimum_required(VERSION 3.10)</span><br><span class="line"></span><br><span class="line">  should be added at the top of the file.  The version specified may be lower</span><br><span class="line">  if you wish to support older CMake versions for this project.  For more</span><br><span class="line">  information run &quot;cmake --help-policy CMP0000&quot;.</span><br><span class="line">This warning is for project developers.  Use -Wno-dev to suppress it.</span><br><span class="line"></span><br><span class="line">-- Configuring done</span><br><span class="line">CMake Warning (dev) at CMakeLists.txt:5 (add_executable):</span><br><span class="line">  Policy CMP0003 should be set before this line.  Add code such as</span><br><span class="line"></span><br><span class="line">    if(COMMAND cmake_policy)</span><br><span class="line">      cmake_policy(SET CMP0003 NEW)</span><br><span class="line">    endif(COMMAND cmake_policy)</span><br><span class="line"></span><br><span class="line">  as early as possible but after the most recent call to</span><br><span class="line">  cmake_minimum_required or cmake_policy(VERSION).  This warning appears</span><br><span class="line">  because target &quot;HelloPangolin&quot; links to some libraries for which the linker</span><br><span class="line">  must search:</span><br><span class="line"></span><br><span class="line">    rt, pthread, rt, pthread</span><br><span class="line"></span><br><span class="line">  and other libraries with known full path:</span><br><span class="line"></span><br><span class="line">    /usr/local/lib/libpangolin.so</span><br><span class="line"></span><br><span class="line">  CMake is adding directories in the second list to the linker search path in</span><br><span class="line">  case they are needed to find libraries from the first list (for backwards</span><br><span class="line">  compatibility with CMake 2.4).  Set policy CMP0003 to OLD or NEW to enable</span><br><span class="line">  or disable this behavior explicitly.  Run &quot;cmake --help-policy CMP0003&quot; for</span><br><span class="line">  more information.</span><br><span class="line">This warning is for project developers.  Use -Wno-dev to suppress it.</span><br><span class="line"></span><br><span class="line">-- Generating done</span><br><span class="line">-- Build files have been written to: /root/pkg/Pangolin-0.6/examples/HelloPangolin/build</span><br><span class="line">root@autodl-container-e39d46b8d3-01da7b14:~/pkg/Pangolin-0.6/examples/HelloPangolin/build# make</span><br><span class="line">Scanning dependencies of target HelloPangolin</span><br><span class="line">[ 50%] Building CXX object CMakeFiles/HelloPangolin.dir/main.o</span><br><span class="line">[100%] Linking CXX executable HelloPangolin</span><br><span class="line">[100%] Built target HelloPangolin</span><br><span class="line">root@autodl-container-e39d46b8d3-01da7b14:~/pkg/Pangolin-0.6/examples/HelloPangolin/build# ./HelloPangolin </span><br><span class="line">terminate called after throwing an instance of &#x27;std::runtime_error&#x27;</span><br><span class="line">  what():  Pangolin X11: Failed to open X display</span><br><span class="line">Aborted (core dumped)</span><br></pre></td></tr></table></figure><h3 id="3-3-OpenCV-3-4-5"><a href="#3-3-OpenCV-3-4-5" class="headerlink" title="3.3. OpenCV 3.4.5"></a>3.3. OpenCV 3.4.5</h3><p>先安装依赖项</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install -y \</span><br><span class="line">build-essential libgtk2.0-dev \</span><br><span class="line">libavcodec-dev libavformat-dev \</span><br><span class="line">libjpeg.dev libtiff5.dev libswscale-dev \</span><br><span class="line">libcanberra-gtk-module</span><br></pre></td></tr></table></figure><p>因为AutoDL环境是amd64，所以直接用下面的命令安装libjasper就OK了，不需要额外的处理</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># amd64 添加新源后继续安装</span></span><br><span class="line">sudo apt-get install -y software-properties-common </span><br><span class="line">sudo add-apt-repository <span class="string">&quot;deb http://security.ubuntu.com/ubuntu xenial-security main&quot;</span></span><br><span class="line">sudo apt-get -y update </span><br><span class="line">sudo apt-get install -y libjasper1 libjasper-dev</span><br></pre></td></tr></table></figure><p>以下是安装libjasper的截图</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/02/5902d476da93c3adfb6af65231e3d168.png" alt="image.png"></p><p>安装好了依赖项后，使用如下命令编译opencv，Github地址：<a href="https://github.com/opencv/opencv/releases/tag/3.4.5">opencv的3.4.5版本</a>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载和解压</span></span><br><span class="line">wget -O opencv-3.4.5.tar.gz https://github.com/opencv/opencv/archive/refs/tags/3.4.5.tar.gz</span><br><span class="line">tar -zxvf opencv-3.4.5.tar.gz</span><br><span class="line"><span class="comment"># 开始编译和安装</span></span><br><span class="line"><span class="built_in">pushd</span> opencv-3.4.5</span><br><span class="line">    <span class="built_in">rm</span> -rf build</span><br><span class="line">    <span class="built_in">mkdir</span> build &amp;&amp; <span class="built_in">cd</span> build </span><br><span class="line">    <span class="comment"># 构建和编译安装，-j4代表4线程并发</span></span><br><span class="line">    cmake -D CMAKE_BUILD_TYPE=Release -D CMAKE_INSTALL_PREFIX=/usr/local ..</span><br><span class="line">    make -j$(<span class="built_in">nproc</span>)</span><br><span class="line">    make install</span><br><span class="line">    <span class="comment"># 刷新动态库</span></span><br><span class="line">    ldconfig</span><br><span class="line"><span class="built_in">popd</span></span><br></pre></td></tr></table></figure><p>正常编译安装，莫得问题</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/02/2fc7a4798d20675737e1db1f7539b952.png" alt="image.png"></p><h3 id="3-4-Eigen-3-7"><a href="#3-4-Eigen-3-7" class="headerlink" title="3.4. Eigen 3.7"></a>3.4. Eigen 3.7</h3><p>Eigen包在gitlab里面下载：<a href="https://gitlab.com/libeigen/eigen/-/releases/3.3.7">gitlab.com&#x2F;libeigen&#x2F;eigen&#x2F;-&#x2F;releases&#x2F;3.3.7</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载</span></span><br><span class="line">wget -O eigen-3.3.7.tar.gz https://gitlab.com/libeigen/eigen/-/archive/3.3.7/eigen-3.3.7.tar.gz</span><br><span class="line">tar -zxvf eigen-3.3.7.tar.gz</span><br><span class="line"><span class="comment"># 开始编译和安装</span></span><br><span class="line"><span class="built_in">cd</span> eigen-3.3.7</span><br><span class="line"><span class="built_in">mkdir</span> build &amp;&amp; <span class="built_in">cd</span> build</span><br><span class="line">cmake ..</span><br><span class="line">make &amp;&amp; make install</span><br><span class="line"><span class="comment"># 拷贝路径（避免头文件引用不到）</span></span><br><span class="line">sudo <span class="built_in">cp</span> -r /usr/local/include/eigen3/Eigen /usr/local/include</span><br></pre></td></tr></table></figure><p>还是用相同的cpp的demo代码来测试是否安装成功（直接g++编译就可以了）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="comment">//需要将头文件从 /usr/local/include/eigen3/ 复制到 /usr/local/include</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Eigen/Dense&gt;</span></span></span><br><span class="line"><span class="comment">//using Eigen::MatrixXd;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> Eigen;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> Eigen::internal;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> Eigen::Architecture;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;*******************1D-object****************&quot;</span>&lt;&lt;endl;</span><br><span class="line">        Vector4d v1;</span><br><span class="line">        v1&lt;&lt; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;v1=\n&quot;</span>&lt;&lt;v1&lt;&lt;endl;</span><br><span class="line"> </span><br><span class="line">        <span class="function">VectorXd <span class="title">v2</span><span class="params">(<span class="number">3</span>)</span></span>;</span><br><span class="line">        v2&lt;&lt;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;v2=\n&quot;</span>&lt;&lt;v2&lt;&lt;endl;</span><br><span class="line"> </span><br><span class="line">        Array4i v3;</span><br><span class="line">        v3&lt;&lt;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;v3=\n&quot;</span>&lt;&lt;v3&lt;&lt;endl;</span><br><span class="line"> </span><br><span class="line">        <span class="function">ArrayXf <span class="title">v4</span><span class="params">(<span class="number">3</span>)</span></span>;</span><br><span class="line">        v4&lt;&lt;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;v4=\n&quot;</span>&lt;&lt;v4&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正常编译运行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">root@autodl-container-e39d46b8d3-01da7b14:~/pkg/eigen-3.3.7/build# g++ test.cpp -o t</span><br><span class="line">root@autodl-container-e39d46b8d3-01da7b14:~/pkg/eigen-3.3.7/build# ./t</span><br><span class="line">*******************1D-object****************</span><br><span class="line">v1=</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">v2=</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">v3=</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">v4=</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td></tr></table></figure><h3 id="3-5-Libtorch-1-5-0"><a href="#3-5-Libtorch-1-5-0" class="headerlink" title="3.5. Libtorch 1.5.0"></a>3.5. Libtorch 1.5.0</h3><h4 id="3-5-1-关于手工编译的说明"><a href="#3-5-1-关于手工编译的说明" class="headerlink" title="3.5.1. 关于手工编译的说明"></a>3.5.1. 关于手工编译的说明</h4><p>因为我们选择的autodl环境里面已经带了Pytorch了，所以可以不需要自己手动从源码构建了。</p><p>我尝试过从源码构建pytorch 1.1.0版本，会在构建的半路被killed掉，不清楚问题在哪里，猜测是构建占用内存cpu过多导致的，当时被kill掉的输出如下，大约在74%的时候，前后都没有出现error，就直接被干掉了。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/02/b14ebcee0574f7686f2718cb7e1b1f33.png" alt="image.png"><br> <img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/02/544077ff057e3ee249dddf844975dd5f.png" alt="image.png"></p><h4 id="3-5-2-不能使用本地已有的版本"><a href="#3-5-2-不能使用本地已有的版本" class="headerlink" title="3.5.2. 不能使用本地已有的版本"></a>3.5.2. 不能使用本地已有的版本</h4><p>我们选用的autodl镜像里面其实已经自带了一个可用的Torch目录，路径如下所示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/root/miniconda3/lib/python3.8/site-packages/torch/share/cmake/Torch</span><br></pre></td></tr></table></figure><p>但是这个目录中引用的libtorch预编译版本是不包含C++11ABI兼容机制的，会最终导致Pangolin链接失败，<strong>错误输出如下所示</strong>。这个链接失败的问题和使用的Pangolin版本没有关系，尝试过Pangolin5.0和6.0都会链接失败。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[100%] Linking CXX executable ../GCN2/rgbd_gcn</span><br><span class="line">../lib/libORB_SLAM2.so: undefined reference to `pangolin::Split(std::string const&amp;, char)&#x27;</span><br><span class="line">../lib/libORB_SLAM2.so: undefined reference to `pangolin::CreatePanel(std::string const&amp;)&#x27;</span><br><span class="line">../lib/libORB_SLAM2.so: undefined reference to `DBoW2::FORB::fromString(cv::Mat&amp;, std::string const&amp;)&#x27;</span><br><span class="line">../lib/libORB_SLAM2.so: undefined reference to `pangolin::BindToContext(std::string)&#x27;</span><br><span class="line">../lib/libORB_SLAM2.so: undefined reference to `DBoW2::FORB::toString(cv::Mat const&amp;)&#x27;</span><br><span class="line">../lib/libORB_SLAM2.so: undefined reference to `pangolin::CreateWindowAndBind(std::string, int, int, pangolin::Params const&amp;)&#x27;</span><br><span class="line">collect2: error: ld returned 1 exit status</span><br><span class="line">CMakeFiles/rgbd_gcn.dir/build.make:152: recipe for target &#x27;../GCN2/rgbd_gcn&#x27; failed</span><br><span class="line">make[2]: *** [../GCN2/rgbd_gcn] Error 1</span><br><span class="line">CMakeFiles/Makefile2:67: recipe for target &#x27;CMakeFiles/rgbd_gcn.dir/all&#x27; failed</span><br><span class="line">make[1]: *** [CMakeFiles/rgbd_gcn.dir/all] Error 2</span><br><span class="line">Makefile:83: recipe for target &#x27;all&#x27; failed</span><br><span class="line">make: *** [all] Error 2</span><br></pre></td></tr></table></figure><p>在GCNv2的GITHUB中是有提到这个问题的，翻译过来就是不要使用预编译版本的libtorch，因为会出现CXX11 ABI导致的连接错误。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/02/28648c35c47c9423677cbc031ee7b21b.png" alt="image.png"></p><p>在Pytroch 1.3.0之后的版本，官方就已经提供了带CXX11 ABI兼容的预编译版本了，所以可以下载预编译包之后来使用。直接使用容器内的libtorch依旧会有链接问题。</p><h4 id="3-5-3-下载预编译版本"><a href="#3-5-3-下载预编译版本" class="headerlink" title="3.5.3. 下载预编译版本"></a>3.5.3. 下载预编译版本</h4><p>最开始我选择的就是pytorch1.1.0版本的镜像，但是由于没办法从源码编译所以切换成了pytorch1.5.1的镜像。因为在pytorch1.3.0之后官方才提供了CXX11 ABI兼容的预编译包，在这之前的版本都需要手工编译，否则会有链接错误。</p><p>我们需要做的操作是从官网上下一个带CXX11 ABI兼容的libtorch预编译包，下载地址中包含<code>cxx11-abi</code>的才是带有CXX11 ABI兼容的。1.5.0版本的libtorch包下载地址如下，其中cu101代表cuda10.1，最后的libtorch版本是1.5.0（libtorch 1.5.1版本的包下不了）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://download.pytorch.org/libtorch/cu101/libtorch-cxx11-abi-shared-with-deps-1.5.0.zip</span><br></pre></td></tr></table></figure><p>直接通过unzip解压这个目录，就能得到一个libtorch文件夹，后文需要的<code>TORCH_PATH</code>在libtorch的<code>libtorch/share/cmake/Torch</code>目录中就有：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@autodl-container-e39d46b8d3-01da7b14:~/autodl-tmp# ls libtorch/share/cmake/Torch</span><br><span class="line">TorchConfig.cmake  TorchConfigVersion.cmake</span><br></pre></td></tr></table></figure><p>预编译的libtorch包容量都挺大的，建议本地提前下好然后上传到autodl里面，在autodl里面直接下载太耗时了，都是钱呐！</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/02/026d3b62639df227067ffd0ca0c204ef.png" alt="image.png"></p><h2 id="4-编译GCNv2-SLAM"><a href="#4-编译GCNv2-SLAM" class="headerlink" title="4. 编译GCNv2_SLAM"></a>4. 编译GCNv2_SLAM</h2><p>上正主了，克隆一下代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/jiexiong2016/GCNv2_SLAM.git</span><br></pre></td></tr></table></figure><p>因为这次是在autodl环境中跑，有了显卡，pytorch的版本和之前的博客中的完全不一样，所以需要修改的代码内容也不一样。可以参考博客 <a href="https://blog.csdn.net/yangyu0515/article/details/136621489">GCNv2_SLAM-CPU详细安装教程(ubuntu18.04)-CSDN博客</a> 中的说明进行修改。</p><h3 id="4-1-修改build-sh"><a href="#4-1-修改build-sh" class="headerlink" title="4.1. 修改build.sh"></a>4.1. 修改build.sh</h3><p>预编译版本的<code>TORCH_PATH</code>在压缩包解压后libtorch目录中，即<code>libtorch/share/cmake/Torch</code>目录。修改build.sh脚本中的路径为此目录就可以了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-DTORCH_PATH=/root/autodl-tmp/libtorch/share/cmake/Torch</span><br></pre></td></tr></table></figure><p>修改之后就可以开始编译，并根据报错来解决后面的一些问题了</p><h3 id="4-2-修改代码兼容高版本libtorch"><a href="#4-2-修改代码兼容高版本libtorch" class="headerlink" title="4.2. 修改代码兼容高版本libtorch"></a>4.2. 修改代码兼容高版本libtorch</h3><p>这部分修改可以在我的Github仓库中找到：<a href="https://github.com/musnows/GCNv2_SLAM/tree/pytorch1.5.0">github.com&#x2F;musnows&#x2F;GCNv2_SLAM&#x2F;tree&#x2F;pytorch1.5.0</a></p><h4 id="4-2-1-C-14编译配置"><a href="#4-2-1-C-14编译配置" class="headerlink" title="4.2.1. C++14编译配置"></a>4.2.1. C++14编译配置</h4><p>初次运行会出现如下错误，高版本的torch需要C++14来编译，因为用到了14的新特性</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/root/autodl-tmp/libtorch/include/c10/util/C++17.h:27:2: error: #error You need C++14 to compile PyTorch</span><br><span class="line">   27 | #error You need C++14 to compile PyTorch</span><br><span class="line">      |  ^~~~~</span><br></pre></td></tr></table></figure><p>需要我们修改camke文件，修改<code>GCNv2_SLAM/CMakeLists.txt</code>，新增如下内容</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 头部插入</span></span><br><span class="line"><span class="keyword">set</span>(CMAKE_CXX_STANDARD <span class="number">14</span>)</span><br><span class="line"><span class="keyword">set</span>(CMAKE_CXX_STANDARD_REQUIRED <span class="keyword">ON</span>)</span><br><span class="line"><span class="comment"># 修改尾部的11为14</span></span><br><span class="line"><span class="comment"># set_property(TARGET rgbd_gcn PROPERTY CXX_STANDARD 11)</span></span><br><span class="line"><span class="keyword">set_property</span>(<span class="keyword">TARGET</span> rgbd_gcn PROPERTY CXX_STANDARD <span class="number">14</span>)</span><br></pre></td></tr></table></figure><p>然后还需要注释掉和C++11判断相关的cmake配置，也就是下面这一堆</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Check C++11 or C++0x support</span></span><br><span class="line"><span class="comment">#include(CheckCXXCompilerFlag)</span></span><br><span class="line"><span class="comment">#CHECK_CXX_COMPILER_FLAG(&quot;-std=c++11&quot; COMPILER_SUPPORTS_CXX11)</span></span><br><span class="line"><span class="comment">#CHECK_CXX_COMPILER_FLAG(&quot;-std=c++0x&quot; COMPILER_SUPPORTS_CXX0X)</span></span><br><span class="line"><span class="comment">#if(COMPILER_SUPPORTS_CXX11)</span></span><br><span class="line"><span class="comment">#   set(CMAKE_CXX_FLAGS &quot;$&#123;CMAKE_CXX_FLAGS&#125; -std=c++11&quot;)</span></span><br><span class="line">   <span class="keyword">add_definitions</span>(-DCOMPILEDWITHC11)</span><br><span class="line"><span class="comment">#   message(STATUS &quot;Using flag -std=c++11.&quot;)</span></span><br><span class="line"><span class="comment">#elseif(COMPILER_SUPPORTS_CXX0X)</span></span><br><span class="line"><span class="comment">#   set(CMAKE_CXX_FLAGS &quot;$&#123;CMAKE_CXX_FLAGS&#125; -std=c++0x&quot;)</span></span><br><span class="line"><span class="comment">#   add_definitions(-DCOMPILEDWITHC0X)</span></span><br><span class="line"><span class="comment">#   message(STATUS &quot;Using flag -std=c++0x.&quot;)</span></span><br><span class="line"><span class="comment">#else()</span></span><br><span class="line"><span class="comment">#   message(FATAL_ERROR &quot;The compiler $&#123;CMAKE_CXX_COMPILER&#125; has no C++11 support. Please use a different C++ compiler.&quot;)</span></span><br><span class="line"><span class="comment">#endif()</span></span><br></pre></td></tr></table></figure><p>其中<code>add_definitions(-DCOMPILEDWITHC11)</code>不要注释掉，有用！</p><p>修改cmake后需要删除<code>GCNv2_SLAM/build</code>目录重新运行build.sh脚本，否则修改可能不会生效。</p><h4 id="4-2-2-缺少对应的operator-x3D"><a href="#4-2-2-缺少对应的operator-x3D" class="headerlink" title="4.2.2. 缺少对应的operator&#x3D;"></a>4.2.2. 缺少对应的operator&#x3D;</h4><p>报错如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/root/autodl-tmp/GCNv2_SLAM/src/GCNextractor.cc: In constructor ‘ORB_SLAM2::GCNextractor::GCNextractor(int, float, int, int, int)’:</span><br><span class="line">/root/autodl-tmp/GCNv2_SLAM/src/GCNextractor.cc:218:37: error: no match for ‘operator=’ (operand types are ‘std::shared_ptr&lt;torch::jit::Module&gt;’ and ‘torch::jit::Module’)</span><br><span class="line">     module = torch::jit::load(net_fn);</span><br><span class="line">                                     ^</span><br><span class="line">In file included from /usr/include/c++/7/memory:81:0,</span><br><span class="line">                 from /root/miniconda3/lib/python3.8/site-packages/torch/include/c10/core/Allocator.h:4,</span><br><span class="line">                 from /root/miniconda3/lib/python3.8/site-packages/torch/include/ATen/ATen.h:3,</span><br><span class="line">                 from /root/miniconda3/lib/python3.8/site-packages/torch/include/torch/csrc/api/include/torch/types.h:3,</span><br><span class="line">                 from /root/miniconda3/lib/python3.8/site-packages/torch/include/torch/script.h:3,</span><br><span class="line">                 from /root/autodl-tmp/GCNv2_SLAM/include/GCNextractor.h:24,</span><br><span class="line">                 from /root/autodl-tmp/GCNv2_SLAM/src/GCNextractor.cc:63:</span><br></pre></td></tr></table></figure><p>问题主要是<code>torch::jit::Module</code>入参不再是一个指针了，所以要把<code>shared_ptr</code>给改成普通对象。</p><p>修改<code>GCNv2_SLAM/include/GCNextractor.h</code>文件的99行：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//原代码</span></span><br><span class="line">std::shared_ptr&lt;torch::jit::script::Module&gt; <span class="keyword">module</span>;</span><br><span class="line"><span class="comment">//更改为</span></span><br><span class="line">torch::jit::script::Module <span class="keyword">module</span>;</span><br></pre></td></tr></table></figure><p>还需要对应修改<code>GCNv2_SLAM/src/GCNextractor.cc</code>的270行：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//原代码</span></span><br><span class="line"><span class="keyword">auto</span> output = <span class="keyword">module</span>-&gt;forward(inputs).<span class="built_in">toTuple</span>();</span><br><span class="line"><span class="comment">//更改为</span></span><br><span class="line"><span class="keyword">auto</span> output = <span class="keyword">module</span>.forward(inputs).<span class="built_in">toTuple</span>();</span><br></pre></td></tr></table></figure><h4 id="4-2-3-标准库chrono编译问题"><a href="#4-2-3-标准库chrono编译问题" class="headerlink" title="4.2.3. 标准库chrono编译问题"></a>4.2.3. 标准库chrono编译问题</h4><p>如果你的cmake修改不对，还可能会遇到chrono导致的编译报错</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">/root/autodl-tmp/GCNv2_SLAM/GCN2/rgbd_gcn.cc: In function ‘int main(int, char**)’:</span><br><span class="line">/root/autodl-tmp/GCNv2_SLAM/GCN2/rgbd_gcn.cc:97:22: error: ‘std::chrono::monotonic_clock’ has not been declared</span><br><span class="line">         std::chrono::monotonic_clock::time_point t1 = std::chrono::monotonic_clock::now();</span><br><span class="line">                      ^~~~~~~~~~~~~~~</span><br><span class="line">/root/autodl-tmp/GCNv2_SLAM/GCN2/rgbd_gcn.cc:106:22: error: ‘std::chrono::monotonic_clock’ has not been declared</span><br><span class="line">         std::chrono::monotonic_clock::time_point t2 = std::chrono::monotonic_clock::now();</span><br><span class="line">                      ^~~~~~~~~~~~~~~</span><br><span class="line">/root/autodl-tmp/GCNv2_SLAM/GCN2/rgbd_gcn.cc:109:84: error: ‘t2’ was not declared in this scope</span><br><span class="line">         double ttrack = std::chrono::duration_cast&lt;std::chrono::duration&lt;double&gt; &gt;(t2 - t1).count();</span><br><span class="line">                                                                                    ^~</span><br><span class="line">/root/autodl-tmp/GCNv2_SLAM/GCN2/rgbd_gcn.cc:109:84: note: suggested alternative: ‘tm’</span><br><span class="line">         double ttrack = std::chrono::duration_cast&lt;std::chrono::duration&lt;double&gt; &gt;(t2 - t1).count();</span><br><span class="line">                                                                                    ^~</span><br><span class="line">                                                                                    tm</span><br><span class="line">/root/autodl-tmp/GCNv2_SLAM/GCN2/rgbd_gcn.cc:109:89: error: ‘t1’ was not declared in this scope</span><br><span class="line">         double ttrack = std::chrono::duration_cast&lt;std::chrono::duration&lt;double&gt; &gt;(t2 - t1).count();</span><br><span class="line">                                                                                         ^~</span><br><span class="line">/root/autodl-tmp/GCNv2_SLAM/GCN2/rgbd_gcn.cc:109:89: note: suggested alternative: ‘tm’</span><br><span class="line">         double ttrack = std::chrono::duration_cast&lt;std::chrono::duration&lt;double&gt; &gt;(t2 - t1).count();</span><br><span class="line">                                                                                         ^~</span><br><span class="line">                                                                                         tm</span><br><span class="line">^CCMakeFiles/rgbd_gcn.dir/build.make:62: recipe for target &#x27;CMakeFiles/rgbd_gcn.dir/GCN2/rgbd_gcn.cc.o&#x27; failed</span><br><span class="line">make[2]: *** [CMakeFiles/rgbd_gcn.dir/GCN2/rgbd_gcn.cc.o] Interrupt</span><br><span class="line">CMakeFiles/Makefile2:67: recipe for target &#x27;CMakeFiles/rgbd_gcn.dir/all&#x27; failed</span><br><span class="line">make[1]: *** [CMakeFiles/rgbd_gcn.dir/all] Interrupt</span><br><span class="line">Makefile:83: recipe for target &#x27;all&#x27; failed</span><br><span class="line">make: *** [all] Interrupt</span><br></pre></td></tr></table></figure><p>错误的主要含义就是<code>std::chrono::monotonic_clock</code>不存在，这是老版本的一个类，C++11新版本已经给它删掉了。查看<code>GCN2/rgbd_gcn.cc</code>代码可以发现，这里有宏定义来区分</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// GCNv2_SLAM/GCN2/rgbd_gcn.cc</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> COMPILEDWITHC11</span></span><br><span class="line">        std::chrono::steady_clock::time_point t1 = std::chrono::steady_clock::<span class="built_in">now</span>();</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">        std::chrono::monotonic_clock::time_point t1 = std::chrono::monotonic_clock::<span class="built_in">now</span>();</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>前文提到的<code>GCNv2_SLAM/CMakeLists.txt</code>中需要保留<code>add_definitions(-DCOMPILEDWITHC11)</code>就是这个原因。有了这个宏定义此处代码就会编译<code>std::chrono::steady_clock</code>，不会有编译错误了。</p><h4 id="4-2-4-修改PT文件"><a href="#4-2-4-修改PT文件" class="headerlink" title="4.2.4. 修改PT文件"></a>4.2.4. 修改PT文件</h4><p>依旧需要修改3个pt文件，注意这时候修改的内容和CPU运行不一样！</p><p>修改<code>GCNv2_SLAM/GCN2</code>下gcn2_320x240.pt、gcn2_640x480.pt和gcn2_tiny_320x240.pt中的内容。需要先解压文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unzip gcn2_320x240.pt</span><br></pre></td></tr></table></figure><p>解压出来之后会有<code>GCNv2_SLAM/GCN2/gcn/code/gcn.py</code>文件，这里的<code>grid_sampler</code>函数在pytorch 1.3.0之前是默认传入True的，1.3.0改成默认False了，所以需要手动传入True</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 原代码</span></span><br><span class="line">_32 = torch.squeeze(torch.grid_sampler(<span class="built_in">input</span>, grid, <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line"><span class="comment"># 修改为</span></span><br><span class="line">_32 = torch.squeeze(torch.grid_sampler(<span class="built_in">input</span>, grid, <span class="number">0</span>, <span class="number">0</span>, <span class="literal">True</span>))</span><br></pre></td></tr></table></figure><p>替换了之后，重新压缩pt文件，先删了原本的，重新压缩</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rm</span> -rf gcn2_320x240.pt</span><br><span class="line">zip -r gcn2_320x240.pt gcn</span><br><span class="line"><span class="built_in">rm</span> -rf gcn <span class="comment">#删除刚刚的gcn文件夹</span></span><br></pre></td></tr></table></figure><p>这只是一个例子，其他几个gcn2压缩包都要用相同的方式修改！</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">unzip gcn2_640x480.pt</span><br><span class="line"><span class="built_in">rm</span> -rf gcn2_640x480.pt</span><br><span class="line"><span class="comment"># 修改下面这个文件</span></span><br><span class="line"><span class="comment">#   GCNv2_SLAM/GCN2/gcn2_480x640/code/gcn2_480x640.py</span></span><br><span class="line"><span class="comment"># 重新压缩</span></span><br><span class="line">zip -r gcn2_640x480.pt gcn2_480x640</span><br><span class="line"><span class="built_in">rm</span> -rf gcn2_480x640</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">unzip gcn2_tiny_320x240.pt</span><br><span class="line"><span class="built_in">rm</span> -rf gcn2_tiny_320x240.pt</span><br><span class="line"><span class="comment"># 修改文件</span></span><br><span class="line"><span class="comment">#   gcnv2slam/GCNv2_SLAM/GCN2/gcn2_tiny/code/gcn2_tiny.py</span></span><br><span class="line"><span class="comment"># 重新压缩</span></span><br><span class="line">zip -r gcn2_tiny_320x240.pt gcn2_tiny</span><br><span class="line"><span class="built_in">rm</span> -rf gcn2_tiny</span><br></pre></td></tr></table></figure><h3 id="4-3-编译项目"><a href="#4-3-编译项目" class="headerlink" title="4.3. 编译项目"></a>4.3. 编译项目</h3><p>修改了上面提到的几处问题，就能正常编译成功了</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/02/a67122422a0a7f536f5e1fe241ef06d3.png" alt="image.png"></p><p>如果需要从头重新编译项目，需要删除build目录缓存。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rm</span> -rf Thirdparty/g2o/build/</span><br><span class="line"><span class="built_in">rm</span> -rf Thirdparty/DBoW2/build/</span><br><span class="line"><span class="built_in">rm</span> -rf Vocabulary/*.bin</span><br><span class="line"><span class="built_in">rm</span> -rf ./build</span><br></pre></td></tr></table></figure><h2 id="5-配置VNC环境"><a href="#5-配置VNC环境" class="headerlink" title="5. 配置VNC环境"></a>5. 配置VNC环境</h2><h3 id="5-1-安装VNC服务端"><a href="#5-1-安装VNC服务端" class="headerlink" title="5.1. 安装VNC服务端"></a>5.1. 安装VNC服务端</h3><p>默认情况下autodl是没有GUI环境的，也就没有办法运行项目（会有x11报错）</p><p>所以我们需要依照官方文档来配置一下GUI：<a href="https://www.autodl.com/docs/gui/">www.autodl.com/docs/gui/</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装基本的依赖包</span></span><br><span class="line">apt update &amp;&amp; apt install -y libglu1-mesa-dev mesa-utils xterm xauth x11-xkb-utils xfonts-base xkb-data libxtst6 libxv1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装libjpeg-turbo和turbovnc</span></span><br><span class="line"><span class="built_in">export</span> TURBOVNC_VERSION=2.2.5</span><br><span class="line"><span class="built_in">export</span> LIBJPEG_VERSION=2.0.90</span><br><span class="line">wget http://aivc.ks3-cn-beijing.ksyun.com/packages/libjpeg-turbo/libjpeg-turbo-official_<span class="variable">$&#123;LIBJPEG_VERSION&#125;</span>_amd64.deb</span><br><span class="line">wget http://aivc.ks3-cn-beijing.ksyun.com/packages/turbovnc/turbovnc_<span class="variable">$&#123;TURBOVNC_VERSION&#125;</span>_amd64.deb</span><br><span class="line">dpkg -i libjpeg-turbo-official_<span class="variable">$&#123;LIBJPEG_VERSION&#125;</span>_amd64.deb</span><br><span class="line">dpkg -i turbovnc_<span class="variable">$&#123;TURBOVNC_VERSION&#125;</span>_amd64.deb</span><br><span class="line"><span class="built_in">rm</span> -rf *.deb</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动VNC服务端，这一步可能涉及vnc密码配置（注意不是实例的账户密码）。另外如果出现报错xauth未找到，那么使用apt install xauth再安装一次</span></span><br><span class="line"><span class="built_in">rm</span> -rf /tmp/.X1*  <span class="comment"># 如果再次启动，删除上一次的临时文件，否则无法正常启动</span></span><br><span class="line">USER=root /opt/TurboVNC/bin/vncserver :1 -desktop X -auth /root/.Xauthority -geometry 1920x1080 -depth 24 -rfbwait 120000 -rfbauth /root/.vnc/passwd -fp /usr/share/fonts/X11/misc/,/usr/share/fonts -rfbport 6006</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查是否启动，如果有vncserver的进程，证明已经启动</span></span><br><span class="line">ps -ef | grep vnc | grep -v grep</span><br></pre></td></tr></table></figure><p>启动vnc服务端会让你输入密码，为了方便我直接用了autodl实例的密码。只读密码<code>view-only password</code>选择n不设置。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@autodl-container-e39d46b8d3-01da7b14:~/vnc]$ USER=root /opt/TurboVNC/bin/vncserver :1 -desktop X -auth /root/.Xauthority -geometry 1920x1080 -depth 24 -rfbwait 120000 -rfbauth /root/.vnc/passwd -fp /usr/share/fonts/X11/misc/,/usr/share/fonts -rfbport 6006</span><br><span class="line"></span><br><span class="line">You will require a password to access your desktops.</span><br><span class="line"></span><br><span class="line">Password: </span><br><span class="line">Warning: password truncated to the length of 8.</span><br><span class="line">Verify:   </span><br><span class="line">Would you like to enter a view-only password (y/n)? n</span><br><span class="line">xauth:  file /root/.Xauthority does not exist</span><br><span class="line"></span><br><span class="line">Desktop &#x27;TurboVNC: autodl-container-e39d46b8d3-01da7b14:1 (root)&#x27; started on display autodl-container-e39d46b8d3-01da7b14:1</span><br><span class="line"></span><br><span class="line">Creating default startup script /root/.vnc/xstartup.turbovnc</span><br><span class="line">Starting applications specified in /root/.vnc/xstartup.turbovnc</span><br><span class="line">Log file is /root/.vnc/autodl-container-e39d46b8d3-01da7b14:1.log</span><br></pre></td></tr></table></figure><p>启动vnc服务端后就能搜到进程了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@autodl-container-e39d46b8d3-01da7b14:~/vnc# ps -ef | grep vnc | grep -v grep</span><br><span class="line">root      28861      1  0 11:22 pts/0    00:00:00 /opt/TurboVNC/bin/Xvnc :1 -desktop TurboVNC: autodl-container-64eb44b6f5-c569ba8d:1 (root) -httpd /opt/TurboVNC/bin//../java -auth /root/.Xauthority -geometr</span><br></pre></td></tr></table></figure><p>如果关闭了实例之后需要重启vnc，执行这两个命令就行了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rm</span> -rf /tmp/.X1*  <span class="comment"># 如果再次启动，删除上一次的临时文件，否则无法正常启动</span></span><br><span class="line">USER=root /opt/TurboVNC/bin/vncserver :1 -desktop X -auth /root/.Xauthority -geometry 1920x1080 -depth 24 -rfbwait 120000 -rfbauth /root/.vnc/passwd -fp /usr/share/fonts/X11/misc/,/usr/share/fonts -rfbport 6006</span><br></pre></td></tr></table></figure><h3 id="5-2-本地端口绑定"><a href="#5-2-本地端口绑定" class="headerlink" title="5.2. 本地端口绑定"></a>5.2. 本地端口绑定</h3><p>随后还需要进行本地ssh端口绑定，先到autodl的控制台实例列表里面复制一下ssh链接命令，应该长这样</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -p 端口号 root@域名</span><br></pre></td></tr></table></figure><p>使用下面这个命令在本地的终端运行，就能实现把远程的端口绑定到本地的6006端口了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -CNgv -L 6006:127.0.0.1:6006 root@域名 -p 端口号</span><br></pre></td></tr></table></figure><p>如果命令正确，输入这个命令后会让你键入autodl实例的密码，在控制台里面复制然后ctrl+shift+v（command+v）粘贴就行了。</p><p>期间需要保持这个终端一直开启，不然转发会终止。</p><h3 id="5-3-链接VNC"><a href="#5-3-链接VNC" class="headerlink" title="5.3. 链接VNC"></a>5.3. 链接VNC</h3><p>这里我使用了祖传的<a href="https://www.realvnc.com/en/connect/download/viewer/">VNC Viewer</a>来连云端，全平台都有客户端，下载安装就可以了。</p><p>安装了之后，直接在顶栏输入<code>127.0.0.1:6006</code>来链接云端。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/02/54f3efbf747088dde3378beaae3b2de3.png" alt="image.png"></p><p>如果提示connection closed大概率是vnc服务没有正常安装或者端口转发没有成功，请重试上述步骤。顺利的话，就会弹出来让你输入密码。</p><p><strong>这里的密码是启动vnc服务端时设置的密码</strong>，根据你设置的密码输入就行。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/02/12ae5231f3cd6a02a793333cf3dc4841.png"></p><p>链接成功，会是黑屏，正常情况</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/02/e5b8b4825b46610a7b1dc41a36934b62.png" alt="image.png"></p><h3 id="5-4-测试VNC是否安装成功"><a href="#5-4-测试VNC是否安装成功" class="headerlink" title="5.4. 测试VNC是否安装成功"></a>5.4. 测试VNC是否安装成功</h3><p>我们可以用Pangolin的示例程序来试试有没有配置成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> Pangolin-0.6/examples/HelloPangolin</span><br><span class="line"><span class="built_in">mkdir</span> build &amp;&amp; <span class="built_in">cd</span> build</span><br><span class="line">cmake ..</span><br><span class="line">make</span><br></pre></td></tr></table></figure><p>编译完成之后需要先执行<code>export DISPLAY=:1</code>启用GUI再启动需要GUI的程序</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> DISPLAY=:1</span><br><span class="line">./HelloPangolin </span><br></pre></td></tr></table></figure><p>如果没有export直接启动，还是会报错</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@autodl-container-e39d46b8d3-01da7b14:~/autodl-tmp/Pangolin-0.6/examples/HelloPangolin/build# ./HelloPangolin </span><br><span class="line">terminate called after throwing an instance of &#x27;std::runtime_error&#x27;</span><br><span class="line">  what():  Pangolin X11: Failed to open X display</span><br><span class="line">Aborted (core dumped)</span><br></pre></td></tr></table></figure><p>export了环境变量之后就能正常启动，且VNC里面也能看到画面了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@autodl-container-e39d46b8d3-01da7b14:~/autodl-tmp/Pangolin-0.6/examples/HelloPangolin/build# export DISPLAY=:1</span><br><span class="line">root@autodl-container-e39d46b8d3-01da7b14:~/autodl-tmp/Pangolin-0.6/examples/HelloPangolin/build# ./HelloPangolin </span><br></pre></td></tr></table></figure><p>出现下面这个魔方就是安装VNC成功啦</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/02/50899e86b90c9553dee4da5655e76ed4.png" alt="image.png"></p><p>你也可以编译opencv的demo来测试vnc是否正常</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> opencv-3.4.5/samples/cpp/example_cmake</span><br><span class="line"><span class="built_in">mkdir</span> build &amp;&amp; <span class="built_in">cd</span> build </span><br><span class="line">cmake ..</span><br><span class="line">make</span><br><span class="line"><span class="comment"># 导入环境变量之后再启动</span></span><br><span class="line"><span class="built_in">export</span> DISPLAY=:1</span><br><span class="line">./opencv_example</span><br></pre></td></tr></table></figure><p>如果正常，vnc里面会出现一个hello opencv，因为没有摄像头所以是黑屏</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/02/b2fb06eb34c33fb8cf008136419e0cc9.png" alt="image.png"></p><h2 id="6-运行GCNv2-SLAM分析TUM数据集"><a href="#6-运行GCNv2-SLAM分析TUM数据集" class="headerlink" title="6. 运行GCNv2_SLAM分析TUM数据集"></a>6. 运行GCNv2_SLAM分析TUM数据集</h2><p>接下来就可以运行项目了，还是去下载TUM数据集，这里把之前博客的命令copy过来。</p><h3 id="6-1-下载数据集"><a href="#6-1-下载数据集" class="headerlink" title="6.1. 下载数据集"></a>6.1. 下载数据集</h3><p>下载地址：<a href="https://cvg.cit.tum.de/data/datasets/rgbd-dataset/download">cvg.cit.tum.de&#x2F;data&#x2F;datasets&#x2F;rgbd-dataset&#x2F;download</a></p><p>下载<code>fr1/desk</code>数据集，这是一个桌子的RGBD数据</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/01/6ebeb1fe9366e07ea5dd7f0697b72d4f.png" alt="image.png"></p><p>在GCNv2_SLAM工程下新建<code>datasets/TUM</code>,将数据集下载到其中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 新建datasets/TUM数据集文件夹</span></span><br><span class="line"><span class="built_in">mkdir</span> -p datasets/TUM </span><br><span class="line"><span class="built_in">cd</span> datasets/TUM</span><br><span class="line"><span class="comment"># 下载数据集到datasets/TUM文件夹内</span></span><br><span class="line">wget -O rgbd_dataset_freiburg1_desk.tgz https://cvg.cit.tum.de/rgbd/dataset/freiburg1/rgbd_dataset_freiburg1_desk.tgz</span><br><span class="line"><span class="comment"># 解压数据集</span></span><br><span class="line">tar -xvf rgbd_dataset_freiburg1_desk.tgz</span><br></pre></td></tr></table></figure><p>然后还需要下载一个<code>associate.py</code>脚本来处理一下数据集才能正常运行</p><p>下载地址：<a href="https://svncvpr.in.tum.de/cvpr-ros-pkg/trunk/rgbd_benchmark/rgbd_benchmark_tools/src/rgbd_benchmark_tools/associate.py">svncvpr.in.tum.de</a>，同时在<a href="https://github.com/musnows/GCNv2_SLAM/blob/86c1efc0cc6c40669df20c0a62017815e18771b7/docker/associate.py">我的Github仓库</a>也做了留档。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -O associate.py https://svncvpr.in.tum.de/cvpr-ros-pkg/trunk/rgbd_benchmark/rgbd_benchmark_tools/src/rgbd_benchmark_tools/associate.py</span><br></pre></td></tr></table></figure><p>这个脚本只能用python2运行，需要下载numpy库。注意autodl的环境中python绑定到了python3，环境中的python2被拦掉了，所以需要安装独立的python2命令来运行python2。</p><p>在Pytorch1.5.1版本的autodl镜像中，可以直接使用下面的命令来安装python2和pip2：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install -y python-dev python-pip</span><br></pre></td></tr></table></figure><p>随后安装numpy库就ok了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">root@autodl-container-e39d46b8d3-01da7b14:~/autodl-tmp/GCNv2_SLAM/datasets/TUM# pip2 install numpy</span><br><span class="line">DEPRECATION: Python 2.7 reached the end of its life on January 1st, 2020. Please upgrade your Python as Python 2.7 is no longer maintained. pip 21.0 will drop support for Python 2.7 in January 2021. More details about Python 2 support in pip can be found at https://pip.pypa.io/en/latest/development/release-process/#python-2-support pip 21.0 will remove support for this functionality.</span><br><span class="line">Looking in indexes: http://mirrors.aliyun.com/pypi/simple</span><br><span class="line">Collecting numpy</span><br><span class="line">  Downloading http://mirrors.aliyun.com/pypi/packages/3a/5f/47e578b3ae79e2624e205445ab77a1848acdaa2929a00eeef6b16eaaeb20/numpy-1.16.6-cp27-cp27mu-manylinux1_x86_64.whl (17.0 MB)</span><br><span class="line">     |████████████████████████████████| 17.0 MB 21.1 MB/s </span><br><span class="line">Installing collected packages: numpy</span><br><span class="line">Successfully installed numpy-1.16.6</span><br></pre></td></tr></table></figure><p>执行脚本来处理两个文件，在数据文件夹里执行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python2 associate.py rgbd_dataset_freiburg1_desk/rgb.txt rgbd_dataset_freiburg1_desk/depth.txt &gt; rgbd_dataset_freiburg1_desk/associate.txt</span><br></pre></td></tr></table></figure><p>执行python命令后可以看看合并成功了没有，如下应该就是没问题了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1305031472.895713 rgb/1305031472.895713.png 1305031472.892944 depth/1305031472.892944.png</span><br><span class="line">1305031472.927685 rgb/1305031472.927685.png 1305031472.924814 depth/1305031472.924814.png</span><br><span class="line">1305031472.963756 rgb/1305031472.963756.png 1305031472.961213 depth/1305031472.961213.png</span><br></pre></td></tr></table></figure><p>在同一个网站下载的其他TUM数据集也需要用相同的方式进行处理</p><h3 id="6-2-运行项目"><a href="#6-2-运行项目" class="headerlink" title="6.2. 运行项目"></a>6.2. 运行项目</h3><p>随后进入项目的GCN2目录执行命令，我把命令中的路径都改成了相对路径</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 注意需要导入vnc环境变量</span></span><br><span class="line"><span class="built_in">export</span> DISPLAY=:1</span><br><span class="line"><span class="comment"># 运行项目</span></span><br><span class="line"><span class="built_in">cd</span> GCN2</span><br><span class="line">GCN_PATH=gcn2_320x240.pt ./rgbd_gcn ../Vocabulary/GCNvoc.bin TUM3_small.yaml ../datasets/TUM/rgbd_dataset_freiburg1_desk ../datasets/TUM/rgbd_dataset_freiburg1_desk/associate.txt</span><br></pre></td></tr></table></figure><p>项目能正常运行，VNC中也有图像输出</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/02/90d472a3a51c0e26823a5d4e0249e583.png" alt="image.png"></p><p>运行结束后的输出如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">[root@autodl-container-e39d46b8d3-01da7b14:~/autodl-tmp/GCNv2_SLAM/GCN2]$ GCN_PATH=gcn2_320x240.pt ./rgbd_gcn ../Vocabulary/GCNvoc.bin TUM3_small.yaml ../datasets/TUM/rgbd_dataset_freiburg1_desk ../datasets/TUM/rgbd_dataset_freiburg1_desk/associate.txt</span><br><span class="line"></span><br><span class="line">ORB-SLAM2 Copyright (C) 2014-2016 Raul Mur-Artal, University of Zaragoza.</span><br><span class="line">This program comes with ABSOLUTELY NO WARRANTY;</span><br><span class="line">This is free software, and you are welcome to redistribute it</span><br><span class="line">under certain conditions. See LICENSE.txt.</span><br><span class="line"></span><br><span class="line">Input sensor was set to: RGB-D</span><br><span class="line"></span><br><span class="line">Loading ORB Vocabulary. This could take a while...</span><br><span class="line">Vocabulary loaded!</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Camera Parameters: </span><br><span class="line">- fx: 267.7</span><br><span class="line">- fy: 269.6</span><br><span class="line">- cx: 160.05</span><br><span class="line">- cy: 123.8</span><br><span class="line">- k1: 0</span><br><span class="line">- k2: 0</span><br><span class="line">- p1: 0</span><br><span class="line">- p2: 0</span><br><span class="line">- fps: 30</span><br><span class="line">- color order: RGB (ignored if grayscale)</span><br><span class="line"></span><br><span class="line">ORB Extractor Parameters: </span><br><span class="line">- Number of Features: 1000</span><br><span class="line">- Scale Levels: 8</span><br><span class="line">- Scale Factor: 1.2</span><br><span class="line">- Initial Fast Threshold: 20</span><br><span class="line">- Minimum Fast Threshold: 7</span><br><span class="line"></span><br><span class="line">Depth Threshold (Close/Far Points): 5.97684</span><br><span class="line"></span><br><span class="line">-------</span><br><span class="line">Start processing sequence ...</span><br><span class="line">Images in the sequence: 573</span><br><span class="line"></span><br><span class="line">Framebuffer with requested attributes not available. Using available framebuffer. You may see visual artifacts.New map created with 251 points</span><br><span class="line">Finished!</span><br><span class="line">-------</span><br><span class="line"></span><br><span class="line">median tracking time: 0.0187857</span><br><span class="line">mean tracking time: 0.0193772</span><br><span class="line"></span><br><span class="line">Saving camera trajectory to CameraTrajectory.txt ...</span><br><span class="line"></span><br><span class="line">trajectory saved!</span><br><span class="line"></span><br><span class="line">Saving keyframe trajectory to KeyFrameTrajectory.txt ...</span><br><span class="line"></span><br><span class="line">trajectory saved!</span><br></pre></td></tr></table></figure><p>用时0.0187857，约合53hz，和论文里面GTX1070laptop的80hz还是差的有点远。</p><p>后面又跑了几次，结果更慢了。不过整体还是比CPU运行快了n多倍了！</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">median tracking time: 0.0225817</span><br><span class="line">mean tracking time: 0.0236844</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/02/586e7b5cb58e0d06104c7cba18674c8d.png"></p><h2 id="7-尝试4090运行失败"><a href="#7-尝试4090运行失败" class="headerlink" title="7. 尝试4090运行失败"></a>7. 尝试4090运行失败</h2><h3 id="7-1-环境配置（PyTorch-1-11-0）"><a href="#7-1-环境配置（PyTorch-1-11-0）" class="headerlink" title="7.1. 环境配置（PyTorch 1.11.0）"></a>7.1. 环境配置（PyTorch 1.11.0）</h3><p>我尝试使用过4090显卡，环境如下。4090没办法选更低版本的PyTorch了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PyTorch  1.11.0</span><br><span class="line">Python  3.8(ubuntu20.04)</span><br><span class="line">Cuda  11.3</span><br></pre></td></tr></table></figure><p><strong>依赖项都用相同的命令安装</strong>，以下是安装依赖项时的部分截图。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/02/683388a19f6bf7cd4023774a4d6ed745.png"></p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/02/4092f72fabfdc9ef3e38e732b36a1dd5.png"></p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/02/3ba57ba8d3591426e8988e55117a1aef.png" alt="image.png"></p><p>对应的Pytorch 1.11.0版本的libtorch下载链接如下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://download.pytorch.org/libtorch/cu113/libtorch-cxx11-abi-shared-with-deps-1.11.0%2Bcu113.zip</span><br></pre></td></tr></table></figure><p>整个包比较大，一共有1.6GB，需要慢慢等待下载了。建议还是本地提前下好再传上去，毕竟autodl每一分钟都是钱呐！</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/02/b84a9e7819ee2b4179df0a74a62daaf5.png" alt="image.png"></p><p>最终项目可以正常编译完成（也需要执行上文提到的代码修改）</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/02/e65a1b852168d63fa22cc2030323ecc7.png" alt="image.png"></p><h3 id="7-2-数据集处理"><a href="#7-2-数据集处理" class="headerlink" title="7.2. 数据集处理"></a>7.2. 数据集处理</h3><p>在Pytorch1.11.0镜像中需要用下面的方式安装python2来处理数据集，主要是python-pip包会提示不可用，没办法直接安装。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装python2</span></span><br><span class="line">apt-get install -y python-dev-is-python2</span><br><span class="line"><span class="comment"># 安装pip2</span></span><br><span class="line">wget https://bootstrap.pypa.io/pip/2.7/get-pip.py</span><br><span class="line">python2 get-pip.py</span><br></pre></td></tr></table></figure><p>获取到的python2如下，随后正常安装numpy来运行脚本就行了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@autodl-container-64eb44b6f5-c569ba8d:~# python2 -V</span><br><span class="line">Python 2.7.18</span><br><span class="line">root@autodl-container-64eb44b6f5-c569ba8d:~# pip2 -V</span><br><span class="line">pip 20.3.4 from /usr/local/lib/python2.7/dist-packages/pip (python 2.7)</span><br></pre></td></tr></table></figure><h3 id="7-3-运行GCN2发生coredump"><a href="#7-3-运行GCN2发生coredump" class="headerlink" title="7.3. 运行GCN2发生coredump"></a>7.3. 运行GCN2发生coredump</h3><p>还是用相同的命令启动程序</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> DISPLAY=:1</span><br><span class="line"><span class="built_in">cd</span> GCN2</span><br><span class="line">GCN_PATH=gcn2_320x240.pt ./rgbd_gcn ../Vocabulary/GCNvoc.bin TUM3_small.yaml ../datasets/TUM/rgbd_dataset_freiburg1_desk ../datasets/TUM/rgbd_dataset_freiburg1_desk/associate.txt</span><br></pre></td></tr></table></figure><p>完蛋，coredump了！</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">Camera Parameters: </span><br><span class="line">- fx: 267.7</span><br><span class="line">- fy: 269.6</span><br><span class="line">- cx: 160.05</span><br><span class="line">- cy: 123.8</span><br><span class="line">- k1: 0</span><br><span class="line">- k2: 0</span><br><span class="line">- p1: 0</span><br><span class="line">- p2: 0</span><br><span class="line">- fps: 30</span><br><span class="line">- color order: RGB (ignored if grayscale)</span><br><span class="line">terminate called after throwing an instance of &#x27;c10::Error&#x27;</span><br><span class="line">  what():  Legacy model format is not supported on mobile.</span><br><span class="line">Exception raised from deserialize at ../torch/csrc/jit/serialization/import.cpp:267 (most recent call first):</span><br><span class="line">frame #0: c10::Error::Error(c10::SourceLocation, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;) + 0x6b (0x7fefb6de20eb in /root/autodl-tmp/libtorch/lib/libc10.so)</span><br><span class="line">frame #1: c10::detail::torchCheckFail(char const*, char const*, unsigned int, char const*) + 0xd1 (0x7fefb6dddc41 in /root/autodl-tmp/libtorch/lib/libc10.so)</span><br><span class="line">frame #2: &lt;unknown function&gt; + 0x35dd53d (0x7feff3ef353d in /root/autodl-tmp/libtorch/lib/libtorch_cpu.so)</span><br><span class="line">frame #3: torch::jit::load(std::shared_ptr&lt;caffe2::serialize::ReadAdapterInterface&gt;, c10::optional&lt;c10::Device&gt;, std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;&amp;) + 0x1cd (0x7feff3ef48ad in /root/autodl-tmp/libtorch/lib/libtorch_cpu.so)</span><br><span class="line">frame #4: torch::jit::load(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, c10::optional&lt;c10::Device&gt;, std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;&amp;) + 0xc1 (0x7feff3ef64c1 in /root/autodl-tmp/libtorch/lib/libtorch_cpu.so)</span><br><span class="line">frame #5: torch::jit::load(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, c10::optional&lt;c10::Device&gt;) + 0x6f (0x7feff3ef65cf in /root/autodl-tmp/libtorch/lib/libtorch_cpu.so)</span><br><span class="line">frame #6: ORB_SLAM2::GCNextractor::GCNextractor(int, float, int, int, int) + 0x670 (0x7ff071e213c0 in /root/autodl-tmp/GCNv2_SLAM/lib/libORB_SLAM2.so)</span><br><span class="line">frame #7: ORB_SLAM2::Tracking::Tracking(ORB_SLAM2::System*, DBoW2::TemplatedVocabulary&lt;cv::Mat, DBoW2::FORB&gt;*, ORB_SLAM2::FrameDrawer*, ORB_SLAM2::MapDrawer*, ORB_SLAM2::Map*, ORB_SLAM2::KeyFrameDatabase*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, int) + 0x1e7e (0x7ff071dfcf0e in /root/autodl-tmp/GCNv2_SLAM/lib/libORB_SLAM2.so)</span><br><span class="line">frame #8: ORB_SLAM2::System::System(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, ORB_SLAM2::System::eSensor, bool) + 0x5ae (0x7ff071de459e in /root/autodl-tmp/GCNv2_SLAM/lib/libORB_SLAM2.so)</span><br><span class="line">frame #9: main + 0x22f (0x5609d811ae2f in ./rgbd_gcn)</span><br><span class="line">frame #10: __libc_start_main + 0xf3 (0x7fefb704a083 in /lib/x86_64-linux-gnu/libc.so.6)</span><br><span class="line">frame #11: _start + 0x2e (0x5609d811c7ce in ./rgbd_gcn)</span><br><span class="line"></span><br><span class="line">Aborted (core dumped)</span><br></pre></td></tr></table></figure><p>GPT说此问题是因为save模型和load模型的PyTorch版本不一致，导致无法加载。如果不出意外的话GCNv2应该是用README里面写的PyTorch 1.0.1版本来保存模型的，可能是1.0.1版本已经和1.11.0版本完全不兼容了。</p><p>这个问题我没找到解决方案，于是放弃治疗。本来GCNv2就是一个很老的项目了，在40系显卡上不好运行也正常。网上其实能搜到一篇在<a href="https://blog.csdn.net/qq_45482740/article/details/134299049">4060拯救者上运行GCNv2</a>的博客，但是那篇博客里面并没有提到这个coredump的问题，问GPT也没给出一个可行的方案，还是不浪费时间了。</p><h3 id="7-4-尝试使用-PyTorch-1-10-0-镜像"><a href="#7-4-尝试使用-PyTorch-1-10-0-镜像" class="headerlink" title="7.4. 尝试使用 PyTorch 1.10.0 镜像"></a>7.4. 尝试使用 PyTorch 1.10.0 镜像</h3><p>上面这个coredump搜到了几篇<a href="https://github.com/LaurentMazare/tch-rs/issues/469">github issue</a>，有的提到了可能是PyTorch 1.11.0版本和之前版本的镜像加载方式不同，导致无法load镜像。所以尝试使用PyTorch 1.10.0版本来重新测试一下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PyTorch  1.10.0</span><br><span class="line">Python  3.8(ubuntu20.04)</span><br><span class="line">Cuda  11.3</span><br></pre></td></tr></table></figure><p>对应版本libtorch的下载链接，其他依赖项用上文提到的命令安装就可以了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://download.pytorch.org/libtorch/cu113/libtorch-cxx11-abi-shared-with-deps-1.10.0%2Bcu113.zip</span><br></pre></td></tr></table></figure><p>然而并不行，依旧会有错误，这一次没有加载模型的error了，变成了段错误。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Start processing sequence ...</span><br><span class="line">Images in the sequence: 573</span><br><span class="line"></span><br><span class="line">Pass &#x27;Combine redundant instructions&#x27; is not initialized.</span><br><span class="line">Verify if there is a pass dependency cycle.</span><br><span class="line">Required Passes:</span><br><span class="line">Segmentation fault (core dumped)</span><br></pre></td></tr></table></figure><p>在类似项目<code>YOLO_ORB_SLAM3</code>的仓库中能找到相关的issue：<a href="https://github.com/YWL0720/YOLO_ORB_SLAM3/issues/12">github.com&#x2F;YWL0720&#x2F;YOLO_ORB_SLAM3&#x2F;issues&#x2F;12</a>，依旧是libtorch版本不对导致的问题，issue中提到的解决办法是将libtorch降低到1.7.1版本。</p><p>看来是没辙啦，因为40系显卡至少需要CUDA 11.3版本，在AutoDL上最低只能选择到PyTorch 1.10.0的镜像了，没法装1.7.0的镜像。</p><p>不再尝试了。</p><h2 id="8-The-end"><a href="#8-The-end" class="headerlink" title="8. The end"></a>8. The end</h2><p>本文成功在2080ti的环境上运行了GCNv2_SLAM项目，虽然运行速度依旧抵不上论文中用1070laptop跑出来的80HZ，但总比本地CPU运行的龟速快多了。</p>]]></content>
    
    
    <summary type="html">配置GCNv2_SLAM所需环境并实现AutoDL云端运行项目的全过程记录</summary>
    
    
    
    <category term="编程学习" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="项目开发记录" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="Linux" scheme="https://blog.musnow.top/tags/Linux/"/>
    
    <category term="Cpp" scheme="https://blog.musnow.top/tags/Cpp/"/>
    
    <category term="SLAM" scheme="https://blog.musnow.top/tags/SLAM/"/>
    
  </entry>
  
  <entry>
    <title>【SLAM】于ubuntu18.04上纯CPU运行GCNv2_SLAM的记录（ARM64/AMD64）</title>
    <link href="https://blog.musnow.top/posts/1589125738/"/>
    <id>https://blog.musnow.top/posts/1589125738/</id>
    <published>2025-01-31T01:27:42.000Z</published>
    <updated>2025-04-04T12:06:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>配置GCNv2_SLAM所需的环境并实现纯cpu运行项目的全过程记录。</p><p>前排提醒：<strong>本文所述安装方式只在没有显卡的虚拟机上通过了测试，有显卡的主机涉及到CUDA等显卡依赖项版本问题，本文可能不适用</strong>！</p><h2 id="1-环境说明"><a href="#1-环境说明" class="headerlink" title="1. 环境说明"></a>1. 环境说明</h2><p>GCNv2_SLAM是比较出名的基于RGB-D传感器的SLAM系统之一，对应的论文和github如下：</p><ul><li><a href="https://ieeexplore.ieee.org/document/8758836">GCNv2: Efficient Correspondence Prediction for Real-Time SLAM</a>;</li><li><a href="https://github.com/jiexiong2016/GCNv2_SLAM">github.com&#x2F;jiexiong2016&#x2F;GCNv2_SLAM</a>;</li></ul><p>不过，对新手不友好的一点是，项目github的readme里面并没有详细的描述如何安装依赖项和运行这个项目（毕竟论文开源代码的目标人群都是会SLAM的），在慕雪搜索相关资料的时候还遇到了大量水文，给本来就不太了解opencv和pytorch的我造成了更大的困扰。</p><p>不过，最终我还是搜索到了几篇写的很不错的导引文章，里面详细说明了如何在纯CPU环境中运行这个项目，包括安装依赖项的全过程。</p><ul><li>强推：<a href="https://blog.csdn.net/yangyu0515/article/details/136621489">GCNv2_SLAM-CPU详细安装教程(ubuntu18.04)-CSDN博客</a>；</li><li><a href="https://blog.csdn.net/NolanTHU/article/details/124106912?utm_medium=distribute.pc_relevant.none-task-blog-2" title="GCNv2复现-CPU-CSDN博客">GCNv2复现-CPU-CSDN博客</a>；</li><li><a href="https://www.liuxiao.org/2019/07/%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0%EF%BC%9Agcnv2-efficient-correspondence-prediction-for-real-time-slam/" title="论文笔记：GCNv2: Efficient Correspondence Prediction for Real-Time SLAM – 技术刘">论文笔记：GCNv2: Efficient Correspondence Prediction for Real-Time SLAM – 技术刘</a></li></ul><p>本文是对上述博客的汇总和记录，同时我还将GCNv2_SLAM的运行环境制作成了dockerfile，可以在支持docker的linux桌面环境中运行。该镜像只在parallels的ubuntu-22.04-arm64虚拟机中测试过，不保证对其他环境也适用。</p><blockquote><p>你可以在我的github中找到修改过后的项目和dockerfile文件：<a href="https://github.com/musnows/GCNv2_SLAM/tree/cpu">github.com&#x2F;musnows&#x2F;GCNv2_SLAM&#x2F;tree&#x2F;cpu</a>；构建docker镜像和使用docker容器纯cpu运行GCNv2项目的引导可见：<a href="https://github.com/musnows/GCNv2_SLAM/blob/cpu/docker/README.md">musnows&#x2F;GCNv2_SLAM&#x2F;docker&#x2F;README</a>。</p></blockquote><p>前期准备：</p><ul><li>ubuntu-18.04-desktop虚拟机或支持docker的ubuntu-desktop虚拟机；</li><li>一个能正常clone到github项目的网络环境（不然会很烦）；</li></ul><p>本文示例环境：ubuntu 22.04 arm虚拟机下启动的ubuntu18.04 docker容器（套娃）。</p><p>话不多说，开整！</p><h2 id="2-安装依赖项"><a href="#2-安装依赖项" class="headerlink" title="2. 安装依赖项"></a>2. 安装依赖项</h2><p>项目运行主要要手动安装4个依赖项，以及数不清的apt包。</p><h3 id="2-1-基础apt包安装"><a href="#2-1-基础apt包安装" class="headerlink" title="2.1. 基础apt包安装"></a>2.1. 基础apt包安装</h3><p>运行之前先更新一下环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update -y</span><br><span class="line">sudo apt-get upgrade -y</span><br></pre></td></tr></table></figure><p>首先是要用的到的工具包（这些都用得上）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 工具包</span></span><br><span class="line">sudo apt-get install -y \</span><br><span class="line">    apt-utils \</span><br><span class="line">    curl wget unzip zip \</span><br><span class="line">    cmake make automake \</span><br><span class="line">    openssh-server \</span><br><span class="line">    net-tools \</span><br><span class="line">    vim git gcc g++</span><br></pre></td></tr></table></figure><p>随后是python工具组</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install -y \</span><br><span class="line">    python-dev \</span><br><span class="line">    python-pip \</span><br><span class="line">    python3-dev \</span><br><span class="line">    python3-pip \</span><br><span class="line">    python-all-dev \</span><br><span class="line">    python3-all-dev</span><br></pre></td></tr></table></figure><p>还需要安装x11相关的依赖包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># x11 for gui</span></span><br><span class="line">sudo apt-get install -y  \</span><br><span class="line">    libx11-xcb1 \</span><br><span class="line">    libfreetype6 \</span><br><span class="line">    libdbus-1-3 \</span><br><span class="line">    libfontconfig1 \</span><br><span class="line">    libxkbcommon0   \</span><br><span class="line">    libxkbcommon-x11-0</span><br></pre></td></tr></table></figure><h3 id="2-2-Pangolin-6-0"><a href="#2-2-Pangolin-6-0" class="headerlink" title="2.2. Pangolin 6.0"></a>2.2. Pangolin 6.0</h3><p>安装pangolin之前先安装如下依赖包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># pangolin</span></span><br><span class="line">sudo apt-get install -y \</span><br><span class="line">    libgl1-mesa-dev \</span><br><span class="line">    libglew-dev \</span><br><span class="line">    libboost-dev \</span><br><span class="line">    libboost-thread-dev \</span><br><span class="line">    libboost-filesystem-dev \</span><br><span class="line">    libpython2.7-dev \</span><br><span class="line">    libglu1-mesa-dev freeglut3-dev</span><br></pre></td></tr></table></figure><p>随后使用如下命令来编译安装Pangolin，Github地址：<a href="https://github.com/stevenlovegrove/Pangolin/releases/tag/v0.6">Pangolin-0.6</a>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载</span></span><br><span class="line">wget -O Pangolin-0.6.tar.gz https://github.com/stevenlovegrove/Pangolin/archive/refs/tags/v0.6.tar.gz</span><br><span class="line"><span class="comment"># 解压</span></span><br><span class="line">tar -zxvf Pangolin-0.6.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="built_in">pushd</span> Pangolin-0.6</span><br><span class="line">    <span class="built_in">rm</span> -rf build</span><br><span class="line">    <span class="built_in">mkdir</span> build &amp;&amp; <span class="built_in">cd</span> build</span><br><span class="line">    <span class="comment"># 编译安装 </span></span><br><span class="line">    cmake -DCPP11_NO_BOOST=1 ..</span><br><span class="line">    make -j$(<span class="built_in">nproc</span>)</span><br><span class="line">    make install</span><br><span class="line">    <span class="comment"># 刷新动态库</span></span><br><span class="line">    ldconfig</span><br><span class="line"><span class="built_in">popd</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/01/0efd5c46bd0e3e0ac45d22bef1b8c2f2.png" alt="image.png"></p><p>随后使用如下命令检查是否安装成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 检查安装成功(能不能编译demo)</span></span><br><span class="line"><span class="built_in">cd</span> Pangolin-0.6/examples/HelloPangolin</span><br><span class="line"><span class="built_in">mkdir</span> build &amp;&amp; <span class="built_in">cd</span> build</span><br><span class="line">cmake ..</span><br><span class="line">make</span><br></pre></td></tr></table></figure><p>一切正常的话，应该能编译成功。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu-linux-22-04-02-desktop:/work/docker/Pangolin-0.6/examples/HelloPangolin/build<span class="comment"># make</span></span><br><span class="line">Scanning dependencies of target HelloPangolin</span><br><span class="line">[ 50%] Building CXX object CMakeFiles/HelloPangolin.<span class="built_in">dir</span>/main.o</span><br><span class="line">[100%] Linking CXX executable HelloPangolin</span><br><span class="line">[100%] Built target HelloPangolin</span><br></pre></td></tr></table></figure><p>随后执行<code>./HelloPangolin</code>运行程序（需要在GUI环境中执行），如果出现了一个三色正方体的弹窗就是ok了</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/01/d18bcd36789140c2ab88aeb843f01281.png" alt="image.png"></p><h3 id="2-3-OpenCV-3-4-5"><a href="#2-3-OpenCV-3-4-5" class="headerlink" title="2.3. OpenCV 3.4.5"></a>2.3. OpenCV 3.4.5</h3><p>先安装依赖项</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 解决:Unmet dependencies.Try&#x27;apt--fix-broken install&#x27;with no packages(or specify a solution)</span></span><br><span class="line">sudo apt --fix-broken install</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get upgrade</span><br><span class="line"><span class="comment"># 安装依赖项</span></span><br><span class="line">sudo apt-get install -y \</span><br><span class="line">build-essential libgtk2.0-dev libgtk-3-dev \</span><br><span class="line">libavcodec-dev libavformat-dev \</span><br><span class="line">libjpeg.dev libtiff5.dev libswscale-dev \</span><br><span class="line">libcanberra-gtk-module \</span><br><span class="line">libavresample-dev libgphoto2-dev</span><br></pre></td></tr></table></figure><p>opencv的依赖项<strong>libjasper</strong>包在arm64和amd64上有区别，如果是amd64环境，使用如下命令安装。命令已在ubuntu18.04虚拟机中测试通过，就是<code>security.ubuntu.com</code>可能会因为网络问题无法联通，多试几次就OK了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># amd64</span></span><br><span class="line"><span class="comment"># 添加新源后继续安装</span></span><br><span class="line">sudo apt-get install -y software-properties-common </span><br><span class="line"><span class="comment"># 下面这条命令实测在arm64上不能用，amd64平台可用</span></span><br><span class="line">sudo add-apt-repository <span class="string">&quot;deb http://security.ubuntu.com/ubuntu xenial-security main&quot;</span></span><br><span class="line">sudo apt-get -y update </span><br><span class="line">sudo apt-get install -y libjasper1 libjasper-dev</span><br></pre></td></tr></table></figure><p>amd64平台添加新软件源后，update命令执行结果如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get -y update</span><br><span class="line">Hit:1 http://us.archive.ubuntu.com/ubuntu bionic InRelease</span><br><span class="line">Hit:2 http://security.ubuntu.com/ubuntu bionic-security InRelease       </span><br><span class="line">Hit:3 http://us.archive.ubuntu.com/ubuntu bionic-updates InRelease      </span><br><span class="line">Hit:4 http://security.ubuntu.com/ubuntu xenial-security InRelease       </span><br><span class="line">Hit:5 http://us.archive.ubuntu.com/ubuntu bionic-backports InRelease    </span><br><span class="line">Reading package lists... Done</span><br></pre></td></tr></table></figure><p>如果是arm64平台，使用上面的软件源会出现404错误，在本站<a href="https://blog.musnow.top/posts/4284761477/">另外一篇博客</a>中有记录。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Err:6 http://security.ubuntu.com/ubuntu xenial-security/main arm64 Packages</span><br><span class="line">  404  Not Found [IP: 185.125.190.83 80]</span><br><span class="line">Fetched 106 kB in 2s (44.6 kB/s)</span><br><span class="line">Reading package lists... Done</span><br><span class="line">E: Failed to fetch http://security.ubuntu.com/ubuntu/dists/xenial-security/main/binary-arm64/Packages  404  Not Found [IP: 185.125.190.83 80]</span><br><span class="line">E: Some index files failed to download. They have been ignored, or old ones used instead.</span><br></pre></td></tr></table></figure><p>在arm64上需要借助老版本的清华源来安装，将如下命令写入脚本文件使用sudo执行。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env bash</span></span><br><span class="line"><span class="built_in">set</span> -e</span><br><span class="line"><span class="comment"># arm64 ubuntu 18.04</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ xenial main multiverse restricted universe\n\</span></span><br><span class="line"><span class="string">    deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ xenial-security main multiverse restricted universe\n\</span></span><br><span class="line"><span class="string">    deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ xenial-updates main multiverse restricted universe\n\</span></span><br><span class="line"><span class="string">    deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ xenial-backports main multiverse restricted universe\n\</span></span><br><span class="line"><span class="string">    deb-src http://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ xenial main multiverse restricted universe\n\</span></span><br><span class="line"><span class="string">    deb-src http://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ xenial-security main multiverse restricted universe\n\</span></span><br><span class="line"><span class="string">    deb-src http://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ xenial-updates main multiverse restricted universe&quot;</span> &gt;&gt; /etc/apt/sources.list &amp;&amp; \</span><br><span class="line">apt-get -y update</span><br><span class="line">apt-get install -y libjasper1 libjasper-dev</span><br></pre></td></tr></table></figure><details><summary>arm64成功安装libjasper的命令行输出</summary><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu-linux-22-04-02-desktop:/# apt-get install -y libjasper1 libjasper-dev</span><br><span class="line">Reading package lists... Done</span><br><span class="line">Building dependency tree   </span><br><span class="line">Reading state information... Done</span><br><span class="line">Suggested packages:</span><br><span class="line">  libjasper-runtime</span><br><span class="line">The following NEW packages will be installed:</span><br><span class="line">  libjasper-dev libjasper1</span><br><span class="line">0 upgraded, 2 newly installed, 0 to remove and 0 not upgraded.</span><br><span class="line">Need to get 613 kB of archives.</span><br><span class="line">After this operation, 1327 kB of additional disk space will be used.</span><br><span class="line">Get:1 http://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports xenial-security/main arm64 libjasper1 arm64 1.900.1-debian1-2.4ubuntu1.3 [111 kB]</span><br><span class="line">Get:2 http://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports xenial-security/main arm64 libjasper-dev arm64 1.900.1-debian1-2.4ubuntu1.3 [502 kB]</span><br><span class="line">Fetched 613 kB in 1s (758 kB/s)    </span><br><span class="line">debconf: unable to initialize frontend: Dialog</span><br><span class="line">debconf: (No usable dialog-like program is installed, so the dialog based frontend cannot be used. at /usr/share/perl5/Debconf/FrontEnd/Dialog.pm line 76, &lt;&gt; line 2.)</span><br><span class="line">debconf: falling back to frontend: Readline</span><br><span class="line">Selecting previously unselected package libjasper1:arm64.</span><br><span class="line">(Reading database ... 67223 files and directories currently installed.)</span><br><span class="line">Preparing to unpack .../libjasper1_1.900.1-debian1-2.4ubuntu1.3_arm64.deb ...</span><br><span class="line">root@ubuntu-linux-22-04-02-desktop:/#</span><br></pre></td></tr></table></figure></details><br><p>安装好了依赖项后，使用如下命令编译OpenCV，Github地址：<a href="https://github.com/opencv/opencv/releases/tag/3.4.5">opencv的3.4.5版本</a>。</p><p>PS: 如下命令同样适用于安装OpenCV 3.2.0版本，只需要更换链接中的版本号即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载和解压</span></span><br><span class="line">wget -O opencv-3.4.5.tar.gz https://github.com/opencv/opencv/archive/refs/tags/3.4.5.tar.gz</span><br><span class="line">tar -zxvf opencv-3.4.5.tar.gz</span><br><span class="line"><span class="comment"># 开始编译和安装</span></span><br><span class="line"><span class="built_in">pushd</span> opencv-3.4.5</span><br><span class="line">    <span class="built_in">rm</span> -rf build</span><br><span class="line">    <span class="built_in">mkdir</span> build &amp;&amp; <span class="built_in">cd</span> build </span><br><span class="line">    <span class="comment"># 构建和编译安装，-j4代表4线程并发</span></span><br><span class="line">    cmake -D CMAKE_BUILD_TYPE=Release -D CMAKE_INSTALL_PREFIX=/usr/local ..</span><br><span class="line">    make -j$(<span class="built_in">nproc</span>)</span><br><span class="line">    make install</span><br><span class="line">    <span class="comment"># 刷新动态库</span></span><br><span class="line">    ldconfig</span><br><span class="line"><span class="built_in">popd</span></span><br></pre></td></tr></table></figure><p>使用如下命令检测opencv是否安装成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># pkg-config --modversion opencv</span></span><br><span class="line">3.4.5</span><br><span class="line"><span class="comment"># pkg-config --cflags opencv</span></span><br><span class="line">-I/usr/local/include/opencv -I/usr/local/include</span><br><span class="line"><span class="comment"># pkg-config --libs   opencv</span></span><br><span class="line">-L/usr/local/lib -lopencv_dnn -lopencv_ml -lopencv_objdetect -lopencv_shape -lopencv_stitching -lopencv_superres -lopencv_videostab -lopencv_calib3d -lopencv_features2d -lopencv_highgui -lopencv_videoio -lopencv_imgcodecs -lopencv_video -lopencv_photo -lopencv_imgproc -lopencv_flann -lopencv_core</span><br></pre></td></tr></table></figure><p>可以试试编译测试demo代码，注意需要在GUI环境中执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 检测是否安装成功</span></span><br><span class="line"><span class="built_in">cd</span> opencv-3.4.5/samples/cpp/example_cmake</span><br><span class="line"><span class="built_in">mkdir</span> build &amp;&amp; <span class="built_in">cd</span> build </span><br><span class="line">cmake ..</span><br><span class="line">make</span><br><span class="line">./opencv_example</span><br></pre></td></tr></table></figure><p>如果成功运行，会弹出一个hello opencv的弹窗。如果你的环境有摄像头，则会出现摄像头画面，如果没有摄像头，则为黑屏画面。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/01/cf9ec531bb3ead1d358fb888106eeab2.png" alt="image.png"></p><p>如果运行这个demo的时候遇到了<code>Failed to load module &quot;canberra-gtk-module&quot;</code>错误，是因为缺少了一个软件包，安装一下就可以了（上文安装包中已经列出）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install libcanberra-gtk-module</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/01/e11b909249a7ad2dec8e0500b4a69bd6.png" alt="image.png"></p><p>如果有摄像头的时候运行<code>./opencv_example</code>的时，遇到了弹窗没有弹出程序就终止，请参考<a href="https://blog.musnow.top/posts/7683466939/">博客</a>里面的说明尝试确认是否为<code>waitKey()</code>函数导致。</p><h3 id="2-4-Eigen-3-7"><a href="#2-4-Eigen-3-7" class="headerlink" title="2.4. Eigen 3.7"></a>2.4. Eigen 3.7</h3><p>Eigen包在gitlab里面下载：<a href="https://gitlab.com/libeigen/eigen/-/releases/3.3.7">gitlab.com&#x2F;libeigen&#x2F;eigen&#x2F;-&#x2F;releases&#x2F;3.3.7</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载</span></span><br><span class="line">wget -O eigen-3.3.7.tar.gz https://gitlab.com/libeigen/eigen/-/archive/3.3.7/eigen-3.3.7.tar.gz</span><br><span class="line">tar -zxvf eigen-3.3.7.tar.gz</span><br><span class="line"><span class="comment"># 开始编译和安装</span></span><br><span class="line"><span class="built_in">cd</span> eigen-3.3.7</span><br><span class="line"><span class="built_in">mkdir</span> build &amp;&amp; <span class="built_in">cd</span> build</span><br><span class="line">cmake ..</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><p>注意需要执行cp命令拷贝一下头文件到另外一个目录中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在很多程序中include时经常使用#include &lt;Eigen/Dense&gt;而不是使用#include &lt;eigen3/Eigen/Dense&gt;</span></span><br><span class="line"><span class="comment"># 因此安装后需要将头文件从 /usr/local/include/eigen3/ 复制到 /usr/local/include</span></span><br><span class="line"><span class="comment"># 后续小节会有C++测试代码说明</span></span><br><span class="line">sudo <span class="built_in">cp</span> -r /usr/local/include/eigen3/Eigen /usr/local/include</span><br></pre></td></tr></table></figure><p>这里给出一个cpp的demo代码来测试是否安装成功（直接g++编译就可以了）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="comment">//需要将头文件从 /usr/local/include/eigen3/ 复制到 /usr/local/include</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Eigen/Dense&gt;</span></span></span><br><span class="line"><span class="comment">//using Eigen::MatrixXd;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> Eigen;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> Eigen::internal;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> Eigen::Architecture;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;*******************1D-object****************&quot;</span>&lt;&lt;endl;</span><br><span class="line">        Vector4d v1;</span><br><span class="line">        v1&lt;&lt; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;v1=\n&quot;</span>&lt;&lt;v1&lt;&lt;endl;</span><br><span class="line"> </span><br><span class="line">        <span class="function">VectorXd <span class="title">v2</span><span class="params">(<span class="number">3</span>)</span></span>;</span><br><span class="line">        v2&lt;&lt;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;v2=\n&quot;</span>&lt;&lt;v2&lt;&lt;endl;</span><br><span class="line"> </span><br><span class="line">        Array4i v3;</span><br><span class="line">        v3&lt;&lt;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;v3=\n&quot;</span>&lt;&lt;v3&lt;&lt;endl;</span><br><span class="line"> </span><br><span class="line">        <span class="function">ArrayXf <span class="title">v4</span><span class="params">(<span class="number">3</span>)</span></span>;</span><br><span class="line">        v4&lt;&lt;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;v4=\n&quot;</span>&lt;&lt;v4&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu-linux-22-04-02-desktop:/work/docker/pkg/eigen-3.3.7/build<span class="comment"># g++ test.cpp -o test_eigen</span></span><br><span class="line">root@ubuntu-linux-22-04-02-desktop:/work/docker/pkg/eigen-3.3.7/build<span class="comment"># ./test_eigen</span></span><br><span class="line">*******************1D-object****************</span><br><span class="line">v1=</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">v2=</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">v3=</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">v4=</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td></tr></table></figure><h3 id="2-5-Pytorch-1-0-1-libtorch"><a href="#2-5-Pytorch-1-0-1-libtorch" class="headerlink" title="2.5. Pytorch 1.0.1 (libtorch)"></a>2.5. Pytorch 1.0.1 (libtorch)</h3><p>原博客中安装的是1.4.0，但是在我测试的arm环境中1.4.0有非常多的错误，这里直接采用GCNv2 Github中给出的1.0.1版本进行安装。</p><p>安装之前需要保证环境中有python3（测试环境为3.6.9）并安装pyyaml包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install python3-dev python3-pip</span><br><span class="line">pip3 install pyyaml</span><br></pre></td></tr></table></figure><p>随后克隆pytorch并编译libtorch动态库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> --recursive -b v1.0.1 https://github.com/pytorch/pytorch</span><br><span class="line"><span class="built_in">cd</span> pytorch &amp;&amp; <span class="built_in">mkdir</span> build &amp;&amp; <span class="built_in">cd</span> build</span><br><span class="line">python3 ../tools/build_libtorch.py</span><br></pre></td></tr></table></figure><p>这里就有难题啦！整个pytorch的库加上sub-modules一共有3gb之大，要想从github上安稳克隆下来可不简单。这里给大家分享一个百度云盘的链接，是所有子模组都被成功clone之后的压缩包。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">通过网盘分享的文件：pytorch.full.1.0.1.tar.gz</span><br><span class="line">链接: https://pan.baidu.com/s/1XHeYcHH5CMKmacFodFzqeA 提取码: 4h2g</span><br></pre></td></tr></table></figure><p>下载了这个压缩包，使用<code>tar -zxvf</code>解压后，使用如下命令检查一下子模组是否完整，如果完整的话这个命令不会有任何输出。不完整它会继续下载子模组</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git submodule update --init --recursive</span><br></pre></td></tr></table></figure><p>在执行<code>python3 ../tools/build_libtorch.py</code>之前还需要进行两处代码的修改，这里直接给出sed命令，在pytorch库的根目录执行。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sed -i <span class="string">&quot;s/yaml.load(\(.*\))/yaml.load(\1, Loader=yaml.FullLoader)/g&quot;</span> aten/src/ATen/cwrap_parser.py</span><br><span class="line">sed -i <span class="string">&quot;s/yaml.load(\(.*\))/yaml.load(\1, Loader=yaml.FullLoader)/g&quot;</span> tools/cwrap/cwrap.py</span><br></pre></td></tr></table></figure><p>两个代码文件中都只有一处要修改的地方，分别是<code>pytorch/tools/cwrap/cwrap.py</code>文件里面的91行和<code>pytorch/aten/src/ATen/cwrap_parser.py</code>的18行。</p><p>这里的修改是因为pyyaml库的变动（环境中安装的pyyaml版本为6.0.1），需要传入第二个参数Loader。原有的代码是没有传入的，编译的时候会出现如下错误，日志中的重点就是 <code>TypeError: load() missing 1 required positional argument: &#39;Loader&#39;</code> 缺少参数的报错。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;/work/pytorch/cmake/../aten/src/ATen/gen.py&quot;, line 465, in &lt;module&gt;</span><br><span class="line">    generate_outputs()</span><br><span class="line">  File &quot;/work/pytorch/cmake/../aten/src/ATen/gen.py&quot;, line 390, in generate_outputs</span><br><span class="line">    for file in cwrap_files</span><br><span class="line">  File &quot;/work/pytorch/cmake/../aten/src/ATen/gen.py&quot;, line 391, in &lt;listcomp&gt;</span><br><span class="line">    for d in cwrap_parser.parse(file)]</span><br><span class="line">  File &quot;/work/pytorch/aten/src/ATen/cwrap_parser.py&quot;, line 18, in parse</span><br><span class="line">    declaration = yaml.load(&#x27;\n&#x27;.join(declaration_lines))</span><br><span class="line">TypeError: load() missing 1 required positional argument: &#x27;Loader&#x27;</span><br><span class="line">caffe2/CMakeFiles/ATEN_CPU_FILES_GEN_TARGET.dir/build.make:132: recipe for target &#x27;aten/src/ATen/CPUByteType.cpp&#x27; failed</span><br><span class="line">make[2]: *** [aten/src/ATen/CPUByteType.cpp] Error 1</span><br><span class="line">CMakeFiles/Makefile2:3522: recipe for target &#x27;caffe2/CMakeFiles/ATEN_CPU_FILES_GEN_TARGET.dir/all&#x27; failed</span><br><span class="line">make[1]: *** [caffe2/CMakeFiles/ATEN_CPU_FILES_GEN_TARGET.dir/all] Error 2</span><br><span class="line">make[1]: *** Waiting for unfinished jobs....</span><br><span class="line">[ 15%] Building CXX object third_party/protobuf/cmake/CMakeFiles/libprotobuf.dir/__/src/google/protobuf/wrappers.pb.cc.o</span><br><span class="line">[ 15%] Linking CXX static library ../../../lib/libprotobuf.a</span><br><span class="line">[ 15%] Built target libprotobuf</span><br><span class="line">Makefile:140: recipe for target &#x27;all&#x27; failed</span><br><span class="line">make: *** [all] Error 2</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;../tools/build_libtorch.py&quot;, line 30, in &lt;module&gt;</span><br><span class="line">    subprocess.check_call(command, universal_newlines=True, env=my_env)</span><br><span class="line">  File &quot;/usr/lib/python3.6/subprocess.py&quot;, line 311, in check_call</span><br><span class="line">    raise CalledProcessError(retcode, cmd)</span><br><span class="line">subprocess.CalledProcessError: Command &#x27;[&#x27;/work/pytorch/tools/build_pytorch_libs.sh&#x27;, &#x27;--use-nnpack&#x27;, &#x27;--use-qnnpack&#x27;, &#x27;caffe2&#x27;]&#x27; returned non-zero exit status 2.</span><br></pre></td></tr></table></figure><p>说实话，个人认为pyyaml库的这个变动非常不合理，版本更迭后，一个强制需要传入的参数应该给出缺省值才对。如果它给出了缺省值，那么这里的代码即便没有传入也不会报错了。</p><p>修改了这两处代码后，执行<code>python3 ../tools/build_libtorch.py</code>，不出意外的话编译就成功啦。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/01/d18e645bc9b88ea66615dc534394c570.png" alt="image.png"></p><p>原博主使用的pytorch 1.4.0需要解决的问题比我这里更多，如果你想通过pytorch 1.4.0来编译libtorch，请参考本文最开头贴出的博客。</p><h2 id="3-编译GCNv2-SLAM"><a href="#3-编译GCNv2-SLAM" class="headerlink" title="3. 编译GCNv2_SLAM"></a>3. 编译GCNv2_SLAM</h2><p>接下来我们就可以编译正主啦！首先克隆代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/jiexiong2016/GCNv2_SLAM.git</span><br></pre></td></tr></table></figure><h3 id="3-1-修改build-sh编译项目"><a href="#3-1-修改build-sh编译项目" class="headerlink" title="3.1. 修改build.sh编译项目"></a>3.1. 修改build.sh编译项目</h3><p>修改项目根目录下的build.sh，将<code>TORCH_PATH</code>修改为pytorch中的<code>torch/lib/tmp_install/share/cmake/Torch</code>目录。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmake .. -DCMAKE_BUILD_TYPE=Release -DTORCH_PATH=/work/gcnv2slam/pytorch/torch/lib/tmp_install/share/cmake/Torch</span><br></pre></td></tr></table></figure><p>修改了之后，应该就可以执行<code>./build.sh</code>来编译项目了。</p><blockquote><p>比较奇怪的是我的环境中并没有cuda也依旧能在不修改任何代码的情况下编译成功。</p></blockquote><p>最开始的时候，我遇到了一个难题，参考的博客中大多数都用的pytorch 1.4.0，里面都提到了修改<code>TORCH_PATH</code>为<code>pytorch/torch/share/cmake/Torch</code>目录，但是在我的pytorch 1.0.1里面压根没有这个目录。</p><p>本来都要放弃了，最终在GCNv2项目的github里面找到了说明，主要的修改点是<a href="https://github.com/jiexiong2016/GCNv2_SLAM/commit/21cc44894ab6d854fee18bf18b0501c4e134b6b0">jiexiong2016&#x2F;GCNv2_SLAM&#x2F;commit&#x2F;21cc44894</a>这一笔提交，readme里面描述如下</p><blockquote><p>The built libtorch library is located at <code>pytorch/torch/lib/tmp_install/</code> in default.</p><p><strong>Update: Have added support for master branch of pytorch or version larger than 1.0.1. For newer version, set</strong> <strong>​<code>TORCH_PATH</code>​</strong> <strong>to</strong> <strong>​<code>pytorch/torch/share/cmake/Torch</code>​</strong></p></blockquote><p>说白了就是在1.0.1版本中的<code>TORCH_PATH</code>是在<code>pytorch/torch/lib/tmp_install/</code>里面的，更新的pytorch版本是在<code>pytorch/torch/share</code>目录，而1.0.1版本中不存在<code>pytorch/torch/share</code>目录。</p><h3 id="3-2-修改代码来实现纯CPU运行"><a href="#3-2-修改代码来实现纯CPU运行" class="headerlink" title="3.2. 修改代码来实现纯CPU运行"></a>3.2. 修改代码来实现纯CPU运行</h3><h4 id="3-2-1-修改GCNextractor-cc"><a href="#3-2-1-修改GCNextractor-cc" class="headerlink" title="3.2.1. 修改GCNextractor.cc"></a>3.2.1. 修改GCNextractor.cc</h4><p>第一处修改点在<code>GCNv2_SLAM/src/GCNextractor.cc</code>文件中</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一处原代码216行:</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span> *net_fn = <span class="built_in">getenv</span>(<span class="string">&quot;GCN_PATH&quot;</span>);</span><br><span class="line">net_fn = (net_fn == <span class="literal">nullptr</span>) ? <span class="string">&quot;gcn2.pt&quot;</span> : net_fn;</span><br><span class="line"><span class="keyword">module</span> = torch::jit::<span class="built_in">load</span>(net_fn);</span><br><span class="line"><span class="comment">//修改为:</span></span><br><span class="line">torch::DeviceType device_type;</span><br><span class="line">device_type = torch::kCPU;</span><br><span class="line"><span class="function">torch::Device <span class="title">device</span><span class="params">(device_type)</span></span>;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span> *net_fn = <span class="built_in">getenv</span>(<span class="string">&quot;GCN_PATH&quot;</span>);</span><br><span class="line">net_fn = (net_fn == <span class="literal">nullptr</span>) ? <span class="string">&quot;gcn2.pt&quot;</span> : net_fn;</span><br><span class="line"><span class="keyword">module</span> = torch::jit::<span class="built_in">load</span>(net_fn,device);</span><br><span class="line"></span><br><span class="line"><span class="comment">//第二处原代码226行:</span></span><br><span class="line">device_type = torch::kCUDA;</span><br><span class="line"><span class="comment">//修改为:</span></span><br><span class="line">device_type = torch::kCPU;</span><br></pre></td></tr></table></figure><p>修改后的截图如下</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/01/49a212d2e23e839f20752c2281cf01bb.png" alt="image.png"></p><h4 id="3-2-2-修改GCN2下pt文件"><a href="#3-2-2-修改GCN2下pt文件" class="headerlink" title="3.2.2. 修改GCN2下pt文件"></a>3.2.2. 修改GCN2下pt文件</h4><blockquote><p>其实pt文件是不影响编译的，可以在编译完成后再修改</p></blockquote><p>修改<code>GCNv2_SLAM/GCN2</code>下gcn2_320x240.pt、gcn2_640x480.pt和gcn2_tiny_320x240.pt中的内容。需要先解压文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unzip gcn2_320x240.pt</span><br></pre></td></tr></table></figure><p>解压出来之后会有<code>GCNv2_SLAM/GCN2/gcn/code/gcn.py</code>文件，将里面的<code>cuda:0</code>修改成<code>cpu</code>，批量替换就可以了，每个文件里面都是8处。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/01/00fb3643a1eb11af130ecbba57a93ba2.png" alt="image.png"></p><p>替换了之后，重新压缩pt文件，先删了原本的，重新压缩</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rm</span> -rf gcn2_320x240.pt</span><br><span class="line">zip -r gcn2_320x240.pt gcn</span><br><span class="line"><span class="built_in">rm</span> -rf gcn <span class="comment">#删除刚刚的gcn文件夹</span></span><br></pre></td></tr></table></figure><p>这只是一个例子，其他几个gcn2压缩包都要用相同的方式修改！</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">unzip gcn2_640x480.pt</span><br><span class="line"><span class="built_in">rm</span> -rf gcn2_640x480.pt</span><br><span class="line"><span class="comment"># 修改下面这个文件</span></span><br><span class="line"><span class="comment">#   GCNv2_SLAM/GCN2/gcn2_480x640/code/gcn2_480x640.py</span></span><br><span class="line"><span class="comment"># 重新压缩</span></span><br><span class="line">zip -r gcn2_640x480.pt gcn2_480x640</span><br><span class="line"><span class="built_in">rm</span> -rf gcn2_480x640</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">unzip gcn2_tiny_320x240.pt</span><br><span class="line"><span class="built_in">rm</span> -rf gcn2_tiny_320x240.pt</span><br><span class="line"><span class="comment"># 修改文件</span></span><br><span class="line"><span class="comment">#   gcnv2slam/GCNv2_SLAM/GCN2/gcn2_tiny/code/gcn2_tiny.py</span></span><br><span class="line"><span class="comment"># 重新压缩</span></span><br><span class="line">zip -r gcn2_tiny_320x240.pt gcn2_tiny</span><br><span class="line"><span class="built_in">rm</span> -rf gcn2_tiny</span><br></pre></td></tr></table></figure><h4 id="3-2-3-重新编译"><a href="#3-2-3-重新编译" class="headerlink" title="3.2.3. 重新编译"></a>3.2.3. 重新编译</h4><p>修改之后重新编译项目，先删除原有的编译缓存</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rm</span> -rf Thirdparty/g2o/build/</span><br><span class="line"><span class="built_in">rm</span> -rf Thirdparty/DBoW2/build/</span><br><span class="line"><span class="built_in">rm</span> -rf Vocabulary/*.bin</span><br><span class="line"><span class="built_in">rm</span> -rf ./build</span><br></pre></td></tr></table></figure><p>没有问题，编译成功了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Configuring and building ORB_SLAM2 ...</span><br><span class="line">mkdir: cannot create directory &#x27;build&#x27;: File exists</span><br><span class="line">Build type: Release</span><br><span class="line">-- Using flag -std=c++11.</span><br><span class="line">TORCH_PATH set to: /work/gcnv2slam/pytorch/torch/lib/tmp_install/share/cmake/Torch</span><br><span class="line">-- Torch version is: 1.0.0</span><br><span class="line">-- Configuring done</span><br><span class="line">-- Generating done</span><br><span class="line">-- Build files have been written to: /work/gcnv2slam/GCNv2_SLAM/build</span><br><span class="line">[ 91%] Built target ORB_SLAM2</span><br><span class="line">[100%] Built target rgbd_gcn</span><br><span class="line">root@ubuntu-linux-22-04-02-desktop:/work/gcnv2slam/GCNv2_SLAM# </span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/01/faa50cc2fe6df1df46f1d4ea3f60d00a.png" alt="image.png"></p><h2 id="4-使用TUM训练集运行项目"><a href="#4-使用TUM训练集运行项目" class="headerlink" title="4. 使用TUM训练集运行项目"></a>4. 使用TUM训练集运行项目</h2><h3 id="4-1-下载数据集"><a href="#4-1-下载数据集" class="headerlink" title="4.1. 下载数据集"></a>4.1. 下载数据集</h3><p>下载地址：<a href="https://cvg.cit.tum.de/data/datasets/rgbd-dataset/download">cvg.cit.tum.de&#x2F;data&#x2F;datasets&#x2F;rgbd-dataset&#x2F;download</a></p><p>下载<code>fr1/desk</code>数据集，这是一个桌子的RGBD数据</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/01/6ebeb1fe9366e07ea5dd7f0697b72d4f.png" alt="image.png"></p><p>在GCNv2_SLAM工程下新建<code>datasets/TUM</code>,将数据集下载到其中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 新建datasets/TUM数据集文件夹</span></span><br><span class="line"><span class="built_in">mkdir</span> -p datasets/TUM </span><br><span class="line"><span class="built_in">cd</span> datasets/TUM</span><br><span class="line"><span class="comment"># 下载数据集到datasets/TUM文件夹内</span></span><br><span class="line">wget -O rgbd_dataset_freiburg1_desk.tgz https://cvg.cit.tum.de/rgbd/dataset/freiburg1/rgbd_dataset_freiburg1_desk.tgz</span><br><span class="line"><span class="comment"># 解压数据集</span></span><br><span class="line">tar -xvf rgbd_dataset_freiburg1_desk.tgz</span><br></pre></td></tr></table></figure><p>然后还需要下载一个<code>associate.py</code>脚本来处理一下数据集才能正常运行</p><p>下载地址：<a href="https://svncvpr.in.tum.de/cvpr-ros-pkg/trunk/rgbd_benchmark/rgbd_benchmark_tools/src/rgbd_benchmark_tools/associate.py">svncvpr.in.tum.de</a>，同时在<a href="https://github.com/musnows/GCNv2_SLAM/blob/86c1efc0cc6c40669df20c0a62017815e18771b7/docker/associate.py">我的Github仓库</a>也做了留档。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -O associate.py https://svncvpr.in.tum.de/cvpr-ros-pkg/trunk/rgbd_benchmark/rgbd_benchmark_tools/src/rgbd_benchmark_tools/associate.py</span><br></pre></td></tr></table></figure><p>这个脚本只能用python2运行，需要下载numpy库（环境中python2是2.7.17）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 容器内库安装</span></span><br><span class="line">apt-get install -y python-pip</span><br><span class="line">pip install numpy</span><br><span class="line"><span class="comment"># 在数据文件夹里执行命令</span></span><br><span class="line">python associate.py rgbd_dataset_freiburg1_desk/rgb.txt rgbd_dataset_freiburg1_desk/depth.txt &gt; rgbd_dataset_freiburg1_desk/associate.txt</span><br></pre></td></tr></table></figure><p>注意下载numpy库的时候不要用镜像源，否则无法安装。直接下就行了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu-linux-22-04-02-desktop:/work/gcnv2slam/GCNv2_SLAM/datasets/TUM# pip install numpy                            </span><br><span class="line">Collecting numpy</span><br><span class="line">  Downloading https://files.pythonhosted.org/packages/b7/6f/24647f014eef9b67a24adfcbcd4f4928349b4a0f8393b3d7fe648d4d2de3/numpy-1.16.6.zip (5.1MB)</span><br><span class="line">    100% |################################| 5.2MB 470kB/s </span><br><span class="line">Building wheels for collected packages: numpy</span><br><span class="line">  Running setup.py bdist_wheel for numpy ... done</span><br><span class="line">  Stored in directory: /root/.cache/pip/wheels/cb/c2/c1/d99e8bf789c8dd07623af6be95e6a89984c85a05e31b8513c3</span><br><span class="line">Successfully built numpy</span><br><span class="line">Installing collected packages: numpy</span><br><span class="line">Successfully installed numpy-1.16.6</span><br></pre></td></tr></table></figure><p>执行python命令后可以看看合并成功了没有，如下应该就是没问题了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu-linux-22-04-02-desktop:/work/gcnv2slam/GCNv2_SLAM/datasets/TUM# python associate.py rgbd_dataset_freiburg1_desk/rgb.txt rgbd_dataset_freiburg1_desk/depth.txt &gt; rgbd_dataset_freiburg1_desk/associate.txt</span><br><span class="line">root@ubuntu-linux-22-04-02-desktop:/work/gcnv2slam/GCNv2_SLAM/datasets/TUM# tail rgbd_dataset_freiburg1_desk/associate.txt</span><br><span class="line">1305031472.895713 rgb/1305031472.895713.png 1305031472.892944 depth/1305031472.892944.png</span><br><span class="line">1305031472.927685 rgb/1305031472.927685.png 1305031472.924814 depth/1305031472.924814.png</span><br><span class="line">1305031472.963756 rgb/1305031472.963756.png 1305031472.961213 depth/1305031472.961213.png</span><br></pre></td></tr></table></figure><p>在同一个网站下载的其他数据集也需要用相同的方式进行处理</p><h3 id="4-2-运行GCN2"><a href="#4-2-运行GCN2" class="headerlink" title="4.2. 运行GCN2"></a>4.2. 运行GCN2</h3><p>随后进入项目的GCN2目录执行命令，我把命令中的路径都改成了相对路径</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> GCN2</span><br><span class="line">GCN_PATH=gcn2_320x240.pt ./rgbd_gcn ../Vocabulary/GCNvoc.bin TUM3_small.yaml ../datasets/TUM/rgbd_dataset_freiburg1_desk ../datasets/TUM/rgbd_dataset_freiburg1_desk/associate.txt</span><br></pre></td></tr></table></figure><p>如果运行tiny数据集，命令如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> GCN2</span><br><span class="line">GCN_PATH=gcn2_tiny_320x240.pt ./rgbd_gcn ../Vocabulary/GCNvoc.bin TUM3_small.yaml ../datasets/TUM/rgbd_dataset_freiburg1_desk ../datasets/TUM/rgbd_dataset_freiburg1_desk/associate.txt</span><br></pre></td></tr></table></figure><p>在mac上虚拟机安装的arn版本ubuntu22.04中用docker安装的ubuntu18.04成功运行本项目，虽然很卡，但是运行起来了！</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/01/7fcdd32c86feb3a9bb6f008f155c7bd1.png" alt="image.png"></p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/01/1cf6ea0426239abcba02e8a38ce24bea.png" alt="image.png"></p><p>最终结束后的输出如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu-linux-22-04-02-desktop:/work/gcnv2slam/GCNv2_SLAM# cd GCN2/</span><br><span class="line">root@ubuntu-linux-22-04-02-desktop:/work/gcnv2slam/GCNv2_SLAM/GCN2# GCN_PATH=gcn2_320x240.pt ./rgbd_gcn ../Vocabulary/GCNvoc.bin TUM3_small.yaml ../datasets/TUM/rgbd_dataset_freiburg1_desk ../datasets/TUM/rgbd_dataset_freiburg1_desk/associate.txt</span><br><span class="line"></span><br><span class="line">ORB-SLAM2 Copyright (C) 2014-2016 Raul Mur-Artal, University of Zaragoza.</span><br><span class="line">This program comes with ABSOLUTELY NO WARRANTY;</span><br><span class="line">This is free software, and you are welcome to redistribute it</span><br><span class="line">under certain conditions. See LICENSE.txt.</span><br><span class="line"></span><br><span class="line">Input sensor was set to: RGB-D</span><br><span class="line"></span><br><span class="line">Loading ORB Vocabulary. This could take a while...</span><br><span class="line">Vocabulary loaded!</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Camera Parameters: </span><br><span class="line">- fx: 267.7</span><br><span class="line">- fy: 269.6</span><br><span class="line">- cx: 160.05</span><br><span class="line">- cy: 123.8</span><br><span class="line">- k1: 0</span><br><span class="line">- k2: 0</span><br><span class="line">- p1: 0</span><br><span class="line">- p2: 0</span><br><span class="line">- fps: 30</span><br><span class="line">- color order: RGB (ignored if grayscale)</span><br><span class="line"></span><br><span class="line">ORB Extractor Parameters: </span><br><span class="line">- Number of Features: 1000</span><br><span class="line">- Scale Levels: 8</span><br><span class="line">- Scale Factor: 1.2</span><br><span class="line">- Initial Fast Threshold: 20</span><br><span class="line">- Minimum Fast Threshold: 7</span><br><span class="line"></span><br><span class="line">Depth Threshold (Close/Far Points): 5.97684</span><br><span class="line"></span><br><span class="line">-------</span><br><span class="line">Start processing sequence ...</span><br><span class="line">Images in the sequence: 573</span><br><span class="line"></span><br><span class="line">New map created with 251 points</span><br><span class="line">Finished!</span><br><span class="line">-------</span><br><span class="line"></span><br><span class="line">median tracking time: 1.7969</span><br><span class="line">mean tracking time: 1.82306</span><br><span class="line"></span><br><span class="line">Saving camera trajectory to CameraTrajectory.txt ...</span><br><span class="line"></span><br><span class="line">trajectory saved!</span><br><span class="line"></span><br><span class="line">Saving keyframe trajectory to KeyFrameTrajectory.txt ...</span><br><span class="line"></span><br><span class="line">trajectory saved!</span><br><span class="line">root@ubuntu-linux-22-04-02-desktop:/work/gcnv2slam/GCNv2_SLAM/GCN2# </span><br></pre></td></tr></table></figure><p>同时我在vmware16安装的ubuntu18.04虚拟机中也运行了本项目，速度更慢。宿主机配置为牙膏厂的i5-10400+16GB内存，虚拟机分配了8核8GB。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/01/ccc2d0ed4241b2f467c7b9a927c31bdb.png" alt="image.png"></p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/01/278aa853a4e9cbea395cfd737990b94e.png" alt="image.png"></p><h3 id="4-3-简单分析一下结果"><a href="#4-3-简单分析一下结果" class="headerlink" title="4.3. 简单分析一下结果"></a>4.3. 简单分析一下结果</h3><p>在mac m3 16G上parallels安装的arm64版本ubuntu22.04虚拟机（4核8G）中用docker运行的ubuntu18.04容器，容器内运行<code>gcn2_320x240.pt</code>的速度如下，约合0.55hz</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">median tracking time: 1.7969</span><br><span class="line">mean tracking time: 1.82306</span><br></pre></td></tr></table></figure><p>在vmware16安装的amd64版本ubuntu18.04的虚拟机（8核8G）中，运行<code>gcn2_320x240.pt</code>的速度如下，约合0.21hz。没想到比arm的速度还慢！</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">median tracking time: 4.70296</span><br><span class="line">mean tracking time: 4.62603</span><br></pre></td></tr></table></figure><p>作为对比，GCNv2论文中提到了两个平台的运行结果，翻译如下</p><blockquote><p>“GCNv2和我们改进了SLAM方法的GCN-SLAM，在配备Intel i7-7700HQ和移动版NVIDIA 1070的笔记本电脑上运行约80 Hz。为了实现更高的帧率，以满足Jetson TX2上实时推理的需求，我们引入了GCNv2的一个较小版本，称为GCNv2-tiny，在此版本中，我们从conv2开始将特征图的数量减少了一半。GCNv2-tiny运行在40 Hz，使用GCNv2-tiny的GCN-SLAM在TX2上运行为20 Hz，非常适合部署在无人机上。”</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/01/1dc51921ed6220eafbbc17f2f04f218c.png" alt="image.png"></p></blockquote><p>只能说纯CPU运行的效果也太差了！应该是因为GCNv2_SLAM项目有用到神经网络，所以没有显卡的话速度会非常慢。</p><h2 id="5-The-end"><a href="#5-The-end" class="headerlink" title="5. The end"></a>5. The end</h2><p>折腾了好几天，才成功把GCNv2_SLAM需要的环境给配置好，可惜GCNv2用到了深度神经网络，在没有GPU的环境下纯CPU运行的效果太差了，不知道有没有办法优化一下。</p><p>另外，我似乎没搜到GCNv2_SLAM在较新一点的带N卡的电脑（比如30系以后的N卡）中运行的<strong>教程博客</strong>，如果想用GPU来运行一下本项目，估计又是一个大麻烦事……</p><p>更新：慕雪已在AutoDL云平台的2080ti显卡容器化环境中成功运行了GCNv2_SLAM，效果远好于本地CPU运行，详见<a href="https://blog.musnow.top/posts/1071165018">【SLAM】于AutoDL云上GPU运行GCNv2_SLAM的记录</a>。</p>]]></content>
    
    
    <summary type="html">配置GCNv2_SLAM所需的环境并实现纯CPU运行项目的全过程记录（ARM64/AMD64）</summary>
    
    
    
    <category term="编程学习" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="项目开发记录" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="Linux" scheme="https://blog.musnow.top/tags/Linux/"/>
    
    <category term="Cpp" scheme="https://blog.musnow.top/tags/Cpp/"/>
    
    <category term="SLAM" scheme="https://blog.musnow.top/tags/SLAM/"/>
    
  </entry>
  
  <entry>
    <title>【Docker】dockerfile识别当前构建的镜像平台</title>
    <link href="https://blog.musnow.top/posts/8484489314/"/>
    <id>https://blog.musnow.top/posts/8484489314/</id>
    <published>2025-01-30T08:37:37.000Z</published>
    <updated>2025-01-30T08:37:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>在编写dockerfile的时候，可能会遇到需要针对不同平台进行不同操作的时候，这需要我们对dockerfile进行针对性修改。</p><p>比如opencv的依赖项<code>libjasper-dev</code>在ubuntu18.04上就需要根据不同的平台做不同的处理，关于这个库的安装在另外一篇<a href="https://blog.musnow.top/posts/4284761477/">博客</a>里面有介绍。</p><p>在dockerfile中，我们可以通过下面的方式来区分当前编译的镜像平台是什么。</p><p>这里使用ARG引入了变量TARGETARCH，这是docker的builder会自动传入的一个变量，指代的是当前构建的镜像的版本。通过这个变量我们就可以写判断语句，根据不同的平台做不同的操作了。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ARG</span> TARGETARCH</span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> install/libjasper /tmp/install/libjasper</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$TARGETARCH</span>&quot;</span> = <span class="string">&quot;amd64&quot;</span> ]; <span class="keyword">then</span> \</span></span><br><span class="line"><span class="language-bash">        <span class="built_in">echo</span> <span class="string">&quot;Installing libjasper for amd64&quot;</span>; \</span></span><br><span class="line"><span class="language-bash">        <span class="built_in">chmod</span> 777 /tmp/install/libjasper/install_libjasper_amd64.sh; \</span></span><br><span class="line"><span class="language-bash">        /tmp/install/libjasper/install_libjasper_amd64.sh; \</span></span><br><span class="line"><span class="language-bash">    <span class="keyword">elif</span> [ <span class="string">&quot;<span class="variable">$TARGETARCH</span>&quot;</span> = <span class="string">&quot;arm64&quot;</span> ]; <span class="keyword">then</span> \</span></span><br><span class="line"><span class="language-bash">        <span class="built_in">echo</span> <span class="string">&quot;Installing libjasper for arm64&quot;</span>; \</span></span><br><span class="line"><span class="language-bash">        <span class="built_in">chmod</span> 777 /tmp/install/libjasper/install_libjasper_arm64.sh; \</span></span><br><span class="line"><span class="language-bash">        /tmp/install/libjasper/install_libjasper_arm64.sh; \</span></span><br><span class="line"><span class="language-bash">    <span class="keyword">else</span> \</span></span><br><span class="line"><span class="language-bash">        <span class="built_in">echo</span> <span class="string">&quot;Unsupported architecture for install libjasper: <span class="variable">$TARGETARCH</span>&quot;</span>; \</span></span><br><span class="line"><span class="language-bash">        <span class="built_in">exit</span> 1; \</span></span><br><span class="line"><span class="language-bash">    <span class="keyword">fi</span></span></span><br></pre></td></tr></table></figure><p>问题就解决啦！</p>]]></content>
    
    
    <summary type="html">dockerfile如何识别当前构建的镜像平台？</summary>
    
    
    
    <category term="编程学习" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="Docker学习" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/Docker%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Docker" scheme="https://blog.musnow.top/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>【SLAM】OpenCV在arm64上提示找不到libjasper-dev</title>
    <link href="https://blog.musnow.top/posts/4284761477/"/>
    <id>https://blog.musnow.top/posts/4284761477/</id>
    <published>2025-01-30T07:59:12.000Z</published>
    <updated>2025-03-06T02:42:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>解决OpenCV依赖项安装时在arm64上提示找不到libjasper-dev的问题。</p><h2 id="问题说明"><a href="#问题说明" class="headerlink" title="问题说明"></a>问题说明</h2><p>最近我在尝试编译opencv，安装依赖项<code>libjasper1</code>和<code>libjasper-dev</code>的时候就遇到了这个问题。在amd64平台上，我们可以通过下面的命令安装（ubuntu18.04）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">apt-get install -y software-properties-common </span><br><span class="line">add-apt-repository <span class="string">&quot;deb http://security.ubuntu.com/ubuntu xenial-security main&quot;</span></span><br><span class="line">apt-get -y update </span><br><span class="line">apt-get install -y libjasper1 libjasper-dev</span><br></pre></td></tr></table></figure><p>但是在arm64的机器上，这个新添加的源会提示404。注意404不是网络问题，而是指定的文件不存在。根据这里显示的url，其实就是因为<code>binary-arm64</code>这个路径不存在。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Err:6 http://security.ubuntu.com/ubuntu xenial-security/main arm64 Packages</span><br><span class="line">  404  Not Found [IP: 185.125.190.83 80]</span><br><span class="line">Fetched 106 kB in 2s (44.6 kB/s)</span><br><span class="line">Reading package lists... Done</span><br><span class="line">E: Failed to fetch http://security.ubuntu.com/ubuntu/dists/xenial-security/main/binary-arm64/Packages  404  Not Found [IP: 185.125.190.83 80]</span><br><span class="line">E: Some index files failed to download. They have been ignored, or old ones used instead.</span><br></pre></td></tr></table></figure><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>根据<a href="https://blog.csdn.net/u011622208/article/details/105252720">这篇博客</a>，arm架构的ubuntu18.04需要使用下面的方式安装这两个库。</p><p>将下面的清华源写入<code>/etc/apt/sources.list</code>文件的末尾（注意，如果你执行过上文的命令错误添加了会404的源，需要将那个源注释掉）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ xenial main multiverse restricted universe</span><br><span class="line">deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ xenial-security main multiverse restricted universe</span><br><span class="line">deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ xenial-updates main multiverse restricted universe</span><br><span class="line">deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ xenial-backports main multiverse restricted universe</span><br><span class="line">deb-src http://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ xenial main multiverse restricted universe</span><br><span class="line">deb-src http://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ xenial-security main multiverse restricted universe</span><br><span class="line">deb-src http://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ xenial-updates main multiverse restricted universe</span><br><span class="line">deb-src http://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ xenial-backports main multiverse restricted universe</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/01/d9fb2bd9e4567f93eaaa617dd5f981ba.png" alt="image.png"></p><p>修改文件之后，执行如下命令就可以安装了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt-get -y update </span><br><span class="line">apt-get install -y libjasper1 libjasper-dev</span><br></pre></td></tr></table></figure><p>安装成功的输出如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu-linux-22-04-02-desktop:/# apt-get install -y libjasper1 libjasper-dev</span><br><span class="line">Reading package lists... Done</span><br><span class="line">Building dependency tree   </span><br><span class="line">Reading state information... Done</span><br><span class="line">Suggested packages:</span><br><span class="line">  libjasper-runtime</span><br><span class="line">The following NEW packages will be installed:</span><br><span class="line">  libjasper-dev libjasper1</span><br><span class="line">0 upgraded, 2 newly installed, 0 to remove and 0 not upgraded.</span><br><span class="line">Need to get 613 kB of archives.</span><br><span class="line">After this operation, 1327 kB of additional disk space will be used.</span><br><span class="line">Get:1 http://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports xenial-security/main arm64 libjasper1 arm64 1.900.1-debian1-2.4ubuntu1.3 [111 kB]</span><br><span class="line">Get:2 http://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports xenial-security/main arm64 libjasper-dev arm64 1.900.1-debian1-2.4ubuntu1.3 [502 kB]</span><br><span class="line">Fetched 613 kB in 1s (758 kB/s)    </span><br><span class="line">debconf: unable to initialize frontend: Dialog</span><br><span class="line">debconf: (No usable dialog-like program is installed, so the dialog based frontend cannot be used. at /usr/share/perl5/Debconf/FrontEnd/Dialog.pm line 76, &lt;&gt; line 2.)</span><br><span class="line">debconf: falling back to frontend: Readline</span><br><span class="line">Selecting previously unselected package libjasper1:arm64.</span><br><span class="line">(Reading database ... 67223 files and directories currently installed.)</span><br><span class="line">Preparing to unpack .../libjasper1_1.900.1-debian1-2.4ubuntu1.3_arm64.deb ...</span><br></pre></td></tr></table></figure><p>搞定！</p>]]></content>
    
    
    <summary type="html">本文解决了OpenCV在arm64设备上提示找不到libjasper-dev包的问题</summary>
    
    
    
    <category term="编程学习" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="项目开发记录" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="Linux" scheme="https://blog.musnow.top/tags/Linux/"/>
    
    <category term="ubuntu" scheme="https://blog.musnow.top/tags/ubuntu/"/>
    
    <category term="SLAM" scheme="https://blog.musnow.top/tags/SLAM/"/>
    
  </entry>
  
</feed>
