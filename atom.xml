<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>慕雪的寒舍</title>
  
  <subtitle>雪下了一夜</subtitle>
  <link href="https://blog.musnow.top/atom.xml" rel="self"/>
  
  <link href="https://blog.musnow.top/"/>
  <updated>2025-05-26T01:24:55.000Z</updated>
  <id>https://blog.musnow.top/</id>
  
  <author>
    <name>慕雪年华</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【Mac】拒绝parallels toolbox，从我做起！</title>
    <link href="https://blog.musnow.top/posts/9085567599/"/>
    <id>https://blog.musnow.top/posts/9085567599/</id>
    <published>2025-05-26T00:57:24.000Z</published>
    <updated>2025-05-26T01:24:55.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文是个纯吐槽文，写的比较随意，仅代表个人观点。</p></blockquote><p>前几天，为了尝试parallels虚拟机的“融合模式”，去官网重新下了最新版本的parallels虚拟机（AppStore里面的版本是没有融合模式的），当时买macbook air送了两年的标准版，可以直接激活使用。</p><p>简单来说，“融合模式”就是可以直接在mac里面以原生软件的方式打开windows虚拟机里面的软件，软件窗口直接在mac里面打开而不是在虚拟机里面打开，但尝试之后发现<strong>软件会非常糊</strong>，个人认为效果还不如直接切换桌面在虚拟机里面用。只是尝试了一小会之后就关闭了融合模式。</p><p>但是，问题就来了，随着这个官网下载的parallels一同安装的，还有一个<strong>parallels toolbox</strong>，我本来以为这个是用来控制虚拟机的软件，所以就直接允许安装了。没想到安装了之后是一系列烦人事情的开始。</p><blockquote><p>实际上：<code>parallels tools</code>是在虚拟机内部安装的，用于控制虚拟机，实现剪贴板同步等功能。<code>parallels toolbox</code>是在mac上安装的一个用来优化mac使用的软件，和虚拟机没有任何关系！</p></blockquote><p>我有另外一台windows台式机，更新完毕parallels虚拟机之后就去打游戏了，第二天回来继续用mac，一看，我靠，<strong>桌面上的文件夹怎么都没了</strong>？我的毕设论文和代码可都在桌面上啊，蛋糕了！</p><p>第一反应是更新parallels虚拟机重新初始化windows的时候把桌面的东西都清空了（因为我在这段时间只做过这一个可能影响电脑的操作），检查了一下windows虚拟机里面的回收站和mac自己的垃圾桶，都没有桌面文件夹，干！难道文件丢了？</p><blockquote><p>这里就得提一嘴<a href="https://blog.musnow.top/posts/3543423459/">备份</a>的重要性了，虽然我的东西都放在了桌面上，但是我的毕设论文是用wps同步过的，毕设代码也有git，即便这两个文件夹都丢了，也不会造成实际上的数据丢失，但烦人和恼火是肯定的！</p></blockquote><p>赶快打开vscode记录里面桌面上的工作空间，正常打开……诶？文件没丢？</p><p>再ls看一下，得嘞，桌面上的文件夹都在，还好还好</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">❯ ls ~/Desktop</span><br><span class="line">final  docker</span><br></pre></td></tr></table></figure><p>但是都在，为什么不显示呢？</p><p>那就只能是被设置成了隐藏文件夹，使用<code>command+shift+.</code>这个快捷键，可以在访达里面切换是否显示隐藏文件夹，切换了之后桌面上的文件夹就以暗色显示出来了，确实是被隐藏了。</p><p>那就取消隐藏文件夹吧，在命令行里面执行一下chflags命令来设置或取消隐藏文件夹。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chflags nohidden ~/Desktop <span class="comment"># 取消隐藏文件夹</span></span><br><span class="line">chflags hidden ~/Desktop   <span class="comment"># 隐藏文件夹</span></span><br></pre></td></tr></table></figure><p>好的，问题是解决了，但还得找到罪魁祸首。</p><p>那就是前面提到的parallels tools了，这个软件有一个“演示模式”，在mac连接到第二块屏幕的时候，<strong>隐藏桌面上所有文件夹</strong>。从这个功能的名称和意义来看，它肯定是有点用的，在会议演示的时候桌面上的所有文件夹都会被自动隐藏，不会被其他人看到你放在桌面上的文件。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/05/5f5f638c492b44fda55b311fad6cf94f.webp" alt="image.png"></p><p>但是！<strong>问题就在于这个演示模式在开启时没有任何说明</strong>，它修改了什么设置你都需要点进这个演示模式的设置里面才能看到，在状态栏也不会有任何现在正处于演示模式的提示，只有一个parallels toolbox的图标。</p><p>而且安装了parallels toolbox之后，<strong>演示模式就会自动开启</strong>，退出parallels toolbox软件也<strong>不会</strong>把桌面的隐藏文件夹恢复。对于像我这种mac长期链接显示器的用户而言，这个工具在安装了之后的效果就是桌面上的文件夹莫名其妙的消失了，这能不吓人吗！</p><p>问题还不止这一个，parallels toolbox软件同时修改了我的电源计划，而且肯定是系统设置里面没有的电源计划，导致我的mac现在在锁屏阶段不会自动熄屏（原本在锁屏页面上过20分钟后会自动关闭屏幕的），这也很烦人，导致我晚上要么把显示器关了要么手动点击mac的睡眠按钮或者直接把mac关机。卸载了parallels toolbox之后重启电脑才恢复。</p><p>总而言之，parallels toolbox软件虽然提供了一些可能有帮助的功能，但是它对系统设置的<strong>无声修改</strong>非常致命！如果是一个对电脑使用不够熟悉的小白，安装虚拟机时无意中安装了这个软件的时候，恐怕很难意识到自己的电脑出了什么问题，光是桌面文件夹消失了这一点就够让人胆战心惊的，我当时真的被吓到了。</p><p>parallels toolbox要么在开启这些辅助功能的时候弹窗明确说明每个功能的作用（我甚至都不记得演示模式开启的时候有没有弹窗提示了，印象里是完全没有的），要么就别自动开启这些功能，特别是<strong>演示模式</strong>功能。</p><p>真无语……</p>]]></content>
    
    
    <summary type="html">被parallels toolbox的演示模式功能给坑惨了，拒绝parallels toolbox，从我做起！</summary>
    
    
    
    <category term="差生文具多" scheme="https://blog.musnow.top/categories/%E5%B7%AE%E7%94%9F%E6%96%87%E5%85%B7%E5%A4%9A/"/>
    
    <category term="电脑使用小贴士" scheme="https://blog.musnow.top/categories/%E5%B7%AE%E7%94%9F%E6%96%87%E5%85%B7%E5%A4%9A/%E7%94%B5%E8%84%91%E4%BD%BF%E7%94%A8%E5%B0%8F%E8%B4%B4%E5%A3%AB/"/>
    
    
    <category term="macbook" scheme="https://blog.musnow.top/tags/macbook/"/>
    
  </entry>
  
  <entry>
    <title>【Hexo】将代码块中tab替换为空格（修改tab_replace）</title>
    <link href="https://blog.musnow.top/posts/7827607861/"/>
    <id>https://blog.musnow.top/posts/7827607861/</id>
    <published>2025-05-16T02:00:57.000Z</published>
    <updated>2025-05-16T02:08:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>通过修改hexo配置文件将代码块中出现的tab制表符改成4个空格。</p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>最近发现本站部分代码块中缩进过于离谱，比如<a href="https://blog.musnow.top/posts/4192678800/">python uv</a>这篇博客。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/05/b261108bc9763f858aaa8977257a14e0.webp" alt="image.png"></p><p>检查了此处的md源码之后发现，代码块中的缩进是tab而不是空格，所以导致采用了html默认的8个空格来展示tab，导致缩进过长。</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><blockquote><p>参考：<a href="https://blog.csdn.net/qq_41948288/article/details/138728709">https://blog.csdn.net/qq_41948288/article/details/138728709</a></p></blockquote><p>hexo中代码块的渲染是由hexo本身负责的，绝大部分主题并没有引入独立的代码块渲染机制。所以代码块的配置项是在hexo自己的<code>_config.yaml</code>配置文件中。</p><p>配置文件如下，第50行的highlight就是代码块的配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">highlight:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">line_number:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">auto_detect:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">tab_replace:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="attr">wrap:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">hljs:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">exclude_languages:</span> [<span class="string">&#x27;mermaid&#x27;</span>] <span class="comment"># 渲染的时候忽略代码语言</span></span><br></pre></td></tr></table></figure><p>其中有一个选项是tab_replace，默认是空，不会做任何替换操作。将其修改为4个空格即可。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">tab_replace:</span> <span class="string">&#x27;    &#x27;</span></span><br></pre></td></tr></table></figure><p>修改后，重新进行hexo cl和hexo g，就可以观察到生效后的代码块，不再出现过长的缩进了</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;mcpServers&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;工具名称&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;uv&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="string">&quot;--directory&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;工作路径&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;run&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;test.py&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>问题解决</p>]]></content>
    
    
    <summary type="html">通过修改hexo配置文件将代码块中出现的tab制表符改成4个空格，全主题通用</summary>
    
    
    
    <category term="差生文具多" scheme="https://blog.musnow.top/categories/%E5%B7%AE%E7%94%9F%E6%96%87%E5%85%B7%E5%A4%9A/"/>
    
    <category term="博客建站" scheme="https://blog.musnow.top/categories/%E5%B7%AE%E7%94%9F%E6%96%87%E5%85%B7%E5%A4%9A/%E5%8D%9A%E5%AE%A2%E5%BB%BA%E7%AB%99/"/>
    
    
    <category term="博客建站" scheme="https://blog.musnow.top/tags/%E5%8D%9A%E5%AE%A2%E5%BB%BA%E7%AB%99/"/>
    
    <category term="Hexo" scheme="https://blog.musnow.top/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>【MCP】了解远程MCP调用背后使用的SSE协议</title>
    <link href="https://blog.musnow.top/posts/2725694758/"/>
    <id>https://blog.musnow.top/posts/2725694758/</id>
    <published>2025-04-20T06:47:57.000Z</published>
    <updated>2025-04-27T00:29:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍了远程MCP使用的SSE协议，通过wireshark抓包的方式了解MCP客户端和服务端之间通过SSE协议交互涉及到的请求与响应。</p><h2 id="1-什么是SSE协议？"><a href="#1-什么是SSE协议？" class="headerlink" title="1. 什么是SSE协议？"></a>1. 什么是SSE协议？</h2><blockquote><p>参考：<a href="https://zhuanlan.zhihu.com/p/1894024642395619635">科普一下MCP时代重要的SSE协议</a>、<a href="https://blog.csdn.net/aerror/article/details/146208818">关于MCP SSE 服务器的工作原理</a></p></blockquote><p>MCP的远程服务是通过SSE（Server-Sent Events）启动的，SSE是一个基于HTTP的长连接协议。SSE在逻辑上是一个由客户端发起、由服务器同意而建立的<strong>从服务器向客户端发消息的单向管道</strong>。这个管道建立之后，<strong>客户端给服务器发消息时用传统方式发</strong>，服务器给客户端发消息时用这个管道发，双方就可以灵活地进行通信了。</p><p>MCP SSE客户端会发起多个请求，第一个请求是<code>/sse</code>路径，这是建立SSE长连接的第一步。服务端会使用chunked方式来回传数据，每次不告诉客户端数据量有多少，让客户端保持连接始终联通，即维护了一个长连接。后续每一次服务端与客户端的通讯，都会采用事件id、事件名称event、data三个字段来通信（服务端发送给客户端）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">事件id</span><br><span class="line">event: 事件名称</span><br><span class="line">data: 事件数据</span><br><span class="line">&lt;这里一定会有一个空行，作为单个事件结束标志&gt;</span><br></pre></td></tr></table></figure><h2 id="2-实际测试：运行MCP服务端和QwenAgent"><a href="#2-实际测试：运行MCP服务端和QwenAgent" class="headerlink" title="2. 实际测试：运行MCP服务端和QwenAgent"></a>2. 实际测试：运行MCP服务端和QwenAgent</h2><p>因为使用sse远程方式启动mcp服务端时是在本地回环地址启动的， 所以可以通过wireshark工具监听到我们本地客户端与服务端之间传输的请求与响应，通过这种方式来进一步了解mcp每一步都请求了什么，响应了什么。</p><p>首先是用sse模式启动我们的mcp服务端demo，也就是官方python sdk中的<code>mcp-python-sdk/examples/servers/simple-tool</code>，设置端口为8000。注意修改命令中<code>--directory</code>之后的路径为你电脑上<code>simple-tool</code>的正确路径。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">uv run \</span><br><span class="line">    --directory mcp-python-sdk/examples/servers/simple-tool \</span><br><span class="line">    mcp-simple-tool \</span><br><span class="line">    --transport sse --port 8000</span><br></pre></td></tr></table></figure><p>然后再在wireshark里面监听<strong>本地回环</strong>地址，使用过滤器<code>tcp.port==8000</code>筛选出所有和8000端口有关的请求。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/04/960acbb8a0e910ffcaf90cfba3a6a669.webp" alt="image.png"></p><p>使用如下代码，运行一次QwenAgent，调用mcp工具。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> qwen_agent.agents <span class="keyword">import</span> Assistant</span><br><span class="line"><span class="comment"># DEBUG模式，列出详细处理日志</span></span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line">logging.basicConfig(level=logging.DEBUG, </span><br><span class="line">                    <span class="built_in">format</span>=<span class="string">&#x27;%(asctime)s - %(levelname)s - %(message)s&#x27;</span>, </span><br><span class="line">                    filename=<span class="string">&#x27;app.log&#x27;</span>, </span><br><span class="line">                    filemode=<span class="string">&#x27;a&#x27;</span>) </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">init_agent_service</span>():</span><br><span class="line">    llm_cfg = &#123;</span><br><span class="line">        <span class="string">&#x27;model&#x27;</span>: <span class="string">&#x27;Qwen/Qwen2.5-32B-Instruct&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;model_server&#x27;</span>: <span class="string">&#x27;https://api.siliconflow.cn/v1&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;api_key&#x27;</span>: <span class="string">&#x27;xxxx&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    system = (<span class="string">&#x27;你是一个强大的助手，可以帮用户处理问题。&#x27;</span>)</span><br><span class="line">    tools = [&#123;</span><br><span class="line">        <span class="string">&quot;mcpServers&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;exmaple-server&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;url&quot;</span>: <span class="string">&quot;http://127.0.0.1:8000/sse&quot;</span>,</span><br><span class="line">                <span class="string">&quot;disabled&quot;</span>: <span class="literal">False</span>,</span><br><span class="line">                <span class="string">&quot;timeout&quot;</span>: <span class="number">30</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;]</span><br><span class="line">    bot = Assistant(</span><br><span class="line">        llm=llm_cfg,</span><br><span class="line">        name=<span class="string">&#x27;网页查看助手&#x27;</span>,</span><br><span class="line">        description=<span class="string">&#x27;网页查看&#x27;</span>,</span><br><span class="line">        system_message=system,</span><br><span class="line">        function_list=tools,</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> bot</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">text=<span class="string">&#x27;这个网站是什么？https://blog.musnow.top/&#x27;</span></span>):</span><br><span class="line">    bot = init_agent_service()</span><br><span class="line">    messages = [&#123;<span class="string">&#x27;role&#x27;</span>: <span class="string">&#x27;user&#x27;</span>, <span class="string">&#x27;content&#x27;</span>: text&#125;]</span><br><span class="line">    <span class="comment"># 请求</span></span><br><span class="line">    <span class="keyword">for</span> response <span class="keyword">in</span> bot.run(messages):</span><br><span class="line">        logging.info(<span class="string">&#x27;bot response: &#x27;</span> + <span class="built_in">str</span>(response)) <span class="comment"># 这里也用logging打印</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>MCP服务端服务端的日志中会出现下面五条请求记录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">❯ uv run --directory /Users/mothra/data/code/python/openai/mcp-python-sdk/examples/servers/simple-tool mcp-simple-tool --transport sse --port 8000</span><br><span class="line">start server sse</span><br><span class="line">INFO:     Started server process [87086]</span><br><span class="line">INFO:     Waiting for application startup.</span><br><span class="line">INFO:     Application startup complete.</span><br><span class="line">INFO:     Uvicorn running on http://0.0.0.0:8000 (Press CTRL+C to quit)</span><br><span class="line">INFO:     127.0.0.1:49652 - &quot;GET /sse HTTP/1.1&quot; 200 OK</span><br><span class="line">INFO:     127.0.0.1:49654 - &quot;POST /?session_id=b53301ca408f4da4a12562ce2fde23de HTTP/1.1&quot; 202 Accepted</span><br><span class="line">INFO:     127.0.0.1:49656 - &quot;POST /?session_id=b53301ca408f4da4a12562ce2fde23de HTTP/1.1&quot; 202 Accepted</span><br><span class="line">INFO:     127.0.0.1:49658 - &quot;POST /?session_id=b53301ca408f4da4a12562ce2fde23de HTTP/1.1&quot; 202 Accepted</span><br><span class="line">INFO:     127.0.0.1:49668 - &quot;POST /?session_id=b53301ca408f4da4a12562ce2fde23de HTTP/1.1&quot; 202 Accepted</span><br></pre></td></tr></table></figure><h2 id="3-分析wireshark抓包结果"><a href="#3-分析wireshark抓包结果" class="headerlink" title="3. 分析wireshark抓包结果"></a>3. 分析wireshark抓包结果</h2><h3 id="3-1-第一条请求：-SSE"><a href="#3-1-第一条请求：-SSE" class="headerlink" title="3.1. 第一条请求：&#x2F;SSE"></a>3.1. 第一条请求：&#x2F;SSE</h3><p>首先在wireshark中找到第一条sse请求，在wireshark中能清晰的看到客户端从49652端口向8000端口发起<strong>TCP三次握手</strong>的记录。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/04/69148f26b67e74bd190c98224b0e15e9.webp" alt="image.png"></p><p>客户端发起的<code>/sse</code>接口的请求报文如下，没有什么特别的</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/sse</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>127.0.0.1:8000</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>python-httpx/0.28.1</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/event-stream</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Cache-Control</span><span class="punctuation">: </span>no-store</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>服务端的响应如下，这一串响应是在两个tcp报文中发出的，下图中用紫色荧光笔标注len不为0的就是服务端发出的两个报文。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/04/815180df9842b41001a215e6d4b373d2.webp" alt="image.png"></p><blockquote><p><strong>注意</strong>：这里的HTTP响应报文是一个chunked类型的，也就是这一条HTTP响应报文后续还一直会有其他内容（服务端和客户端之间的管道），直到客户端和服务端的交互结束了，这一条HTTP响应报文才算完整结束！</p></blockquote><p>这两个报文的内容拼接起来如下，为了更直观的展示HTTP报文格式，这里将HTTP协议的<code>\r\n</code>换行符也人工标识出来。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">200</span> OK\r\n</span><br><span class="line"><span class="attribute">date</span><span class="punctuation">: </span>Sun, 20 Apr 2025 06:00:38 GMT\r\n</span><br><span class="line"><span class="attribute">server</span><span class="punctuation">: </span>uvicorn\r\n</span><br><span class="line"><span class="attribute">cache-control</span><span class="punctuation">: </span>no-cache\r\n</span><br><span class="line"><span class="attribute">connection</span><span class="punctuation">: </span>keep-alive\r\n</span><br><span class="line"><span class="attribute">x-accel-buffering</span><span class="punctuation">: </span>no\r\n</span><br><span class="line"><span class="attribute">content-type</span><span class="punctuation">: </span>text/event-stream; charset=utf-8\r\n</span><br><span class="line"><span class="attribute">Transfer-Encoding</span><span class="punctuation">: </span>chunked\r\n</span><br><span class="line">\r\n</span><br><span class="line">51\r\n</span><br><span class="line"><span class="attribute">event</span><span class="punctuation">: </span>endpoint\r\n</span><br><span class="line"><span class="attribute">data</span><span class="punctuation">: </span>/messages/?session_id=b53301ca408f4da4a12562ce2fde23de\r\n</span><br><span class="line">\r\n\r\n</span><br></pre></td></tr></table></figure><p>这里便是服务端发出的第一个SSE协议事件数据了。其中，事件id是51（这个51是固定的事件编号，每次请求<code>/sse</code>接口返回的事件编号都是这个），事件名称是endpoint（告诉客户端后续需要请求的接口路径是啥），事件内容就是endpoint的具体值了。在data之后还额外出现了两个<code>\r\n</code>，这便是单个事件的结束标志。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">51</span><br><span class="line"><span class="attribute">event</span><span class="punctuation">: </span>endpoint</span><br><span class="line"><span class="attribute">data</span><span class="punctuation">: </span>/messages/?session_id=b53301ca408f4da4a12562ce2fde23de</span><br><span class="line">&lt;空行&gt;</span><br></pre></td></tr></table></figure><p>这个响应就是告诉客户端，后续的请求全都要使用<code>/messages/?session_id=b53301ca408f4da4a12562ce2fde23de</code>这个路径来发起，这个路径中包含本次会话的session id，客户端使用这个路径，服务端就能够知道要在哪一个管道里面向客户端发回结果。</p><p>在QwenAgent的debug日志中（底层mcp交互用的是httpx库）也能观察到这个事件，客户端收到了服务端提供的endpoint URL。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">2025-04-20 14:32:01,570 - INFO - HTTP Request: GET http://127.0.0.1:8000/sse &quot;HTTP/1.1 200 OK&quot;</span><br><span class="line">2025-04-20 14:32:01,570 - DEBUG - SSE connection established</span><br><span class="line">2025-04-20 14:32:01,570 - DEBUG - receive_response_body.started request=&lt;Request [b&#x27;GET&#x27;]&gt;</span><br><span class="line">2025-04-20 14:32:01,570 - DEBUG - Received SSE event: endpoint</span><br><span class="line">2025-04-20 14:32:01,570 - INFO - Received endpoint URL: http://127.0.0.1:8000/messages/?session_id=b53301ca408f4da4a12562ce2fde23de</span><br></pre></td></tr></table></figure><h3 id="3-2-第二条请求：初始化"><a href="#3-2-第二条请求：初始化" class="headerlink" title="3.2. 第二条请求：初始化"></a>3.2. 第二条请求：初始化</h3><p>第二条客户端的请求如下，这里已经开始使用服务端刚刚返回的endpoint了。请求体部分是json格式的内容，initialize代表是初始化MCP客户端，告诉服务端当前客户端使用的协议版本protocolVersion、支持的能力capabilities、jsonrpc版本等等信息</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/messages/?session_id=b53301ca408f4da4a12562ce2fde23de</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>127.0.0.1:8000</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>python-httpx/0.28.1</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>194</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/event-stream</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/json</span><br><span class="line"></span><br><span class="line"><span class="language-json"><span class="punctuation">&#123;</span><span class="attr">&quot;method&quot;</span><span class="punctuation">:</span><span class="string">&quot;initialize&quot;</span><span class="punctuation">,</span><span class="attr">&quot;params&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;protocolVersion&quot;</span><span class="punctuation">:</span><span class="string">&quot;2024-11-05&quot;</span><span class="punctuation">,</span><span class="attr">&quot;capabilities&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;sampling&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="attr">&quot;roots&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;listChanged&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">true</span></span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="attr">&quot;clientInfo&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;mcp&quot;</span><span class="punctuation">,</span><span class="attr">&quot;version&quot;</span><span class="punctuation">:</span><span class="string">&quot;0.1.0&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="attr">&quot;jsonrpc&quot;</span><span class="punctuation">:</span><span class="string">&quot;2.0&quot;</span><span class="punctuation">,</span><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">&#125;</span></span></span><br></pre></td></tr></table></figure><p>针对这次请求，服务端发回的响应就比较简单了，一个Accepted告诉客户端他的请求已经被接受了，并没有返回实际性的内容。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">202</span> Accepted</span><br><span class="line"><span class="attribute">date</span><span class="punctuation">: </span>Sun, 20 Apr 2025 06:00:38 GMT</span><br><span class="line"><span class="attribute">server</span><span class="punctuation">: </span>uvicorn</span><br><span class="line"><span class="attribute">content-length</span><span class="punctuation">: </span>8</span><br><span class="line"></span><br><span class="line"><span class="language-ebnf"><span class="attribute">Accepted</span></span></span><br></pre></td></tr></table></figure><p>这正是前文提到过的SSE协议的特性，服务端传回的数据不会使用HTTP响应直接传回，<strong>而是会在第一次&#x2F;sse请求后建立的长连接管道里面传回</strong>！上述响应只是针对客户端的POST请求，依照HTTP协议的要求发出的而已（HTTP要求每一个req都需要有一个res）</p><p>如下图所示，在服务端返回Accepted响应之后，就能观察到一个服务端向客户端发出的len不为0的TCP报文，这个报文中就包含了服务端针对客户端这次发起的初始化请求的实际事件响应。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/04/7a567ad3ca62c706b0d93587ea3212a9.webp" alt="image.png"></p><p>这个报文的内容如下，e9是初始化事件响应的id，event事件名称是一个message，data中就包含了服务端对这次初始化请求的响应，返回了服务端的jsonrpc版本、支持的协议版本protocolVersion、支持的能力capabilities、服务端的信息serverInfo。</p><p>同样的，这里也是额外出现了两个<code>\r\n</code>作为事件结束标志。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">e9\r\n</span><br><span class="line"><span class="attribute">event</span><span class="punctuation">: </span>message\r\n</span><br><span class="line"><span class="attribute">data</span><span class="punctuation">: </span>&#123;&quot;jsonrpc&quot;:&quot;2.0&quot;,&quot;id&quot;:0,&quot;result&quot;:&#123;&quot;protocolVersion&quot;:&quot;2024-11-05&quot;,&quot;capabilities&quot;:&#123;&quot;experimental&quot;:&#123;&#125;,&quot;tools&quot;:&#123;&quot;listChanged&quot;:false&#125;&#125;,&quot;serverInfo&quot;:&#123;&quot;name&quot;:&quot;mcp-website-fetcher&quot;,&quot;version&quot;:&quot;1.6.1.dev14+babb477&quot;&#125;&#125;&#125;\r\n</span><br><span class="line">\r\n\r\n</span><br></pre></td></tr></table></figure><h3 id="3-3-第三条请求：初始化成功告知"><a href="#3-3-第三条请求：初始化成功告知" class="headerlink" title="3.3. 第三条请求：初始化成功告知"></a>3.3. 第三条请求：初始化成功告知</h3><p>第三条请求就是客户端告诉服务端自己已经准备好了，初始化成功initialized。同样会有一对POST和Accepted的HTTP请求，这里不再赘述</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/messages/?session_id=b53301ca408f4da4a12562ce2fde23de</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>127.0.0.1:8000</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>python-httpx/0.28.1</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>54</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/event-stream</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/json</span><br><span class="line"></span><br><span class="line"><span class="language-json"><span class="punctuation">&#123;</span><span class="attr">&quot;method&quot;</span><span class="punctuation">:</span><span class="string">&quot;notifications/initialized&quot;</span><span class="punctuation">,</span><span class="attr">&quot;jsonrpc&quot;</span><span class="punctuation">:</span><span class="string">&quot;2.0&quot;</span><span class="punctuation">&#125;</span></span></span><br></pre></td></tr></table></figure><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">202</span> Accepted</span><br><span class="line"><span class="attribute">date</span><span class="punctuation">: </span>Sun, 20 Apr 2025 06:00:38 GMT</span><br><span class="line"><span class="attribute">server</span><span class="punctuation">: </span>uvicorn</span><br><span class="line"><span class="attribute">content-length</span><span class="punctuation">: </span>8</span><br><span class="line"></span><br><span class="line"><span class="language-ebnf"><span class="attribute">Accepted</span></span></span><br></pre></td></tr></table></figure><p>从抓包结果中可以看到，这一条请求到下一条请求之间没有服务端向客户端发出len不为0的TCP报文，因为这一次请求只是客户端告知服务端自己已经准备好了，服务端没必要额外返回任何信息。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/04/7629117d0ef69dbcbf91511e93b6d3dc.webp" alt="image.png"></p><h3 id="3-4-第四条请求：请求工具列表"><a href="#3-4-第四条请求：请求工具列表" class="headerlink" title="3.4. 第四条请求：请求工具列表"></a>3.4. 第四条请求：请求工具列表</h3><p>第四条请求就是客户端向服务端请求服务端提供的工具列表了</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/messages/?session_id=b53301ca408f4da4a12562ce2fde23de</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>127.0.0.1:8000</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>python-httpx/0.28.1</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>46</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/event-stream</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/json</span><br><span class="line"></span><br><span class="line"><span class="language-json"><span class="punctuation">&#123;</span><span class="attr">&quot;method&quot;</span><span class="punctuation">:</span><span class="string">&quot;tools/list&quot;</span><span class="punctuation">,</span><span class="attr">&quot;jsonrpc&quot;</span><span class="punctuation">:</span><span class="string">&quot;2.0&quot;</span><span class="punctuation">,</span><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span><span class="number">1</span><span class="punctuation">&#125;</span></span></span><br></pre></td></tr></table></figure><p>服务端照常进行了Accepted响应</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">202</span> Accepted</span><br><span class="line"><span class="attribute">date</span><span class="punctuation">: </span>Sun, 20 Apr 2025 06:00:38 GMT</span><br><span class="line"><span class="attribute">server</span><span class="punctuation">: </span>uvicorn</span><br><span class="line"><span class="attribute">content-length</span><span class="punctuation">: </span>8</span><br><span class="line"></span><br><span class="line"><span class="language-ebnf"><span class="attribute">Accepted</span></span></span><br></pre></td></tr></table></figure><p>随后在管道里面发出的TCP报文中，就包含了服务端当前支持的工具，以及工具的参数和参数的类型与释义。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">109\r\n</span><br><span class="line"><span class="attribute">event</span><span class="punctuation">: </span>message\r\n</span><br><span class="line"><span class="attribute">data</span><span class="punctuation">: </span>&#123;&quot;jsonrpc&quot;:&quot;2.0&quot;,&quot;id&quot;:1,&quot;result&quot;:&#123;&quot;tools&quot;:[&#123;&quot;name&quot;:&quot;fetch&quot;,&quot;description&quot;:&quot;Fetches a website and returns its content&quot;,&quot;inputSchema&quot;:&#123;&quot;type&quot;:&quot;object&quot;,&quot;required&quot;:[&quot;url&quot;],&quot;properties&quot;:&#123;&quot;url&quot;:&#123;&quot;type&quot;:&quot;string&quot;,&quot;description&quot;:&quot;URL to fetch&quot;&#125;&#125;&#125;&#125;]&#125;&#125;\r\n</span><br><span class="line">\r\n\r\n</span><br></pre></td></tr></table></figure><p>从日志中看，QwenAgent会把这部分内容转换为prompt发送给AI，让AI来调用这个工具。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2025-04-20 14:32:01,637 - DEBUG - Request options: &#123;&#x27;method&#x27;: &#x27;post&#x27;, &#x27;url&#x27;: &#x27;/chat/completions&#x27;, &#x27;files&#x27;: None, &#x27;json_data&#x27;: &#123;&#x27;messages&#x27;: [&#123;&#x27;role&#x27;: &#x27;system&#x27;, &#x27;content&#x27;: &#x27;你是一个强大的助手，可以帮用户处理问题。\n\n# Tools\n\nYou may call one or more functions to assist with the user query.\n\nYou are provided with function signatures within &lt;tools&gt;&lt;/tools&gt; XML tags:\n&lt;tools&gt;\n&#123;&quot;type&quot;: &quot;function&quot;, &quot;function&quot;: &#123;&quot;name&quot;: &quot;exmaple-server-fetch&quot;, &quot;description&quot;: &quot;Fetches a website and returns its content&quot;, &quot;parameters&quot;: &#123;&quot;type&quot;: &quot;object&quot;, &quot;properties&quot;: &#123;&quot;url&quot;: &#123;&quot;type&quot;: &quot;string&quot;, &quot;description&quot;: &quot;URL to fetch&quot;&#125;&#125;, &quot;required&quot;: [&quot;url&quot;]&#125;&#125;&#125;\n&lt;/tools&gt;\n\nFor each function call, return a json object with function name and arguments within &lt;tool_call&gt;&lt;/tool_call&gt; XML tags:\n&lt;tool_call&gt;\n&#123;&quot;name&quot;: &lt;function-name&gt;, &quot;arguments&quot;: &lt;args-json-object&gt;&#125;\n&lt;/tool_call&gt;&#x27;&#125;, &#123;&#x27;role&#x27;: &#x27;user&#x27;, &#x27;content&#x27;: &#x27;这个网站是什么？https://blog.musnow.top/&#x27;&#125;], &#x27;model&#x27;: &#x27;Qwen/Qwen2.5-32B-Instruct&#x27;, &#x27;seed&#x27;: 44742000, &#x27;stream&#x27;: True&#125;&#125;</span><br></pre></td></tr></table></figure><p>其中上下文信息如下，可以看到这里并没有使用function call的请求格式，而是直接在system的prompt里把工具相关信息以XML格式发送给AI了。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#x27;messages&#x27;<span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line">        &#x27;role&#x27;<span class="punctuation">:</span></span><br><span class="line">        &#x27;system&#x27;<span class="punctuation">,</span></span><br><span class="line">        &#x27;content&#x27;<span class="punctuation">:</span></span><br><span class="line">        &#x27;你是一个强大的助手，可以帮用户处理问题。\n\n# Tools\n\nYou may call one or more functions to assist with the user query.\n\nYou are provided with function signatures within &lt;tools&gt;&lt;/tools&gt; XML tags<span class="punctuation">:</span>\n&lt;tools&gt;\n<span class="punctuation">&#123;</span><span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;function&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;function&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;exmaple-server-fetch&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Fetches a website and returns its content&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;parameters&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;object&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;URL to fetch&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="attr">&quot;required&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;url&quot;</span><span class="punctuation">]</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span>\n&lt;/tools&gt;\n\nFor each function call<span class="punctuation">,</span> return a json object with function name and arguments within &lt;tool_call&gt;&lt;/tool_call&gt; XML tags<span class="punctuation">:</span>\n&lt;tool_call&gt;\n<span class="punctuation">&#123;</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> &lt;function-name&gt;<span class="punctuation">,</span> <span class="attr">&quot;arguments&quot;</span><span class="punctuation">:</span> &lt;args-json-object&gt;<span class="punctuation">&#125;</span>\n&lt;/tool_call&gt;&#x27;</span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span></span><br><span class="line">        &#x27;role&#x27;<span class="punctuation">:</span> &#x27;user&#x27;<span class="punctuation">,</span></span><br><span class="line">        &#x27;content&#x27;<span class="punctuation">:</span> &#x27;这个网站是什么？https<span class="punctuation">:</span><span class="comment">//blog.musnow.top/&#x27;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><p>在输出的bot response中，能看到AI针对这个tools生成了请求参数，url参数的值也是正确的，和我们提出的问题保持了一致。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">t = [&#123;</span><br><span class="line">    <span class="string">&#x27;role&#x27;</span>: <span class="string">&#x27;assistant&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;content&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;reasoning_content&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;网页查看助手&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;function_call&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;exmaple-server-fetch&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;arguments&#x27;</span>: <span class="string">&#x27;&#123;&quot;url&quot;: &quot;https://blog.musnow.top/&quot;&#125;&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure><h3 id="3-5-第五条请求：调用工具"><a href="#3-5-第五条请求：调用工具" class="headerlink" title="3.5. 第五条请求：调用工具"></a>3.5. 第五条请求：调用工具</h3><p>在日志中能观察到，在AI生成了包含function_call的响应之后，QwenAgent的SDK就开始准备调用远程MCP工具了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">2025-04-20 15:32:49,370 - INFO - bot response: [&#123;&#x27;role&#x27;: &#x27;assistant&#x27;, &#x27;content&#x27;: &#x27;&#x27;, &#x27;reasoning_content&#x27;: &#x27;&#x27;, &#x27;name&#x27;: &#x27;网页查看助手&#x27;, &#x27;function_call&#x27;: &#123;&#x27;name&#x27;: &#x27;exmaple-server-fetch&#x27;, &#x27;arguments&#x27;: &#x27;&#123;&quot;url&quot;: &quot;https://blog.musnow.top/&quot;&#125;&#x27;&#125;&#125;]</span><br><span class="line">2025-04-20 15:32:49,370 - DEBUG - receive_response_body.complete</span><br><span class="line">2025-04-20 15:32:49,371 - DEBUG - response_closed.started</span><br><span class="line">2025-04-20 15:32:49,371 - DEBUG - response_closed.complete</span><br><span class="line">2025-04-20 15:32:49,373 - DEBUG - Sending client message: root=JSONRPCRequest(method=&#x27;tools/call&#x27;, params=&#123;&#x27;name&#x27;: &#x27;fetch&#x27;, &#x27;arguments&#x27;: &#123;&#x27;url&#x27;: &#x27;https://blog.musnow.top/&#x27;&#125;&#125;, jsonrpc=&#x27;2.0&#x27;, id=2)</span><br></pre></td></tr></table></figure><p>此时发起的请求如下，请求体中包含了需要请求的工具名称fetch，以及传输过来的参数arguments</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/messages/?session_id=b53301ca408f4da4a12562ce2fde23de</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>127.0.0.1:8000</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>python-httpx/0.28.1</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>119</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/event-stream</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/json</span><br><span class="line"></span><br><span class="line"><span class="language-json"><span class="punctuation">&#123;</span><span class="attr">&quot;method&quot;</span><span class="punctuation">:</span><span class="string">&quot;tools/call&quot;</span><span class="punctuation">,</span><span class="attr">&quot;params&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;fetch&quot;</span><span class="punctuation">,</span><span class="attr">&quot;arguments&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;url&quot;</span><span class="punctuation">:</span><span class="string">&quot;https://blog.musnow.top/&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="attr">&quot;jsonrpc&quot;</span><span class="punctuation">:</span><span class="string">&quot;2.0&quot;</span><span class="punctuation">,</span><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span><span class="number">2</span><span class="punctuation">&#125;</span></span></span><br></pre></td></tr></table></figure><p>服务端还是会返回一个accpet响应</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 202 Accepted</span><br><span class="line">date: Sun, 20 Apr 2025 06:00:39 GMT</span><br><span class="line">server: uvicorn</span><br><span class="line">content-length: 8</span><br><span class="line"></span><br><span class="line">Accepted</span><br></pre></td></tr></table></figure><p>随后，MCP服务端会根据这个请求，调用实际的工具，并最终返回结果。由于这个请求结果的content是慕雪个人博客首页的html源码，所以内容非常之大，这里就不贴出来完整的事件data了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">f0bd</span><br><span class="line">event: message</span><br><span class="line">data: &#123;&quot;jsonrpc&quot;:&quot;2.0&quot;,&quot;id&quot;:2,&quot;result&quot;:&#123;&quot;content&quot;:[&#123;&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;&lt;!DOCTYPE html&gt;&lt;html lang=\&quot;zh-CN\&quot; data-theme=\&quot;light\&quot;&gt;&lt;head&gt;&lt;meta charset=\&quot;UTF-8\&quot;&gt;&lt;meta http-equiv=\&quot;X-UA-Compatible\&quot; content=\&quot;IE=edge\&quot;&gt;&lt;meta name=\&quot;viewport\&quot; content=\&quot;width=device-width, initial-scale=1.0,viewport-fit=cover\&quot;&gt;&lt;title&gt;慕雪的寒舍 - 雪下了一夜&lt;/title&gt;</span><br></pre></td></tr></table></figure><p>可以看到，服务端通过三次TCP报文才把整个首页的html完整传输给客户端。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/04/a529e0c2bae9294ce4903ef635dc112e.webp" alt="image.png"></p><p>到这里，针对<code>/sse</code>接口的HTTP响应就完整结束了，MCP服务端以tools调用结果返回为标志来结束HTTP响应。</p><p>在wireshark拼接出来的完整HTTP响应中可以观察到，tools调用结果的json完整结束了，这个HTTP响应就是结束了，<strong>随后便出现了TCP四次挥手的报文</strong>。其中调用工具的响应json末尾会包含一个字段<code>&quot;isErr&quot;</code>，应该是用于标识本次mcp工具调用是否成功的，为false代表调用成功。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/04/9d00d0ef699833554e935274a84bb4fb.webp" alt="image.png"></p><h3 id="3-6-工具调用结果交付AI处理"><a href="#3-6-工具调用结果交付AI处理" class="headerlink" title="3.6. 工具调用结果交付AI处理"></a>3.6. 工具调用结果交付AI处理</h3><p>在收到工具调用结果之后，日志中就能够观察到QwenAgent将这个工具调用结果拼接在prompt里面发送给AI了。这里我把html文档的内容全部删掉了，改成了“首页HTML内容”，保留了其他字段。</p><p>首先这里能看到完整的MCP服务端工具调用结果的响应，包含jsonrpc字段、id字段、result字段、isError字段。其中工具调用结果是在result&#x2F;content里面返回的。</p><p>QwenAgent的SDK依旧是在消息上下文里面将MCP工具的响应结果通过<code>&lt;tool_response&gt;\n首页HTML内容\n&lt;/tool_response&gt;</code>的拼接了起来，以user身份发送给了AI。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">2025-04-20 14:33:18,289 - DEBUG - Received SSE event: message</span><br><span class="line">2025-04-20 14:33:18,291 - DEBUG - Received server message: root=JSONRPCResponse(jsonrpc=&#x27;2.0&#x27;, id=2, result=&#123;&#x27;content&#x27;: [&#123;&#x27;type&#x27;: &#x27;text&#x27;, &#x27;text&#x27;: &#x27;首页HTML内容&#x27;&#125;], &#x27;isError&#x27;: False&#125;)</span><br><span class="line">2025-04-20 14:33:18,330 - DEBUG - Request options: &#123;&#x27;method&#x27;: &#x27;post&#x27;, &#x27;url&#x27;: &#x27;/chat/completions&#x27;, &#x27;files&#x27;: None, &#x27;json_data&#x27;: &#123;&#x27;messages&#x27;: [&#123;&#x27;role&#x27;: &#x27;system&#x27;, &#x27;content&#x27;: &#x27;你是一个强大的助手，可以帮用户处理问题。\n\n# Tools\n\nYou may call one or more functions to assist with the user query.\n\nYou are provided with function signatures within &lt;tools&gt;&lt;/tools&gt; XML tags:\n&lt;tools&gt;\n&#123;&quot;type&quot;: &quot;function&quot;, &quot;function&quot;: &#123;&quot;name&quot;: &quot;exmaple-server-fetch&quot;, &quot;description&quot;: &quot;Fetches a website and returns its content&quot;, &quot;parameters&quot;: &#123;&quot;type&quot;: &quot;object&quot;, &quot;properties&quot;: &#123;&quot;url&quot;: &#123;&quot;type&quot;: &quot;string&quot;, &quot;description&quot;: &quot;URL to fetch&quot;&#125;&#125;, &quot;required&quot;: [&quot;url&quot;]&#125;&#125;&#125;\n&lt;/tools&gt;\n\nFor each function call, return a json object with function name and arguments within &lt;tool_call&gt;&lt;/tool_call&gt; XML tags:\n&lt;tool_call&gt;\n&#123;&quot;name&quot;: &lt;function-name&gt;, &quot;arguments&quot;: &lt;args-json-object&gt;&#125;\n&lt;/tool_call&gt;&#x27;&#125;, &#123;&#x27;role&#x27;: &#x27;user&#x27;, &#x27;content&#x27;: &#x27;这个网站是什么？https://blog.musnow.top/&#x27;&#125;, &#123;&#x27;role&#x27;: &#x27;assistant&#x27;, &#x27;content&#x27;: &#x27;&lt;tool_call&gt;\n&#123;&quot;name&quot;: &quot;exmaple-server-fetch&quot;, &quot;arguments&quot;: &#123;&quot;url&quot;: &quot;https://blog.musnow.top/&quot;&#125;&#125;\n&lt;/tool_call&gt;&#x27;&#125;, &#123;&#x27;role&#x27;: &#x27;user&#x27;, &#x27;content&#x27;: &#x27;&lt;tool_response&gt;\n首页HTML内容\n&lt;/tool_response&gt;&#x27;&#125;], &#x27;model&#x27;: &#x27;Qwen/Qwen2.5-32B-Instruct&#x27;, &#x27;seed&#x27;: 181793637, &#x27;stream&#x27;: True&#125;&#125;</span><br><span class="line">2025-04-20 14:33:18,330 - DEBUG - Sending HTTP Request: POST https://api.siliconflow.cn/v1/chat/completions</span><br></pre></td></tr></table></figure><p>最终，AI理解并处理“首页HTML内容”，输出了回答</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#x27;role&#x27;: &#x27;assistant&#x27;, &#x27;content&#x27;: &#x27;该网站名为&quot;慕雪的寒舍 - 雪下了一夜&quot;，由作者&quot;慕雪年华&quot;创建。该网站看起来是一个个人博客，包含了各种类型的文章，例如编程学习、博客建站等。网站中的文章包含了不同的主题，如使用Python管理虚拟环境、MCP协议的理解和使用等。此外，网站顶部和底部列出了作者的一些社交链接和其他网站。&#x27;, &#x27;reasoning_content&#x27;: &#x27;&#x27;, &#x27;name&#x27;: &#x27;网页查看助手&#x27;&#125;</span><br></pre></td></tr></table></figure><p>不过，这里日志中出现了一个奇怪的地方，那就是代码里面打印的bot response上下文中的工具调用格式又变成了<code>function_call</code>，<strong>这里应该是QwenAgent SDK针对mcp工具在对外输出的response里面做的额外解析处理</strong>，并没有把内部通过prompt让AI调用MCP工具的格式输出出来，在最终输出的时候还是会使用<code>function_call</code>的格式来标识AI和MCP工具的调用，方便用户解析。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2025-04-20 15:32:57,549 - INFO - bot response: [&#123;&#x27;role&#x27;: &#x27;assistant&#x27;, &#x27;content&#x27;: &#x27;&#x27;, &#x27;reasoning_content&#x27;: &#x27;&#x27;, &#x27;name&#x27;: &#x27;网页查看助手&#x27;, &#x27;function_call&#x27;: &#123;&#x27;name&#x27;: &#x27;exmaple-server-fetch&#x27;, &#x27;arguments&#x27;: &#x27;&#123;&quot;url&quot;: &quot;https://blog.musnow.top/&quot;&#125;&#x27;&#125;&#125;, &#123;&#x27;role&#x27;: &#x27;function&#x27;, &#x27;content&#x27;: &#x27;首页HTML内容&#x27;, &#x27;reasoning_content&#x27;: &#x27;&#x27;, &#x27;name&#x27;: &#x27;exmaple-server-fetch&#x27;&#125;, &#123;&#x27;role&#x27;: &#x27;assistant&#x27;, &#x27;content&#x27;: &#x27;该网站名为&quot;慕雪的寒舍 - 雪下了一夜&quot;，由作者&quot;慕雪年华&quot;创建。该网站看起来是一个个人博客，包含了各种类型的文章，例如编程学习、博客建站等。网站中的文章包含了不同的主题，如使用Python管理虚拟环境、MCP协议的理解和使用等。此外，网站顶部和底部列出了作者的一些社交链接和其他网站。&#x27;, &#x27;reasoning_content&#x27;: &#x27;&#x27;, &#x27;name&#x27;: &#x27;网页查看助手&#x27;&#125;]</span><br></pre></td></tr></table></figure><p>从前文的日志分析中我们已经能够确定QwenAgent在调用工具的时候是直接通过prompt的方式让AI识别mcp工具的。在之前的博客中也提到过，这是MCP工具集成在Agent中的两种方式之一（另外一个方式就是直接使用AI的function call功能来调用），两种方式并没有好坏之分，只是将MCP集成到Agent中的不同的实现方式而已。</p><hr><p>我顺带测试了一下QwenAgent的自定义工具是否也是用prompt方式的，果不其然，通过QwenAgent提供的<code>@register_tool</code>注册的自定义工具也是通过prompt方式让AI来调用的。</p><p>以下是运行<code>Qwen-Agent/examples/assistant_add_custom_tool.py</code>时DEBUG日志中prompt内容，这里也是通过prompt让AI了解了自定义工具<code>my_image_gen</code>的调用方式。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2025-04-20 16:17:52,865 - DEBUG - Request options: &#123;&#x27;method&#x27;: &#x27;post&#x27;, &#x27;url&#x27;: &#x27;/chat/completions&#x27;, &#x27;files&#x27;: None, &#x27;json_data&#x27;: &#123;&#x27;messages&#x27;: [&#123;&#x27;role&#x27;: &#x27;system&#x27;, &#x27;content&#x27;: &#x27;According to the user\&#x27;s request, you first draw a picture and then automatically run code to download the picture and select an image operation from the given document to process the image\n\n# 知识库\n\n## 来自 [文件](doc.pdf) 的内容：\n\n```\n# Python Image Processing Tutorial: Downloading Images and Performing Flip Operations \n\nIn  this  tutorial,  we  will  learn  how  to  download  images  using  Python  and  perform  basic  image \noperations such as flipping and rotating using the Pillow library. \n ## Prerequisites \n Before we begin, make sure you have the following libraries installed in your Python environment: \n\n- `requests`: for downloading images \n- `Pillow`: for image processing \n If you haven\&#x27;t installed these libraries yet, you can install them using pip: \n\n```bash \npip install requests Pillow \n``` \n ## Step 1: Downloading an Image \n First, we need to download an image. We will use the `requests` library to accomplish this task. \n\n``` \nimport requests \n\ndef download_image(url, filename): \n\tresponse = requests.get(url) \n\tif response.status_code == 200: \n\twith open(filename, \&#x27;wb\&#x27;) as file: \n\tfile.write(response.content) \n\telse: \n\tprint(f&quot;Error: Failed to download image from &#123;url&#125;&quot;) \n\n# Example usage \nimage_url = &quot;https://example.com/image.jpg&quot;    # Replace with the URL of the image you want to \ndownload \nfilename = &quot;downloaded_image.jpg&quot; \ndownload_image(image_url, filename) \n``` \n ## Step 2: Opening and Displaying the Image \n Next, we will use the `Pillow` library to open and display the image we just downloaded. \n\n``` \nfrom PIL import Image \n\ndef open_and_show_image(filename): \n\timage = Image.open(filename) \n\timage.show() \n\n# Example usage \nopen_and_show_image(filename) \n``` \n ## Step 3: Flipping and Rotating the Image \n\nNow we can perform flip and rotate operations on the image. The `Pillow` library provides several \nmethods for image manipulation. \n\n``` \ndef flip_image(filename, mode=\&#x27;horizontal\&#x27;): \n\timage = Image.open(filename) \n\tif mode == \&#x27;horizontal\&#x27;: \n\tflipped_image = image.transpose(Image.FLIP_LEFT_RIGHT) \n\telif mode == \&#x27;vertical\&#x27;: \n\tflipped_image = image.transpose(Image.FLIP_TOP_BOTTOM) \n\telse: \n\tprint(&quot;Error: Mode should be \&#x27;horizontal\&#x27; or \&#x27;vertical\&#x27;&quot;) \n\treturn \n\tflipped_image.show() \n\treturn flipped_image \n\ndef rotate_image(filename, degrees): \n\timage = Image.open(filename) \n\trotated_image = image.rotate(degrees) \n\trotated_image.show() \n\treturn rotated_image \n\n# Example usage \nflipped_image = flip_image(filename, mode=\&#x27;horizontal\&#x27;)    # Horizontally flip \nflipped_image.save(&quot;flipped_horizontal.jpg&quot;)    # Save the horizontally flipped image \n\nflipped_image = flip_image(filename, mode=\&#x27;vertical\&#x27;)    # Vertically flip \nflipped_image.save(&quot;flipped_vertical.jpg&quot;)    # Save the vertically flipped image \n\nrotated_image = rotate_image(filename, 90)    # Rotate by 90 degrees \nrotated_image.save(&quot;rotated_90.jpg&quot;)    # Save the rotated image \n\n``` \n ## Step 4: Saving the Modified Image \n\nIn the examples above, we have seen how to save flipped and rotated images. You can use the \n`save` method to save any modified image. \n\n``` \n# Save the image \ndef save_image(image, filename): \n\timage.save(filename) \n\n# Example usage \nsave_image(flipped_image, &quot;flipped_image.jpg&quot;) \nsave_image(rotated_image, &quot;rotated_image.jpg&quot;) \n``` \n\nBy  now,  you  have  learned  how  to  download  images  using  Python  and  perform  basic  image \noperations using the Pillow library. You can extend these basics to implement more complex image \nprocessing functions as needed. \n\n```\n\n# Tools\n\nYou may call one or more functions to assist with the user query.\n\nYou are provided with function signatures within &lt;tools&gt;&lt;/tools&gt; XML tags:\n&lt;tools&gt;\n&#123;&quot;type&quot;: &quot;function&quot;, &quot;function&quot;: &#123;&quot;name&quot;: &quot;my_image_gen&quot;, &quot;description&quot;: &quot;AI painting (image generation) service, input text description, and return the image URL drawn based on text information.&quot;, &quot;parameters&quot;: [&#123;&quot;name&quot;: &quot;prompt&quot;, &quot;type&quot;: &quot;string&quot;, &quot;description&quot;: &quot;Detailed description of the desired image content, in English&quot;, &quot;required&quot;: true&#125;]&#125;&#125;\n&#123;&quot;type&quot;: &quot;function&quot;, &quot;function&quot;: &#123;&quot;name&quot;: &quot;code_interpreter&quot;, &quot;description&quot;: &quot;Python code sandbox, which can be used to execute Python code.&quot;, &quot;parameters&quot;: [&#123;&quot;name&quot;: &quot;code&quot;, &quot;type&quot;: &quot;string&quot;, &quot;description&quot;: &quot;The python code.&quot;, &quot;required&quot;: true&#125;]&#125;&#125;\n&lt;/tools&gt;\n\nFor each function call, return a json object with function name and arguments within &lt;tool_call&gt;&lt;/tool_call&gt; XML tags:\n&lt;tool_call&gt;\n&#123;&quot;name&quot;: &lt;function-name&gt;, &quot;arguments&quot;: &lt;args-json-object&gt;&#125;\n&lt;/tool_call&gt;&#x27;&#125;, &#123;&#x27;role&#x27;: &#x27;user&#x27;, &#x27;content&#x27;: &#x27;画一只猫的图片&#x27;&#125;], &#x27;model&#x27;: &#x27;Qwen/Qwen2.5-32B-Instruct&#x27;, &#x27;seed&#x27;: 652077296, &#x27;stream&#x27;: True&#125;&#125;</span><br><span class="line">2025-04-20 16:17:52,865 - DEBUG - Sending HTTP Request: POST https://api.siliconflow.cn/v1/chat/completions</span><br></pre></td></tr></table></figure><h2 id="4-The-end"><a href="#4-The-end" class="headerlink" title="4. The end"></a>4. The end</h2><p>今天心血来潮，通过抓包看了一下MCP客户端和服务端到底是怎么交互的，也算是学到了不少新知识，SSE协议也是第一次听说。如果对MCP或SSE有任何问题，欢迎评论讨论。</p><p>这次测试也借机了解了QwenAgent SDK底层是如何让Qwen大模型去处理tools的，采用的是prompt方案。所以QwenAgent在对接其他<strong>非Qwen大模型</strong>的时候<strong>基本不可用</strong>，比如我尝试了硅基流动的<code>THUDM/GLM-4-9B-0414</code>和<code>deepseek-ai/DeepSeek-V3</code>，都没办法正常处理QwenAgent提供的prompt，其中GLM-4-9B-0414尝试输出工具调用参数，但并不符合QwenAgent的需要，没有办法被SDK识别，程序直接停止运行了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># THUDM/chatglm3-6b 输出，工具调用方式不正确</span></span><br><span class="line">[&#123;<span class="string">&#x27;role&#x27;</span>: <span class="string">&#x27;assistant&#x27;</span>, <span class="string">&#x27;content&#x27;</span>: <span class="string">&#x27;mcp-simple-tool-fetch\n&#123;&quot;url&quot;: &quot;https://blog.musnow.top/&quot;&#125;&#x27;</span>, <span class="string">&#x27;reasoning_content&#x27;</span>: <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;网页查看助手&#x27;</span>&#125;] </span><br></pre></td></tr></table></figure><p>DeepSeek-V3尝试了多次，也是会出现<strong>无法正常输出工具调用参数</strong>的问题，勉强能成功一两次。这里给出DeepSeek成功处理的上下文，如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 请求体，包含工具prompt</span></span><br><span class="line">&#123;<span class="string">&#x27;method&#x27;</span>: <span class="string">&#x27;post&#x27;</span>, <span class="string">&#x27;url&#x27;</span>: <span class="string">&#x27;/chat/completions&#x27;</span>, <span class="string">&#x27;files&#x27;</span>: <span class="literal">None</span>, <span class="string">&#x27;json_data&#x27;</span>: &#123;<span class="string">&#x27;messages&#x27;</span>: [&#123;<span class="string">&#x27;role&#x27;</span>: <span class="string">&#x27;system&#x27;</span>, <span class="string">&#x27;content&#x27;</span>: <span class="string">&#x27;你是一个强大的助手，可以帮用户处理问题。\n\n# Tools\n\nYou may call one or more functions to assist with the user query.\n\nYou are provided with function signatures within &lt;tools&gt;&lt;/tools&gt; XML tags:\n&lt;tools&gt;\n&#123;&quot;type&quot;: &quot;function&quot;, &quot;function&quot;: &#123;&quot;name&quot;: &quot;mcp-simple-tool-fetch&quot;, &quot;description&quot;: &quot;Fetches a website and returns its content&quot;, &quot;parameters&quot;: &#123;&quot;type&quot;: &quot;object&quot;, &quot;properties&quot;: &#123;&quot;url&quot;: &#123;&quot;type&quot;: &quot;string&quot;, &quot;description&quot;: &quot;URL to fetch&quot;&#125;&#125;, &quot;required&quot;: [&quot;url&quot;]&#125;&#125;&#125;\n&lt;/tools&gt;\n\nFor each function call, return a json object with function name and arguments within &lt;tool_call&gt;&lt;/tool_call&gt; XML tags:\n&lt;tool_call&gt;\n&#123;&quot;name&quot;: &lt;function-name&gt;, &quot;arguments&quot;: &lt;args-json-object&gt;&#125;\n&lt;/tool_call&gt;&#x27;</span>&#125;, &#123;<span class="string">&#x27;role&#x27;</span>: <span class="string">&#x27;user&#x27;</span>, <span class="string">&#x27;content&#x27;</span>: <span class="string">&#x27;这个网站是什么？https://blog.musnow.top/&#x27;</span>&#125;], <span class="string">&#x27;model&#x27;</span>: <span class="string">&#x27;deepseek-ai/DeepSeek-V3&#x27;</span>, <span class="string">&#x27;seed&#x27;</span>: <span class="number">832221696</span>, <span class="string">&#x27;stream&#x27;</span>: <span class="literal">True</span>&#125;&#125;</span><br><span class="line"><span class="comment"># deepseek 成功输出工具调用参数</span></span><br><span class="line">[&#123;<span class="string">&#x27;role&#x27;</span>: <span class="string">&#x27;assistant&#x27;</span>, <span class="string">&#x27;content&#x27;</span>: <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;reasoning_content&#x27;</span>: <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;网页查看助手&#x27;</span>, <span class="string">&#x27;function_call&#x27;</span>: &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;mcp-simple-tool-fetch&#x27;</span>, <span class="string">&#x27;arguments&#x27;</span>: <span class="string">&#x27;&#123;&quot;url&quot;: &quot;https://blog.musnow.top/&quot;&#125;&#x27;</span>&#125;&#125;]</span><br><span class="line"><span class="comment"># deepseek 也正常识别出了工具返回结果，并输出了总结</span></span><br><span class="line">&#123;<span class="string">&#x27;role&#x27;</span>: <span class="string">&#x27;assistant&#x27;</span>, <span class="string">&#x27;content&#x27;</span>: <span class="string">&#x27;这个网站是“慕雪的寒舍”，是一个个人博客网站，由“慕雪年华”维护。博客主要涵盖了编程学习、技术教程、项目开发记录等内容，包括Python、SLAM（实时定位与地图构建）、图床工具、ROS（机器人操作系统）等技术方向的文章。此外，博客还展示了作者的书影评价、个人生活记录等内容。\n\n以下是一些关键信息：\n- **博客名称**：慕雪的寒舍  \n- **作者**：慕雪年华  \n- **简介**：爱折腾的代码初学者  \n- **内容分类**：编程学习、博客建站、工具推荐等  \n- **文章数量**：441篇  \n- **标签**：Hexo、Linux、Python、C语言等  \n\n此外，博客还提供了友链、关于页面、留言功能等社交互动模块。如果你对技术类内容感兴趣，可以进一步探索该博客的详细内容。&#x27;</span>, <span class="string">&#x27;reasoning_content&#x27;</span>: <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;网页查看助手&#x27;</span>&#125;</span><br></pre></td></tr></table></figure><p>总而言之，QwenAgent的这个prompt只有在使用Qwen自家模型的时候识别度才好，使用其他家模型的时候非常容易出现tools无法正常识别的情况。不过这也是意料之中了，毕竟人家都叫QwenAgent SDK了，本来就不是面向所有大模型的通用SDK。</p>]]></content>
    
    
    <summary type="html">本文介绍了远程MCP使用的SSE协议，通过wireshark抓包的方式了解MCP客户端和服务端之间通过SSE协议交互涉及到的请求与响应。</summary>
    
    
    
    <category term="编程学习" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="Python" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/Python/"/>
    
    
    <category term="Python" scheme="https://blog.musnow.top/tags/Python/"/>
    
    <category term="MCP" scheme="https://blog.musnow.top/tags/MCP/"/>
    
    <category term="AI" scheme="https://blog.musnow.top/tags/AI/"/>
    
  </entry>
  
  <entry>
    <title>【MCP】详细了解MCP协议：和function call的区别何在？如何使用MCP？</title>
    <link href="https://blog.musnow.top/posts/2831928244/"/>
    <id>https://blog.musnow.top/posts/2831928244/</id>
    <published>2025-04-19T00:56:01.000Z</published>
    <updated>2025-05-08T00:01:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍了MCP大模型上下文协议的的概念，并对比了MCP协议和function call的区别，同时用python sdk为例介绍了mcp的使用方式。</p><h2 id="1-什么是MCP？"><a href="#1-什么是MCP？" class="headerlink" title="1. 什么是MCP？"></a>1. 什么是MCP？</h2><blockquote><p>官网：<a href="https://modelcontextprotocol.io/introduction">https://modelcontextprotocol.io/introduction</a></p></blockquote><p>2025年，Anthropic提出了MCP协议。MCP全称为Model Context Protocol，翻译过来是大模型上下文协议。这个协议的主要为<strong>AI大模型和外部工具</strong>（比如让AI去查询信息，或者让AI操作本地文件）之间的交互提供了一个统一的处理协议。我们常用的USB TypeC接口（USB-C）统一了USB接口的样式，MCP协议就好比AI大模型中的USB-C，统一了大模型与工具的对接方式。</p><p>MCP协议采用了C&#x2F;S架构，也就是服务端、客户端架构，能支持在客户端设备上调用远程Server提供的服务，同时也支持stdio流式传输模式，<strong>也就是在客户端本地启动mcp服务端</strong>。只需要在配置文件中新增MCP服务端，就能用上这个MCP服务器提供的各种工具，大大提高了大模型使用外部工具的便捷性。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/04/fef69c3cdacdc7927b494ed945c9210a.webp" alt="image.png"></p><p>MCP是开源协议，能让所有AI厂商、AI工具都将MCP集成到自己的客户端中，从而扩大MCP的可用面。毕竟只有用的人越多，协议才能不断发展，不断变得更好。</p><h2 id="2-了解function-call"><a href="#2-了解function-call" class="headerlink" title="2. 了解function call"></a>2. 了解function call</h2><p>在MCP没有出来之前，我们的AI Agent开发如果想调用外部工具需要针对不同的AI大模型SDK编写不同的代码，其中最为常用的是openai提供的function call的处理逻辑。</p><p>本小节参考博客：</p><ul><li><a href="https://www.cnblogs.com/ruipeng/p/18216610">深入探讨Function Calling：实现外部函数调用的工作原理</a>；</li><li><a href="https://www.cnblogs.com/mingupupu/p/18385274">来自OpenAI官网的Function calling介绍与最佳实践</a></li></ul><h3 id="2-1-function-call-demo"><a href="#2-1-function-call-demo" class="headerlink" title="2.1. function call demo"></a>2.1. function call demo</h3><h4 id="2-1-1-配置工具，AI提供参数"><a href="#2-1-1-配置工具，AI提供参数" class="headerlink" title="2.1.1. 配置工具，AI提供参数"></a>2.1.1. 配置工具，AI提供参数</h4><p>当我们调用 OpenAI Chat Completions 接口时，可以通过tools参数传入可供使用的外部工具。这个工具的调用中就包含了工具的作用，工具需要传入的参数，以及参数的释义。其中<code>tool_choice</code>字段设置为auto代表让大模型自动选择tools，设置为none时不会调用外部工具。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;tool_choice&quot;</span><span class="punctuation">:</span> <span class="string">&quot;auto&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;messages&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;role&quot;</span><span class="punctuation">:</span> <span class="string">&quot;system&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;你是一个天气查询助手&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;role&quot;</span><span class="punctuation">:</span> <span class="string">&quot;user&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;帮我查询上海的天气&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;tools&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;function&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;function&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;get_weather&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;获取指定城市的天气&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;parameters&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;object&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;city&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">              <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">              <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;城市名&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">          <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;required&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;city&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>对应的python openai代码如下，我们将tools部分放入一个包含dict的list，作为create函数的tools参数即可。同时tool_choice传入auto代表自动选择工具。这里我用了硅基流动提供的Qwen2.5模型作为演示，运行下面这个代码需要修改api_key为正确值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> openai <span class="comment"># 1.75.0</span></span><br><span class="line"><span class="keyword">import</span> json <span class="comment"># 后续会用到json</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    client = openai.OpenAI(</span><br><span class="line">        api_key=<span class="string">&quot;xxxxx&quot;</span>,</span><br><span class="line">        base_url=<span class="string">&quot;https://api.siliconflow.cn/v1&quot;</span>)</span><br><span class="line">    tools = [&#123;</span><br><span class="line">        <span class="string">&quot;type&quot;</span>: <span class="string">&quot;function&quot;</span>,</span><br><span class="line">        <span class="string">&quot;function&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;name&quot;</span>: <span class="string">&quot;get_weather&quot;</span>,</span><br><span class="line">            <span class="string">&quot;description&quot;</span>: <span class="string">&quot;获取指定城市的天气&quot;</span>,</span><br><span class="line">            <span class="string">&quot;parameters&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;type&quot;</span>: <span class="string">&quot;object&quot;</span>,</span><br><span class="line">                <span class="string">&quot;properties&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;city&quot;</span>: &#123;</span><br><span class="line">                        <span class="string">&quot;type&quot;</span>: <span class="string">&quot;string&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;description&quot;</span>: <span class="string">&quot;城市名&quot;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="string">&quot;required&quot;</span>: [<span class="string">&quot;city&quot;</span>],</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;]</span><br><span class="line">    res = client.chat.completions.create(model=<span class="string">&quot;Qwen/Qwen2.5-32B-Instruct&quot;</span>,</span><br><span class="line">                                         messages=[&#123;</span><br><span class="line">                                             <span class="string">&quot;role&quot;</span>: <span class="string">&quot;system&quot;</span>,</span><br><span class="line">                                             <span class="string">&quot;content&quot;</span>: <span class="string">&quot;你是一个天气查询助手&quot;</span></span><br><span class="line">                                         &#125;, &#123;</span><br><span class="line">                                             <span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>,</span><br><span class="line">                                             <span class="string">&quot;content&quot;</span>: <span class="string">&quot;帮我查询上海的天气&quot;</span></span><br><span class="line">                                         &#125;],</span><br><span class="line">                                         tools=tools,</span><br><span class="line">                                         tool_choice=<span class="string">&quot;auto&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;content:&quot;</span>,res.choices[<span class="number">0</span>].message.content)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;tools:&quot;</span>,res.choices[<span class="number">0</span>].message.tool_calls)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;message:&quot;</span>, res.choices[<span class="number">0</span>].message.to_dict())</span><br></pre></td></tr></table></figure><p>运行程序，发出请求后，大模型就会根据用户提出的问题和提供的tools，来为这个tools编写需要提供的参数。此时content会是空，不会输出内容，tool_calls中会包含调用的工具和参数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">❯ uv run main.py</span><br><span class="line">content: </span><br><span class="line">tools: [ChatCompletionMessageToolCall(id=&#x27;01964be6e485603d6a2a0acbbc7eba91&#x27;, function=Function(arguments=&#x27;&#123;&quot;city&quot;: &quot;上海&quot;&#125;&#x27;, name=&#x27;get_weather&#x27;), type=&#x27;function&#x27;)]</span><br><span class="line">message: &#123;&#x27;content&#x27;: &#x27;&#x27;, &#x27;role&#x27;: &#x27;assistant&#x27;, &#x27;tool_calls&#x27;: [&#123;&#x27;id&#x27;: &#x27;01964be6e485603d6a2a0acbbc7eba91&#x27;, &#x27;function&#x27;: &#123;&#x27;arguments&#x27;: &#x27;&#123;&quot;city&quot;: &quot;上海&quot;&#125;&#x27;, &#x27;name&#x27;: &#x27;get_weather&#x27;&#125;, &#x27;type&#x27;: &#x27;function&#x27;&#125;]&#125;</span><br></pre></td></tr></table></figure><p>对应如下json格式响应，包含了我们的参数</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;role&quot;</span><span class="punctuation">:</span> <span class="string">&quot;assistant&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;tool_calls&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;01964be6e485603d6a2a0acbbc7eba91&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;function&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;function&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;get_weather&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;arguments&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&#123;\n  \&quot;city\&quot;: \&quot;上海\&quot;\n&#125;&quot;</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="2-1-2-调用工具并让AI二次处理"><a href="#2-1-2-调用工具并让AI二次处理" class="headerlink" title="2.1.2. 调用工具并让AI二次处理"></a>2.1.2. 调用工具并让AI二次处理</h4><p>随后，我们就可以根据这个大模型返回的参数来调用我们的函数，并得到函数的返回结果，再次与大模型进行对话。此时需要按下面的方式维护对话上下文，首先需要将第一次请求AI返回的结果插入到上下文中（<code>&quot;role&quot;: &quot;assistant&quot;</code>的json字符串），然后再插入工具调用的数据，格式如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;role&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tool&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;工具调用结果&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;tool_call_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ai调用工具时返回的id&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>其中content代表工具调用的结果（字符串形式，内容可以是json），并且需要用<code>tool_call_id</code>来标识这是哪一个工具调用的请求，必须要和<code>&quot;role&quot;: &quot;assistant&quot;</code>响应中的id对应。</p><p>二次AI交互对应python代码如下，在上文提供的python代码之后追加</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 插入结果，再次对话</span></span><br><span class="line">messages.append(res.choices[<span class="number">0</span>].message.to_dict()) <span class="comment"># ai第一次返回的数据</span></span><br><span class="line"><span class="comment"># 工具调用的参数</span></span><br><span class="line">tool_call = res.choices[<span class="number">0</span>].message.tool_calls[<span class="number">0</span>]</span><br><span class="line">arguments = json.loads(tool_call.function.arguments)</span><br><span class="line">messages.append(&#123;</span><br><span class="line">    <span class="string">&quot;role&quot;</span>: <span class="string">&quot;tool&quot;</span>,</span><br><span class="line">    <span class="string">&quot;content&quot;</span>: get_weather(arguments[<span class="string">&#x27;city&#x27;</span>]),</span><br><span class="line">    <span class="string">&quot;tool_call_id&quot;</span>: tool_call.<span class="built_in">id</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment"># 二次请求</span></span><br><span class="line">res = client.chat.completions.create(model=model,</span><br><span class="line">                                     messages=messages,</span><br><span class="line">                                     tools=tools,</span><br><span class="line">                                     tool_choice=<span class="string">&quot;auto&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;content:&quot;</span>, res.choices[<span class="number">0</span>].message.content)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;tools:&quot;</span>, res.choices[<span class="number">0</span>].message.tool_calls)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;message:&quot;</span>, res.choices[<span class="number">0</span>].message.to_dict())</span><br></pre></td></tr></table></figure><p>其中get_weather函数如下，为了测试是写死的值，返回一个json字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_weather</span>(<span class="params">location</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#123;&quot;Celsius&quot;: 27, &quot;type&quot;: &quot;sunny&quot;&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>最终运行结果，AI成功根据我们工具调用的返回值来输出了对话方式的天气情况，包括温度和晴天。这样我们就完成了一个完整的tools调用和AI再处理的过程了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">❯ uv run main.py</span><br><span class="line">content: </span><br><span class="line">tools: [ChatCompletionMessageToolCall(id=&#x27;01964be6e485603d6a2a0acbbc7eba91&#x27;, function=Function(arguments=&#x27;&#123;&quot;city&quot;: &quot;上海&quot;&#125;&#x27;, name=&#x27;get_weather&#x27;), type=&#x27;function&#x27;)]</span><br><span class="line">message: &#123;&#x27;content&#x27;: &#x27;&#x27;, &#x27;role&#x27;: &#x27;assistant&#x27;, &#x27;tool_calls&#x27;: [&#123;&#x27;id&#x27;: &#x27;01964be6e485603d6a2a0acbbc7eba91&#x27;, &#x27;function&#x27;: &#123;&#x27;arguments&#x27;: &#x27;&#123;&quot;city&quot;: &quot;上海&quot;&#125;&#x27;, &#x27;name&#x27;: &#x27;get_weather&#x27;&#125;, &#x27;type&#x27;: &#x27;function&#x27;&#125;]&#125;</span><br><span class="line">-------------------</span><br><span class="line">content: 上海当前的天气是晴天，温度是27摄氏度。</span><br><span class="line">tools: None</span><br><span class="line">message: &#123;&#x27;content&#x27;: &#x27;上海当前的天气是晴天，温度是27摄氏度。&#x27;, &#x27;role&#x27;: &#x27;assistant&#x27;&#125;</span><br></pre></td></tr></table></figure><details class="toggle" ><summary class="toggle-button" style="">本次function call的完整上下文和代码</summary><div class="toggle-content"><p>完整json上下文信息</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;role&quot;</span><span class="punctuation">:</span> <span class="string">&quot;system&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;你是一个天气查询助手&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;role&quot;</span><span class="punctuation">:</span> <span class="string">&quot;user&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;帮我查询上海的天气&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;role&quot;</span><span class="punctuation">:</span> <span class="string">&quot;assistant&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;tool_calls&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;01964beeb9ee27098b74149d86560b35&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;function&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;arguments&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&#123;\&quot;city\&quot;: \&quot;上海\&quot;&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;get_weather&quot;</span></span><br><span class="line">                <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;function&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;role&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tool&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&#123;\&quot;Celsius\&quot;: 27, \&quot;type\&quot;: \&quot;sunny\&quot;&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;tool_call_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;01964beeb9ee27098b74149d86560b35&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;role&quot;</span><span class="punctuation">:</span> <span class="string">&quot;assistant&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;上海当前的天气是晴天，温度是27摄氏度。&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><p>完整代码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> openai <span class="comment"># 1.75.0</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_weather</span>(<span class="params">location</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#123;&quot;Celsius&quot;: 27, &quot;type&quot;: &quot;sunny&quot;&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">model=<span class="string">&quot;Qwen/Qwen2.5-32B-Instruct&quot;</span></span>):</span><br><span class="line">    client = openai.OpenAI(</span><br><span class="line">        api_key=<span class="string">&quot;xxxx&quot;</span>,</span><br><span class="line">        base_url=<span class="string">&quot;https://api.siliconflow.cn/v1&quot;</span>)</span><br><span class="line">    tools = [&#123;</span><br><span class="line">        <span class="string">&quot;type&quot;</span>: <span class="string">&quot;function&quot;</span>,</span><br><span class="line">        <span class="string">&quot;function&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;name&quot;</span>: <span class="string">&quot;get_weather&quot;</span>,</span><br><span class="line">            <span class="string">&quot;description&quot;</span>: <span class="string">&quot;获取指定城市的天气&quot;</span>,</span><br><span class="line">            <span class="string">&quot;parameters&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;type&quot;</span>: <span class="string">&quot;object&quot;</span>,</span><br><span class="line">                <span class="string">&quot;properties&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;city&quot;</span>: &#123;</span><br><span class="line">                        <span class="string">&quot;type&quot;</span>: <span class="string">&quot;string&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;description&quot;</span>: <span class="string">&quot;城市名&quot;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="string">&quot;required&quot;</span>: [<span class="string">&quot;city&quot;</span>],</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;]</span><br><span class="line">    messages = [&#123;</span><br><span class="line">        <span class="string">&quot;role&quot;</span>: <span class="string">&quot;system&quot;</span>,</span><br><span class="line">        <span class="string">&quot;content&quot;</span>: <span class="string">&quot;你是一个天气查询助手&quot;</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        <span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>,</span><br><span class="line">        <span class="string">&quot;content&quot;</span>: <span class="string">&quot;帮我查询上海的天气&quot;</span></span><br><span class="line">    &#125;]</span><br><span class="line">    res = client.chat.completions.create(model=model,</span><br><span class="line">                                         messages=messages,</span><br><span class="line">                                         tools=tools,</span><br><span class="line">                                         tool_choice=<span class="string">&quot;auto&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;content:&quot;</span>, res.choices[<span class="number">0</span>].message.content)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;tools:&quot;</span>, res.choices[<span class="number">0</span>].message.tool_calls)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;message:&quot;</span>, res.choices[<span class="number">0</span>].message.to_dict())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;-------------------&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 插入结果，再次对话</span></span><br><span class="line">    messages.append(res.choices[<span class="number">0</span>].message.to_dict())</span><br><span class="line">    tool_call = res.choices[<span class="number">0</span>].message.tool_calls[<span class="number">0</span>]</span><br><span class="line">    arguments = json.loads(tool_call.function.arguments)</span><br><span class="line">    messages.append(&#123;</span><br><span class="line">        <span class="string">&quot;role&quot;</span>: <span class="string">&quot;tool&quot;</span>,</span><br><span class="line">        <span class="string">&quot;content&quot;</span>: get_weather(arguments[<span class="string">&#x27;city&#x27;</span>]),</span><br><span class="line">        <span class="string">&quot;tool_call_id&quot;</span>: tool_call.<span class="built_in">id</span></span><br><span class="line">    &#125;)</span><br><span class="line">    res = client.chat.completions.create(model=model,</span><br><span class="line">                                         messages=messages,</span><br><span class="line">                                         tools=tools,</span><br><span class="line">                                         tool_choice=<span class="string">&quot;auto&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;content:&quot;</span>, res.choices[<span class="number">0</span>].message.content)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;tools:&quot;</span>, res.choices[<span class="number">0</span>].message.tool_calls)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;message:&quot;</span>, res.choices[<span class="number">0</span>].message.to_dict())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure></div></details><h4 id="2-1-3-tool-choice设置为none"><a href="#2-1-3-tool-choice设置为none" class="headerlink" title="2.1.3. tool_choice设置为none"></a>2.1.3. tool_choice设置为none</h4><p>这里也测试一下把<code>tool_choice</code>设置为<strong>none</strong>的情况，此时即便传入了tools，AI也不会认为有外部工具，会直接返回文字说明。<code>tool_choice</code>还有另外一个可选值是required，也就是必须要调用外部工具。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">❯ uv run main.py</span><br><span class="line">content: 我无法提供实时数据或即时查询服务，因为我当前的功能不包括访问互联网获取最新信息。你可以通过查询各类天气应用查看上海最新的天气情况，或者提供具体日期，我可以教你如何根据这些信息来判断和理解天气状况。如果你有任何关于天气的一般性问题，或需要了解某些天气条件的影响，也欢迎向我询问。</span><br><span class="line">tools: None</span><br><span class="line">message: &#123;&#x27;content&#x27;: &#x27;我无法提供实时数据或即时查询服务，因为我当前的功能不包括访问互联网获取最新信息。你可以通过查询各类天气应用查看上海最新的天气情况，或者提供具体日期，我可以教你如何根据这些信息来判断和理解天气状况。如果你有任何关于天气的一般性问题，或需要了解某些天气条件的影响，也欢迎向我询问。&#x27;, &#x27;role&#x27;: &#x27;assistant&#x27;&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-function-call的问题"><a href="#2-2-function-call的问题" class="headerlink" title="2.2. function call的问题"></a>2.2. function call的问题</h3><p>如下是一次function call的流程图</p><pre><code class="highlight mermaid">graph TD    A[编写tools，并提供tools参数配置] --&gt; |调用OpenAI Chat Completions接口，提供tools|C[AI理解tools的作用和参数，并返回调用参数]    C --&gt; |脚本处理AI返回的参数，调用tools，获取结果|E[AI获取tools结果，解析并生成自然语言回答]</code></pre><p>经过这个流程会发现一个问题，即便是简单的调用一个只有单参数的获取天气的函数，在使用openai这个第三方库的情况下都需要费很大劲，<strong>主要是tools的调用操作需要我们自己编写脚本实现</strong>，如果我们整个AI处理流程涉及到更多tools函数的时候，就很难处理了。</p><p>为了解决这个问题，openai在2025年新开源的<a href="https://github.com/openai/openai-agents-python/">OpenAI Agent SDK</a>中提供了更加便捷的tools工具调用的处理，只需要编写一个工具类，在Agent初始化的时候传入，Agent就能自动识别这个工具类中的方法并调用工具（自动给本地的函数传入参数）。示例代码可以参考开源仓库中的<a href="https://github.com/openai/openai-agents-python/blob/main/examples/tools/web_search.py">example</a>。</p><p>不过这还是没有解决一个最根本的问题，<strong>那就是外部工具调用方式的不统一</strong>。光是我现在知道的Agent开发SDK就有三个（OpenAI、QwenAgent、谷歌ADK），这三个SDK都会有一套自己的tools调用逻辑，而且openai和qwen的SDK更是只支持自家的模型，这样就会导致即便是同一个tools，在使用不同的SDK的时候，也需要针对这个SDK去重新编写一套tools的调用逻辑，很是麻烦。</p><p>了解了这个背景之后，想必你能理解MCP协议的重要性了，它规范了tools的调用方式，同一个tools我们只需要编写一次MCP Server，就能够在众多支持mcp的AI Agent里面被调用，解决了针对不同AI模型或SDK对tools进行单独适配的痛点！</p><h2 id="3-MCP协议详解"><a href="#3-MCP协议详解" class="headerlink" title="3. MCP协议详解"></a>3. MCP协议详解</h2><p>接下来让我们简单了解一下MCP协议是怎么提供统一的tools调用方式的。在这之前，需要先注明几个名词</p><ul><li>MCP Hosts：如 Claude Desktop、IDE 或 AI 工具，希望通过 MCP 访问数据的程序（也就是AI Agent程序）</li><li>MCP Clients：用于维护和服务器链接的一对一工具</li><li>MCP Servers：通过MCP协议提供特定能力</li><li>本地数据源：MCP服务器可以安装访问本地的文件、数据库和服务</li><li>远程服务：MCP服务器可通过各类API链接互联网上的外部系统</li></ul><p>其中要注意MCP Hosts和Clients的区别，为了更好的区分，后文会用AI来指代MCP Hosts，毕竟MCP工具的输出结果都是会让AI来处理的。</p><h3 id="3-1-MCP-Server"><a href="#3-1-MCP-Server" class="headerlink" title="3.1. MCP Server"></a>3.1. MCP Server</h3><h4 id="3-1-1-tools"><a href="#3-1-1-tools" class="headerlink" title="3.1.1. tools"></a>3.1.1. tools</h4><p>以官方的<a href="https://github.com/modelcontextprotocol/python-sdk/tree/main/examples/servers/simple-tool">MCP Server Demo</a>为例，在tools模式下，Server主要提供的是两个能力，一个是获取当前服务器支持的tools，另外一个就是call tool调用工具的能力。</p><p>其中，获取当前支持的tools会返回tools列表、每个tools的inputSchema参数和参数的type&#x2F;description释义。这一点和function call是类似的，只不过mcp的sdk将其包装成了一个types.Tool类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.list_tools()</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">list_tools</span>() -&gt; <span class="built_in">list</span>[types.Tool]:</span><br><span class="line">    <span class="keyword">return</span> [</span><br><span class="line">        types.Tool(</span><br><span class="line">            name=<span class="string">&quot;fetch&quot;</span>,</span><br><span class="line">            description=<span class="string">&quot;Fetches a website and returns its content&quot;</span>,</span><br><span class="line">            inputSchema=&#123;</span><br><span class="line">                <span class="string">&quot;type&quot;</span>: <span class="string">&quot;object&quot;</span>,</span><br><span class="line">                <span class="string">&quot;required&quot;</span>: [<span class="string">&quot;url&quot;</span>],</span><br><span class="line">                <span class="string">&quot;properties&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;url&quot;</span>: &#123;</span><br><span class="line">                        <span class="string">&quot;type&quot;</span>: <span class="string">&quot;string&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;description&quot;</span>: <span class="string">&quot;URL to fetch&quot;</span>,</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">        )</span><br><span class="line">    ]</span><br></pre></td></tr></table></figure><p>除了人工编写这部分参数列表，我们还可以参考<a href="https://github.com/modelcontextprotocol/servers/blob/main/src/git/src/mcp_server_git/server.py">mcp_server_git</a>的实现，借助pydantic来定义每一个方法的参数列表，并使用<code>schema()</code>自动获取参数释义。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Tool(</span><br><span class="line">    name=GitTools.DIFF_STAGED,</span><br><span class="line">    description=<span class="string">&quot;Shows changes that are staged for commit&quot;</span>,</span><br><span class="line">    inputSchema=GitDiffStaged.schema(),</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>举个例子，运行下面的代码，可以得到GitStatus这个类定义的两个入参的名称、类型和说明</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pydantic <span class="keyword">import</span> BaseModel</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GitStatus</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    repo_path: <span class="built_in">str</span></span><br><span class="line">    hello_text: <span class="built_in">str</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行会提示schema函数已经弃用，建议使用model_json_schema替代</span></span><br><span class="line"><span class="built_in">print</span>(GitStatus.model_json_schema())</span><br><span class="line"><span class="comment"># 输出如下</span></span><br><span class="line"><span class="comment"># &#123;&#x27;properties&#x27;: &#123;&#x27;repo_path&#x27;: &#123;&#x27;title&#x27;: &#x27;Repo Path&#x27;, &#x27;type&#x27;: &#x27;string&#x27;&#125;, &#x27;hello_text&#x27;: &#123;&#x27;title&#x27;: &#x27;Hello Text&#x27;, &#x27;type&#x27;: &#x27;string&#x27;&#125;&#125;, &#x27;required&#x27;: [&#x27;repo_path&#x27;, &#x27;hello_text&#x27;], &#x27;title&#x27;: &#x27;GitStatus&#x27;, &#x27;type&#x27;: &#x27;object&#x27;&#125;</span></span><br></pre></td></tr></table></figure><p>需要注意的是，这里获取到的title释义是直接根据<strong>参数名称</strong>来的，并没有人工编写的description那么准确。所以使用这种方式传入inputSchema的时候，需要我们尽可能地标准命名参数名称，<strong>让AI能通过参数名称直接推断出这个参数要传入什么内容</strong>。</p><p>调用函数的操作就和function call类似了，MCP协议传入的同样也是arguments列表，需要我们将其解析并调用我们实际编写的函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.call_tool()</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">fetch_tool</span>(<span class="params"></span></span><br><span class="line"><span class="params">    name: <span class="built_in">str</span>, arguments: <span class="built_in">dict</span></span></span><br><span class="line"><span class="params"></span>) -&gt; <span class="built_in">list</span>[types.TextContent | types.ImageContent | types.EmbeddedResource]:</span><br><span class="line">    <span class="keyword">if</span> name != <span class="string">&quot;fetch&quot;</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">f&quot;Unknown tool: <span class="subst">&#123;name&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;url&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> arguments:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;Missing required argument &#x27;url&#x27;&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> fetch_website(arguments[<span class="string">&quot;url&quot;</span>]) <span class="comment"># 调用实际函数</span></span><br></pre></td></tr></table></figure><p>除了这种复杂的方式，mcp sdk还提供了一个<a href="https://github.com/modelcontextprotocol/python-sdk/blob/main/examples/fastmcp/desktop.py">FastMcp</a>，只需要我们在编写的函数上加一个<code>@mcp.tool()</code>装饰器，就能立马把我们的普通函数变成mcp tools，非常方便。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> mcp.server.fastmcp <span class="keyword">import</span> FastMCP</span><br><span class="line">mcp = FastMCP(<span class="string">&quot;Demo&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@mcp.tool()</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">a: <span class="built_in">int</span>, b: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Add two numbers&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line"></span><br><span class="line">mcp.run() <span class="comment"># 运行server</span></span><br></pre></td></tr></table></figure><p>使用这种方式对时候，装饰器会自动去获取我们函数的参数以及参数的类型，并生成<code>types.Tool</code>返回给客户端。这个装饰器有两个参数，name在不传入的时候默认为函数名称，description在不传入的时候默认为函数的docstring（也就是函数下的<code>&quot;&quot;&quot;</code>注释）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name: Optional name for the tool (defaults to function name)</span><br><span class="line">description: Optional description of what the tool does</span><br></pre></td></tr></table></figure><p>从SDK的源码中可以找到，装饰器会调用<code>Tool.from_function</code>来生成<code>types.Tool</code>类型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add_tool</span>(<span class="params"></span></span><br><span class="line"><span class="params">    self,</span></span><br><span class="line"><span class="params">    fn: <span class="type">Callable</span>[..., <span class="type">Any</span>],</span></span><br><span class="line"><span class="params">    name: <span class="built_in">str</span> | <span class="literal">None</span> = <span class="literal">None</span>,</span></span><br><span class="line"><span class="params">    description: <span class="built_in">str</span> | <span class="literal">None</span> = <span class="literal">None</span>,</span></span><br><span class="line"><span class="params"></span>) -&gt; Tool:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Add a tool to the server.&quot;&quot;&quot;</span></span><br><span class="line">    tool = Tool.from_function(fn, name=name, description=description)</span><br><span class="line">    existing = self._tools.get(tool.name) <span class="comment"># 判断是否有同名函数已经被注册过了</span></span><br><span class="line">    <span class="keyword">if</span> existing:</span><br><span class="line">        <span class="keyword">if</span> self.warn_on_duplicate_tools:</span><br><span class="line">            logger.warning(<span class="string">f&quot;Tool already exists: <span class="subst">&#123;tool.name&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> existing <span class="comment"># 直接返回已注册的同名函数，不返回本次新注册的函数</span></span><br><span class="line">    <span class="comment"># 新注册函数</span></span><br><span class="line">    self._tools[tool.name] = tool</span><br><span class="line">    <span class="keyword">return</span> tool</span><br></pre></td></tr></table></figure><p>在<code>Tool.from_function</code>函数中会注册name和description</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">func_name = name <span class="keyword">or</span> fn.__name__</span><br><span class="line"><span class="keyword">if</span> func_name == <span class="string">&quot;&lt;lambda&gt;&quot;</span>: <span class="comment"># lambda表达式没有函数名，必须传入name参数</span></span><br><span class="line">    <span class="keyword">raise</span> ValueError(<span class="string">&quot;You must provide a name for lambda functions&quot;</span>)</span><br><span class="line">func_doc = description <span class="keyword">or</span> fn.__doc__ <span class="keyword">or</span> <span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure><h4 id="3-1-2-prompts和resources"><a href="#3-1-2-prompts和resources" class="headerlink" title="3.1.2. prompts和resources"></a>3.1.2. prompts和resources</h4><p>除了最常用的tools，mcp还提供了prompts和resources两种服务方式，其中prompt是用于定义一些常用操作的提示词，此时客户端可以直接去获取这些提示词和ai交互，避免我们针对某一个流程重复编写提示词；resources是定义一个url格式，当我们的交流中出现这个url格式的时候，ai就可以调用这个工具去做一些特定操作，比如请求某个api或者操作数据库。</p><p>但很不幸的是，以上都是慕雪的个人简单理解，由于prompt和resources实在没有找到可以参考的博客或如何使用的demo，我并不是很理解它们在AI工具中是怎么被使用以及是在什么时候被使用的。网上针对MCP的教程也主要集中于tools层面。</p><p>后续如果对这俩有更多了解了，再回来补充本文。</p><h3 id="3-2-客户端配置本地和远程MCP-Server"><a href="#3-2-客户端配置本地和远程MCP-Server" class="headerlink" title="3.2. 客户端配置本地和远程MCP Server"></a>3.2. 客户端配置本地和远程MCP Server</h3><p>在MCP SDK中主要提供了两种server启动的方式，一个是stdio流式传输（本地）的方式，另外一个是sse远程API的方式。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TRANSPORTS = <span class="type">Literal</span>[<span class="string">&quot;stdio&quot;</span>, <span class="string">&quot;sse&quot;</span>]</span><br></pre></td></tr></table></figure><p>这两种方式分别对应了两种服务器的配置方式。如果是本地的mcp服务器，需要使用命令来指定mcp服务器代码文件所在路径，并启动它。这个代码可以是github上克隆的仓库，也可以是通过npm或其他方式安装到本地的可执行文件。</p><h4 id="3-2-1-本地（stdio）"><a href="#3-2-1-本地（stdio）" class="headerlink" title="3.2.1. 本地（stdio）"></a>3.2.1. 本地（stdio）</h4><p>以python编写的MCP Server为例，需要通过如下方式启动某一个MCP Server，其中<code>--directory</code>指定的工作路径，必须指定这个工作路径才能找到<code>mcp-simple-tool</code>的代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 官方 mcp-simple-tool demo</span></span><br><span class="line">uv run --directory /Users/mothra/data/code/python/openai/mcp-python-sdk/examples/servers/simple-tool mcp-simple-tool</span><br></pre></td></tr></table></figure><p>此时是采用stdio方式启动的server，对应配置文件如下（可供Agent SDK调用）</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;mcpServers&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;mcp-simple-tool&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;uv&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;run&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;--directory&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;/Users/mothra/data/code/python/openai/mcp-python-sdk/examples/servers/simple-tool&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;mcp-simple-tool&quot;</span></span><br><span class="line">            <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>当客户端需要使用这个MCP Server的时候，会自动根据我们配置的命令去尝试在本地启动这个mcp服务端，然后和它交互。所以，如果使用stdio来配置MCP Server但本地却没有uv环境的时候，程序是无法启动的。</p><p>以CherryStudio为例，在mcp配置中，以stdio格式添加我们这个配置，点击右上角保存，保存成功则代表配置正常。保存失败则需要检查配置的命令和路径是否出错</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/04/08b84f73e3c9751178714d6dbce3b404.webp" alt="image.png"></p><p>此时勾选底部的MCP服务器，和AI对话，给出一个URL，他会自动调用工具去下载这个URL的html文件，并解析和输出他对这个HTML文件的理解。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/04/d1d1d4c8e51a89067a001cb918f8f457.webp" alt="image.png"></p><p>需要注意的是CherryStudio的mcpServers json配置文件并不是标准mcpServers的格式，多了一些字段，估计是方便前端设计。在AI的初次输出中也会把GdTGt4qMFpnyYqBxaqTrM输出出来，因为在标准mcpServers配置中GdTGt4qMFpnyYqBxaqTrM字段就是mcp服务端的名称。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;mcpServers&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;GdTGt4qMFpnyYqBxaqTrM&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;isActive&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;网页获取&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;stdio&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;通过url获取网页内容&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;registryUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;uv&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;run&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;--directory&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;/Users/mothra/data/code/python/openai/mcp-python-sdk/examples/servers/simple-tool&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;mcp-simple-tool&quot;</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>标准的mcpServers的格式并不需要那些额外字段，只需要我在前文给出的基础mspServers配置就可以了。以Qwen-Agent为例，只需要把json填入tools中就可以调用mcp服务器了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> qwen_agent.agents <span class="keyword">import</span> Assistant</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">init_agent_service</span>():</span><br><span class="line">    llm_cfg = &#123;</span><br><span class="line">        <span class="string">&#x27;model&#x27;</span>: <span class="string">&#x27;Qwen/Qwen2.5-32B-Instruct&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;model_server&#x27;</span>: <span class="string">&#x27;https://api.siliconflow.cn/v1&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;api_key&#x27;</span>: <span class="string">&#x27;xxxx&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    system = (<span class="string">&#x27;你是一个强大的助手，可以帮用户处理问题。&#x27;</span>)</span><br><span class="line">    tools = [&#123;</span><br><span class="line">        <span class="string">&quot;mcpServers&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;mcp-simple-tool&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;command&quot;</span>:</span><br><span class="line">                <span class="string">&quot;uv&quot;</span>,</span><br><span class="line">                <span class="string">&quot;args&quot;</span>: [</span><br><span class="line">                    <span class="string">&quot;run&quot;</span>, <span class="string">&quot;--directory&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;/Users/mothra/data/code/python/openai/mcp-python-sdk/examples/servers/simple-tool&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;mcp-simple-tool&quot;</span></span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;]</span><br><span class="line">    bot = Assistant(</span><br><span class="line">        llm=llm_cfg,</span><br><span class="line">        name=<span class="string">&#x27;网页查看助手&#x27;</span>,</span><br><span class="line">        description=<span class="string">&#x27;网页查看&#x27;</span>,</span><br><span class="line">        system_message=system,</span><br><span class="line">        function_list=tools,</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> bot</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">text=<span class="string">&#x27;这个网站是什么？https://blog.musnow.top/&#x27;</span></span>):</span><br><span class="line">    bot = init_agent_service()</span><br><span class="line">    messages = [&#123;<span class="string">&#x27;role&#x27;</span>: <span class="string">&#x27;user&#x27;</span>, <span class="string">&#x27;content&#x27;</span>: text&#125;]</span><br><span class="line">    <span class="comment"># 请求</span></span><br><span class="line">    <span class="keyword">for</span> response <span class="keyword">in</span> bot.run(messages):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;bot response:&#x27;</span>, response)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>Qwen最终的输出如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#x27;role&#x27;: &#x27;assistant&#x27;, &#x27;content&#x27;: &#x27;这个网址是一个个人博客站点，名字叫做“慕雪的寒舍”。站点描述自己为“爱折腾的代码初学者”。\n\n博客主要内容包含了编程学习（如Python、C、ROS等）、博客建站的相关知识以及一些编程相关的项目开发记录。\n\n网站首页还展示了近期发表的文章、公告、分类和标签等信息方便用户查找和浏览。\n\n总之，这是一个包含了编程学习和项目开发记录内容的个人技术博客。&#x27;, &#x27;reasoning_content&#x27;: &#x27;&#x27;, &#x27;name&#x27;: &#x27;网页查看助手&#x27;&#125;</span><br></pre></td></tr></table></figure><h4 id="3-2-2-远程（sse）"><a href="#3-2-2-远程（sse）" class="headerlink" title="3.2.2. 远程（sse）"></a>3.2.2. 远程（sse）</h4><p>远程调用的配置就需要服务器的url了。首先通过如下方式启动demo，提供命令行参数sse以远程方式启动，port指定端口8000</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uv run --directory /Users/mothra/data/code/python/openai/mcp-python-sdk/examples/servers/simple-tool mcp-simple-tool --transport sse --port 8000</span><br></pre></td></tr></table></figure><p>此时终端会输出当前进程PID以及服务端的url</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">INFO:     Started server process [17058]</span><br><span class="line">INFO:     Waiting for application startup.</span><br><span class="line">INFO:     Application startup complete.</span><br><span class="line">INFO:     Uvicorn running on http://0.0.0.0:8000 (Press CTRL+C to quit)</span><br></pre></td></tr></table></figure><p>对应mcpServers配置文件，其中<strong>disabled</strong>是当前server是否被禁用，设置false为启用这个server，<strong>timeout</strong>是链接服务端的超时时间。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;mcpServers&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;exampleServer&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://127.0.0.1:8000/sse&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;disabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;timeout&quot;</span><span class="punctuation">:</span> <span class="number">30</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>在cherrystudio中填写 <code>http://0.0.0.0:8000/sse</code>作为sse服务地址</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/04/58c071e226b752b3071a8677e574ef02.webp" alt="image.png"></p><p>同样可以正常调用，输出结果</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/04/0587057a2eb1b032ab58cd848f0b82e5.webp" alt="image.png"></p><p>注意，在QwenAgent SDK中必须使用<code>http://127.0.0.1:8000/sse</code>才能正常连接这个远程服务器，不能使用<code>http://0.0.0.0:8000/sse</code>，否则会出现502 Bad Gateway错误，详见<a href="https://github.com/QwenLM/Qwen-Agent/issues/501">issue</a>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">INFO:mcp.client.sse:Connecting to SSE endpoint: http://0.0.0.0:8000/sse/</span><br><span class="line">DEBUG:httpcore.connection:connect_tcp.started host=&#x27;127.0.0.1&#x27; port=7897 local_address=None timeout=5 socket_options=None</span><br><span class="line">DEBUG:httpcore.connection:connect_tcp.complete return_value=&lt;httpcore._backends.anyio.AnyIOStream object at 0x1075a3c70&gt;</span><br><span class="line">DEBUG:httpcore.http11:send_request_headers.started request=&lt;Request [b&#x27;GET&#x27;]&gt;</span><br><span class="line">DEBUG:httpcore.http11:send_request_headers.complete</span><br><span class="line">DEBUG:httpcore.http11:send_request_body.started request=&lt;Request [b&#x27;GET&#x27;]&gt;</span><br><span class="line">DEBUG:httpcore.http11:send_request_body.complete</span><br><span class="line">DEBUG:httpcore.http11:receive_response_headers.started request=&lt;Request [b&#x27;GET&#x27;]&gt;</span><br><span class="line">DEBUG:httpcore.http11:receive_response_headers.complete return_value=(b&#x27;HTTP/1.1&#x27;, 502, b&#x27;Bad Gateway&#x27;, [(b&#x27;Connection&#x27;, b&#x27;close&#x27;), (b&#x27;Content-Length&#x27;, b&#x27;0&#x27;)])</span><br><span class="line">INFO:httpx:HTTP Request: GET http://0.0.0.0:8000/sse/ &quot;HTTP/1.1 502 Bad Gateway&quot;</span><br><span class="line">DEBUG:httpcore.http11:response_closed.started</span><br><span class="line">DEBUG:httpcore.http11:response_closed.complete</span><br><span class="line">2025-04-19 15:51:29,240 - mcp_manager.py - 206 - INFO - Failed to connect to server: unhandled errors in a TaskGroup (1 sub-exception)</span><br><span class="line">INFO:qwen_agent_logger:Failed to connect to server: unhandled errors in a TaskGroup (1 sub-exception)</span><br><span class="line">2025-04-19 15:51:29,247 - mcp_manager.py - 91 - INFO - Error executing function: &#x27;NoneType&#x27; object is not iterable</span><br><span class="line">INFO:qwen_agent_logger:Error executing function: &#x27;NoneType&#x27; object is not iterable</span><br></pre></td></tr></table></figure><p>修改了tools的配置为远程url，其他代码保持不变</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> qwen_agent.agents <span class="keyword">import</span> Assistant</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line">logging.basicConfig(level=logging.DEBUG)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">init_agent_service</span>():</span><br><span class="line">    llm_cfg = &#123;</span><br><span class="line">        <span class="string">&#x27;model&#x27;</span>: <span class="string">&#x27;Qwen/Qwen2.5-32B-Instruct&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;model_server&#x27;</span>: <span class="string">&#x27;https://api.siliconflow.cn/v1&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;api_key&#x27;</span>: <span class="string">&#x27;xxxx&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    system = (<span class="string">&#x27;你是一个强大的助手，可以帮用户处理问题。&#x27;</span>)</span><br><span class="line">    tools = [&#123;</span><br><span class="line">        <span class="string">&quot;mcpServers&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;exmaple-server&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;url&quot;</span>: <span class="string">&quot;http://127.0.0.1:8000/sse&quot;</span>,</span><br><span class="line">                <span class="string">&quot;disabled&quot;</span>: <span class="literal">False</span>,</span><br><span class="line">                <span class="string">&quot;timeout&quot;</span>: <span class="number">30</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;]</span><br><span class="line">    bot = Assistant(</span><br><span class="line">        llm=llm_cfg,</span><br><span class="line">        name=<span class="string">&#x27;网页查看助手&#x27;</span>,</span><br><span class="line">        description=<span class="string">&#x27;网页查看&#x27;</span>,</span><br><span class="line">        system_message=system,</span><br><span class="line">        function_list=tools,</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> bot</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">text=<span class="string">&#x27;这个网站是什么？https://blog.musnow.top/&#x27;</span></span>):</span><br><span class="line">    bot = init_agent_service()</span><br><span class="line">    messages = [&#123;<span class="string">&#x27;role&#x27;</span>: <span class="string">&#x27;user&#x27;</span>, <span class="string">&#x27;content&#x27;</span>: text&#125;]</span><br><span class="line">    <span class="comment"># 请求</span></span><br><span class="line">    <span class="keyword">for</span> response <span class="keyword">in</span> bot.run(messages):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;bot response:&#x27;</span>, response)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>QwenAgent正常调用工具并返回网页的结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#x27;role&#x27;: &#x27;assistant&#x27;, &#x27;content&#x27;: &#x27;这是一个名为&quot;慕雪的寒舍&quot;的博客网站。博客的作者是慕雪年华。网站上有很多关于编程学习、技术分享的文章，同时，博客还提供了分类、标签、归档等功能来帮助读者查找信息。它看起来像是一个个人的技术博客。&#x27;, &#x27;reasoning_content&#x27;: &#x27;&#x27;, &#x27;name&#x27;: &#x27;网页查看助手&#x27;&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/04/508dbaded94578dec7febdb6858fe7de.webp" alt="image.png"></p><h3 id="3-3-使用MCP协议后的tools调用流程图"><a href="#3-3-使用MCP协议后的tools调用流程图" class="headerlink" title="3.3. 使用MCP协议后的tools调用流程图"></a>3.3. 使用MCP协议后的tools调用流程图</h3><p>使用MCP协议后，流程图就变成了下面这样，此时ai工具就从tools中解放了出来，我们可以随心所欲地添加任何我们需要的MCP Server配置，最终ai能自动调用这些外部工具并处理他们的结果，不再需要像function call一样人工编写脚本处理大模型生成的参数，也不需要在不同Agent SDK中独立为tools编写适配代码了。</p><pre><code class="highlight mermaid">graph TD;    A[ai工具加载mcp配置] --&gt; |启动和连接mcp服务器|B    B[mcp client] --&gt; |链接服务器，获取已有工具，调用工具|C[MCP Server]     C --&gt;|返回已有工具，返回工具调用结果|B</code></pre><p>在让AI调用外部工具的方面，MCP协议还是非常重要的。</p><p>不过需要注意的是，MCP和function call并不是完全独立的关系。目前MCP Host中接入MCP工具有两种方式，一个是prompt的方式，另外一个就是function call方式。也就是说，在部分ai工具中，<strong>会直接使用function call功能来让ai识别MCP工具并调用</strong>。MCP主要的助力在于统一了调用这些外部工具的配置项和服务端的实现方式，让我们编写的外部工具能做到一次编写多处使用。</p><h2 id="5-The-end"><a href="#5-The-end" class="headerlink" title="5. The end"></a>5. The end</h2><p>关于MCP协议的介绍到这里就结束啦，主要介绍的还是MCP TOOLS方面的内容，有任何问题欢迎评论区讨论。</p>]]></content>
    
    
    <summary type="html">本文介绍了MCP大模型上下文协议的的概念，并对比了MCP协议和function call的区别，同时用python sdk为例介绍了mcp的使用方式。</summary>
    
    
    
    <category term="编程学习" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="Python" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/Python/"/>
    
    
    <category term="Python" scheme="https://blog.musnow.top/tags/Python/"/>
    
    <category term="MCP" scheme="https://blog.musnow.top/tags/MCP/"/>
    
    <category term="AI" scheme="https://blog.musnow.top/tags/AI/"/>
    
  </entry>
  
  <entry>
    <title>【Python】使用uv管理python虚拟环境</title>
    <link href="https://blog.musnow.top/posts/4192678800/"/>
    <id>https://blog.musnow.top/posts/4192678800/</id>
    <published>2025-04-14T13:29:43.000Z</published>
    <updated>2025-05-15T05:10:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍了python虚拟环境管理工具uv，包括uv的作用、uv的常用命令等等。</p><blockquote><p>参考：<a href="https://zhuanlan.zhihu.com/p/27452300746">UV - 管理Python 版本、环境、第三方包</a></p></blockquote><h2 id="1-介绍uv"><a href="#1-介绍uv" class="headerlink" title="1. 介绍uv"></a>1. 介绍uv</h2><p>官网：<a href="https://docs.astral.sh/uv/">https://docs.astral.sh/uv/</a></p><p>uv是一个python虚拟环境管理工具，可以用来替代pip、pyenv、virtualenv等等工具。根据官网的介绍，使用uv来管理虚拟环境，相比于pip能得到至少10倍以上的性能提升。</p><p>uv工具有如下功能：</p><ul><li>管理python版本；</li><li>管理第三方库（Python packages）的版本；</li><li>拥有全局的第三方库的缓存，能减少磁盘空间占用；</li><li>安装uv不需要python环境，可以通过curl或pip安装；</li><li>多平台支持：macOS、Linux、Windows;</li></ul><p>试用过后，感觉uv还是很不错的，于是编写本文，推荐给大家。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/04/aaa8558a5e2d0fa98f7e21687a22c62a.webp" alt="image.png"></p><h2 id="2-安装uv"><a href="#2-安装uv" class="headerlink" title="2. 安装uv"></a>2. 安装uv</h2><p>文档：<a href="https://docs.astral.sh/uv/getting-started/installation/">https://docs.astral.sh/uv/getting-started/installation/</a></p><p>在linux和mac上的安装直接使用curl或者wget命令即可</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl -LsSf https://astral.sh/uv/install.sh | sh</span><br><span class="line"><span class="comment"># 或者wget（效果一样）</span></span><br><span class="line">wget -qO- https://astral.sh/uv/install.sh | sh</span><br></pre></td></tr></table></figure><p>在windows上的安装命令如下</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">powershell -ExecutionPolicy ByPass -c <span class="string">&quot;irm https://astral.sh/uv/install.ps1 | iex&quot;</span></span><br></pre></td></tr></table></figure><p>在mac上安装之后，终端输出如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">❯ curl -LsSf https://astral.sh/uv/install.sh | sh</span><br><span class="line">downloading uv 0.6.14 aarch64-apple-darwin</span><br><span class="line">no checksums to verify</span><br><span class="line">installing to /Users/mothra/.local/bin</span><br><span class="line">  uv</span><br><span class="line">  uvx</span><br><span class="line">everything&#x27;s installed!</span><br><span class="line"></span><br><span class="line">To add $HOME/.local/bin to your PATH, either restart your shell or run:</span><br><span class="line"></span><br><span class="line">    source $HOME/.local/bin/env (sh, bash, zsh)</span><br><span class="line">    source $HOME/.local/bin/env.fish (fish)</span><br></pre></td></tr></table></figure><p>这里给出了提示，必须把<code>$HOME/.local/bin</code>这个路径加到环境变量PATH里面才可以正常使用uv工具。设置之后，使用<code>uv --version</code>命令确认安装成功。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">❯ uv --version</span><br><span class="line">uv 0.6.14 (a4cec56dc 2025-04-09)</span><br></pre></td></tr></table></figure><h3 id="2-1-卸载uv"><a href="#2-1-卸载uv" class="headerlink" title="2.1. 卸载uv"></a>2.1. 卸载uv</h3><p>卸载uv之前，先执行如下命令删除所有本地缓存文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">uv cache clean</span><br><span class="line"><span class="built_in">rm</span> -r <span class="string">&quot;<span class="subst">$(uv python dir)</span>&quot;</span></span><br><span class="line"><span class="built_in">rm</span> -r <span class="string">&quot;<span class="subst">$(uv tool dir)</span>&quot;</span></span><br></pre></td></tr></table></figure><p>然后再删除uv的二进制文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mac/linux</span></span><br><span class="line"><span class="built_in">rm</span> ~/.local/bin/uv ~/.local/bin/uvx</span><br><span class="line"><span class="comment"># windows</span></span><br><span class="line"><span class="built_in">rm</span> <span class="variable">$HOME</span>.<span class="built_in">local</span>\bin\uv.exe</span><br><span class="line"><span class="built_in">rm</span> <span class="variable">$HOME</span>.<span class="built_in">local</span>\bin\uvx.exe</span><br></pre></td></tr></table></figure><h2 id="3-基本使用"><a href="#3-基本使用" class="headerlink" title="3. 基本使用"></a>3. 基本使用</h2><h3 id="3-1-管理python版本"><a href="#3-1-管理python版本" class="headerlink" title="3.1. 管理python版本"></a>3.1. 管理python版本</h3><p>使用如下命令，显示出当前环境中所有可用的python版本（包括已经安装的和可以安装的）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uv python list</span><br></pre></td></tr></table></figure><p>在我的电脑上，输出如下，我的电脑上安装了python 3.9.6（xcode开发者工具安装的）、python 3.10.11、python 3.13.1版本，这几个版本都可以用uv来调用。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">❯ uv python list</span><br><span class="line">cpython-3.14.0a6-macos-aarch64-none                 &lt;download available&gt;</span><br><span class="line">cpython-3.14.0a6+freethreaded-macos-aarch64-none    &lt;download available&gt;</span><br><span class="line">cpython-3.13.3-macos-aarch64-none                   &lt;download available&gt;</span><br><span class="line">cpython-3.13.3+freethreaded-macos-aarch64-none      &lt;download available&gt;</span><br><span class="line">cpython-3.13.1-macos-aarch64-none                   /opt/homebrew/bin/python3.13 -&gt; ../Cellar/python@3.13/3.13.1/bin/python3.13</span><br><span class="line">cpython-3.13.1-macos-aarch64-none                   /opt/homebrew/bin/python3 -&gt; ../Cellar/python@3.13/3.13.1/bin/python3</span><br><span class="line">cpython-3.13.0a3-macos-aarch64-none                 /usr/local/bin/python3.13 -&gt; ../../../Library/Frameworks/Python.framework/Versions/3.13/bin/python3.13</span><br><span class="line">cpython-3.12.10-macos-aarch64-none                  &lt;download available&gt;</span><br><span class="line">cpython-3.11.12-macos-aarch64-none                  &lt;download available&gt;</span><br><span class="line">cpython-3.10.17-macos-aarch64-none                  &lt;download available&gt;</span><br><span class="line">cpython-3.10.11-macos-aarch64-none                  /usr/local/bin/python3.10 -&gt; ../../../Library/Frameworks/Python.framework/Versions/3.10/bin/python3.10</span><br><span class="line">cpython-3.10.11-macos-aarch64-none                  /usr/local/bin/python3 -&gt; ../../../Library/Frameworks/Python.framework/Versions/3.10/bin/python3</span><br><span class="line">cpython-3.10.11-macos-aarch64-none                  /Library/Frameworks/Python.framework/Versions/3.10/bin/python3.10</span><br><span class="line">cpython-3.10.11-macos-aarch64-none                  /Library/Frameworks/Python.framework/Versions/3.10/bin/python3 -&gt; python3.10</span><br><span class="line">cpython-3.9.22-macos-aarch64-none                   &lt;download available&gt;</span><br><span class="line">cpython-3.9.6-macos-aarch64-none                    /usr/bin/python3</span><br><span class="line">cpython-3.8.20-macos-aarch64-none                   &lt;download available&gt;</span><br></pre></td></tr></table></figure><p>如果需要安装其他版本的python，使用如下命令</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uv python install 3.12</span><br></pre></td></tr></table></figure><p>除了标准python之外，还可以安装其他的Python实现，比如PyPy实现的python</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uv python install pypy@3.10</span><br></pre></td></tr></table></figure><p>查找某个python版本的路径</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">❯ uv python find 3.10</span><br><span class="line">/Library/Frameworks/Python.framework/Versions/3.10/bin/python3.10</span><br></pre></td></tr></table></figure><p>查看已经安装的python版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uv python list</span><br></pre></td></tr></table></figure><h3 id="3-2-选用python版本"><a href="#3-2-选用python版本" class="headerlink" title="3.2. 选用python版本"></a>3.2. 选用python版本</h3><p>在具体的某个项目中，进入项目目录，使用如下命令指定选用的python版本</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uv python pin 版本号</span><br></pre></td></tr></table></figure><p>这个命令会在指定目录下创建一个<code>.python-version</code>文件，内容如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">❯ uv python pin 3.10                                    </span><br><span class="line">Pinned `.python-version` to `3.10`</span><br><span class="line"></span><br><span class="line">❯ cat .python-version  </span><br><span class="line">3.10</span><br></pre></td></tr></table></figure><p>注意，这里选用的python版本只和uv管理的虚拟环境有关系，和我们全局的python、python3命令都没有关系。</p><h3 id="3-3-创建虚拟环境（项目）"><a href="#3-3-创建虚拟环境（项目）" class="headerlink" title="3.3. 创建虚拟环境（项目）"></a>3.3. 创建虚拟环境（项目）</h3><p>创建项目有两种方式，第一种方式，先创建好项目目录，然后设置python版本并初始化uv虚拟环境</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">uv python pin 3.10</span><br><span class="line">uv init <span class="comment"># 初始化</span></span><br></pre></td></tr></table></figure><p>执行了uv init之后，会在当前目录下创建几个文件，同时也会在当前目录下执行git init创建出一个新的git仓库来</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">~/data/code/python/test_code                                                                                                      </span><br><span class="line">❯ uv python pin 3.13</span><br><span class="line">Pinned `.python-version` to `3.13`</span><br><span class="line"></span><br><span class="line">~/data/code/python/test_code                                                                                                      </span><br><span class="line">❯ uv init           </span><br><span class="line">Initialized project `test-code`</span><br><span class="line"></span><br><span class="line">~/data/code/python/test_code main ?6                                                                                              </span><br><span class="line">❯ ls</span><br><span class="line">README.md      main.py        pyproject.toml</span><br></pre></td></tr></table></figure><p>另外一个方式是在init之后添加一个项目名，会自动创建项目文件夹</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uv init 项目名</span><br></pre></td></tr></table></figure><p>如果需要指定项目使用的python版本，可以追加命令行参数<code>--python 版本</code>。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uv init 项目名 --python 3.10</span><br></pre></td></tr></table></figure><p>如果在初始化项目<strong>之后</strong>需要修改python版本，可以手动修改<code>pyproject.toml</code>配置文件里面的requires-python版本，同时修改本地<code>.python-version</code>里面指定的python版本。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">requires-python = &quot;&gt;=3.10&quot;</span><br></pre></td></tr></table></figure><h3 id="3-4-添加依赖"><a href="#3-4-添加依赖" class="headerlink" title="3.4. 添加依赖"></a>3.4. 添加依赖</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uv add 依赖项</span><br></pre></td></tr></table></figure><p>比如添加requests库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uv add requests</span><br></pre></td></tr></table></figure><p>还可以指定具体版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uv add requests==版本号</span><br></pre></td></tr></table></figure><p>执行了这个命令后，会在当前目录下创建<code>.venv</code>虚拟环境目录（在vscode里面可以选择这个目录作为虚拟环境，否则代码解析会有问题），并添加我们要的依赖项，同时会新增一个uv.lock文件，用于存放依赖项版本相关的信息。pyproject.toml文件中的dependencies字段也会包含需要的依赖项。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">~/data/code/python/test_code main ?6                                                                                              </span><br><span class="line">❯ uv add requests</span><br><span class="line">Using CPython 3.13.1 interpreter at: /opt/homebrew/opt/python@3.13/bin/python3.13</span><br><span class="line">Creating virtual environment at: .venv</span><br><span class="line">Resolved 6 packages in 13.85s</span><br><span class="line">Prepared 5 packages in 5.55s</span><br><span class="line">Installed 5 packages in 13ms</span><br><span class="line"> + certifi==2025.1.31</span><br><span class="line"> + charset-normalizer==3.4.1</span><br><span class="line"> + idna==3.10</span><br><span class="line"> + requests==2.32.3</span><br><span class="line"> + urllib3==2.4.0</span><br></pre></td></tr></table></figure><p>而且，从这个输出中也能看到，它自动使用了<code>.python-version</code>指定的3.13版本的python，和当前我们全局目录下的python3指向什么版本没有关系（我的全局python3指向的是3.10版本）</p><h3 id="3-5-运行程序"><a href="#3-5-运行程序" class="headerlink" title="3.5. 运行程序"></a>3.5. 运行程序</h3><p>依赖添加好后，就可以使用uv来运行python程序了</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uv run 程序文件名 [命令行参数]</span><br></pre></td></tr></table></figure><p>uv会自动按照我们的配置来运行程序，无序我们手动维护依赖项，也不需要手动去source各式各样的虚拟环境了。</p><h3 id="3-6-uvx命令"><a href="#3-6-uvx命令" class="headerlink" title="3.6. uvx命令"></a>3.6. uvx命令</h3><p>随着uv下载的还有一个uvx命令，uvx命令本质上是uv tool run命令的别名，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">uvx python main.py</span><br><span class="line"><span class="comment"># 等价于</span></span><br><span class="line">uv run main.py</span><br><span class="line"><span class="comment"># 等价于</span></span><br><span class="line">uv tool run python main.py</span><br></pre></td></tr></table></figure><p>实际例子，如下这两个命令是等价的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">❯ uvx --directory ~/data/code/python/test_code python main.py</span><br><span class="line">Hello from test-code!</span><br><span class="line">    </span><br><span class="line">❯ uv tool run --directory ~/data/code/python/test_code python main.py</span><br><span class="line">Hello from test-code!</span><br></pre></td></tr></table></figure><h3 id="3-7-小结"><a href="#3-7-小结" class="headerlink" title="3.7. 小结"></a>3.7. 小结</h3><p>基本操作就是这些了，更多复杂的操作详见uv的官网。</p><h2 id="4-设置下载包的镜像源"><a href="#4-设置下载包的镜像源" class="headerlink" title="4. 设置下载包的镜像源"></a>4. 设置下载包的镜像源</h2><blockquote><p>参考：<a href="https://blog.csdn.net/qq_41472205/article/details/145686414">https://blog.csdn.net/qq_41472205/article/details/145686414</a></p></blockquote><p>uv下载第三方库本质上也是通过pypi源下载的，所以在国内网络环境中默认链接速度会很慢，可以在项目目录的pyproject.toml中添加如下内容来使用清华源</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[[tool.uv.index]]</span><br><span class="line">url = &quot;https://pypi.tuna.tsinghua.edu.cn/simple&quot;</span><br><span class="line">default = true</span><br></pre></td></tr></table></figure><p>运行uv add命令的时候也可以指定镜像源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uv add --default-index https://pypi.tuna.tsinghua.edu.cn/simple requests</span><br></pre></td></tr></table></figure><p>uv也提供了全局的配置项，可以通过环境变量<code>UV_DEFAULT_INDEX</code>配置镜像源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> UV_DEFAULT_INDEX=https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure><p>全局的配置项优先级低于pyproject.toml中配置的镜像源。如果pyproject.toml里面配置了镜像源，则会使用pyproject.toml的配置。</p><h2 id="5-大模型mcp协议和uv"><a href="#5-大模型mcp协议和uv" class="headerlink" title="5. 大模型mcp协议和uv"></a>5. 大模型mcp协议和uv</h2><p>最近，ai agent中mcp协议的推出，让慕雪了解到了uv工具。对于mcp而言，mcp server的开发可以使用python来编写，此时python环境的管理就非常重要了。</p><p>以常见的mcp客户端配置举例，示例配置如下，其中test.py是我们编写的一个mcp服务器。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;mcpServers&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;工具名称&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;uv&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="string">&quot;--directory&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;工作路径&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;run&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;test.py&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>下图是mcp server和mcp client交互的简要逻辑（这只是个简要的流程）</p><pre><code class="highlight mermaid">graph TD;    A[ai工具加载mcp配置] --&gt; |启动mcp服务器|B    B[mcp client] --&gt; |链接服务器，调用工具|C[mcp server]     C --&gt;|返回工具调用结果|B</code></pre><p>其中第一步，ai工具加载mcp配置的时候，就需要去根据我们填写的mcpSever的配置来通过uv启动我们的服务端了，此时如果还是用python自带的venv来管理虚拟环境就不够用了，因为这里没有办法指定虚拟环境的路径，也没有人去<code>source venv/bin/activate</code>那个虚拟环境，所以mcp需要一个解决方案来更好的管理python的虚拟环境，此时uv就登场了。</p><p>使用了uv，直接执行uv run就可以了，uv工具自动帮我们维护了虚拟环境，并使用了指定环境来运行我们的服务端代码，一切问题都解决啦！</p><p>而且，mcp强制使用uv，也进一步规范了使用python编写mcp server的格式，再也不用担心某些开源python项目的根目录下连requirements.txt都没有的尴尬情况了。</p>]]></content>
    
    
    <summary type="html">本文介绍了python虚拟环境管理工具uv，包括uv的作用、uv的常用命令等等。</summary>
    
    
    
    <category term="编程学习" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="Python" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/Python/"/>
    
    
    <category term="Python" scheme="https://blog.musnow.top/tags/Python/"/>
    
    <category term="MCP" scheme="https://blog.musnow.top/tags/MCP/"/>
    
    <category term="AI" scheme="https://blog.musnow.top/tags/AI/"/>
    
  </entry>
  
  <entry>
    <title>【图床】Picgo/Piclist图片上传之前转webp（pic2webp插件）</title>
    <link href="https://blog.musnow.top/posts/5825720428/"/>
    <id>https://blog.musnow.top/posts/5825720428/</id>
    <published>2025-04-10T12:29:36.000Z</published>
    <updated>2025-04-12T06:18:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍了picgo、piclist的图片上传之前转webp的pic2webp插件，webp格式的压缩率优于截图常用的png格式，能降低站点图床运行压力，同时提升博客内图片加载体验。</p><h2 id="1-说明"><a href="#1-说明" class="headerlink" title="1. 说明"></a>1. 说明</h2><p>慕雪在编写博客的时候，都是使用snipaste软件截图并粘贴在obsidain、typora中，粘贴过程中会自动使用picgo（目前使用的是piclist，二者功能基本一致）将图片上传至图床，并返回markdown格式的图片链接。</p><p>不过，诸如snipaste截图软件，返回的截图基本都是PNG格式的，在压缩率上并不是特别理想。将PNG格式转成webp格式，至少能减少图片30%的体积，同时图片的质量没有明显变化，对于本站教程类、知识记录类博客的插图来说清晰度足够。</p><h2 id="2-安装pic2webp插件"><a href="#2-安装pic2webp插件" class="headerlink" title="2. 安装pic2webp插件"></a>2. 安装pic2webp插件</h2><blockquote><p>插件开源地址：<a href="https://github.com/lemonsuo/picgo-plugin-pic2webp">https://github.com/lemonsuo/picgo-plugin-pic2webp</a></p></blockquote><p>在piclist的插件列表中搜索webp，安装pic2webp插件。安装了之后，无序任何配置，只要启用插件，所有经过piclist上传的图片，在上传之前都会转成webp格式。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/04/f1efd4f400650545cfda0313bf72edbe.webp" alt="image.png"></p><h3 id="2-1-遇到的问题"><a href="#2-1-遇到的问题" class="headerlink" title="2.1. 遇到的问题"></a>2.1. 遇到的问题</h3><p>既然那么无脑，为啥还要编写本文呢？那是因为我在安装插件的时候遇到了问题：<a href="https://github.com/lemonsuo/picgo-plugin-pic2webp/issues/1">无法安装插件，提示Please verify that the package.json has a valid “main” entry</a>；</p><p>ERROR日志如下所示，picgo和piclist的插件其实都是使用npm安装的，在下面的报错中，提到了package.json的main entry可能无效，其实就是<strong>文件不存在</strong>。在插件源码中能找到package.json，其中main的定义为<code>&quot;main&quot;: &quot;dist/index.js&quot;</code>，这里的问题就在于<code>node_modules</code>目录下的插件里面没有<code>dist/index.js</code>文件，导致插件安装失败。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">2025-04-09 08:59:53 [PicList ERROR] </span><br><span class="line">------Error Stack Begin------</span><br><span class="line">Error: Cannot find module &#x27;/Users/mothra/Library/Application Support/piclist/node_modules/picgo-plugin-pic2webp/dist/index.js&#x27;. Please verify that the package.json has a valid &quot;main&quot; entry</span><br><span class="line">    at tryPackage (node:internal/modules/cjs/loader:371:19)</span><br><span class="line">    at Module._findPath (node:internal/modules/cjs/loader:584:18)</span><br><span class="line">    at Module._resolveFilename (node:internal/modules/cjs/loader:949:27)</span><br><span class="line">    at n._resolveFilename (node:electron/js2c/browser_init:2:109827)</span><br><span class="line">    at Module._load (node:internal/modules/cjs/loader:811:27)</span><br><span class="line">    at f._load (node:electron/js2c/asar_bundle:2:13377)</span><br><span class="line">    at Module.require (node:internal/modules/cjs/loader:1035:19)</span><br><span class="line">    at require (node:internal/modules/cjs/helpers:102:18)</span><br><span class="line">    at Bt.getPlugin (/Applications/PicList.app/Contents/Resources/app.asar/node_modules/piclist/dist/index.cjs.js:1:38151)</span><br><span class="line">    at Bt.registerPlugin (/Applications/PicList.app/Contents/Resources/app.asar/node_modules/piclist/dist/index.cjs.js:1:37274)</span><br><span class="line">-------Error Stack End------- </span><br></pre></td></tr></table></figure><p>既然直接通过GUI安装插件失败了，那就尝试一下手动安装，所以编写了本文，记录手动安装的步骤。</p><h3 id="2-2-本地手动安装"><a href="#2-2-本地手动安装" class="headerlink" title="2.2. 本地手动安装"></a>2.2. 本地手动安装</h3><p>在github下载仓库<a href="https://github.com/lemonsuo/picgo-plugin-pic2webp/archive/refs/tags/1.0.0.zip">zip压缩包</a>，然后解压到本地某一个目录中（确保该目录不要变动也不要删除，否则插件也会失效），进入目录中，执行<code>npm install</code>和<code>npm run build</code>命令，构建插件。构建完毕之后，就会有<code>dist/index.js</code>文件了。</p><p>慕雪使用的是<code>npm 10.8.2</code>，构建插件的时候没有遇到任何报错，一切顺利。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">~/data/code/other/picgo-plugin-pic2webp-1.0.0                                9s</span><br><span class="line">❯ npm run build</span><br><span class="line"></span><br><span class="line">&gt; picgo-plugin-pic2webp@1.0.0 build</span><br><span class="line">&gt; tsc -p .</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">~/data/code/other/picgo-plugin-pic2webp-1.0.0                                  </span><br><span class="line">❯ ls</span><br><span class="line">License           logo.ico          package.json</span><br><span class="line">README.md         node_modules      src</span><br><span class="line">dist              package-lock.json tsconfig.json</span><br></pre></td></tr></table></figure><p>然后，再在piclist的插件列表中，点击这个下箭头按钮，选择本地目录，安装插件即可。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/04/d51568050a84d54fafc729b04abd3eea.webp" alt="image.png"></p><h2 id="3-插件效果"><a href="#3-插件效果" class="headerlink" title="3. 插件效果"></a>3. 插件效果</h2><p>以下是同一张图片的PNG和插件转换后的WEBP的效果，被插件处理后的WEBP</p><table><thead><tr><th>PNG</th><th>WEBP</th></tr></thead><tbody><tr><td><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/04/afb6ebffe4262eeea5b6985789d21b2f.png" alt="png图片"></td><td><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/04/1557c739ddb67c9e22ccc4e243c340b5.webp" alt="webp图片"></td></tr><tr><td>图片大小：72KB</td><td>图片大小：24KB</td></tr></tbody></table><p>对比来看，WEBP的图片并没有非常明显的压缩痕迹，对于博客的插图来说完全够用了！相比于图片质量，图像大小的显著变化更加值得。毕竟，图片占用空间越小，维护成本就更低，加载速度也更快，对于博客访问者和维护者来说都是一件好事。</p><p><strong>从2025年4月10日起，本站所有博客插图一律使用WEBP上传，不支持WEBP的浏览器将无法查看本站图片</strong>！</p>]]></content>
    
    
    <summary type="html">本文介绍了picgo、piclist的图片上传之前转webp的pic2webp插件，webp格式的压缩率优于截图常用的png格式，能降低站点图床运行压力，同时提升博客内图片加载体验。</summary>
    
    
    
    <category term="差生文具多" scheme="https://blog.musnow.top/categories/%E5%B7%AE%E7%94%9F%E6%96%87%E5%85%B7%E5%A4%9A/"/>
    
    <category term="博客建站" scheme="https://blog.musnow.top/categories/%E5%B7%AE%E7%94%9F%E6%96%87%E5%85%B7%E5%A4%9A/%E5%8D%9A%E5%AE%A2%E5%BB%BA%E7%AB%99/"/>
    
    
    <category term="博客建站" scheme="https://blog.musnow.top/tags/%E5%8D%9A%E5%AE%A2%E5%BB%BA%E7%AB%99/"/>
    
    <category term="Hexo" scheme="https://blog.musnow.top/tags/Hexo/"/>
    
    <category term="图床" scheme="https://blog.musnow.top/tags/%E5%9B%BE%E5%BA%8A/"/>
    
  </entry>
  
  <entry>
    <title>【SLAM】使用ROS的camera_calibration工具标定D435相机</title>
    <link href="https://blog.musnow.top/posts/9762190903/"/>
    <id>https://blog.musnow.top/posts/9762190903/</id>
    <published>2025-04-07T00:09:24.000Z</published>
    <updated>2025-05-04T12:15:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍了如何使用ROS的camera_calibration工具标定D435相机，包括标定工具的安装和标定的步骤。阅读本文之前，请先参考<a href="https://blog.musnow.top/posts/3771271576/">博客</a>安装ROS环境。</p><p>本文参考资料：</p><ul><li>主要参考博客：<a href="https://zhaoxuhui.top/blog/2021/02/02/ros-camera-calibration.html#3-%E6%89%93%E5%BC%80%E6%A0%87%E5%AE%9A%E5%B7%A5%E5%85%B7" title="利用ROS的Camera Calibration工具进行相机标定(USB相机与D435i)">利用ROS的Camera Calibration工具进行相机标定(USB相机与D435i)</a>；</li><li>ROS官网：<a href="http://wiki.ros.org/action/fullsearch/camera_calibration">wiki.ros.org&#x2F;action&#x2F;fullsearch&#x2F;camera_calibration</a>；</li><li>可选，使用intel官方Depth Quality Tool进行标定：<a href="https://blog.csdn.net/ahelloyou/article/details/106966192">realsense D435 标定(calibration)_d435标定-CSDN博客</a>；</li></ul><h2 id="安装标定工具"><a href="#安装标定工具" class="headerlink" title="安装标定工具"></a>安装标定工具</h2><p>使用如下命令安装<code>camera_calibration</code>工具</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install -y \</span><br><span class="line">    ros-melodic-rostest \</span><br><span class="line">    ros-melodic-camera-calibration</span><br></pre></td></tr></table></figure><p>命令执行结果如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">king@ubuntu:~/slam/ORB_SLAM2$ sudo apt-get install -y \</span><br><span class="line">&gt;     ros-melodic-rostest \</span><br><span class="line">&gt;     ros-melodic-camera-calibration</span><br><span class="line">Reading package lists... Done</span><br><span class="line">Building dependency tree     </span><br><span class="line">Reading state information... Done</span><br><span class="line">ros-melodic-camera-calibration is already the newest version (1.15.2-1bionic.20221025.191201).</span><br><span class="line">ros-melodic-rostest is already the newest version (1.14.13-1bionic.20221025.183909).</span><br><span class="line">ros-melodic-rostest set to manually installed.</span><br><span class="line">The following packages were automatically installed and are no longer required:</span><br><span class="line">  fonts-liberation2 fonts-opensymbol gir1.2-goa-1.0 gir1.2-gst-plugins-base-1.0 gir1.2-gstreamer-1.0 gir1.2-gudev-1.0 gir1.2-snapd-1 gir1.2-udisks-2.0 grilo-plugins-0.3-base gstreamer1.0-gtk3 libcdr-0.1-1 libclucene-contribs1v5 libclucene-core1v5 libcmis-0.5-5v5 libcolamd2</span><br><span class="line">  libdazzle-1.0-0 libe-book-0.1-1 libedataserverui-1.2-2 libeot0 libepubgen-0.1-1 libetonyek-0.1-1 libevent-2.1-6 libexiv2-14 libfreerdp-client2-2 libfreerdp2-2 libgc1c2 libgee-0.8-2 libgexiv2-2 libgom-1.0-0 libgpgmepp6 libgpod-common libgpod4 liblangtag-common liblangtag1</span><br><span class="line">  liblirc-client0 liblua5.3-0 libmediaart-2.0-0 libmspub-0.1-1 libodfgen-0.1-1 libqqwing2v5 librevenge-0.0-0 libsgutils2-2 libssh-4 libsuitesparseconfig5 libvncclient1 libwinpr2-2 libxapian30 libxmlsec1-nss lp-solve media-player-info python3-mako python3-markupsafe</span><br><span class="line">  syslinux syslinux-common syslinux-legacy usb-creator-common</span><br><span class="line">Use &#x27;sudo apt autoremove&#x27; to remove them.</span><br><span class="line">0 upgraded, 0 newly installed, 0 to remove and 3 not upgraded.</span><br></pre></td></tr></table></figure><h2 id="准备棋盘格标定板"><a href="#准备棋盘格标定板" class="headerlink" title="准备棋盘格标定板"></a>准备棋盘格标定板</h2><p>ROS camera_calibration工具基于OpenCV和张正友标定法对相机进行标定。张正友标定法核心工具就是棋盘格标定板。如果有条件，可以去淘宝购买标准的棋盘格标定板。一般情况下，直接用A4纸打印出标定板也足够使用。</p><p>A4纸格式标定板下载链接：<a href="https://gitcode.com/Open-source-documentation-tutorial/3bb25/blob/main/%E6%A3%8B%E7%9B%98%E6%A0%BC-A4.pdf">A4尺寸张正友标定法专用棋盘格</a>；</p><p>在线生成标定板：<a href="https://calib.io/pages/camera-calibration-pattern-generator">Camera Calibration Pattern Generator – calib.io</a>；</p><h2 id="启动D435和标定工具"><a href="#启动D435和标定工具" class="headerlink" title="启动D435和标定工具"></a>启动D435和标定工具</h2><h3 id="启动命令"><a href="#启动命令" class="headerlink" title="启动命令"></a>启动命令</h3><p>先链接D435，然后启动相机和标定工具（不需要额外启动roscore）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 终端a启动相机</span></span><br><span class="line">roslaunch realsense2_camera rs_camera.launch</span><br><span class="line"><span class="comment"># 终端b启动标定工具（RGB相机）</span></span><br><span class="line">rosrun camera_calibration cameracalibrator.py \</span><br><span class="line">    --size 8x6 --square 0.025 \</span><br><span class="line">    --no-service-check \</span><br><span class="line">    image:=/camera/color/image_raw \</span><br><span class="line">    camera:=/camera/color</span><br></pre></td></tr></table></figure><p>命令执行结果如下</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/04/e737131db52258715c73bec8f6444566.png" alt="image.png"></p><h3 id="命令参数介绍"><a href="#命令参数介绍" class="headerlink" title="命令参数介绍"></a>命令参数介绍</h3><p>启动命令参数介绍：</p><ul><li><code>--size 8x6</code>代表棋盘格内部的角点数量（不是格子数量），棋盘格一般是<code>9x7</code>个格子，但是计算的时候只使用棋盘格的内部角点。</li><li><code>--square 0.025</code>是每个棋盘格的边长（米），也就是2.5厘米。上文给出的A4棋盘格打印出来之后就是2.5厘米的，可以用尺子量一下验证一下。</li></ul><p>命令最后的topic映射，我们需要映射成D435的RGB相机或者红外相机，分别对其进行标定。三个相机对应的topic如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/camera/color/image_raw          <span class="comment"># RGB相机</span></span><br><span class="line">/camera/infra1/image_rect_raw    <span class="comment"># 左红外</span></span><br><span class="line">/camera/infra2/image_rect_raw    <span class="comment"># 右红外</span></span><br></pre></td></tr></table></figure><p>映射<code>image</code>是获取相机拍摄的图像，映射<code>camera:=/camera/color</code>的作用是让ROS能找到我们相机的<code>/camera/color/image_raw</code>和<code>/camera/color/camera_info</code>。</p><p>注意，默认情况下是不存在infra红外相机的topic的，是因为红外的topic没有被打开广播。使用如下命令主动开启红外摄像头的topic广播。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">roslaunch realsense2_camera rs_camera.launch \</span><br><span class="line">    enable_infra1:=<span class="literal">true</span> enable_infra2:=<span class="literal">true</span></span><br></pre></td></tr></table></figure><p>此时可以看到topic列表，里面包含了infra的topic</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">[root:/]<span class="comment"># rostopic list</span></span><br><span class="line">/camera/color/camera_info</span><br><span class="line">/camera/color/image_raw</span><br><span class="line">/camera/color/image_raw/compressed</span><br><span class="line">/camera/color/image_raw/compressed/parameter_descriptions</span><br><span class="line">/camera/color/image_raw/compressed/parameter_updates</span><br><span class="line">/camera/color/image_raw/compressedDepth</span><br><span class="line">/camera/color/image_raw/compressedDepth/parameter_descriptions</span><br><span class="line">/camera/color/image_raw/compressedDepth/parameter_updates</span><br><span class="line">/camera/color/image_raw/theora</span><br><span class="line">/camera/color/image_raw/theora/parameter_descriptions</span><br><span class="line">/camera/color/image_raw/theora/parameter_updates</span><br><span class="line">/camera/color/metadata</span><br><span class="line">/camera/depth/camera_info</span><br><span class="line">/camera/depth/image_rect_raw</span><br><span class="line">/camera/depth/image_rect_raw/compressed</span><br><span class="line">/camera/depth/image_rect_raw/compressed/parameter_descriptions</span><br><span class="line">/camera/depth/image_rect_raw/compressed/parameter_updates</span><br><span class="line">/camera/depth/image_rect_raw/compressedDepth</span><br><span class="line">/camera/depth/image_rect_raw/compressedDepth/parameter_descriptions</span><br><span class="line">/camera/depth/image_rect_raw/compressedDepth/parameter_updates</span><br><span class="line">/camera/depth/image_rect_raw/theora</span><br><span class="line">/camera/depth/image_rect_raw/theora/parameter_descriptions</span><br><span class="line">/camera/depth/image_rect_raw/theora/parameter_updates</span><br><span class="line">/camera/depth/metadata</span><br><span class="line">/camera/extrinsics/depth_to_color</span><br><span class="line">/camera/extrinsics/depth_to_infra1</span><br><span class="line">/camera/extrinsics/depth_to_infra2</span><br><span class="line">/camera/infra1/camera_info</span><br><span class="line">/camera/infra1/image_rect_raw</span><br><span class="line">/camera/infra1/image_rect_raw/compressed</span><br><span class="line">/camera/infra1/image_rect_raw/compressed/parameter_descriptions</span><br><span class="line">/camera/infra1/image_rect_raw/compressed/parameter_updates</span><br><span class="line">/camera/infra1/image_rect_raw/compressedDepth</span><br><span class="line">/camera/infra1/image_rect_raw/compressedDepth/parameter_descriptions</span><br><span class="line">/camera/infra1/image_rect_raw/compressedDepth/parameter_updates</span><br><span class="line">/camera/infra1/image_rect_raw/theora</span><br><span class="line">/camera/infra1/image_rect_raw/theora/parameter_descriptions</span><br><span class="line">/camera/infra1/image_rect_raw/theora/parameter_updates</span><br><span class="line">/camera/infra1/metadata</span><br><span class="line">/camera/infra2/camera_info</span><br><span class="line">/camera/infra2/image_rect_raw</span><br><span class="line">/camera/infra2/image_rect_raw/compressed</span><br><span class="line">/camera/infra2/image_rect_raw/compressed/parameter_descriptions</span><br><span class="line">/camera/infra2/image_rect_raw/compressed/parameter_updates</span><br><span class="line">/camera/infra2/image_rect_raw/compressedDepth</span><br><span class="line">/camera/infra2/image_rect_raw/compressedDepth/parameter_descriptions</span><br><span class="line">/camera/infra2/image_rect_raw/compressedDepth/parameter_updates</span><br><span class="line">/camera/infra2/image_rect_raw/theora</span><br><span class="line">/camera/infra2/image_rect_raw/theora/parameter_descriptions</span><br><span class="line">/camera/infra2/image_rect_raw/theora/parameter_updates</span><br><span class="line">/camera/infra2/metadata</span><br><span class="line">/camera/realsense2_camera_manager/bond</span><br><span class="line">/camera/rgb_camera/auto_exposure_roi/parameter_descriptions</span><br><span class="line">/camera/rgb_camera/auto_exposure_roi/parameter_updates</span><br><span class="line">/camera/rgb_camera/parameter_descriptions</span><br><span class="line">/camera/rgb_camera/parameter_updates</span><br><span class="line">/camera/stereo_module/auto_exposure_roi/parameter_descriptions</span><br><span class="line">/camera/stereo_module/auto_exposure_roi/parameter_updates</span><br><span class="line">/camera/stereo_module/parameter_descriptions</span><br><span class="line">/camera/stereo_module/parameter_updates</span><br><span class="line">/diagnostics</span><br><span class="line">/rosout</span><br><span class="line">/rosout_agg</span><br><span class="line">/tf</span><br><span class="line">/tf_static</span><br><span class="line">[root:/]<span class="comment"># </span></span><br></pre></td></tr></table></figure><p>因为ROS会主动查询相机的<code>set_camera_info</code>节点，如果相机不存在此节点就会报错。可以添加<code>--no-service-check</code>参数跳过检查。如果不加这个参数，就会出现“Service not found”的报错。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root:/]# rosrun camera_calibration cameracalibrator.py \</span><br><span class="line">&gt;     --size 8x6 --square 0.025 \</span><br><span class="line">&gt;     image:=/camera/color/image_raw \</span><br><span class="line">&gt;     camera:=/camera/color</span><br><span class="line">Waiting for service /camera/color/set_camera_info ...</span><br><span class="line">Service not found</span><br></pre></td></tr></table></figure><h2 id="开始标定"><a href="#开始标定" class="headerlink" title="开始标定"></a>开始标定</h2><h3 id="标定步骤"><a href="#标定步骤" class="headerlink" title="标定步骤"></a>标定步骤</h3><p>启动了标定工具，且显示出摄像头的画面之后，将棋盘标定板放在<strong>平面</strong>上（一定要是平面），<strong>然后从不同方向移动摄像头拍摄标定板</strong>，ROS会自动拍摄多角度的标定板图片。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/04/68e19416b1b2cd97faa533ae2272e3d1.png" alt="image.png"></p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/04/1bc53f02e9b36185f82369ae6349cfbd.png" alt="image.png"></p><p>标定完成后，calibration按钮会变绿可供点击。点击calibration后，save和commit按钮会亮起，点击save按钮之后会将标定结果数据写入到<code>/tmp</code>目录下去。注意一定要将其cp挪出来，因为linux的tmp目录每次启动系统都会清理掉。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(&#x27;Wrote calibration data to&#x27;, &#x27;/tmp/calibrationdata.tar.gz&#x27;)</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/04/044b7300423283efcd757d952abc87bf.png" alt="image.png"></p><p>而commit按钮就是将我们的标定结果写入到相机的固件中，后续<code>rostopic echo /camera/color/camera_info</code>的时候就会输出此次的标定结果。</p><h3 id="标定输出"><a href="#标定输出" class="headerlink" title="标定输出"></a>标定输出</h3><p>标定过程中，终端输出如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">*** Added sample 34, p_x = 0.593, p_y = 0.624, p_size = 0.568, skew = 0.121</span><br><span class="line">*** Added sample 35, p_x = 0.488, p_y = 0.598, p_size = 0.560, skew = 0.335</span><br><span class="line">*** Added sample 36, p_x = 0.433, p_y = 0.486, p_size = 0.575, skew = 0.358</span><br><span class="line">*** Added sample 37, p_x = 0.544, p_y = 0.345, p_size = 0.580, skew = 0.248</span><br><span class="line">*** Added sample 38, p_x = 0.522, p_y = 0.179, p_size = 0.568, skew = 0.055</span><br><span class="line">*** Added sample 39, p_x = 0.511, p_y = 0.019, p_size = 0.591, skew = 0.106</span><br><span class="line">*** Added sample 40, p_x = 0.496, p_y = 0.547, p_size = 0.577, skew = 0.143</span><br><span class="line">*** Added sample 41, p_x = 0.502, p_y = 0.344, p_size = 0.599, skew = 0.004</span><br></pre></td></tr></table></figure><p>标定完成后会输出相机内参。其中camera matrix是相机的内参矩阵（对应开头矩阵K），distortion是相机的畸变系数（对应开头的矩阵D），R是旋转举证，P是投影矩阵。<code>[narrow_stereo]</code>之后的内容是opencv格式的ost.txt标定文件格式，可以用于发布<code>camera_info</code>话题</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">**** Calibrating ****</span><br><span class="line">mono pinhole calibration...</span><br><span class="line">D = [0.1234477524818914, -0.24186083107572148, 0.010573738134724179, -0.0018947635408389889, 0.0]</span><br><span class="line">K = [609.8463473151232, 0.0, 318.16312952971543, 0.0, 610.5650055668543, 255.8048346565674, 0.0, 0.0, 1.0]</span><br><span class="line">R = [1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0]</span><br><span class="line">P = [621.8898315429688, 0.0, 317.1112464092075, 0.0, 0.0, 620.319091796875, 259.4397678761525, 0.0, 0.0, 0.0, 1.0, 0.0]</span><br><span class="line">None</span><br><span class="line"># oST version 5.0 parameters</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[image]</span><br><span class="line"></span><br><span class="line">width</span><br><span class="line">640</span><br><span class="line"></span><br><span class="line">height</span><br><span class="line">480</span><br><span class="line"></span><br><span class="line">[narrow_stereo]</span><br><span class="line"></span><br><span class="line">camera matrix</span><br><span class="line">609.846347 0.000000 318.163130</span><br><span class="line">0.000000 610.565006 255.804835</span><br><span class="line">0.000000 0.000000 1.000000</span><br><span class="line"></span><br><span class="line">distortion</span><br><span class="line">0.123448 -0.241861 0.010574 -0.001895 0.000000</span><br><span class="line"></span><br><span class="line">rectification</span><br><span class="line">1.000000 0.000000 0.000000</span><br><span class="line">0.000000 1.000000 0.000000</span><br><span class="line">0.000000 0.000000 1.000000</span><br><span class="line"></span><br><span class="line">projection</span><br><span class="line">621.889832 0.000000 317.111246 0.000000</span><br><span class="line">0.000000 620.319092 259.439768 0.000000</span><br><span class="line">0.000000 0.000000 1.000000 0.000000</span><br><span class="line"></span><br><span class="line">(&#x27;Wrote calibration data to&#x27;, &#x27;/tmp/calibrationdata.tar.gz&#x27;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="关闭红外点阵投影"><a href="#关闭红外点阵投影" class="headerlink" title="关闭红外点阵投影"></a>关闭红外点阵投影</h2><p>参考：<a href="https://zhaoxuhui.top/blog/2020/09/09/intel-realsense-d435i-installation-and-use.html#4%E7%BA%A2%E5%A4%96%E5%8F%91%E5%B0%84%E5%99%A8%E7%9A%84%E5%BC%80%E5%85%B3">https://zhaoxuhui.top/blog/2020/09/09/intel-realsense-d435i-installation-and-use.html#4%E7%BA%A2%E5%A4%96%E5%8F%91%E5%B0%84%E5%99%A8%E7%9A%84%E5%BC%80%E5%85%B3</a>；</p><p>前文给出的标定步骤对于RGB相机和红外相机都是一样的操作，但是在标定红外相机的时候，需要将D435的红外投影给关闭，否则会影响标定结果（因为画面里面全是红外点阵投影）。</p><p>首先启动相机：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">roslaunch realsense2_camera rs_camera.launch \</span><br><span class="line">    enable_infra1:=<span class="literal">true</span> enable_infra2:=<span class="literal">true</span></span><br></pre></td></tr></table></figure><p>然后启动ROS的前端工具，启动Reconfigure节点，随后会打开一个工具</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rosrun rqt_reconfigure rqt_reconfigure</span><br></pre></td></tr></table></figure><p>找到<code>stereo_module</code>，然后找到<code>emitter_enabled</code>选项，将其关闭即可</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/04/a4cae51651e97200ff58d8c661bdb9bc.png" alt="image.png"></p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/04/9ea9b24a840d6630f210d38ccaffe1ed.png" alt="image.png"></p><p>关闭了之后，再尝试启动标定工具，可以看到没有红外投影点阵了。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/04/7d22bea0a73c705e70e2d4ec8d49a0ec.png" alt="image.png"></p><h2 id="The-end"><a href="#The-end" class="headerlink" title="The end"></a>The end</h2><p>D435相机的标定步骤就是这些啦，希望能帮到大家。</p>]]></content>
    
    
    <summary type="html">本文介绍了如何使用ROS的camera_calibration工具标定D435相机，包括标定工具的安装和标定的步骤。</summary>
    
    
    
    <category term="编程学习" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="项目开发记录" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="Linux" scheme="https://blog.musnow.top/tags/Linux/"/>
    
    <category term="SLAM" scheme="https://blog.musnow.top/tags/SLAM/"/>
    
    <category term="RealSenseD435" scheme="https://blog.musnow.top/tags/RealSenseD435/"/>
    
  </entry>
  
  <entry>
    <title>【SLAM】在ORB_SLAM2的ROS模式下使用RealSense D435相机</title>
    <link href="https://blog.musnow.top/posts/9149643829/"/>
    <id>https://blog.musnow.top/posts/9149643829/</id>
    <published>2025-04-06T09:09:24.000Z</published>
    <updated>2025-04-06T10:52:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍了如何在ORB_SLAM2项目中使用RealSense D435相机作为RGB-D输入源，包括ROS下启动D435相机、ORB_SLAM2订阅Topic、ORB_SLAM2读取realsense-viewer录制的rosbag文件等步骤。。</p><h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h2><p>先前已经编写了<a href="https://blog.musnow.top/posts/7873538113/">如何用TUM数据集运行ORB_SLAM3</a>以及<a href="https://blog.musnow.top/posts/5090585017/">如何在ROS模式下运行ORB_SLAM3</a>的博客，ORB_SLAM3是基于ORB_SLAM2的，甚至代码仓库中还有遗留的ORB_SLAM2命名空间namespace没有修正，二者不管是用TUM RGB-D数据集直接运行还是在ROS模式下运行的命令都<strong>完全一致</strong>。所以，在阅读本文之前，先参考上面给出的两篇博客，安装ORB_SLAM2的依赖库和ROS环境。</p><p>注意：若想在ROS模式下运行ORB_SLAM2，则一定要安装OpenCV 3.2.0版本，否则会因为系统中存在多个不同版本的OpenCV从而导致动态库链接错误！</p><p>RealSense D435在Ubuntu 18.04中realsense驱动安装的步骤也在<a href="https://blog.musnow.top/posts/9107049817/">【SLAM】ubuntu 18.04 安装 RealSense D435 相机驱动（ARM64&#x2F;AMD64）</a>一文里面介绍过了，继续阅读本文之前，需要先把D435的驱动搞定。</p><p>测试使用的操作系统为 Ubuntu 18.04 LTS，平台为AMD64。</p><h2 id="2-运行步骤"><a href="#2-运行步骤" class="headerlink" title="2. 运行步骤"></a>2. 运行步骤</h2><h3 id="2-1-编译ORB-SLAM2"><a href="#2-1-编译ORB-SLAM2" class="headerlink" title="2.1. 编译ORB_SLAM2"></a>2.1. 编译ORB_SLAM2</h3><p>阅读到这里，就默认你已经根据上面给出的参考博客把相关依赖项、ROS环境和realsense驱动都已经安装完毕了，这里给出ORB_SLAM2的编译步骤，和ORB_SLAM3也是如出一辙的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/raulmur/ORB_SLAM2.git</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> ORB_SLAM2</span><br><span class="line"><span class="built_in">chmod</span> +x build.sh</span><br><span class="line">./build.sh</span><br></pre></td></tr></table></figure><p>注意，编译之前需要先修改<a href="https://github.com/raulmur/ORB_SLAM2/blob/master/build.sh">build.sh</a>脚本，把所有<code>make -j</code>修改成<code>make -j4</code>，避免make编译的时候无止尽地吃掉所有系统资源，这个在ORB_SLAM3的博客中也提到过。</p><blockquote><p>make命令<code>-j</code>选项后面跟着的数字是<strong>编译使用的线程数量</strong>，建议改成linux系统cpu线程数量的一半或者2&#x2F;3，避免吃光所有系统资源。选项<code>-j</code>后面不跟数字的时候，编译项目时会无止尽地吃掉所有系统内存和CPU，直到被操作系统KILL掉，编译失败（在我的测试环境中是这个现象）。</p></blockquote><p>编译完毕普通版本后，再编译ROS版本，同样需要把<code>build_ros.sh</code>脚本里面的<code>make -j</code>改成<code>make -j4</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> +x ./build_ros.sh</span><br><span class="line">./build_ros.sh</span><br></pre></td></tr></table></figure><p>如果你的依赖项环境一切正常，这两个脚本无需任何额外操作即可编译成功。</p><h3 id="2-2-ROS下启动D435相机"><a href="#2-2-ROS下启动D435相机" class="headerlink" title="2.2. ROS下启动D435相机"></a>2.2. ROS下启动D435相机</h3><p>参考博客：</p><ul><li><a href="https://www.jianshu.com/p/9e3d31ba35da" title="基于深度相机 RealSense D435i 的 ORB SLAM 2 - 简书">基于深度相机 RealSense D435i 的 ORB SLAM 2 - 简书</a>；</li><li><a href="https://github.com/IntelRealSense/realsense-ros">github.com&#x2F;IntelRealSense&#x2F;realsense-ros</a>；</li></ul><p>使用如下命令安装D435的ROS驱动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install -y ros-melodic-rgbd-launch \</span><br><span class="line">    ros-melodic-realsense2-camera \</span><br><span class="line">    ros-melodic-realsense2-description</span><br></pre></td></tr></table></figure><p>安装完毕驱动后，系统中会多出realsense相机的ROS启动文件，可以使用<code>roscd realsense2_camera</code>命令进入apt安装的ros realsense的工作空间，这里就有各种launch文件。</p><p>我们需要的是<code>rs_rgbd.launch</code>这个启动文件，以RGB-D模式启动我们的D435相机。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">king@ubuntu:~/slam$ roscd realsense2_camera</span><br><span class="line">king@ubuntu:/opt/ros/melodic/share/realsense2_camera$ ls</span><br><span class="line">cmake  launch  msg  nodelet_plugins.xml  package.xml  rviz  srv</span><br><span class="line">king@ubuntu:/opt/ros/melodic/share/realsense2_camera$ ls launch/</span><br><span class="line">demo_pointcloud.launch      rs_aligned_depth.launch           rs_from_file.launch         rs_t265.launch</span><br><span class="line">demo_t265.launch            rs_camera.launch                  rs_multiple_devices.launch</span><br><span class="line">includes                    rs_d400_and_t265.launch           rs_rgbd.launch</span><br><span class="line">opensource_tracking.launch  rs_d435_camera_with_model.launch  rs_rtabmap.launch</span><br></pre></td></tr></table></figure><p>注意检查一下<code>rs_rgbd.launch</code>启动文件中的下面这两个选项是否为true，如果不是，需要修改为true。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">&quot;enable_sync&quot;</span>         <span class="attr">default</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">&quot;align_depth&quot;</span>         <span class="attr">default</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>这两个参数的前者是让不同传感器数据（Depth, RGB, IMU）实现时间同步，即具有相同的 timestamp；后者会增加若干 rostopic，其中我们比较关心的是 <code>/camera/aligned_depth_to_color/image_raw</code>这个主题，对应D435相机的深度图像数据。</p><p>确认启动文件配置无误后，用下面的roslaunch命令就可以启动D435相机了。<strong>执行启动命令之前，需要先在另外一个终端执行roscore命令</strong>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">roslaunch realsense2_camera rs_rgbd.launch</span><br></pre></td></tr></table></figure><p>命令执行结果如下</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/04/c3c8958b59c5adceca3bbfa60e35cbec.png" alt="image.png"></p><p>使用<code>rostopic list</code>能看到D435相机发布的<strong>topic列表</strong>，如下所示。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">[root:/]<span class="comment"># rostopic list</span></span><br><span class="line">/camera/align_to_color/parameter_descriptions</span><br><span class="line">/camera/align_to_color/parameter_updates</span><br><span class="line">/camera/aligned_depth_to_color/camera_info</span><br><span class="line">/camera/aligned_depth_to_color/image_raw</span><br><span class="line">/camera/aligned_depth_to_color/image_raw/compressed</span><br><span class="line">/camera/aligned_depth_to_color/image_raw/compressed/parameter_descriptions</span><br><span class="line">/camera/aligned_depth_to_color/image_raw/compressed/parameter_updates</span><br><span class="line">/camera/aligned_depth_to_color/image_raw/compressedDepth</span><br><span class="line">/camera/aligned_depth_to_color/image_raw/compressedDepth/parameter_descriptions</span><br><span class="line">/camera/aligned_depth_to_color/image_raw/compressedDepth/parameter_updates</span><br><span class="line">/camera/aligned_depth_to_color/image_raw/theora</span><br><span class="line">/camera/aligned_depth_to_color/image_raw/theora/parameter_descriptions</span><br><span class="line">/camera/aligned_depth_to_color/image_raw/theora/parameter_updates</span><br><span class="line">/camera/color/camera_info</span><br><span class="line">/camera/color/image_raw</span><br><span class="line">/camera/color/image_raw/compressed</span><br><span class="line">/camera/color/image_raw/compressed/parameter_descriptions</span><br><span class="line">/camera/color/image_raw/compressed/parameter_updates</span><br><span class="line">/camera/color/image_raw/compressedDepth</span><br><span class="line">/camera/color/image_raw/compressedDepth/parameter_descriptions</span><br><span class="line">/camera/color/image_raw/compressedDepth/parameter_updates</span><br><span class="line">/camera/color/image_raw/theora</span><br><span class="line">/camera/color/image_raw/theora/parameter_descriptions</span><br><span class="line">/camera/color/image_raw/theora/parameter_updates</span><br><span class="line">/camera/color/image_rect_color</span><br><span class="line">/camera/color/image_rect_color/compressed</span><br><span class="line">/camera/color/image_rect_color/compressed/parameter_descriptions</span><br><span class="line">/camera/color/image_rect_color/compressed/parameter_updates</span><br><span class="line">/camera/color/image_rect_color/compressedDepth</span><br><span class="line">/camera/color/image_rect_color/compressedDepth/parameter_descriptions</span><br><span class="line">/camera/color/image_rect_color/compressedDepth/parameter_updates</span><br><span class="line">/camera/color/image_rect_color/theora</span><br><span class="line">/camera/color/image_rect_color/theora/parameter_descriptions</span><br><span class="line">/camera/color/image_rect_color/theora/parameter_updates</span><br><span class="line">/camera/color/metadata</span><br><span class="line">/camera/color_rectify_color/parameter_descriptions</span><br><span class="line">/camera/color_rectify_color/parameter_updates</span><br><span class="line">/camera/depth/camera_info</span><br><span class="line">/camera/depth/image_rect_raw</span><br><span class="line">/camera/depth/image_rect_raw/compressed</span><br><span class="line">/camera/depth/image_rect_raw/compressed/parameter_descriptions</span><br><span class="line">/camera/depth/image_rect_raw/compressed/parameter_updates</span><br><span class="line">/camera/depth/image_rect_raw/compressedDepth</span><br><span class="line">/camera/depth/image_rect_raw/compressedDepth/parameter_descriptions</span><br><span class="line">/camera/depth/image_rect_raw/compressedDepth/parameter_updates</span><br><span class="line">/camera/depth/image_rect_raw/theora</span><br><span class="line">/camera/depth/image_rect_raw/theora/parameter_descriptions</span><br><span class="line">/camera/depth/image_rect_raw/theora/parameter_updates</span><br><span class="line">/camera/depth/metadata</span><br><span class="line">/camera/depth_registered/points</span><br><span class="line">/camera/extrinsics/depth_to_color</span><br><span class="line">/camera/realsense2_camera_manager/bond</span><br><span class="line">/camera/rgb_camera/parameter_descriptions</span><br><span class="line">/camera/rgb_camera/parameter_updates</span><br><span class="line">/camera/stereo_module/parameter_descriptions</span><br><span class="line">/camera/stereo_module/parameter_updates</span><br><span class="line">/diagnostics</span><br><span class="line">/rosout</span><br><span class="line">/rosout_agg</span><br><span class="line">/tf</span><br><span class="line">/tf_static</span><br><span class="line">[root:/]<span class="comment"># </span></span><br></pre></td></tr></table></figure><p>其中我们需要的是<code>/camera/color/image_raw</code> 和 <code>/camera/aligned_depth_to_color/image_raw</code> 这两个topic，分别对应 RGB 图像和深度图像数据流。</p><h3 id="2-3-ORB-SLAM2在ROS下订阅D435发布的topic"><a href="#2-3-ORB-SLAM2在ROS下订阅D435发布的topic" class="headerlink" title="2.3. ORB_SLAM2在ROS下订阅D435发布的topic"></a>2.3. ORB_SLAM2在ROS下订阅D435发布的topic</h3><p>接下来需要创建一个相机内参文件（类似<code>Examples/RGB-D/TUM1.yaml</code>），填写D435相机的内外参数。内外参数最好的获取方式是通过ROS的camera_calibration工具，需要打印一个棋盘格标定板对D435相机进行标定。</p><p>本文不介绍如何标定D435相机，直接使用D435相机发布的相机信息的<code>/camera/color/camera_info</code>主题，通过如下命令获取D435相机的内外参数，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rostopic <span class="built_in">echo</span> /camera/color/camera_info</span><br></pre></td></tr></table></figure><p>该命令的输出结果如下所示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">header: </span><br><span class="line">  seq: 8477</span><br><span class="line">  stamp: </span><br><span class="line">    secs: 1740896373</span><br><span class="line">    nsecs: 113253355</span><br><span class="line">  frame_id: &quot;camera_color_optical_frame&quot;</span><br><span class="line">height: 480</span><br><span class="line">width: 640</span><br><span class="line">distortion_model: &quot;plumb_bob&quot;</span><br><span class="line">D: [0.0, 0.0, 0.0, 0.0, 0.0]</span><br><span class="line">K: [605.8230590820312, 0.0, 323.6572570800781, 0.0, 604.4893798828125, 242.0369110107422, 0.0, 0.0, 1.0]</span><br><span class="line">R: [1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0]</span><br><span class="line">P: [605.8230590820312, 0.0, 323.6572570800781, 0.0, 0.0, 604.4893798828125, 242.0369110107422, 0.0, 0.0, 0.0, 1.0, 0.0]</span><br><span class="line">binning_x: 0</span><br><span class="line">binning_y: 0</span><br><span class="line">roi: </span><br><span class="line">  x_offset: 0</span><br><span class="line">  y_offset: 0</span><br><span class="line">  height: 0</span><br><span class="line">  width: 0</span><br><span class="line">  do_rectify: False</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>这个输出中：</p><ul><li><code>K</code> 是 <strong>相机内参矩阵</strong>（<code>fx</code>, <code>fy</code>, <code>cx</code>, <code>cy</code>）</li><li><code>D</code> 是 <strong>畸变系数</strong>（ORB_SLAM2 只用前 4 个 <code>k1, k2, p1, p2</code>）</li><li><code>width</code> 和 <code>height</code> 是相机拍摄的图像分辨率；</li></ul><p>Camera.bf的计算公式如下，其中baseline是D435两颗摄像头之间的间距，官方的参数是50mm，将其和fx相乘就能得到bf。</p><p>$$<br>bf&#x3D;baseline×fx&#x3D;0.05×605.8230590820312≈30.29<br>$$</p><p>收集了这些数据后，参考ORB_SLAM2代码仓库中的<code>Examples/ROS/ORB_SLAM2/Asus.yaml</code>文件，把上述命令的结果中的参数写到文件<code>Examples/RGB-D/RealSenseD435.yaml</code>中。</p><p>最终我依照上述命令结果制作了如下yaml文件，每一个参数都取值都用注释标注出来了，没有中文注释的部分保持不变，不用修改。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">%YAML:1.0</span></span><br><span class="line"><span class="comment">#--------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># 通过`rostopic echo /camera/color/camera_info`获取并编写</span></span><br><span class="line"><span class="comment">#--------------------------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 相机内参 Camera Parameters</span></span><br><span class="line"><span class="attr">Camera.fx:</span> <span class="number">605.8230590820312</span>  <span class="comment"># K[0]</span></span><br><span class="line"><span class="attr">Camera.fy:</span> <span class="number">604.4893798828125</span>  <span class="comment"># K[4]</span></span><br><span class="line"><span class="attr">Camera.cx:</span> <span class="number">323.6572570800781</span>  <span class="comment"># K[2]</span></span><br><span class="line"><span class="attr">Camera.cy:</span> <span class="number">242.0369110107422</span>  <span class="comment"># K[5]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 畸变参数 (D)</span></span><br><span class="line"><span class="attr">Camera.k1:</span> <span class="number">0.0</span>  <span class="comment"># D[0]</span></span><br><span class="line"><span class="attr">Camera.k2:</span> <span class="number">0.0</span>  <span class="comment"># D[1]</span></span><br><span class="line"><span class="attr">Camera.p1:</span> <span class="number">0.0</span>  <span class="comment"># D[2]</span></span><br><span class="line"><span class="attr">Camera.p2:</span> <span class="number">0.0</span>  <span class="comment"># D[3]</span></span><br><span class="line"><span class="attr">Camera.k3:</span> <span class="number">0.0</span>  <span class="comment"># D[4]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 图像分辨率</span></span><br><span class="line"><span class="string">Camera.width:640</span></span><br><span class="line"><span class="string">Camera.height:480</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Camera frames per second 相机帧数</span></span><br><span class="line"><span class="string">Camera.fps:30.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># IR projector baseline times fx (aprox.)</span></span><br><span class="line"><span class="comment"># bf = baseline × fx = 0.05 × 605.8230590820312 ≈ 30.29</span></span><br><span class="line"><span class="comment"># baseline是d435两个摄像头的基线距离，为50mm</span></span><br><span class="line"><span class="string">Camera.bf:30.29</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Color order of the images (0: BGR, 1: RGB. It is ignored if images are grayscale)</span></span><br><span class="line"><span class="string">Camera.RGB:1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Close/Far threshold. Baseline times.</span></span><br><span class="line"><span class="string">ThDepth:40.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Deptmap values factor，将深度像素值转化为实际距离，原来单位是mm，转化成m</span></span><br><span class="line"><span class="string">DepthMapFactor:1000.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下面这部分都不需要修改，直接从Asus.yaml复制过来</span></span><br><span class="line"><span class="comment">#--------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># ORB Parameters</span></span><br><span class="line"><span class="comment">#--------------------------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ORB Extractor: Number of features per image</span></span><br><span class="line"><span class="attr">ORBextractor.nFeatures:</span> <span class="number">1000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ORB Extractor: Scale factor between levels in the scale pyramid     </span></span><br><span class="line"><span class="attr">ORBextractor.scaleFactor:</span> <span class="number">1.2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ORB Extractor: Number of levels in the scale pyramid    </span></span><br><span class="line"><span class="attr">ORBextractor.nLevels:</span> <span class="number">8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ORB Extractor: Fast threshold</span></span><br><span class="line"><span class="comment"># Image is divided in a grid. At each cell FAST are extracted imposing a minimum response.</span></span><br><span class="line"><span class="comment"># Firstly we impose iniThFAST. If no corners are detected we impose a lower value minThFAST</span></span><br><span class="line"><span class="comment"># You can lower these values if your images have low contrast            </span></span><br><span class="line"><span class="attr">ORBextractor.iniThFAST:</span> <span class="number">20</span></span><br><span class="line"><span class="attr">ORBextractor.minThFAST:</span> <span class="number">7</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#--------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Viewer Parameters</span></span><br><span class="line"><span class="comment">#--------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="attr">Viewer.KeyFrameSize:</span> <span class="number">0.05</span></span><br><span class="line"><span class="attr">Viewer.KeyFrameLineWidth:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">Viewer.GraphLineWidth:</span> <span class="number">0.9</span></span><br><span class="line"><span class="string">Viewer.PointSize:2</span></span><br><span class="line"><span class="attr">Viewer.CameraSize:</span> <span class="number">0.08</span></span><br><span class="line"><span class="attr">Viewer.CameraLineWidth:</span> <span class="number">3</span></span><br><span class="line"><span class="attr">Viewer.ViewpointX:</span> <span class="number">0</span></span><br><span class="line"><span class="attr">Viewer.ViewpointY:</span> <span class="number">-0.7</span></span><br><span class="line"><span class="attr">Viewer.ViewpointZ:</span> <span class="number">-1.8</span></span><br><span class="line"><span class="attr">Viewer.ViewpointF:</span> <span class="number">500</span></span><br></pre></td></tr></table></figure><h3 id="2-4-运行ORB-SLAM2"><a href="#2-4-运行ORB-SLAM2" class="headerlink" title="2.4. 运行ORB_SLAM2"></a>2.4. 运行ORB_SLAM2</h3><p>相机参数文件准备好之后，就可以启动ORB_SLAM2了，先执行export命令设置一下ROS的环境变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> ROS_PACKAGE_PATH=<span class="variable">$ROS_PACKAGE_PATH</span>:<span class="variable">$PWD</span>/Examples/ROS/ORB_SLAM2</span><br></pre></td></tr></table></figure><p>启动命令如下，这里指定了我们刚刚自己制作的yaml文件，然后指定了两个topic的绑定</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">rosrun ORB_SLAM2 RGBD \</span><br><span class="line">    Vocabulary/ORBvoc.txt \</span><br><span class="line">    Examples/RGB-D/RealSenseD435.yaml \</span><br><span class="line">    /camera/rgb/image_raw:=/camera/color/image_raw \</span><br><span class="line">    /camera/depth_registered/image_raw:=/camera/aligned_depth_to_color/image_raw</span><br></pre></td></tr></table></figure><p>命令中<code>:=</code>左侧为订阅的topic，右侧为输入的topic，ORB_SLAM2订阅的topic可以在<code>Examples/ROS/ORB_SLAM2/src/ros_rgbd.cc</code>代码里面找到</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">message_filters::Subscriber&lt;sensor_msgs::Image&gt; <span class="title">rgb_sub</span><span class="params">(nh, <span class="string">&quot;/camera/rgb/image_raw&quot;</span>, <span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="function">message_filters::Subscriber&lt;sensor_msgs::Image&gt; <span class="title">depth_sub</span><span class="params">(nh, <span class="string">&quot;camera/depth_registered/image_raw&quot;</span>, <span class="number">1</span>)</span></span>;</span><br></pre></td></tr></table></figure><p>一切正常的话，应该已经可以在ORB_SLAM2的GUI中看到D435相机拍摄到的画面了。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/04/68402467357181a2c1c9a5ff3b54ac32.png" alt="image.png"></p><p>缓慢移动D435相机，可以在GUI中观察SLAM的追踪和建图结果。注意必须缓慢移动相机，过快移动相机会导致ORB_SLAM2直接丢跟踪（tracking lost）。</p><p><strong>至此，在ORB_SLAM2中通过ROS使用D435相机的全步骤结束</strong>。</p><h3 id="2-5-可能遇到的问题"><a href="#2-5-可能遇到的问题" class="headerlink" title="2.5. 可能遇到的问题"></a>2.5. 可能遇到的问题</h3><p>roslaunch启动D435相机的时候可能会直接报错，如下所示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">king@ubuntu:/opt/ros/melodic/share/realsense2_camera$ roslaunch realsense2_camera rs_rgbd.launch</span><br><span class="line">... logging to /home/king/.ros/log/292703ba-f72c-11ef-a6ca-000c29839929/roslaunch-ubuntu-11850.log</span><br><span class="line">Checking log directory for disk usage. This may take a while.</span><br><span class="line">Press Ctrl-C to interrupt</span><br><span class="line">Done checking log file disk usage. Usage is &lt;1GB.</span><br><span class="line"></span><br><span class="line">Resource not found: rgbd_launch</span><br><span class="line">ROS path [0]=/opt/ros/melodic/share/ros</span><br><span class="line">ROS path [1]=/opt/ros/melodic/share</span><br><span class="line">The traceback for the exception was written to the log file</span><br></pre></td></tr></table></figure><p>这个问题是因为缺少安装一个ros的包，安装了之后就OK了，可以正常执行roslaunch命令了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install -y ros-melodic-rgbd-launch</span><br></pre></td></tr></table></figure><p>前文的D435 ROS驱动安装命令中已经包含了这个软件包了。</p><h2 id="3-ORB-SLAM2读取realsense-viewer录制的rosbag文件"><a href="#3-ORB-SLAM2读取realsense-viewer录制的rosbag文件" class="headerlink" title="3. ORB_SLAM2读取realsense-viewer录制的rosbag文件"></a>3. ORB_SLAM2读取realsense-viewer录制的rosbag文件</h2><p>D435相机的realsense-viewer软件是可以直接提前录制视频成rosbag格式的<code>.bag</code>文件的，这样能方便我们用同一个数据集测试SLAM系统，并以此改进SLAM算法。本质上和TUM数据集提供的rosbag格式文件没有什么区别。</p><p>在realsense-viewer中同时开启深度相机和RGB相机，点击record录制视频后，默认会存放在<code>~/Documents</code>文件夹下，找到录制的bag文件，使用<code>rostopic -b 文件名</code>的方式查看录制的bag文件中的topic列表，需要找到下面这两个主题，分别对应深度数据和彩色数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/device_0/sensor_1/Color_0/image/data</span><br><span class="line">/device_0/sensor_0/Depth_0/image/data</span><br></pre></td></tr></table></figure><p>修改ORB_SLAM2的启动命令如下，主要是订阅的主题不同。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">rosrun ORB_SLAM2 RGBD \</span><br><span class="line">    Vocabulary/ORBvoc.txt \</span><br><span class="line">    Examples/RGB-D/RealSenseD435.yaml \</span><br><span class="line">    /camera/rgb/image_raw:=/device_0/sensor_1/Color_0/image/data \</span><br><span class="line">    /camera/depth_registered/image_raw:=/device_0/sensor_0/Depth_0/image/data</span><br></pre></td></tr></table></figure><p>启动之后，使用rosplay发布bag文件中的topic即可，注意修改命令中的<code>exmaple.bag</code>为你录制的bag文件的路径</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rosbag play exmaple.bag \</span><br><span class="line">    --topics \</span><br><span class="line">    /device_0/sensor_1/Color_0/image/data \</span><br><span class="line">    /device_0/sensor_0/Depth_0/image/data</span><br></pre></td></tr></table></figure><p>如图所示，ORB_SLAM2同样可以读取D435提前录制的视频。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/04/c461138807328f77bf4c5972e1278969.png" alt="image.png"></p><h2 id="4-The-end"><a href="#4-The-end" class="headerlink" title="4. The end"></a>4. The end</h2><p>关于ORB_SLAM2和SLAM的专题博客到这里就基本结束啦，能记录的点都已经写成博客了，后续如果有其他的再继续更新吧。主要是希望能帮到其他SLAM初学者学会咋运行ORB_SLAM2。</p><p>为了毕设临时学了这么多东西，挺累人的说实话。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2023/02/202211031204848.jpg" alt="QQ图片20220507141811"></p>]]></content>
    
    
    <summary type="html">本文介绍了如何在ORB_SLAM2项目中使用RealSense D435相机作为RGB-D输入源，包括ROS下启动D435相机、ORB_SLAM2订阅Topic、ORB_SLAM2读取realsense-viewer录制的rosbag文件等步骤。</summary>
    
    
    
    <category term="编程学习" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="项目开发记录" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="Linux" scheme="https://blog.musnow.top/tags/Linux/"/>
    
    <category term="SLAM" scheme="https://blog.musnow.top/tags/SLAM/"/>
    
    <category term="RealSenseD435" scheme="https://blog.musnow.top/tags/RealSenseD435/"/>
    
  </entry>
  
  <entry>
    <title>【SLAM】使用realsense-viewer对Realsense D435进行自校准</title>
    <link href="https://blog.musnow.top/posts/8572288919/"/>
    <id>https://blog.musnow.top/posts/8572288919/</id>
    <published>2025-04-06T00:51:08.000Z</published>
    <updated>2025-04-06T09:09:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍了如何使用realsense-viewer的自校准工具对RealSense D435相机进行自校准。</p><blockquote><p>阅读本文前，请先参考本站博客<a href="https://blog.musnow.top/posts/9107049817/">【SLAM】ubuntu 18.04 安装 RealSense D435 相机驱动（ARM64&#x2F;AMD64）</a>安装realsense-viewer工具。</p></blockquote><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>官网：<a href="https://www.intelrealsense.com/self-calibration-for-depth-cameras/">www.intelrealsense.com/self-calibration-for-depth-cameras/</a>；</p><p>先前的博客提到过，RealSense D435基于双目视觉方案获取场景中的深度，双目视觉的数学原理中，有一个参数是<strong>基线长度</strong>，即左右相机之间的距离。为了确保D435相机在使用寿命内能够保持良好的校准和性能，D400系列的相机都采用了激光熔融钢笼（laser-fused steel cages）的设计，保证两颗摄像头稳固的保持在它们的位置上，也就是保证<strong>基线长度</strong>不出现变化。</p><p>不过，再好的设计随着时间的推移也是可能退化的，比如相机暴露在极端的温度循环（突然从低温环境进入高温环境）、过度的冲击（撞到东西了）或者高频振动中，就可能会导致相机出现失真。失真分为两种情况：</p><ul><li>外部失真：与安装传感器的加强筋的微小弯曲有关；</li><li>内部失真：传感器镜头位置的微小移动引起；</li></ul><p>不管咋样，相机都可能出现失真的情况，这就需要我们对相机的内外参数进行校准，让相机的固件适应相机的失真，从而恢复原本的精度。</p><h2 id="使用realsense-viewer进行自校准"><a href="#使用realsense-viewer进行自校准" class="headerlink" title="使用realsense-viewer进行自校准"></a>使用realsense-viewer进行自校准</h2><p>解决失真问题，最好的方式还是使用<strong>张正友标定法</strong>来对相机进行标定，重新获取相机的内外参数，常用的张正友标定法工具是ROS的camera_calibration。为了简化这个问题的处理，intel在realsense-viewer中集成了一个板载校准工具，让我们可以对D435相机进行临时的校准。</p><p>将D435相机用USB 3.0数据线链接电脑后，打开realsense-viewer，选择左上角more里面的<code>on-chip calibration</code>板载校准，就可以打开自带的校准工具。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/04/afe602ce28ec381ae3618e4de90f2edd.png" alt="image.png"></p><p>此时界面右侧会弹出来一个窗口，选择calibration。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/04/91bd2e644ae5f53e38bbc51b8a6655de.png"></p><p>随后将相机<strong>直面一个白色墙壁</strong>且保持静止，等待相机自动扫描。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/04/1298e9625ec0444e258c845560b4e98e.png" alt="image.png"></p><p>这个过程中可能会出现红色报错，比如<code>invalid value in rs2_run_on_chip_calibration</code>，不用管他，再次对准墙壁retry重试，总是能成功的。</p><p>如下图所示，右上角显示的health-check的值小于0.25，就可以接受，将其apply new写入相机固件中。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/04/3081ea9bf586e629546460aca518fac5.png" alt="image.png"></p><p>上述步骤可以运行多次，每次只要health-check的值变小了就可以apply到固件中。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/04/5ab253299d507e6102c0b998faddb993.png" alt="image.png"></p><p>至此，便完成了相机自校准的步骤。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>除了自校准工具，intel同时提供了一个<strong>动态校准</strong> (Dynamic Calibrator) 工具，官网：<a href="https://www.intel.cn/content/www/cn/zh/download/645988/intel-realsense-d400-series-dynamic-calibration-tool.html">https://www.intel.cn/content/www/cn/zh/download/645988/intel-realsense-d400-series-dynamic-calibration-tool.html</a></p><p>其借鉴了张正友标定法的思路，也是采用特定格式的标定板对相机进行校准。慕雪暂未尝试过此工具，具体操作步骤可以参考b站视频：<a href="https://www.bilibili.com/video/av825234267?vd_source=b302188e80c9f377914b70d6f93c84dc&spm_id_from=333.788.videopod.sections">[2023Q2更新] Intel英特尔RealSense实感深度摄像头 动态校准(Dynamic Calibrator) 操作步骤讲解 D400系列适用</a>。</p>]]></content>
    
    
    <summary type="html">本文介绍了如何使用realsense-viewer的自校准工具对RealSense D435相机进行自校准</summary>
    
    
    
    <category term="编程学习" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="项目开发记录" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="Linux" scheme="https://blog.musnow.top/tags/Linux/"/>
    
    <category term="SLAM" scheme="https://blog.musnow.top/tags/SLAM/"/>
    
    <category term="RealSenseD435" scheme="https://blog.musnow.top/tags/RealSenseD435/"/>
    
  </entry>
  
  <entry>
    <title>【SLAM】解决ORB_SLAM2运行时出现的&quot;maybe forgot to call initializeOptimization()&quot;警告</title>
    <link href="https://blog.musnow.top/posts/2588231435/"/>
    <id>https://blog.musnow.top/posts/2588231435/</id>
    <published>2025-04-05T06:51:23.000Z</published>
    <updated>2025-04-05T13:33:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文说明了如何解决ORB_SLAM2在ubuntu18.04运行时可能出现的”forgot to call initializeOptimization()”警告，包括代码修改和修复结果验证。</p><blockquote><p>为了让博客的seo更加优化，遵循bing站长工具的建议，把每篇博客的description都适当加长一些。</p></blockquote><h2 id="问题说明"><a href="#问题说明" class="headerlink" title="问题说明"></a>问题说明</h2><p>在Ubuntu 18.04上运行ORB_SLAM2的时候可能遇到如下g2o警告</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virtual int g2o::SparseOptimizer::optimize(int, bool): 0 vertices to optimize, maybe forgot to call initializeOptimization()</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/04/db21d9845f7fe82b622c96110cc989a9.png" alt="image.png"></p><p>在github仓库中找到了相关的issue：<a href="https://github.com/raulmur/ORB_SLAM2/issues/463">github.com&#x2F;raulmur&#x2F;ORB_SLAM2&#x2F;issues&#x2F;463</a>；</p><p>根据<a href="https://github.com/raulmur/ORB_SLAM2/issues/211">github.com&#x2F;raulmur&#x2F;ORB_SLAM2&#x2F;issues&#x2F;211</a>里面的描述，这个报错是g2o提出的，而且是一个harmless报错，也就是它虽然爆出来了但是没关系，也不会影响进程运行。</p><h2 id="修复代码"><a href="#修复代码" class="headerlink" title="修复代码"></a>修复代码</h2><p>虽然这问题不会影响运行吧，但对于有些许强迫症的我来说，更想知道怎么操作才能修复掉这个告警。根据issue 211里面的文字描述，找到了代码修改点：</p><blockquote><p>Did you find where the problem is? I met the same problem in PoseOptimization because after n iterations probably all correspondences is bad. I just add the following check.<br><code>if((nInitialCorrespondences-nBad)&lt;5) break;</code><br>It fixes my problem. Hope it helps.</p><p>I put this in the function Optimizer::PoseOptimization. Try to find the place where it performs 4 optimizations (for loop in there). At the end of each optimization, I add this check to make sure there are still enough vertices in the optimized graph.</p></blockquote><p>修改点是ORB_SLAM2代码<code>src/Optimizer.cc</code>中的441行之后。在函数<code>Optimizer::PoseOptimization</code>的<code>for(size_t it=0; it&lt;4; it++)</code>的末尾添加。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(optimizer.<span class="built_in">edges</span>().<span class="built_in">size</span>()&lt;<span class="number">10</span>)</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"><span class="comment">// 441行之后添加下面的代码</span></span><br><span class="line"><span class="keyword">if</span>((nInitialCorrespondences-nBad)&lt;<span class="number">5</span>)</span><br><span class="line">    <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><p>具体的修改位置可以参考我fork的源码提交记录：<a href="https://github.com/musnows/ORB_SLAM2/commit/4840cdccdee0842896a637e57de47acecb7d75ac">https://github.com/musnows/ORB_SLAM2&#x2F;commit&#x2F;4840cdccdee0842896a637e57de47acecb7d75ac</a>，截图如下：</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/04/cb9bfb985699aeb80b6a486d2b46e988.png" alt="image.png"></p><p>新增代码后完整for循环代码如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/Optimizer.cc</span></span><br><span class="line"><span class="comment">// 函数 Optimizer::PoseOptimization</span></span><br><span class="line"><span class="type">int</span> nBad=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">size_t</span> it=<span class="number">0</span>; it&lt;<span class="number">4</span>; it++)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    vSE3-&gt;<span class="built_in">setEstimate</span>(Converter::<span class="built_in">toSE3Quat</span>(pFrame-&gt;mTcw));</span><br><span class="line">    optimizer.<span class="built_in">initializeOptimization</span>(<span class="number">0</span>);</span><br><span class="line">    optimizer.<span class="built_in">optimize</span>(its[it]);</span><br><span class="line"></span><br><span class="line">    nBad=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">size_t</span> i=<span class="number">0</span>, iend=vpEdgesMono.<span class="built_in">size</span>(); i&lt;iend; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        g2o::EdgeSE3ProjectXYZOnlyPose* e = vpEdgesMono[i];</span><br><span class="line"></span><br><span class="line">        <span class="type">const</span> <span class="type">size_t</span> idx = vnIndexEdgeMono[i];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(pFrame-&gt;mvbOutlier[idx])</span><br><span class="line">        &#123;</span><br><span class="line">            e-&gt;<span class="built_in">computeError</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">const</span> <span class="type">float</span> chi2 = e-&gt;<span class="built_in">chi2</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(chi2&gt;chi2Mono[it])</span><br><span class="line">        &#123;                </span><br><span class="line">            pFrame-&gt;mvbOutlier[idx]=<span class="literal">true</span>;</span><br><span class="line">            e-&gt;<span class="built_in">setLevel</span>(<span class="number">1</span>);</span><br><span class="line">            nBad++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            pFrame-&gt;mvbOutlier[idx]=<span class="literal">false</span>;</span><br><span class="line">            e-&gt;<span class="built_in">setLevel</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(it==<span class="number">2</span>)</span><br><span class="line">            e-&gt;<span class="built_in">setRobustKernel</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">size_t</span> i=<span class="number">0</span>, iend=vpEdgesStereo.<span class="built_in">size</span>(); i&lt;iend; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        g2o::EdgeStereoSE3ProjectXYZOnlyPose* e = vpEdgesStereo[i];</span><br><span class="line"></span><br><span class="line">        <span class="type">const</span> <span class="type">size_t</span> idx = vnIndexEdgeStereo[i];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(pFrame-&gt;mvbOutlier[idx])</span><br><span class="line">        &#123;</span><br><span class="line">            e-&gt;<span class="built_in">computeError</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">const</span> <span class="type">float</span> chi2 = e-&gt;<span class="built_in">chi2</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(chi2&gt;chi2Stereo[it])</span><br><span class="line">        &#123;</span><br><span class="line">            pFrame-&gt;mvbOutlier[idx]=<span class="literal">true</span>;</span><br><span class="line">            e-&gt;<span class="built_in">setLevel</span>(<span class="number">1</span>);</span><br><span class="line">            nBad++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;                </span><br><span class="line">            e-&gt;<span class="built_in">setLevel</span>(<span class="number">0</span>);</span><br><span class="line">            pFrame-&gt;mvbOutlier[idx]=<span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(it==<span class="number">2</span>)</span><br><span class="line">            e-&gt;<span class="built_in">setRobustKernel</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(optimizer.<span class="built_in">edges</span>().<span class="built_in">size</span>()&lt;<span class="number">10</span>)</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="comment">// 添加如下代码</span></span><br><span class="line">    <span class="keyword">if</span>((nInitialCorrespondences-nBad)&lt;<span class="number">5</span>)</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;     </span><br></pre></td></tr></table></figure><h2 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h2><p>修改之后，重新编译ORB_SLAM2，再次运行，告警应该消失了。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/04/7c1f4bdc9b998cb8aad2c61d3b10ef6f.png" alt="image.png"></p><p>至此，问题解决~</p>]]></content>
    
    
    <summary type="html">本文说明了如何解决ORB_SLAM2在ubuntu18.04运行时可能出现的&quot;maybe forgot to call initializeOptimization()&quot;警告，包括代码修改和修复结果验证</summary>
    
    
    
    <category term="编程学习" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="项目开发记录" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="Linux" scheme="https://blog.musnow.top/tags/Linux/"/>
    
    <category term="SLAM" scheme="https://blog.musnow.top/tags/SLAM/"/>
    
  </entry>
  
  <entry>
    <title>【SLAM】ubuntu 18.04 安装 RealSense D435 相机驱动（ARM64/AMD64）</title>
    <link href="https://blog.musnow.top/posts/9107049817/"/>
    <id>https://blog.musnow.top/posts/9107049817/</id>
    <published>2025-04-04T12:04:47.000Z</published>
    <updated>2025-04-06T08:36:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>ubuntu 18.04 安装 realsense d435 驱动和 realsense-viewer。</p><h2 id="RealSense-D435简介"><a href="#RealSense-D435简介" class="headerlink" title="RealSense D435简介"></a>RealSense D435简介</h2><p>RealSense D435是英特尔推出的一款RGB-D相机：<a href="https://www.intelrealsense.com/depth-camera-d435/">官网</a>，后文使用D435简称此相机。</p><p>RGB-D相机和我们平时使用的相机的不同之处在于，RGB-D相机可以在拍摄彩色画面（RGB）的同时，提供拍摄场景的深度数据（Depth），D435就是这样的一款相机。</p><p>D435采用的是RGB-D相机中的<strong>双目视觉方案</strong>来获取深度数据，介绍双目视觉方案之前，需要先引入<strong>视差</strong>的概念。我们左眼和右眼看到同一个物品的位置是不同的，这个位置的不同被称作“视差”。举个例子，你可以把一个物品放在你的正前方，尝试单独闭上左眼或右眼，你面前的这个物品在左眼和右眼看到的画面中会出现位置变化，这便是“视差”的现象。</p><blockquote><p>关于双目视觉方案的原理可以进一步阅读：<a href="https://zhuanlan.zhihu.com/p/361195131">【知乎】视觉深度、标定、立体匹配</a>，本文只做基础介绍。</p></blockquote><p>所谓<strong>双目视觉方案</strong>，就是模拟人的双眼，用两颗焦距相同的镜头（下图中的Left&#x2F;Right Imager，D435使用的是两颗红外镜头），从不同的角度拍摄图像，然后通过特征匹配计算<strong>视差</strong>，进而推导场景的深度。</p><p>双目视觉方案的主要缺陷在于场景中的纹理较弱的情况下，<strong>比如白墙，两颗摄像头看到的都是一个相对光滑的平面</strong>，这种弱纹理场景无法找到足够的匹配点，视差计算精度降低，进一步导致推导出的深度数据精度降低。为此，D435在双目视觉方案的基础上，新增了一个<strong>红外点阵投影仪</strong>（下图中的IR Projector），向场景中投射肉眼不可见的红外点阵，以加强环境中的纹理，辅助双目视觉匹配，提高深度数据的精度。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/04/9ff735152042b328f2125ed811d9a8ec.png" alt="image.png"></p><p>RealSense D435相机需要通过一根USB 3.1 TypeC高速数据线与电脑相连，一定要是USB 3.0及以上的数据线，<strong>不能使用USB 2.0数据线</strong>，传输速率不够。这里特别提醒一下，手机厂家给的数据线一般都不能用（尝试过vivo和华为的TypeC线，都只识别出了USB 2.0），即便链接手机的时候支持USB 3.0，链接D435相机的时候也可能无法支持，建议购买一根绿联的USB 3.0 TypeC数据线。</p><p>准备好相机和USB 3.0数据线后，就可以开始本文的驱动安装操作了。</p><h2 id="在AMD64上安装realsense驱动"><a href="#在AMD64上安装realsense驱动" class="headerlink" title="在AMD64上安装realsense驱动"></a>在AMD64上安装realsense驱动</h2><blockquote><p>操作系统：AMD64，Ubuntu 18.04 LTS，VMware虚拟机安装</p></blockquote><p>x86的机器安装realsense驱动比较简单，直接根据github仓库中的文档进行安装就可以了：<a href="https://github.com/IntelRealSense/librealsense/blob/master/doc/distribution_linux.md">https://github.com/IntelRealSense/librealsense/blob/master/doc/distribution_linux.md</a>；</p><p>这里把安装命令拷贝如下，注意安装过程中不要将D435链接至电脑。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">mkdir</span> -p /etc/apt/keyrings</span><br><span class="line"></span><br><span class="line">curl -sSf https://librealsense.intel.com/Debian/librealsense.pgp | sudo <span class="built_in">tee</span> /etc/apt/keyrings/librealsense.pgp &gt; /dev/null</span><br><span class="line"></span><br><span class="line"><span class="comment"># add new server</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;deb [signed-by=/etc/apt/keyrings/librealsense.pgp] https://librealsense.intel.com/Debian/apt-repo `lsb_release -cs` main&quot;</span> | \</span><br><span class="line">sudo <span class="built_in">tee</span> /etc/apt/sources.list.d/librealsense.list</span><br><span class="line"></span><br><span class="line">sudo apt-get update -y</span><br></pre></td></tr></table></figure><p>命令执行结果如下图所示</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/04/dda63d9b9072de8bd7f3d7e014d62f11.png" alt="image.png"></p><p>随后安装四个软件包，前两个必装，后两个选装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install librealsense2-dkms</span><br><span class="line">sudo apt-get install librealsense2-utils</span><br><span class="line"><span class="comment"># 可选</span></span><br><span class="line">sudo apt-get install librealsense2-dev <span class="comment"># 可以使用-lrealsense2来编译代码</span></span><br><span class="line">sudo apt-get install librealsense2-dbg</span><br></pre></td></tr></table></figure><p>安装好了之后查看版本信息，确保包含realsense字样。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">king@ubuntu:~$ modinfo uvcvideo | grep &quot;version:&quot;</span><br><span class="line">version:        1.1.2.realsense-1.3.18</span><br><span class="line">srcversion:     51A4A0210E91BE50A7BA2BB</span><br><span class="line">king@ubuntu:~$ dkms status</span><br><span class="line">librealsense2-dkms, 1.3.18, 5.4.0-150-generic, x86_64: installed</span><br></pre></td></tr></table></figure><p>现在可以插上D435相机了（注意VMware中选择D435链接至虚拟机），使用<code>realsense-viewer</code>命令启动软件，如下图所示，此时就是已经识别到我们的D435相机了。这里有一个很明显的USB 2.1的标识，代表我们的数据线不支持USB 3.0，这会影响到D435相机的数据传输。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/04/5518ca3d1d9953fd27c7024db94fbf14.png" alt="image.png"></p><p>以绿联的USB 3.0数据线为例，插上之后会显示USB 3.2，此时就是符合需求的。在左侧面板中，可以分别打开深度相机和RGB相机，开启之后会在右侧的主界面中显示相机拍摄的画面。在Stereo Module选项关闭状态的时候，还可以勾选上左右红外相机，让红外相机的原始图像也显示在右侧界面中。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/04/c5c06627856ef2bdf5daebd5eda0048c.png" alt="image.png"></p><p>在我的测试中，执行了realsense-viewer命令还会出现如下警告</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">king@ubuntu:~$ realsense-viewer</span><br><span class="line"> 05/04 18:06:56,380 INFO [139813411274368] (backend-v4l2.cpp:646) Cannot access /sys/class/video4linux</span><br></pre></td></tr></table></figure><p>虽然出现了这个警告，但似乎并不影响realsense-viewer程序的使用，整个操作、录制视频的过程都没有出现崩溃。我执行realsense-viewer命令的时候D435相机并没有连接到电脑上，不确定是否和相机没有链接有关系。</p><h3 id="ROS环境下使用D435"><a href="#ROS环境下使用D435" class="headerlink" title="ROS环境下使用D435"></a>ROS环境下使用D435</h3><p>如果想要在ROS环境下使用D435相机，还需要安装ROS的realsense驱动（请先保证本地已经安装ROS环境）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install -y ros-melodic-realsense2-camera</span><br><span class="line">sudo apt-get install -y ros-melodic-realsense2-description</span><br><span class="line">sudo apt-get install -y ros-melodic-rgbd-launch</span><br></pre></td></tr></table></figure><p>至此，AMD64下的realsense驱动就已经安装好了，可以正常使用相机了。你可以尝试用如下命令在ROS环境下启动D435相机，开始广播深度和彩色图像的Topic。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">roslaunch realsense2_camera rs_camera.launch</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/04/c3c8958b59c5adceca3bbfa60e35cbec.png" alt="image.png"></p><h2 id="在ARM64上安装realsense驱动"><a href="#在ARM64上安装realsense驱动" class="headerlink" title="在ARM64上安装realsense驱动"></a>在ARM64上安装realsense驱动</h2><blockquote><p>操作系统：ARM64（MAC M3），Ubuntu 22.04 LTS虚拟机，Docker启动的ubuntu:18.04容器</p></blockquote><p>在ARM64的设备上安装realsense驱动就有点难办了，不能直接一股脑执行上面的安装命令了，需要我们从源码编译realsense，这里给出几个参考博客：</p><ul><li><a href="https://blog.csdn.net/qq_45779334/article/details/123595872" title="Ubuntu18.04——基于X86和Arm安装并配置Realsense-ros环境_librealsense-CSDN博客">Ubuntu18.04——基于X86和Arm安装并配置Realsense-ros环境_librealsense-CSDN博客</a></li><li><a href="https://blog.csdn.net/qq_45779334/article/details/124304087" title="Ubuntu——librealsense编译报错：The RandR headers were not found等类似报错解决方案汇总-CSDN博客">Ubuntu——librealsense编译报错：The RandR headers were not found等类似报错解决方案汇总-CSDN博客</a></li><li><a href="https://github.com/IntelRealSense/librealsense/blob/master/doc/installation_jetson.md">github.com&#x2F;IntelRealSense&#x2F;librealsense&#x2F;blob&#x2F;master&#x2F;doc&#x2F;installat…</a></li></ul><p>首先安装如下依赖项</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install -y cmake git </span><br><span class="line">sudo apt-get install -y libusb-1.0-0-dev pkg-config</span><br><span class="line">sudo apt-get install -y libglfw3-dev libgl1-mesa-dev libglu1-mesa-dev</span><br><span class="line">sudo apt-get install -y openssl libssl-dev</span><br></pre></td></tr></table></figure><p>克隆源代码，进入目录中，cmake构建项目</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 克隆代码</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/IntelRealSense/librealsense.git</span><br><span class="line"><span class="built_in">cd</span> ~/librealsense</span><br><span class="line"><span class="built_in">mkdir</span> build &amp;&amp; <span class="built_in">cd</span> build</span><br><span class="line"><span class="comment"># 使用RSUSB版本的后端</span></span><br><span class="line">cmake .. \</span><br><span class="line">    -DBUILD_EXAMPLES=<span class="literal">true</span> \</span><br><span class="line">    -DCMAKE_BUILD_TYPE=release \</span><br><span class="line">    -DFORCE_RSUSB_BACKEND=ON</span><br><span class="line">make -j4</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure><p>cmake构建成功的截图如下，构建过程中涉及从github拉代码，可能会出现各类网络问题，自行解决啦。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/04/12674f5bc9229f9d7b0f2541daf9fef7.png" alt="image.png"></p><p>make编译完成的输出如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[ 98%] Building CXX object tools/depth-quality/CMakeFiles/rs-depth-quality.dir/depth-quality-model.cpp.o</span><br><span class="line">[ 99%] Linking CXX executable ../../Release/realsense-viewer</span><br><span class="line">[ 99%] Built target realsense-viewer</span><br><span class="line">[ 99%] Building CXX object tools/depth-quality/CMakeFiles/rs-depth-quality.dir/__/__/third-party/imgui/imgui.cpp.o</span><br><span class="line">[ 99%] Building CXX object tools/depth-quality/CMakeFiles/rs-depth-quality.dir/__/__/third-party/imgui/imgui_draw.cpp.o</span><br><span class="line">[ 99%] Building CXX object tools/depth-quality/CMakeFiles/rs-depth-quality.dir/__/__/third-party/imgui/imgui_impl_glfw.cpp.o</span><br><span class="line">[ 99%] Building C object tools/depth-quality/CMakeFiles/rs-depth-quality.dir/__/__/third-party/glad/glad.c.o</span><br><span class="line">[100%] Building C object tools/depth-quality/CMakeFiles/rs-depth-quality.dir/__/__/third-party/tinyfiledialogs/tinyfiledialogs.c.o</span><br><span class="line">[100%] Linking CXX executable ../../Release/rs-depth-quality</span><br><span class="line">[100%] Built target rs-depth-quality</span><br><span class="line">[root:/work/pkg/librealsense-master/build]#</span><br></pre></td></tr></table></figure><p>make install的部分输出如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">-- Installing: /usr/local/bin/rs-fw-update</span><br><span class="line">-- Set runtime path of &quot;/usr/local/bin/rs-fw-update&quot; to &quot;&quot;</span><br><span class="line">-- Installing: /usr/local/bin/rs-embed</span><br><span class="line">-- Installing: /usr/local/bin/rs-data-collect</span><br><span class="line">-- Set runtime path of &quot;/usr/local/bin/rs-data-collect&quot; to &quot;&quot;</span><br><span class="line">-- Installing: /usr/local/bin/realsense-viewer</span><br><span class="line">-- Set runtime path of &quot;/usr/local/bin/realsense-viewer&quot; to &quot;&quot;</span><br><span class="line">-- Installing: /root/Documents/librealsense2/presets</span><br><span class="line">-- Installing: /root/Documents/librealsense2/presets/sample.preset</span><br><span class="line">-- Installing: /usr/local/bin/rs-depth-quality</span><br><span class="line">-- Set runtime path of &quot;/usr/local/bin/rs-depth-quality&quot; to &quot;&quot;</span><br><span class="line">-- Installing: /usr/local/bin/rs-rosbag-inspector</span><br><span class="line">-- Set runtime path of &quot;/usr/local/bin/rs-rosbag-inspector&quot; to &quot;&quot;</span><br><span class="line">-- Installing: /usr/local/bin/rs-benchmark</span><br><span class="line">-- Set runtime path of &quot;/usr/local/bin/rs-benchmark&quot; to &quot;&quot;</span><br><span class="line">-- Installing: /usr/local/lib/libfw.a</span><br><span class="line">[root:/work/pkg/librealsense-master/build]#</span><br></pre></td></tr></table></figure><p>此时环境中就已经有realsense-viewer了，可以使用该命令启动程序了</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/04/361dee9ef034e5b20477450d54bd7df0.png" alt="image.png"></p><p>将D435通过数据线连接MAC，可以在MAC的设备详情中找到USB一栏，确定是链接在USB 3.1总线而不是USB 2.0总线上。设备详情页面通过按下option+点击左上角苹果图标，点击<strong>系统信息</strong>可以打开。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/04/fb1a566d217183488c3bbc5263e80f17.png" alt="image.png"></p><p>在parallels顶栏的设备选项中，在USB与蓝牙设置中找到D435相机，勾选它让它直连虚拟机。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/04/7eb4dd27f928597139e4374513372589.png" alt="image.png"></p><p>注意，docker容器必须用特权模式创建，才能和宿主机共享USB设备，可以在容器内终端执行命令确认相机是否已经连接。插入d435相机后需要重启容器，才能看到USB设备。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root:/]# ls /dev/video* -l</span><br><span class="line">crw-rw---- 1 root video 81, 0 Mar  2 13:16 /dev/video0</span><br><span class="line">crw-rw---- 1 root video 81, 1 Mar  2 13:16 /dev/video1</span><br><span class="line">crw-rw---- 1 root video 81, 2 Mar  2 13:16 /dev/video2</span><br><span class="line">crw-rw---- 1 root video 81, 3 Mar  2 13:16 /dev/video3</span><br><span class="line">crw-rw---- 1 root video 81, 4 Mar  2 13:16 /dev/video4</span><br><span class="line">crw-rw---- 1 root video 81, 5 Mar  2 13:16 /dev/video5</span><br><span class="line">crw-rw---- 1 root video 81, 6 Mar  2 13:16 /dev/video6</span><br><span class="line">crw-rw---- 1 root video 81, 7 Mar  2 13:16 /dev/video7</span><br><span class="line">crw-rw---- 1 root video 81, 8 Mar  2 13:16 /dev/video8</span><br><span class="line">crw-rw---- 1 root video 81, 9 Mar  2 13:16 /dev/video9</span><br><span class="line">[root:/]#</span><br></pre></td></tr></table></figure><p>此时再执行realsense-viewer命令，已经能正常使用相机了</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/04/891768ed886d032b2465526554ad5afd.png" alt="image.png"></p><p>因为在docker容器内是以root身份执行的realsense-viewer，右上角会弹出一个提示</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/04/85bf9f17b266cda941532e646efeffc5.png" alt="image.png"></p><p>可以根据里面的命令修复一下，就不会弹出这个提示了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> ~/.99-realsense-libusb.rules /etc/udev/rules.d/99-realsense-libusb.rules &amp;&amp; udevadm control --reload-rules &amp;&amp; udevadm trigger</span><br></pre></td></tr></table></figure><h3 id="ROS环境下使用D435-1"><a href="#ROS环境下使用D435-1" class="headerlink" title="ROS环境下使用D435"></a>ROS环境下使用D435</h3><p>如果想在ROS环境下使用realsense-viewer，同样是安装依赖包，安装了之后就能和x86的机器一样正常使用相机了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install -y \</span><br><span class="line">    ros-melodic-realsense2-camera \</span><br><span class="line">    ros-melodic-realsense2-description \</span><br><span class="line">    ros-melodic-rgbd-launch</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/04/4f00ed19bde18cb665c0d9dad0597703.png" alt="image.png"></p><p>不过，在我的测试中，在ARM64上使用D435相机执行ORB-SLAM2的时候会出现严重掉帧（在x86机器上不会出现），不确定是否和我在虚拟机里面套娃docker有关系。建议还是优先使用x86设备来操作D435相机。</p><h2 id="The-end"><a href="#The-end" class="headerlink" title="The end"></a>The end</h2><p>希望本文能帮到你，主要是提供了arm64设备上安装realsense驱动的方式，很多博客针对这部分的记录都不够详细。</p>]]></content>
    
    
    <summary type="html">本文介绍了在 ubuntu 18.04 中安装 realsense d435 驱动和 realsense-viewer，本文内容同时适用于ARM64/AMD64平台</summary>
    
    
    
    <category term="编程学习" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="项目开发记录" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="Linux" scheme="https://blog.musnow.top/tags/Linux/"/>
    
    <category term="SLAM" scheme="https://blog.musnow.top/tags/SLAM/"/>
    
    <category term="RealSenseD435" scheme="https://blog.musnow.top/tags/RealSenseD435/"/>
    
  </entry>
  
  <entry>
    <title>【SLAM】将realsense-viewer录制的rosbag视频导出成图片序列（RealSense D435）</title>
    <link href="https://blog.musnow.top/posts/1391481152/"/>
    <id>https://blog.musnow.top/posts/1391481152/</id>
    <published>2025-04-04T07:08:46.000Z</published>
    <updated>2025-04-06T08:30:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍了如何将realsense-viewer录制的rosbag格式的视频导出成图片序列，方便合并成mp4视频或插入到论文中。</p><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>Intel提供的realsense-viewer软件录制的视频都是rosbag格式的，为了编写论文，需要从录制的视频中截取一两帧作为论文插图，所以需要使用工具把rosbag中的视频导出为图片。</p><p>最简单的方式肯定是直接rosplay播放bag里面的视频流然后使用image_view读取视频流然后截图，但是这个方式不太好，因为手动截图非常容易出现分辨率差异（框选的区域不一样），而且rosplay播放视频的时候不能暂停，也不好精确的截到自己想要的那张图片。</p><p>更好的方式是使用ros自带的工具把rosbag里面的视频流直接导出成图片序列，避免自己手动截图。在最终导出的图片序列里面选一两个插入到论文里面就ok了。</p><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><p>首先，realsense-viewer录制的视频默认存放在用户的<code>~/Documents</code>文件夹里面，命名格式一般是今天的日期加上一串数字，比如<code>20250331_172324.bag</code>。首先要做的是确定我们需要的视频数据topic名称，使用如下命令查看</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rostopic list -b example.bag</span><br></pre></td></tr></table></figure><p>以我使用的RealSense D435为例，图像topic是下面这俩个，分别对应深度数据和RGB数据。我要的是RGB数据。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/device_0/sensor_1/Color_0/image/data</span><br><span class="line">/device_0/sensor_0/Depth_0/image/data</span><br></pre></td></tr></table></figure><p>先使用另外一个终端A，开启roscore，然后在终端B里面执行如下命令，工具<strong>会在这个命令执行的目录中输出图片序列</strong>。这个命令中使用了extract_images工具，并通过<code>_sec_per_frame</code>指定每0.01秒截取一张图片，通过<code>image:=</code>订阅的topic正是我需要的RGB图像topic。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rosrun image_view extract_images \</span><br><span class="line">    _sec_per_frame:=0.01 \</span><br><span class="line">    image:=/device_0/sensor_1/Color_0/image/data</span><br></pre></td></tr></table></figure><p>再开启一个终端C，执行rosbag play命令来播放bag文件里面的视频，其中<code>--topics</code>选项用于列出我们想要广播的topic是谁。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rosbag play exmaple.bag \</span><br><span class="line">    --topics /device_0/sensor_1/Color_0/image/data</span><br></pre></td></tr></table></figure><p>执行之后，extract_images工具就会自动从这个订阅的topic中截取视频流，输出到执行这个命令的PWD里面了，如下所示。图片文件的默认命名格式是<code>frame%04.jpg</code>，工具会自动命名序号。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">king@ubuntu:~/Documents$ ls images/</span><br><span class="line">frame0000.jpg  frame0164.jpg  frame0328.jpg  frame0492.jpg  frame0656.jpg</span><br><span class="line">frame0001.jpg  frame0165.jpg  frame0329.jpg  frame0493.jpg  frame0657.jpg</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>图片输出结果如下图所示：</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/04/89508777ffaf43eabd0273d73f406fd4.png" alt="image.png"></p><p>注：如果你想把这些图片重新组成一个mp4格式的视频，可以用ffmpeg工具实现。</p><h2 id="The-end"><a href="#The-end" class="headerlink" title="The end"></a>The end</h2><p>至此，问题解决。</p>]]></content>
    
    
    <summary type="html">本文介绍了如何将realsense-viewer录制的rosbag格式的视频导出成图片序列，方便合并成mp4视频或插入到论文中（Realsense D435）</summary>
    
    
    
    <category term="编程学习" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="项目开发记录" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="Linux" scheme="https://blog.musnow.top/tags/Linux/"/>
    
    <category term="SLAM" scheme="https://blog.musnow.top/tags/SLAM/"/>
    
    <category term="RealSenseD435" scheme="https://blog.musnow.top/tags/RealSenseD435/"/>
    
  </entry>
  
  <entry>
    <title>【LaTex】使用natbib和gbt7714包时如何不显示参考文献DOI号</title>
    <link href="https://blog.musnow.top/posts/1728805040/"/>
    <id>https://blog.musnow.top/posts/1728805040/</id>
    <published>2025-03-30T00:47:07.000Z</published>
    <updated>2025-04-06T01:21:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>LaTex使用natbib+gbt7714包时如何不显示参考文献DOI号？</p><h2 id="1-说明"><a href="#1-说明" class="headerlink" title="1. 说明"></a>1. 说明</h2><p>最近在弄毕业设计，个人不太喜欢用word写这种包含大量图片的东西，每次用word排版图片的时候都要抓狂了，经常乱跑。好在我对markdown比较了解，也听说过latex，于是搜索我们学校的latex毕设论文模板，还真找到了学长开源的github模板，便拿来使用。</p><p>现在学校的毕设论文要求有一定更新，参考文献中不需要显示DOI号了，所以需要想办法将其隐藏。</p><h2 id="2-问题查看"><a href="#2-问题查看" class="headerlink" title="2. 问题查看"></a>2. 问题查看</h2><h3 id="2-1-原始模板"><a href="#2-1-原始模板" class="headerlink" title="2.1. 原始模板"></a>2.1. 原始模板</h3><p>原始模板中采用了如下语句定义了参考文献部分的格式，使用的是natbib和gbt7714的格式。</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">% 使用gbt7714</span></span><br><span class="line"><span class="keyword">\usepackage</span>&#123;natbib&#125;</span><br><span class="line"><span class="keyword">\usepackage</span>[sort<span class="built_in">&amp;</span>compress]&#123;gbt7714&#125;</span><br><span class="line"><span class="comment">% 加载参考文献</span></span><br><span class="line"><span class="keyword">\newcommand</span>&#123;<span class="keyword">\thesisreference</span>&#125;&#123;</span><br><span class="line">    <span class="keyword">\titleformat</span>&#123;<span class="keyword">\chapter</span>&#125;[block]</span><br><span class="line">    &#123;<span class="keyword">\fontsize</span>&#123;16pt&#125;&#123;16pt&#125;<span class="keyword">\selectfont</span><span class="keyword">\heiti</span><span class="keyword">\thispagestyle</span>&#123;fancy&#125;&#125;</span><br><span class="line">    &#123;<span class="keyword">\thechapter</span>&#125;&#123;30pt&#125;&#123;&#125;</span><br><span class="line">    <span class="keyword">\titlespacing</span>&#123;<span class="keyword">\chapter</span>&#125;&#123;0pt&#125;&#123;0pt&#125;&#123;10pt&#125; <span class="comment">% 最后一个用于设置‘参考文献’和文献列表之间的空隙</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">\fontsize</span>&#123;10.5pt&#125;&#123;10.5pt&#125;<span class="keyword">\selectfont</span>&#123;</span><br><span class="line">        <span class="keyword">\bibliographystyle</span>&#123;gbt7714-numerical&#125;</span><br><span class="line">        <span class="keyword">\bibliography</span>&#123;reference&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">\titleformat</span>&#123;<span class="keyword">\chapter</span>&#125;[block]</span><br><span class="line">    &#123;<span class="keyword">\centering</span><span class="keyword">\fontsize</span>&#123;15pt&#125;&#123;15pt&#125;<span class="keyword">\selectfont</span><span class="keyword">\heiti</span><span class="keyword">\thispagestyle</span>&#123;fancy&#125;&#125;</span><br><span class="line">    &#123;<span class="keyword">\thechapter</span>&#125;&#123;30pt&#125;&#123;&#125;</span><br><span class="line">    <span class="keyword">\titlespacing</span>&#123;<span class="keyword">\chapter</span>&#125;&#123;0pt&#125;&#123;0pt&#125;&#123;15pt&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-咨询AI"><a href="#2-2-咨询AI" class="headerlink" title="2.2. 咨询AI"></a>2.2. 咨询AI</h3><p>由于我在网上直接搜索没有找到解决方案，于是问起来AI，他们给出了下面两种方案</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">\usepackage</span>[nodoi, sort<span class="built_in">&amp;</span>compress]&#123;gbt7714&#125;</span><br><span class="line"><span class="comment">% 或者</span></span><br><span class="line"><span class="keyword">\usepackage</span>[doi=false, sort<span class="built_in">&amp;</span>compress]&#123;gbt7714&#125;</span><br></pre></td></tr></table></figure><p>经过测试，这两种方案都不行，虽然编译没有报错，但是DOI号还是显示出来了。</p><p>AI还给出了一个方案就是从natbib切换成biblatex，但是这个模板并不是我编写的，我不太清楚biblatex要怎么定义成现在这个样式，所以还是不做这种大规模修改了。</p><h2 id="3-问题解决"><a href="#3-问题解决" class="headerlink" title="3. 问题解决"></a>3. 问题解决</h2><h3 id="3-1-方法一：取巧办法"><a href="#3-1-方法一：取巧办法" class="headerlink" title="3.1. 方法一：取巧办法"></a>3.1. 方法一：取巧办法</h3><p>首先说个<strong>取巧办法</strong>，那就是在参考文献列表的bib文件中把所有的<code>doi = </code>都给替换成<code>note =</code>（或者直接注释掉<code>doi =</code>），让它们直接不被当作DOI号，也就不会渲染出来，问题解决。</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">% 原始</span></span><br><span class="line">@article&#123;example,</span><br><span class="line">  author = &#123;Author, A.&#125;,</span><br><span class="line">  title = &#123;Title&#125;,</span><br><span class="line">  journal = &#123;Journal&#125;,</span><br><span class="line">  year = &#123;2023&#125;,</span><br><span class="line">  doi = &#123;10.1234/example&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">% 修改后</span></span><br><span class="line">@article&#123;example,</span><br><span class="line">  author = &#123;Author, A.&#125;,</span><br><span class="line">  title = &#123;Title&#125;,</span><br><span class="line">  journal = &#123;Journal&#125;,</span><br><span class="line">  year = &#123;2023&#125;,</span><br><span class="line">  note = &#123;10.1234/example&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-方法二：修改bst文件"><a href="#3-2-方法二：修改bst文件" class="headerlink" title="3.2. 方法二：修改bst文件"></a>3.2. 方法二：修改bst文件</h3><p>最开始我没有理解原始模板中<code>\bibliographystyle&#123;gbt7714-numerical&#125;</code>的含义，在搜索相关资料的时候无意间看到了一篇<a href="https://blog.csdn.net/weixin_41380712/article/details/141969500">博客</a>里面提到了<code>\bibliographystyle</code>会引用一个bst文件，果然，在模板目录中找到了<code>gbt7714-numerical.bst</code>文件，并在里面找到了输出DOI号的部分。</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">FUNCTION &#123;output.doi&#125;</span><br><span class="line">&#123; doi empty<span class="built_in">$</span> not show.doi and</span><br><span class="line">  show.english.translation entry.lang lang.zh = and not and</span><br><span class="line">    &#123; new.block</span><br><span class="line">      format.doi output</span><br><span class="line">    &#125;</span><br><span class="line">    &#x27;skip<span class="built_in">$</span></span><br><span class="line">  if<span class="built_in">$</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里面有一个判断条件是<code>show.doi</code>，它是一个整形变量，当这个变量为1，而且满足<code>doi empty$ not</code>即<strong>DOI字段不为空</strong>的时候才会去显示DOI信息。</p><p>要做的就是在bst文件的开头针对<code>show.doi</code>变量的赋值部分，将原本赋值的1改成0就可以了！</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">FUNCTION &#123;load.config&#125;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">% 原本赋值成了1（显示doi）</span></span><br><span class="line">    <span class="params">#1</span> &#x27;show.doi :=</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改后如下，将<code>#1</code>改成<code>#0</code>，即不显示DOI号。</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">FUNCTION &#123;load.config&#125;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="params">#0</span> &#x27;show.doi :=</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经过测试，确实不显示DOI号了！</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/03/a6ac3cc9c15aaa0c81e8c2c9683a34a5.png" alt="image.png"></p><p>这种方法肯定比把bib文件里面的<code>doi =</code>全都改成<code>note =</code>更好！</p>]]></content>
    
    
    <summary type="html">本文介绍了LaTex使用natbib和gbt7714包时如何不显示参考文献DOI号的操作步骤</summary>
    
    
    
    <category term="差生文具多" scheme="https://blog.musnow.top/categories/%E5%B7%AE%E7%94%9F%E6%96%87%E5%85%B7%E5%A4%9A/"/>
    
    <category term="笔记软件" scheme="https://blog.musnow.top/categories/%E5%B7%AE%E7%94%9F%E6%96%87%E5%85%B7%E5%A4%9A/%E7%AC%94%E8%AE%B0%E8%BD%AF%E4%BB%B6/"/>
    
    
    <category term="LaTex" scheme="https://blog.musnow.top/tags/LaTex/"/>
    
  </entry>
  
  <entry>
    <title>【SLAM】ubuntu 18.04 下 OpenCV 3.2.0 的 opencv_example 运行闪退</title>
    <link href="https://blog.musnow.top/posts/7683466939/"/>
    <id>https://blog.musnow.top/posts/7683466939/</id>
    <published>2025-03-01T04:59:29.000Z</published>
    <updated>2025-03-01T05:54:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>ubuntu 18.04 下 OpenCV 3.2.0 的 opencv_example 运行闪退问题探究。</p><h2 id="1-问题说明"><a href="#1-问题说明" class="headerlink" title="1. 问题说明"></a>1. 问题说明</h2><p>在之前的<a href="https://blog.musnow.top/posts/5090585017/">ORB-SLAM3项目于ROS运行</a>的博客中，提到过安装ROS时会自己安装一个OpenCV 3.2.0版本，所以最好不要安装其他版本的OpenCV，避免和OpenCV 3.2.0产生冲突，导致ROS链接失败。</p><p>今天尝试在ubuntu18.04的虚拟机里面安装OpenCV 3.2.0时，先是遇到了<a href="https://blog.musnow.top/posts/8846864150/">CMake构建问题</a>，又遇到了OpenCV 3.2.0提供的demo代码无法正常运行的问题。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 编译demo文件并运行</span></span><br><span class="line"><span class="built_in">cd</span> opencv-3.2.0/samples/cpp/example_cmake</span><br><span class="line"><span class="built_in">mkdir</span> build &amp;&amp; <span class="built_in">cd</span> build </span><br><span class="line">cmake .. &amp;&amp; make</span><br><span class="line">./opencv_example</span><br></pre></td></tr></table></figure><p>出现的状况就是，当我执行<code>./opencv_example</code>的时候，<strong>程序没有任何反应就直接终止了</strong>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">king@ubuntu:~/slam/pkg/opencv-3.2.0/samples/cpp/example_cmake/build$ ./opencv_example </span><br><span class="line">Built with OpenCV 3.2.0</span><br><span class="line">Capture is opened</span><br><span class="line">king@ubuntu:~/slam/pkg/opencv-3.2.0/samples/cpp/example_cmake/build$</span><br></pre></td></tr></table></figure><p>理论上执行<code>./opencv_example</code>的时候，应该弹出一个摄像头画面的窗口，且该窗口应一直存在。如下图所示</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/01/cf9ec531bb3ead1d358fb888106eeab2.png" alt="image.png"></p><p>所以，窗口没有弹出程序就终止了，肯定是有问题的。我们就要看看问题到底在哪里。</p><h2 id="2-问题探究"><a href="#2-问题探究" class="headerlink" title="2. 问题探究"></a>2. 问题探究</h2><h3 id="2-1-是否识别了摄像头设备"><a href="#2-1-是否识别了摄像头设备" class="headerlink" title="2.1. 是否识别了摄像头设备"></a>2.1. 是否识别了摄像头设备</h3><p>首先是确认我们的usb摄像头到底有没有连到主机上。因为我使用的是虚拟机，所以需要在VMware里面设置让摄像头连接到虚拟机上而不是连到宿主机上。</p><p>在VMware的顶栏上，选择<code>虚拟机-可移动设备</code>，在可移动设备的列表里面应该能看到你的USB摄像头。如果看不到，<strong>说明windows上都没认出来这个摄像头</strong>，请检查USB链接或确认摄像头自身是否损坏。</p><p>如下图所示，这里出现了我的USB Camera，且前面有一个勾勾代表摄像头已经练到了虚拟机上。如果没有连接到虚拟机而是宿主机上，这里的弹出菜单会显示“<strong>连接（断开与 主机 的链接）</strong>”，点击它即可让USB设备连接到虚拟机。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/03/b132bc0c1281bd934b2c3a1f24993b1e.png" alt="image.png"></p><p>另外，如果你在虚拟机开启的情况下将摄像头插入电脑，VMware会主动弹窗咨询你新的usb设备是要插入到虚拟机还是宿主机。选择虚拟机即可。</p><p>现在VMware里面已经配置好了USB摄像头连到虚拟机，我们就可以进虚拟机内部检查一下是否有摄像头设备了。首先执行<code>ls /dev/video* -l</code>命令，可以看到有两个video设备。说明至少系统是认到了视频输入设备的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">king@ubuntu:~$ ls /dev/video* -l</span><br><span class="line">crw-rw----+ 1 root video 81, 0 Feb 28 18:08 /dev/video0</span><br><span class="line">crw-rw----+ 1 root video 81, 1 Feb 28 18:08 /dev/video1</span><br></pre></td></tr></table></figure><p>随后安装一下<code>v4l-utils</code>软件包，它提供了一些摄像头相关的工具，可供我们检测当前主机上的摄像头设备。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install -y v4l-utils</span><br></pre></td></tr></table></figure><p>我们可以通过<code>v4l2-ctl -d /dev/video0 --all</code>命令查看某个设备的详细信息，这里可以看到<code>/dev/video0</code>就是我插入的USB摄像头，分辨率是<code>640*480</code>。说明linux系统已经成功识别了摄像头。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">king@ubuntu:~$ v4l2-ctl -d  /dev/video0 --all</span><br><span class="line">Driver Info (not using libv4l2):</span><br><span class="line">        Driver name   : uvcvideo</span><br><span class="line">        Card type     : USB Camera: USB Camera</span><br><span class="line">        Bus info      : usb-0000:02:03.0-1</span><br><span class="line">        Driver version: 5.4.233</span><br><span class="line">        Capabilities  : 0x84A00001</span><br><span class="line">                Video Capture</span><br><span class="line">                Metadata Capture</span><br><span class="line">                Streaming</span><br><span class="line">                Extended Pix Format</span><br><span class="line">                Device Capabilities</span><br><span class="line">        Device Caps   : 0x04200001</span><br><span class="line">                Video Capture</span><br><span class="line">                Streaming</span><br><span class="line">                Extended Pix Format</span><br><span class="line">Priority: 2</span><br><span class="line">Video input : 0 (Camera 1: ok)</span><br><span class="line">Format Video Capture:</span><br><span class="line">        Width/Height      : 640/480</span><br><span class="line">        Pixel Format      : &#x27;MJPG&#x27;</span><br><span class="line">        Field             : None</span><br><span class="line">        Bytes per Line    : 0</span><br><span class="line">        Size Image        : 614400</span><br><span class="line">        Colorspace        : sRGB</span><br><span class="line">        Transfer Function : Default (maps to sRGB)</span><br><span class="line">        YCbCr/HSV Encoding: Default (maps to ITU-R 601)</span><br><span class="line">        Quantization      : Default (maps to Full Range)</span><br><span class="line">        Flags             : </span><br><span class="line">Crop Capability Video Capture:</span><br><span class="line">        Bounds      : Left 0, Top 0, Width 640, Height 480</span><br><span class="line">        Default     : Left 0, Top 0, Width 640, Height 480</span><br><span class="line">        Pixel Aspect: 1/1</span><br><span class="line">Selection: crop_default, Left 0, Top 0, Width 640, Height 480</span><br><span class="line">Selection: crop_bounds, Left 0, Top 0, Width 640, Height 480</span><br><span class="line">Streaming Parameters Video Capture:</span><br><span class="line">        Capabilities     : timeperframe</span><br><span class="line">        Frames per second: 30.000 (30/1)</span><br><span class="line">        Read buffers     : 0</span><br><span class="line">                     brightness 0x00980900 (int)    : min=-64 max=64 step=1 default=0 value=0</span><br><span class="line">                       contrast 0x00980901 (int)    : min=0 max=95 step=1 default=34 value=34</span><br><span class="line">                     saturation 0x00980902 (int)    : min=0 max=100 step=1 default=56 value=56</span><br><span class="line">                            hue 0x00980903 (int)    : min=-2000 max=2000 step=100 default=0 value=0</span><br><span class="line"> white_balance_temperature_auto 0x0098090c (bool)   : default=1 value=1</span><br><span class="line">                          gamma 0x00980910 (int)    : min=100 max=300 step=1 default=120 value=120</span><br><span class="line">           power_line_frequency 0x00980918 (menu)   : min=0 max=2 default=1 value=1</span><br><span class="line">      white_balance_temperature 0x0098091a (int)    : min=2800 max=6500 step=1 default=4600 value=4600 flags=inactive</span><br><span class="line">                      sharpness 0x0098091b (int)    : min=0 max=7 step=1 default=0 value=0</span><br><span class="line">         backlight_compensation 0x0098091c (int)    : min=0 max=3 step=1 default=2 value=2</span><br><span class="line">                  exposure_auto 0x009a0901 (menu)   : min=0 max=3 default=3 value=3</span><br><span class="line">              exposure_absolute 0x009a0902 (int)    : min=78 max=10000 step=1 default=312 value=312 flags=inactive</span><br><span class="line">                 focus_absolute 0x009a090a (int)    : min=0 max=15 step=1 default=0 value=0 flags=inactive</span><br><span class="line">                     focus_auto 0x009a090c (bool)   : default=1 value=1</span><br></pre></td></tr></table></figure><h3 id="2-2-摄像头驱动问题？"><a href="#2-2-摄像头驱动问题？" class="headerlink" title="2.2. 摄像头驱动问题？"></a>2.2. 摄像头驱动问题？</h3><p>既然摄像头设备存在，则需要确认摄像头本身是否能被linux正常调用。</p><p>测试的方法很简单，下载ubuntu的cheese茄子软件（其实就是windows的相机软件），看看是否能正常打开摄像头。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install -y cheese</span><br></pre></td></tr></table></figure><p>安装完毕后，使用cheese命令即可打开摄像头。结果发现，弹窗是黑的。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/03/757c04ae77f8590101503248edb539bb.png" alt="image.png"></p><p>这里我拔除了摄像头，可以看到cheese会显示“no device found”（找不到设备），这就说明，<strong>上图中黑屏的情况并不是正常情况</strong>。如果摄像头不存在，会直接提示我们找不到设备，而不会黑屏。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/03/bb2a463bad129932f7cac49ca44d411d.png" alt="image.png"></p><p>结合之前的信息，可知我们现在linux系统已经识别到了USB摄像头，<strong>但没有办法调用它来拍照</strong>。</p><p>用<a href="https://blog.csdn.net/flyingcys/article/details/57406701">ubuntu下摄像头启动与黑屏问题解决</a>博客里面的方式解决了，在VMware的虚拟机设置里面，把usb兼容性改成3.1就可以了（原本是usb2.0）。修改了之后vm会自动重置虚拟机。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/03/15a4a260b11cca8f6281fb2a16572fb4.png" alt="image.png"></p><p>虚拟机重置了之后，重新连接一下usb摄像头到虚拟机就ok了。此时cheese已经能识别到我们的摄像头并拍摄画面了。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/03/0ed00a1fdc06faa7e174e181a7f0aa27.png" alt="image.png"></p><p>到这里，说明摄像头能被linux成功识别并调用，摄像头本身并没有问题。</p><h3 id="2-3-opencv-example代码探究"><a href="#2-3-opencv-example代码探究" class="headerlink" title="2.3. opencv_example代码探究"></a>2.3. opencv_example代码探究</h3><p>既然摄像头本身没有问题，那问题就是在OpenCV3.2.0或者说是在示例代码上了。示例代码<code>samples/cpp/example_cmake/exmaple.cpp</code>的主体并不长，这里直接给出。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// opencv-3.2.0/samples/cpp/example_cmake/exmaple.cpp</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Built with OpenCV &quot;</span> &lt;&lt; CV_VERSION &lt;&lt; endl;</span><br><span class="line">    Mat image;</span><br><span class="line">    VideoCapture capture;</span><br><span class="line">    capture.<span class="built_in">open</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>(capture.<span class="built_in">isOpened</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Capture is opened&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">for</span>(;;)</span><br><span class="line">        &#123;</span><br><span class="line">            capture &gt;&gt; image;</span><br><span class="line">            <span class="keyword">if</span>(image.<span class="built_in">empty</span>())</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="built_in">drawText</span>(image);</span><br><span class="line">            <span class="built_in">imshow</span>(<span class="string">&quot;Sample&quot;</span>, image);</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">waitKey</span>(<span class="number">10</span>) &gt;= <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;No capture&quot;</span> &lt;&lt; endl;</span><br><span class="line">        image = Mat::<span class="built_in">zeros</span>(<span class="number">480</span>, <span class="number">640</span>, CV_8UC1);</span><br><span class="line">        <span class="built_in">drawText</span>(image);</span><br><span class="line">        <span class="built_in">imshow</span>(<span class="string">&quot;Sample&quot;</span>, image);</span><br><span class="line">        <span class="built_in">waitKey</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先尝试将代码中的<code>capture.open(0)</code>改成<code>capture.open(&quot;/dev/video0&quot;);</code>，会发现问题依旧，启动之后未出现任何弹窗程序就终止了。</p><p>尝试将其改成<code>capture.open(1);</code>，可以看到这个设备是不存在的，open函数失败了并打印了错误信息，随后程序走到了<code>No capture</code>并正常显示了黑屏的Hello OpenCV页面。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/03/5f012640fe78dcf0558ff11f052626e6.png" alt="image.png"></p><p>这里我发现了一个问题，其实在没有修改代码之前，程序已经打印了<code>Capture is opened</code>，说明摄像头其实已经被open成功了，进入了<code>if(capture.isOpened())</code>为真的分支中。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">king@ubuntu:~/slam/pkg/opencv-3.2.0/samples/cpp/example_cmake/build$ ./opencv_example </span><br><span class="line">Built with OpenCV 3.2.0</span><br><span class="line">Capture is opened</span><br><span class="line">king@ubuntu:~/slam/pkg/opencv-3.2.0/samples/cpp/example_cmake/build$</span><br></pre></td></tr></table></figure><p>那么我们就来看看这个分支里面有啥问题会导致程序没有任何报错就退出吧。其中<code>for(;;)</code>是一个死循环，退出条件是内部的两个break。程序没有任何报错就终止，只能是这两个break导致的。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(capture.<span class="built_in">isOpened</span>())</span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Capture is opened&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">for</span>(;;)</span><br><span class="line">    &#123;</span><br><span class="line">        capture &gt;&gt; image;</span><br><span class="line">        <span class="keyword">if</span>(image.<span class="built_in">empty</span>())</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="built_in">drawText</span>(image);</span><br><span class="line">        <span class="built_in">imshow</span>(<span class="string">&quot;Sample&quot;</span>, image);</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">waitKey</span>(<span class="number">10</span>) &gt;= <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以我们可以修改代码，给这两个break之前加上打印</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">cout &lt;&lt; <span class="string">&quot;Capture is opened&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">for</span>(;;)</span><br><span class="line">&#123;</span><br><span class="line">    capture &gt;&gt; image;</span><br><span class="line">    <span class="keyword">if</span>(image.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Image is empty! break.&quot;</span> &lt;&lt; endl; </span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">drawText</span>(image);</span><br><span class="line">    <span class="built_in">imshow</span>(<span class="string">&quot;Sample&quot;</span>, image);</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">waitKey</span>(<span class="number">10</span>) &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;waitKey() &gt;= 0! break.&quot;</span> &lt;&lt; endl; </span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再次运行，会发现是第二个break导致程序终止了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">king@ubuntu:~/slam/pkg/opencv-3.2.0/samples/cpp/example_cmake/build$ ./opencv_example </span><br><span class="line">Built with OpenCV 3.2.0</span><br><span class="line">Capture is opened</span><br><span class="line">waitKey() &gt;= 0! break.</span><br><span class="line">king@ubuntu:~/slam/pkg/opencv-3.2.0/samples/cpp/example_cmake/build$</span><br></pre></td></tr></table></figure><p>那肯定是waitKey的返回值大于等于0命中了判断导致的。该函数的原型如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">cv::waitKey</span><span class="params">(<span class="type">int</span> delay = <span class="number">0</span>)</span></span></span><br></pre></td></tr></table></figure><p>这个函数是干啥用的呢？官方的说明如下：</p><blockquote><p>Waits for a pressed key.</p><p>The function waitKey waits for a key event infinitely (when delay &#x3D; 0) or for delay milliseconds, when it is positive. Since the OS has a minimum time between switching threads, the function will not wait exactly delay ms, it will wait at least delay ms, depending on what else is running on your computer at that time. It returns the code of the pressed key or -1 if no key was pressed before the specified time had elapsed.</p></blockquote><p>这个函数会至少等待delay毫秒的键盘输入，并返回键盘输入的ASCII值。当没有键盘被按下的时候，会返回<code>-1</code>。如果delay传入0则代表永久等待。</p><p>既然返回值是按键的ASCII码，我们可以打印一下这个函数的返回值，看看它收到了什么</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> key = <span class="built_in">waitKey</span>(<span class="number">10</span>);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;waitKey() return: &quot;</span> &lt;&lt; key  &lt;&lt; endl; </span><br><span class="line"><span class="keyword">if</span>(key &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;waitKey() &gt;= 0! break.&quot;</span> &lt;&lt; endl; </span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打印的结果是255，<strong>但是ASCII码的最大值只到127</strong>，这里的255已经超出键盘上按键可能返回的值了，肯定是个无意义的返回值！</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">waitKey() return: 255</span><br><span class="line">waitKey() &gt;= 0! break.</span><br></pre></td></tr></table></figure><p>bing一搜，就找到了类似的帖子：<a href="https://blog.csdn.net/m0_47700906/article/details/123305720" title="opencv中waitkey()函数返回值为255_以下哪个选项是使用opencv的waitkey函数的返回值的正确描述?-CSDN博客">opencv中waitkey()函数返回值为255_以下哪个选项是使用opencv的waitkey函数的返回值的正确描述?-CSDN博客</a></p><p>说白了就是，因为操作系统缘故，原本在没有任何键盘输入时应该返回的<code>-1</code>函数，被当作了一字节的无符号整数处理，返回成了255。</p><h2 id="3-问题解决"><a href="#3-问题解决" class="headerlink" title="3. 问题解决"></a>3. 问题解决</h2><p>现在已经知道了问题的来源了，解决方案就是在判断中过滤掉255这个值，或者直接把判断写死成键盘上的某个按键，只有按下键盘上的特定按键的时候才会退出。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> key = <span class="built_in">waitKey</span>(<span class="number">10</span>);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;waitKey() return: &quot;</span> &lt;&lt; key  &lt;&lt; endl; </span><br><span class="line"><span class="keyword">if</span>(key &gt;= <span class="number">0</span> &amp;&amp; key != <span class="number">255</span>)&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;waitKey() &gt;= 0! break.&quot;</span> &lt;&lt; endl; </span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>过滤掉返回值255之后重新编译，demo就能正常显示摄像头的画面了。左侧可以看到waitKey一直在返回255。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/03/d213fa5ceb5be1a4b3f4a31d3fcd8d50.png" alt="image.png"></p><p>此时按下键盘上的数字1，可以看到它识别到了ASCII 49并成功退出程序了。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/03/57e1cbf54baaa25b1a48d0ab4d9d6e79.png" alt="image.png"></p><h2 id="4-The-end"><a href="#4-The-end" class="headerlink" title="4. The end"></a>4. The end</h2><p>不管咋样，这个困扰了我大半个上午的问题总算是解决啦！</p><p>最开始我没想起来去看源码，以为一直是OpenCV没办法正常打开摄像头的问题，搜了一圈都没有找到解决方案。最后给代码加上了打印调试大法才找到了问题所在。感觉前面的折腾有点钻牛角尖了。</p>]]></content>
    
    
    <summary type="html">本文探究了 ubuntu 18.04 下 OpenCV 3.2.0 的 opencv_example 运行闪退问题，并给出了问题原因与解决方案</summary>
    
    
    
    <category term="编程学习" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="项目开发记录" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="Linux" scheme="https://blog.musnow.top/tags/Linux/"/>
    
    <category term="ubuntu" scheme="https://blog.musnow.top/tags/ubuntu/"/>
    
    <category term="SLAM" scheme="https://blog.musnow.top/tags/SLAM/"/>
    
  </entry>
  
  <entry>
    <title>【SLAM】ubuntu 18.04 编译安装 OpenCV 3.2.0 时出现哈希错误</title>
    <link href="https://blog.musnow.top/posts/8846864150/"/>
    <id>https://blog.musnow.top/posts/8846864150/</id>
    <published>2025-03-01T01:40:48.000Z</published>
    <updated>2025-03-06T02:42:10.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>ubuntu 18.04 使用 cmake 编译安装 OpenCV 3.2.0 时出现哈希错误。</p></blockquote><h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h2><h3 id="1-1-问题说明"><a href="#1-1-问题说明" class="headerlink" title="1.1. 问题说明"></a>1.1. 问题说明</h3><p>在amd64的ubuntu 18.04 desktop上编译安装 OpenCV 3.2.0 的时候，我遇到了cmake构建错误。错误的核心报错如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for file: [/home/king/slam/pkg/opencv-3.2.0/3rdparty/ippicv/downloads/linux-808b791a6eac9ed78d32a7666804320e/ippicv_linux_20151201.tgz]</span><br><span class="line">  expected hash: [808b791a6eac9ed78d32a7666804320e]</span><br><span class="line">    actual hash: [d41d8cd98f00b204e9800998ecf8427e]</span><br><span class="line">         status: [7;&quot;Couldn&#x27;t connect to server&quot;]</span><br></pre></td></tr></table></figure><p>说来奇怪，之前在 ubuntu 22.04 arm 中启动的 ubuntu 18.04 <strong>docker</strong>容器内编译安装 OpenCV 3.2.0 时并没有遇到此报错。可能是网络因素导致<code>ippicv_linux_20151201.tgz</code>文件无法正常下载。</p><p>完整的错误输出如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">-- Looking for sys/videoio.h</span><br><span class="line">-- Looking for sys/videoio.h - not found</span><br><span class="line">CMake Warning at 3rdparty/ippicv/downloader.cmake:56 (message):</span><br><span class="line">  ICV: Local copy of ICV package has invalid MD5 hash:</span><br><span class="line">  8b449a536a2157bcad08a2b9f266828b (expected:</span><br><span class="line">  808b791a6eac9ed78d32a7666804320e)</span><br><span class="line">Call Stack (most recent call first):</span><br><span class="line">  3rdparty/ippicv/downloader.cmake:110 (_icv_downloader)</span><br><span class="line">  cmake/OpenCVFindIPP.cmake:243 (include)</span><br><span class="line">  cmake/OpenCVFindLibsPerf.cmake:37 (include)</span><br><span class="line">  CMakeLists.txt:558 (include)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- ICV: Downloading ippicv_linux_20151201.tgz...</span><br><span class="line">CMake Error at 3rdparty/ippicv/downloader.cmake:73 (file):</span><br><span class="line">  file DOWNLOAD HASH mismatch</span><br><span class="line"></span><br><span class="line">    for file: [/home/king/slam/pkg/opencv-3.2.0/3rdparty/ippicv/downloads/linux-808b791a6eac9ed78d32a7666804320e/ippicv_linux_20151201.tgz]</span><br><span class="line">      expected hash: [808b791a6eac9ed78d32a7666804320e]</span><br><span class="line">        actual hash: [d41d8cd98f00b204e9800998ecf8427e]</span><br><span class="line">             status: [7;&quot;Couldn&#x27;t connect to server&quot;]</span><br><span class="line"></span><br><span class="line">Call Stack (most recent call first):</span><br><span class="line">  3rdparty/ippicv/downloader.cmake:110 (_icv_downloader)</span><br><span class="line">  cmake/OpenCVFindIPP.cmake:243 (include)</span><br><span class="line">  cmake/OpenCVFindLibsPerf.cmake:37 (include)</span><br><span class="line">  CMakeLists.txt:558 (include)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">CMake Error at 3rdparty/ippicv/downloader.cmake:77 (message):</span><br><span class="line">  ICV: Failed to download ICV package: ippicv_linux_20151201.tgz.</span><br><span class="line">  Status=7;&quot;Couldn&#x27;t connect to server&quot;</span><br><span class="line">Call Stack (most recent call first):</span><br><span class="line">  3rdparty/ippicv/downloader.cmake:110 (_icv_downloader)</span><br><span class="line">  cmake/OpenCVFindIPP.cmake:243 (include)</span><br><span class="line">  cmake/OpenCVFindLibsPerf.cmake:37 (include)</span><br><span class="line">  CMakeLists.txt:558 (include)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- Configuring incomplete, errors occurred!</span><br><span class="line">See also &quot;/home/king/slam/pkg/opencv-3.2.0/build/CMakeFiles/CMakeOutput.log&quot;.</span><br><span class="line">See also &quot;/home/king/slam/pkg/opencv-3.2.0/build/CMakeFiles/CMakeError.log&quot;.</span><br></pre></td></tr></table></figure><h3 id="1-2-使用的安装命令"><a href="#1-2-使用的安装命令" class="headerlink" title="1.2. 使用的安装命令"></a>1.2. 使用的安装命令</h3><p>提出解决方案之前，先把我使用的 OpenCV 3.2.0 安装命令给出。先是依赖项安装命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 依赖项</span></span><br><span class="line">sudo apt-get install -y \</span><br><span class="line">    build-essential libgtk2.0-dev \</span><br><span class="line">    libavcodec-dev libavformat-dev \</span><br><span class="line">    libjpeg.dev libtiff5.dev libswscale-dev \</span><br><span class="line">    libcanberra-gtk-module \</span><br><span class="line">    libavresample-dev libgphoto2-dev</span><br><span class="line"><span class="comment"># 添加新源后继续安装</span></span><br><span class="line">sudo apt-get install -y software-properties-common </span><br><span class="line">sudo add-apt-repository <span class="string">&quot;deb http://security.ubuntu.com/ubuntu xenial-security main&quot;</span></span><br><span class="line">sudo apt-get -y update </span><br><span class="line">sudo apt-get install -y libjasper1 libjasper-dev</span><br></pre></td></tr></table></figure><p>随后是下载软件包和构建安装命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载和解压</span></span><br><span class="line">wget -O opencv-3.2.0.tar.gz https://github.com/opencv/opencv/archive/refs/tags/3.2.0.tar.gz</span><br><span class="line">tar -zxvf opencv-3.2.0.tar.gz</span><br><span class="line"><span class="comment"># 开始编译和安装</span></span><br><span class="line"><span class="built_in">pushd</span> opencv-3.2.0</span><br><span class="line">    <span class="built_in">rm</span> -rf build</span><br><span class="line">    <span class="built_in">mkdir</span> build &amp;&amp; <span class="built_in">cd</span> build </span><br><span class="line">    <span class="comment"># 构建和编译安装，-j4代表4线程并发</span></span><br><span class="line">    cmake -D CMAKE_BUILD_TYPE=Release -D CMAKE_INSTALL_PREFIX=/usr/local ..</span><br><span class="line">    make -j$(<span class="built_in">nproc</span>)</span><br><span class="line">    make install</span><br><span class="line">    <span class="comment"># 刷新动态库</span></span><br><span class="line">    ldconfig</span><br><span class="line"><span class="built_in">popd</span></span><br></pre></td></tr></table></figure><p>出现问题的是cmake的这一步</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmake -D CMAKE_BUILD_TYPE=Release -D CMAKE_INSTALL_PREFIX=/usr/local ..</span><br></pre></td></tr></table></figure><h2 id="2-解决方案"><a href="#2-解决方案" class="headerlink" title="2. 解决方案"></a>2. 解决方案</h2><blockquote><p>参考：<a href="https://github.com/opencv/opencv/issues/5973">https://github.com/opencv/opencv/issues/5973</a></p></blockquote><p>报错提到了一个文件，这个文件其实是要被cmake主动下载的，但是并没有被下载下来。在<code>opencv-3.2.0/3rdparty/ippicv/</code>目录下可以找到一个<code>downloader.cmake</code>文件，里面就有文件的下载链接。链接的域名是<code>raw.githubusercontent.com</code>链接，这个域名的国内联通性比<code>github.com</code>还差，所以我估计大概率是因为<strong>网络问题</strong>导致的这个错误。</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span>(OPENCV_ICV_URL <span class="string">&quot;https://raw.githubusercontent.com/opencv/opencv_3rdparty/$&#123;IPPICV_BINARIES_COMMIT&#125;/ippicv&quot;</span>)</span><br></pre></td></tr></table></figure><p>cmake的报错中给出了两个哈希值，我们本地已有的文件hash是<code>d41d8cd98f00b204e9800998ecf8427e</code>，这是md5的空文件哈希。如果使用<code>ls -l</code>查看这个文件，你会发现它就是一个0KB的空文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> -l /home/king/slam/pkg/opencv-3.2.0/3rdparty/ippicv/downloads/linux-808b791a6eac9ed78d32a7666804320e/ippicv_linux_20151201.tgz</span><br></pre></td></tr></table></figure><p>所以我们要做的就是把正确的文件手动下载下来，这里给出github的下载链接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/opencv/opencv_3rdparty/raw/ippicv/master_20151201/ippicv/ippicv_linux_20151201.tgz</span><br></pre></td></tr></table></figure><p>注意，上面贴出的<a href="https://github.com/opencv/opencv/issues/5973">issue 5973</a>中给出的ippicv下载链接<strong>版本</strong>是不对的，要和cmake报错中提到的版本号<code>ippicv_linux_20151201.tgz</code>保持一致。否则即便你重新下载了版本号不对的文件，cmake依旧会报错hash值不一致。</p><p>下载好了<code>ippicv_linux_20151201.tgz</code>这个文件之后，将其放置到<code>/home/king/slam/pkg/opencv-3.2.0/3rdparty/ippicv/downloads/linux-808b791a6eac9ed78d32a7666804320e/</code>目录中，替换掉刚刚的<code>ippicv_linux_20151201.tgz</code>空文件即可。有效文件大小约36.5MB。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ ls -l /home/king/slam/pkg/opencv-3.2.0/3rdparty/ippicv/downloads/linux-808b791a6eac9ed78d32a7666804320e/</span><br><span class="line">total 35680</span><br><span class="line">-rw-rw-r-- 1 king king 36533175 Feb 28 17:37 ippicv_linux_20151201.tgz</span><br></pre></td></tr></table></figure><p>替换完毕之后重新执行cmake命令（注意不要删除缓存文件夹），就可以正常构建成功了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cmake -D CMAKE_BUILD_TYPE=Release \</span><br><span class="line">    -D CMAKE_INSTALL_PREFIX=/usr/local ..</span><br></pre></td></tr></table></figure><h2 id="3-问题解决"><a href="#3-问题解决" class="headerlink" title="3. 问题解决"></a>3. 问题解决</h2><p>cmake构建成功的最终输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-- Configuring done</span><br><span class="line">-- Generating done</span><br><span class="line">-- Build files have been written to: /home/king/slam/pkg/opencv-3.2.0/build</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/03/b1f8fe34bacaef7b58b4a0481fca6296.png" alt="image.png"></p><p>后续的编译也没有问题：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[100%] Linking CXX executable ../../bin/opencv_test_calib3d</span><br><span class="line">[100%] Built target opencv_test_calib3d</span><br><span class="line">[100%] Linking CXX executable ../../bin/opencv_perf_stitching</span><br><span class="line">[100%] Built target opencv_perf_stitching</span><br><span class="line">king@ubuntu:~/slam/pkg/opencv-3.2.0/build$</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/03/fb97ffa1ee97596d1ff49f7834560e3f.png" alt="image.png"></p><p>执行<code>sudo make install</code>，成功安装OpenCV 3.2.0，以下是<code>make install</code>最终的输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-- Installing: /usr/local/bin/opencv_visualisation</span><br><span class="line">-- Set runtime path of &quot;/usr/local/bin/opencv_visualisation&quot; to &quot;/usr/local/lib&quot;</span><br><span class="line">-- Installing: /usr/local/bin/opencv_version</span><br><span class="line">-- Set runtime path of &quot;/usr/local/bin/opencv_version&quot; to &quot;/usr/local/lib&quot;</span><br></pre></td></tr></table></figure><p>至此，问题解决。</p>]]></content>
    
    
    <summary type="html">本文引入了 ubuntu 18.04 使用 cmake 编译安装 OpenCV 3.2.0 时出现哈希错误的问题，并给出了解决方案</summary>
    
    
    
    <category term="编程学习" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="项目开发记录" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="Linux" scheme="https://blog.musnow.top/tags/Linux/"/>
    
    <category term="ubuntu" scheme="https://blog.musnow.top/tags/ubuntu/"/>
    
    <category term="SLAM" scheme="https://blog.musnow.top/tags/SLAM/"/>
    
  </entry>
  
  <entry>
    <title>【Linux】ubuntu 22.04 通过 apt 安装 python2</title>
    <link href="https://blog.musnow.top/posts/3862916255/"/>
    <id>https://blog.musnow.top/posts/3862916255/</id>
    <published>2025-03-01T00:41:16.000Z</published>
    <updated>2025-03-01T00:48:38.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>ubuntu 22.04 通过 apt 安装 python2。</p></blockquote><p>在老版本的 ubuntu 18.04 上，可以使用如下命令安装python2</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install -y \</span><br><span class="line">    python-dev \</span><br><span class="line">    python-pip \</span><br><span class="line">    python3-dev \</span><br><span class="line">    python3-pip \</span><br><span class="line">    python-all-dev \</span><br><span class="line">    python3-all-dev</span><br></pre></td></tr></table></figure><p>但是在ubuntu 22.04上，会提示<code>python-dev</code>、<code>python-pip</code>、<code>python-all-dev</code>这些包都不存在了，没有办法通过它们安装python2。</p><p>在ubuntu 22.04上，需要使用如下命令来安装python2，再通过官方的脚本获取pip2。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ubuntu 22.04 </span></span><br><span class="line"><span class="comment"># 安装python2</span></span><br><span class="line">sudo apt-get install -y python2</span><br><span class="line"><span class="comment"># 安装python2的pip</span></span><br><span class="line">wget https://bootstrap.pypa.io/pip/2.7/get-pip.py</span><br><span class="line">python2 get-pip.py</span><br></pre></td></tr></table></figure><p>在部分主机上，python2包也会提示不存在，尝试使用<code>python-dev-is-python2</code>作为替代。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install -y python-dev-is-python2</span><br></pre></td></tr></table></figure><p>注意，使用<code>get-pip.py</code>脚本安装的pip2默认会安装在当前用户的<code>~/.local/bin</code>目录下，如果是子用户，需要将这个目录加入PATH，才能正常使用pip2命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ pip2 -V</span><br><span class="line">pip 20.3.4 from /home/用户名/.local/lib/python2.7/site-packages/pip (python 2.7)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">ubuntu 22.04 通过 apt 安装 python2</summary>
    
    
    
    <category term="编程学习" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="Linux" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/Linux/"/>
    
    
    <category term="Linux" scheme="https://blog.musnow.top/tags/Linux/"/>
    
    <category term="ubuntu" scheme="https://blog.musnow.top/tags/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>【Hexo】hexo-butterfly主题添加影评书评页面</title>
    <link href="https://blog.musnow.top/posts/8855455861/"/>
    <id>https://blog.musnow.top/posts/8855455861/</id>
    <published>2025-02-12T05:49:29.000Z</published>
    <updated>2025-05-18T01:02:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>hexo-butterfly主题添加影评书评页面。</p><h2 id="1-说明"><a href="#1-说明" class="headerlink" title="1. 说明"></a>1. 说明</h2><p>在25年1月份，我的博客站点新增了一个<a href="https://blog.musnow.top/rating/">影评书评</a>页面，这个页面是基于之前添加的<a href="https://blog.musnow.top/equipment/">装备</a>页面的修改而来的。</p><blockquote><p>有关添加装备页面的教程，可以参考这篇博客：<a href="https://blog.musnow.top/posts/2383339565/">【Hexo】hexo-butterfly主题添加装备展示页面 | 慕雪的寒舍</a></p></blockquote><p>后续我在这个装备页面的基础上，让GPT帮忙修改了一下前端代码，实现了一个影评和书评的画廊视图页面。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/02/e65c6d2622d08322a542f681ee89b31b.png" alt="image.png"></p><p>本文将给出这个页面的css和pug文件，以及如何使用github action自动从我们的书评和影评文章来创建对应的yaml配置，用于最终生成这个页面。</p><h2 id="2-主题修改"><a href="#2-主题修改" class="headerlink" title="2. 主题修改"></a>2. 主题修改</h2><p>本站的butterfly主题停留在古早的4.9.5版本，此项修改可能对最新版的butterfly主题无效！</p><blockquote><p>更新：本站已经更新至5.3.5版本，本文有效。</p></blockquote><p>另外，修改hexo主题的前提是使用GIT方式来安装hexo主题（主题文件在themes文件夹内），如果你使用npm方式安装主题，换了一个环境或者npm更新主题版本之后你的主题修改就丢失了。</p><h3 id="2-1-前端文件修改"><a href="#2-1-前端文件修改" class="headerlink" title="2.1. 前端文件修改"></a>2.1. 前端文件修改</h3><p>这部分修改和添加装备页面需要做的修改一致。</p><p>修改<code>blog/themes/butterfly/layout/page.pug</code>文件，在<code>case page.type</code>的判断语句中新增一个rating的判断，添加在default之前即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">when &#x27;rating&#x27;</span><br><span class="line">  include includes/page/rating.pug</span><br></pre></td></tr></table></figure><p>随后再创建一个<code>blog/themes/butterfly/layout/includes/page/rating.pug</code>文件，写入如下内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">#rating</span><br><span class="line">  if site.data.rating</span><br><span class="line">    each i in site.data.rating</span><br><span class="line">      .rating-item</span><br><span class="line">        h2.rating-item-title= i.class_name</span><br><span class="line">        .rating-item-description= i.description</span><br><span class="line">        .rating-item-content</span><br><span class="line">          each item, index in i.rating_list</span><br><span class="line">            .rating-item-content-item</span><br><span class="line">              .rating-item-content-item-cover</span><br><span class="line">                img.rating-item-content-item-image(data-lazy-src=url_for(item.image) onerror=`this.onerror=null;this.src=&#x27;` + url_for(theme.error_img.flink) + `&#x27;` alt=item.name)</span><br><span class="line">              .rating-item-content-item-info</span><br><span class="line">                .rating-item-content-item-name= item.name</span><br><span class="line">                .rating-item-content-item-specification</span><br><span class="line">                  // 定义评分渲染函数</span><br><span class="line">                  - const renderRating = (rating) =&gt; &#123;</span><br><span class="line">                  -   const fullStar = &#x27;★&#x27;;</span><br><span class="line">                  -   const emptyStar = &#x27;☆&#x27;;</span><br><span class="line">                  -   const maxRating = 5;</span><br><span class="line">                  -   let stars = &#x27;&#x27;;</span><br><span class="line">                  -   for (let i = 0; i &lt; maxRating; i++) &#123;</span><br><span class="line">                  -     stars += i &lt; rating ? fullStar : emptyStar;</span><br><span class="line">                  -   &#125;</span><br><span class="line">                  -   // 格式化评分数字（保留一位小数）</span><br><span class="line">                  -   const formattedRating = Number(rating).toFixed(1);</span><br><span class="line">                  -   return `评分：$&#123;formattedRating&#125; $&#123;stars&#125;`;</span><br><span class="line">                  - &#125;</span><br><span class="line">                  | #&#123;renderRating(item.specification)&#125;</span><br><span class="line">                .rating-item-content-item-description= item.description</span><br><span class="line">                .rating-item-content-item-toolbar</span><br><span class="line">                  if item.link.includes(&#x27;https://&#x27;) || item.link.includes(&#x27;http://&#x27;)</span><br><span class="line">                    a.rating-item-content-item-link(href= item.link, target=&#x27;_blank&#x27;) 详情</span><br><span class="line">                  else</span><br><span class="line">                    a.rating-item-content-item-link(href= item.link, target=&#x27;_blank&#x27;) 查看文章</span><br></pre></td></tr></table></figure><p>随后在source文件夹下创建一个rating文件夹，在该文件夹内创建一个<code>index.md</code>文件，写入如下内容。其中title可以根据你的喜好修改，<code>aside: false</code>的含义是关闭侧边栏。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 影评 · 书评</span><br><span class="line">date: 2025-01-04 16:45:12</span><br><span class="line">aside: false</span><br><span class="line"><span class="section">type: rating</span></span><br><span class="line"><span class="section">---</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>再在<code>source/rating/</code>目录下创建一个<code>rating.css</code>文件，写入如下内容</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.rating-item-content</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">flex-direction</span>: row;</span><br><span class="line">    <span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> -<span class="number">8px</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.rating-item-content-item</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="built_in">calc</span>(<span class="number">25%</span> - <span class="number">12px</span>);</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">2px</span> solid <span class="number">#979797</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">8px</span> <span class="number">6px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">var</span>(--heo-card-bg);</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="built_in">var</span>(--heo-shadow-border);</span><br><span class="line">    <span class="attribute">min-height</span>: <span class="number">400px</span>;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">1200px</span>) &#123;</span><br><span class="line">    <span class="selector-class">.rating-item-content-item</span> &#123;</span><br><span class="line">      <span class="attribute">width</span>: <span class="built_in">calc</span>(<span class="number">50%</span> - <span class="number">12px</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">768px</span>) &#123;</span><br><span class="line">    <span class="selector-class">.rating-item-content-item</span> &#123;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.rating-item-content-item-info</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">8px</span> <span class="number">16px</span> <span class="number">16px</span> <span class="number">16px</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">12px</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.rating-item-content-item-name</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">18px</span>;</span><br><span class="line">    <span class="attribute">font-weight</span>: bold;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">8px</span>;</span><br><span class="line">    <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">    <span class="attribute">width</span>: fit-content;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.rating-item-content-item-specification</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">var</span>(--heo-secondtext);</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.rating-item-content-item-description</span> &#123;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">var</span>(--heo-secondtext);</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">60px</span>;</span><br><span class="line">    <span class="attribute">display</span>: -webkit-box;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    -webkit-line-clamp: <span class="number">3</span>;</span><br><span class="line">    -webkit-box-orient: vertical;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">a</span><span class="selector-class">.rating-item-content-item-link</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">var</span>(--heo-gray-op);</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">4px</span> <span class="number">8px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">8px</span>;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">a</span><span class="selector-class">.rating-item-content-item-link</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">var</span>(--heo-main);</span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">var</span>(--heo-white);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">h2</span><span class="selector-class">.rating-item-title</span> &#123;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.rating-item-description</span> &#123;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">4px</span> <span class="number">0</span> <span class="number">8px</span> <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">var</span>(--heo-secondtext);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.rating-item-content-item-cover</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">var</span>(--heo-secondbg);</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">img</span><span class="selector-class">.rating-item-content-item-image</span> &#123;</span><br><span class="line">    <span class="attribute">object-fit</span>: cover;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">div</span><span class="selector-id">#rating</span> &#123;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">26px</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.rating-item-content-item-toolbar</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: space-between;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">16px</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">a</span><span class="selector-class">.bber-reply</span> &#123;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>到这里，主题的修改就完成了。</p><h3 id="2-2-评分配置文件"><a href="#2-2-评分配置文件" class="headerlink" title="2.2. 评分配置文件"></a>2.2. 评分配置文件</h3><p>接下来要做的是新增一个对应的yaml配置文件，在<code>source/_data/</code>下新增一个<code>rating.yml</code>，评分项目的格式如下，包含了书评影评的名字、描述、文章链接、封面、评分（1到5的整数）</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">class_name:</span> <span class="string">电影世界</span></span><br><span class="line">  <span class="attr">description:</span> <span class="string">光影交织，大梦一场</span></span><br><span class="line">  <span class="attr">rating_list:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">桑尼的优势</span></span><br><span class="line">      <span class="attr">specification:</span> <span class="number">5</span></span><br><span class="line">      <span class="attr">description:</span> <span class="string">制作精良，剧情在线，神级反转，好看！</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">https://img.musnow.top/i/2025/01/a35d66e1ea8ffae6bb5ff248d1f53c63.png</span></span><br><span class="line">      <span class="attr">link:</span> <span class="string">/posts/1438650502/</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">class_name:</span> <span class="string">书籍海洋</span></span><br><span class="line">  <span class="attr">description:</span> <span class="string">行万里路，读万卷书</span></span><br><span class="line">  <span class="attr">rating_list:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">占位符</span></span><br><span class="line">      <span class="attr">specification:</span> <span class="number">4</span></span><br><span class="line">      <span class="attr">description:</span> <span class="string">占位符</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">/img/bg/op32.webp</span></span><br><span class="line">      <span class="attr">link:</span> <span class="string">/</span></span><br></pre></td></tr></table></figure><p>到这里，就应该搞定了，可以在本地<code>hexo s</code>然后访问<code>/rating</code>路径看看是否有新增的页面了。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/02/e65c6d2622d08322a542f681ee89b31b.png" alt="image.png"></p><h2 id="3-Github-Action自动化配置"><a href="#3-Github-Action自动化配置" class="headerlink" title="3. Github Action自动化配置"></a>3. Github Action自动化配置</h2><p>现在页面已经创建好了，但我不想每次写个影评之后都要自己去修改<code>rating.yml</code>文件，那样太过麻烦，所以写了一个python脚本，来自动化生成这个文件。</p><h3 id="3-1-新增的front-matter"><a href="#3-1-新增的front-matter" class="headerlink" title="3.1. 新增的front-matter"></a>3.1. 新增的front-matter</h3><p>既然需要python脚本来处理，那么第一步就是把yaml文件里面的内容写到markdown文件的front-matter里面。这里新增了下面几个字段</p><table><thead><tr><th>字段</th><th>含义</th><th>说明</th></tr></thead><tbody><tr><td>rating_name</td><td>书籍或电影的名字</td><td>如果缺少此字段，则会使用title</td></tr><tr><td>rating_desc</td><td>书籍或电影的简述</td><td>如果缺少此字段，则使用description</td></tr><tr><td>rating_point</td><td>评分（1到5的整数）</td><td>默认为0</td></tr><tr><td>rating_cover</td><td>书籍或电影的封面</td><td>如果缺少此字段，则使用cover；若没有cover，则使用提前配置好的默认封面</td></tr></tbody></table><p>书评和影评文章的link会根据front-matter里面的abbrlink来生成。</p><h3 id="3-2-Python处理脚本"><a href="#3-2-Python处理脚本" class="headerlink" title="3.2. Python处理脚本"></a>3.2. Python处理脚本</h3><p>下面给出半GPT写的完整的Python脚本，顶部Config是需要配置的条目，<strong>分别是书评和影评的md文件路径、当没有设置rating_cover时使用的默认封面、abbrlink的前缀</strong>。</p><p>其中<code>POST_LINK_PREFIX</code>参数是abbrlink前缀，在我的站点中，文章的链接都是<code>/posts/&lt;abbrlink&gt;/</code>，abbrlink的前缀就是<code>/posts/</code>。这个参数根据你自己站点内abbrlink插件的配置来修改这个配置项。</p><p>剩下的代码，如果你不知道它们是怎么工作的，请不要修改。你可以丢给GPT让它根据你的需要来微调代码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> yaml</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Config</span>:</span><br><span class="line">    <span class="comment"># 书籍、影评md文件路径</span></span><br><span class="line">    MOVIE_FILE_PATH = <span class="string">&quot;Notes/CODE/blog/rating/movies&quot;</span></span><br><span class="line">    BOOK_FILE_PATH = <span class="string">&quot;Notes/CODE/blog/rating/books&quot;</span></span><br><span class="line">    <span class="comment"># 默认封面</span></span><br><span class="line">    DEFAULT_COVER = <span class="string">&#x27;/img/bg/op32.jpg&#x27;</span></span><br><span class="line">    <span class="comment"># abbrlink前缀</span></span><br><span class="line">    POST_LINK_PREFIX = <span class="string">&#x27;/posts/&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Rating</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;评价列表类&quot;&quot;&quot;</span></span><br><span class="line">    MOVIE = <span class="string">&#x27;电影世界&#x27;</span></span><br><span class="line">    MOVIE_DESC = <span class="string">&#x27;光影交织，大梦一场&#x27;</span></span><br><span class="line">    BOOK = <span class="string">&#x27;书籍海洋&#x27;</span></span><br><span class="line">    BOOK_DESC = <span class="string">&#x27;行万里路，读万卷书&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># RatingItem类</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Item</span>:</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, specification, description, image, link</span>):</span><br><span class="line">            self.name = name</span><br><span class="line">            self.specification = specification</span><br><span class="line">            self.description = description</span><br><span class="line">            self.image = image</span><br><span class="line">            self.link = link</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">to_dict</span>(<span class="params">self</span>):</span><br><span class="line">            <span class="string">&quot;&quot;&quot;将 Rating 对象转换为字典格式&quot;&quot;&quot;</span></span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                <span class="string">&#x27;name&#x27;</span>: self.name,</span><br><span class="line">                <span class="string">&#x27;specification&#x27;</span>: self.specification,</span><br><span class="line">                <span class="string">&#x27;description&#x27;</span>: self.description,</span><br><span class="line">                <span class="string">&#x27;image&#x27;</span>: self.image,</span><br><span class="line">                <span class="string">&#x27;link&#x27;</span>: self.link</span><br><span class="line">            &#125;</span><br><span class="line">        </span><br><span class="line"><span class="meta">        @staticmethod</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">default</span>():</span><br><span class="line">            <span class="string">&quot;&quot;&quot;获取到一个默认的item&quot;&quot;&quot;</span></span><br><span class="line">            <span class="keyword">return</span> Rating.Item(<span class="string">&#x27;占位符&#x27;</span>,<span class="number">0</span>,<span class="string">&#x27;占位符&#x27;</span>,Config.DEFAULT_COVER,<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建class内容的函数</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_class</span>(<span class="params">class_name, description, rating_list</span>):</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="string">&#x27;class_name&#x27;</span>: class_name,</span><br><span class="line">            <span class="string">&#x27;description&#x27;</span>: description,</span><br><span class="line">            <span class="string">&#x27;rating_list&#x27;</span>: rating_list</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MarkdownParser</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;md文件处理&quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">extract_front_matter</span>(<span class="params">file_path</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        提取 Markdown 文件中的 front-matter 内容。</span></span><br><span class="line"><span class="string">        假设 front-matter 是以 &#x27;---&#x27; 包围的 YAML 格式内容。</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">            content = file.read()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 使用正则表达式匹配 front-matter</span></span><br><span class="line">        <span class="keyword">match</span> = re.<span class="keyword">match</span>(<span class="string">r&#x27;---\n(.*?)\n---\n&#x27;</span>, content, re.DOTALL)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">match</span>:</span><br><span class="line">            front_matter = <span class="keyword">match</span>.group(<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> yaml.safe_load(front_matter)  <span class="comment"># 使用 yaml 解析 front-matter</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">extract_front_matter_from_dir</span>(<span class="params">dir_path</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        遍历指定目录及其子目录下的所有 .md 文件，提取它们的 front-matter 内容，并将所有内容添加到列表中。</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        front_matter_list = []</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 遍历目录中的所有文件和子目录</span></span><br><span class="line">        <span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(dir_path):</span><br><span class="line">            <span class="keyword">for</span> filename <span class="keyword">in</span> files:</span><br><span class="line">                file_path = os.path.join(root, filename)</span><br><span class="line">                </span><br><span class="line">                <span class="comment"># 只处理 .md 文件</span></span><br><span class="line">                <span class="keyword">if</span> filename.endswith(<span class="string">&#x27;.md&#x27;</span>):</span><br><span class="line">                    front_matter = MarkdownParser.extract_front_matter(file_path)</span><br><span class="line">                    <span class="keyword">if</span> front_matter:</span><br><span class="line">                        front_matter_list.append(front_matter)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> front_matter_list</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_rating_list</span>(<span class="params">file_path:<span class="built_in">str</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;遍历目录下的所有md文件，构建rating列表&quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 遍历md文件</span></span><br><span class="line">    front_matter_list = MarkdownParser.extract_front_matter_from_dir(file_path)</span><br><span class="line">    <span class="comment"># 目录下没有有效文件</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> front_matter_list:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Err: no md file in <span class="subst">&#123;file_path&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> [Rating.Item.default().to_dict()]</span><br><span class="line"></span><br><span class="line">    rating_list = []</span><br><span class="line">    <span class="keyword">for</span> fm <span class="keyword">in</span> front_matter_list:</span><br><span class="line">        <span class="comment"># 电影名字</span></span><br><span class="line">        name = fm.get(<span class="string">&#x27;rating_name&#x27;</span>, fm.get(<span class="string">&#x27;title&#x27;</span>, <span class="literal">None</span>))</span><br><span class="line">        <span class="comment"># 评价</span></span><br><span class="line">        desc = fm.get(<span class="string">&#x27;rating_desc&#x27;</span>, fm.get(<span class="string">&#x27;description&#x27;</span>, <span class="literal">None</span>))</span><br><span class="line">        <span class="comment"># md文件里面没有电影名字和描述，直接跳过这个md文件</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> name <span class="keyword">and</span> <span class="keyword">not</span> desc: </span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="comment"># 获取评分</span></span><br><span class="line">        rating_point = <span class="built_in">abs</span>(fm.get(<span class="string">&#x27;rating_point&#x27;</span>, <span class="number">0</span>))</span><br><span class="line">        <span class="keyword">if</span> rating_point &gt; <span class="number">5</span>: </span><br><span class="line">            rating_point = <span class="number">5</span></span><br><span class="line">        <span class="comment"># 封面</span></span><br><span class="line">        cover = fm.get(<span class="string">&#x27;rating_cover&#x27;</span>, fm.get(<span class="string">&#x27;cover&#x27;</span>, Config.DEFAULT_COVER))</span><br><span class="line">        link = Config.POST_LINK_PREFIX + <span class="built_in">str</span>(fm.get(<span class="string">&#x27;abbrlink&#x27;</span>,<span class="string">&#x27;&#x27;</span>)) + <span class="string">&#x27;/&#x27;</span></span><br><span class="line">        item = Rating.Item(name, rating_point, desc, cover, link)</span><br><span class="line">        rating_list.append(item.to_dict())</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 如果列表为空，添加默认的占位符</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> rating_list:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Err: no validate md file in <span class="subst">&#123;file_path&#125;</span>&quot;</span>)</span><br><span class="line">        rating_list.append(Rating.Item.default().to_dict())</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> rating_list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成整个YAML结构</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_rating_yaml</span>():</span><br><span class="line">    <span class="comment"># 电影世界的rating list</span></span><br><span class="line">    movie_ratings = generate_rating_list(Config.MOVIE_FILE_PATH)</span><br><span class="line">    <span class="comment"># 书籍海洋的rating list</span></span><br><span class="line">    book_ratings = generate_rating_list(Config.BOOK_FILE_PATH)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 创建每个class的字典</span></span><br><span class="line">    classes = [</span><br><span class="line">        Rating.create_class(Rating.MOVIE, Rating.MOVIE_DESC, movie_ratings),</span><br><span class="line">        Rating.create_class(Rating.BOOK, Rating.BOOK_DESC, book_ratings),</span><br><span class="line">    ]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 返回整个YAML数据结构</span></span><br><span class="line">    <span class="keyword">return</span> classes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存数据到YAML文件</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">save_yaml</span>(<span class="params">data, file_path</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">        yaml.dump(data, file, allow_unicode=<span class="literal">True</span>, default_flow_style=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 主函数</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 检查命令行参数是否传入文件路径</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) &lt; <span class="number">2</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Input Err: Please provide the YAML file path.&quot;</span>)</span><br><span class="line">        sys.exit(<span class="number">1</span>)  <span class="comment"># 退出程序并返回错误代码</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 获取命令行传入的文件路径</span></span><br><span class="line">    file_path = sys.argv[<span class="number">1</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 生成YAML数据</span></span><br><span class="line">    data = generate_rating_yaml()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 保存到文件</span></span><br><span class="line">    save_yaml(data, file_path)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;Rating Yaml save to <span class="subst">&#123;file_path&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>脚本依赖于pyyaml库，使用<code>pip install pyyaml</code>安装了这个库后，使用如下命令调用脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 test.py 目标YAML文件路径</span><br></pre></td></tr></table></figure><p>最终会在给定的<strong>目标文件路径</strong>写入生成的yaml内容，比如<code>python3 test.py ./rating.yml</code>就会在当前目录创建一个<code>rating.yml</code>文件并写入生成的内容。</p><h3 id="3-3-Github-Action文件"><a href="#3-3-Github-Action文件" class="headerlink" title="3.3. Github Action文件"></a>3.3. Github Action文件</h3><p>配置Github Action之前，请先参考<a href="https://blog.musnow.top/posts/8608489065/">【博客】使用GithubAction自动同步obisidian和hexo仓库 | 慕雪的寒舍</a>一文配置obsidian和hexo仓库的自动同步。后续的Action配置是在这个配置的基础之上的。</p><p>首先需要添加两个step，配置python环境并安装解析yaml文件需要的pyyaml库</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置 Python 环境</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Set</span> <span class="string">up</span> <span class="string">Python</span> <span class="number">3.10</span></span><br><span class="line">  <span class="attr">uses:</span> <span class="string">actions/setup-python@v4</span></span><br><span class="line">  <span class="attr">with:</span></span><br><span class="line">    <span class="attr">python-version:</span> <span class="string">&#x27;3.10&#x27;</span>  <span class="comment"># 使用的 Python 版本，可以根据需求选择 3.x 或具体版本号</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 pip 依赖</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">pip</span> <span class="string">dependencies</span></span><br><span class="line">  <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">    python -m pip install --upgrade pip</span></span><br><span class="line"><span class="string">    pip install pyyaml</span></span><br></pre></td></tr></table></figure><p>然后再在push之前添加一个脚本调用就可以了。脚本提供的参数是目标yaml文件的路径。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 处理影视和书评评分的yaml文件</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Generate</span> <span class="string">rating.yml</span> <span class="string">from</span> <span class="string">raw</span> <span class="string">markdown</span></span><br><span class="line">  <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">    <span class="string">python</span> <span class="string">Data/python_scripts/gen_rating.py</span> <span class="string">HexoBlog/source/_data/rating.yml</span></span><br></pre></td></tr></table></figure><p>最终的完整action文件如下。这个yaml文件其他部分的内容的作用参考上面贴出来的博客。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Sync</span> <span class="string">CODE</span> <span class="string">to</span> <span class="string">_posts</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;Notes/CODE/**&#x27;</span>   <span class="comment"># 监听 CODE 文件夹内的文件变化</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">sync:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">steps:</span>      </span><br><span class="line">      <span class="comment"># 检出 Obsidian 仓库的代码</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">obsidian</span> <span class="string">repository</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v3</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># 设置 Python 环境</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Set</span> <span class="string">up</span> <span class="string">Python</span> <span class="number">3.10</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/setup-python@v4</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">python-version:</span> <span class="string">&#x27;3.10&#x27;</span>  <span class="comment"># 使用的 Python 版本，可以根据需求选择 3.x 或具体版本号</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># 安装 pip 依赖</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">pip</span> <span class="string">dependencies</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          python -m pip install --upgrade pip</span></span><br><span class="line"><span class="string">          pip install pyyaml</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">      <span class="comment"># 设置 Git 配置</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Set</span> <span class="string">up</span> <span class="string">Git</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">ACTIONS_KEY:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.HEXO_PRI_KEY</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          mkdir -p ~/.ssh/</span></span><br><span class="line"><span class="string">          echo &quot;$ACTIONS_KEY&quot; &gt; ~/.ssh/id_rsa</span></span><br><span class="line"><span class="string">          chmod 700 ~/.ssh</span></span><br><span class="line"><span class="string">          chmod 600 ~/.ssh/id_rsa</span></span><br><span class="line"><span class="string">          ssh-keyscan github.com &gt;&gt; ~/.ssh/known_hosts</span></span><br><span class="line"><span class="string">          git config --global user.name &quot;musnows&quot;</span></span><br><span class="line"><span class="string">          git config --global user.email &quot;ezplayingd@126.com&quot;</span></span><br><span class="line"><span class="string">          git config --global core.quotepath false</span></span><br><span class="line"><span class="string">          git config --global i18n.commitEncoding utf-8 </span></span><br><span class="line"><span class="string">          git config --global i18n.logOutputEncoding utf-8 </span></span><br><span class="line"><span class="string"></span></span><br><span class="line">      <span class="comment"># 克隆 HexoBlog 仓库（私密仓库），使用 ssh 来进行认证</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">HexoBlog</span> <span class="string">repository</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          git clone git@github.com:musnows/Hexo-Blog.git HexoBlog</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">      <span class="comment"># 同步文件：将 A 仓库中的 CODE 文件夹内容复制到 HexoBlog 仓库的 _posts 文件夹</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Sync</span> <span class="string">files</span> <span class="string">from</span> <span class="string">CODE</span> <span class="string">to</span> <span class="string">_posts</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          rsync -av --delete Notes/CODE/ HexoBlog/source/_posts/</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">      <span class="comment"># 处理影视和书评评分的yaml文件</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Generate</span> <span class="string">rating.yml</span> <span class="string">from</span> <span class="string">raw</span> <span class="string">markdown</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          python Data/python_scripts/gen_rating.py HexoBlog/source/_data/rating.yml</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">      <span class="comment"># 提交更改并推送到 HexoBlog 仓库</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Commit</span> <span class="string">and</span> <span class="string">push</span> <span class="string">changes</span> <span class="string">to</span> <span class="string">HexoBlog</span> <span class="string">repository</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          cd HexoBlog</span></span><br><span class="line"><span class="string">          git add .</span></span><br><span class="line"><span class="string">          git commit -m &quot;Sync CODE to _posts at $(TZ=&#x27;Asia/Shanghai&#x27; date &#x27;+%Y-%m-%d %H:%M:%S&#x27;)&quot;</span></span><br><span class="line"><span class="string">          git push origin hexo</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure><h3 id="3-4-测试Action"><a href="#3-4-测试Action" class="headerlink" title="3.4. 测试Action"></a>3.4. 测试Action</h3><p>将脚本和更新后的action文件push到远端，触发action之后，就能看到结果了，成功根据md文件里面的配置生成出了yaml文件。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/02/c477eecbddcbf372c3721ce93e3e4f6c.png" alt="image.png"></p>]]></content>
    
    
    <summary type="html">hexo-butterfly主题添加影评书评页面，并用action实现自动化更新</summary>
    
    
    
    <category term="差生文具多" scheme="https://blog.musnow.top/categories/%E5%B7%AE%E7%94%9F%E6%96%87%E5%85%B7%E5%A4%9A/"/>
    
    <category term="博客建站" scheme="https://blog.musnow.top/categories/%E5%B7%AE%E7%94%9F%E6%96%87%E5%85%B7%E5%A4%9A/%E5%8D%9A%E5%AE%A2%E5%BB%BA%E7%AB%99/"/>
    
    
    <category term="博客建站" scheme="https://blog.musnow.top/tags/%E5%8D%9A%E5%AE%A2%E5%BB%BA%E7%AB%99/"/>
    
    <category term="Hexo" scheme="https://blog.musnow.top/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>【SLAM】在 ubuntu 18.04 arm 中以ROS环境编译与运行ORB_SLAM3</title>
    <link href="https://blog.musnow.top/posts/5090585017/"/>
    <id>https://blog.musnow.top/posts/5090585017/</id>
    <published>2025-02-09T08:18:59.000Z</published>
    <updated>2025-03-03T01:51:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>在ubuntu18.04arm中于ROS环境编译与运行ORB_SLAM3，并以TUM和EuRoC数据集测试了ROS下单目、双目和RGB-D运行。</p><h2 id="1-引言"><a href="#1-引言" class="headerlink" title="1. 引言"></a>1. 引言</h2><p>在之前的博客中，已经介绍了<a href="https://blog.musnow.top/posts/7873538113/">基于虚拟机docker环境以及云端的AutoDL环境运行ORB_SLAM3</a>的步骤。</p><p>在实际场景中，SLAM通常是需要在机器人平台上运行的，ROS就是一个比较常见的机器人开发平台，在ROS环境中运行，可以方便我们的SLAM系统与其他机器人功能模块（比如导航和路径规划）进行通信，而且在ros node模式下运行的SLAM更适合<strong>多机通讯环境</strong>，比如实现多机器人协同建图、机器人和PC交互等等功能。</p><p>ORB_SLAM3在本地运行的基础上，提供了在ROS中运行的机制，本文简述了如何在ubuntu 18.04 arm环境中安装ROS环境、编译ORB_SLAM3 ROS版本，以及用现有的数据集模拟摄像头信号输入来使用ORB_SLAM3的全流程。</p><p>本文示例环境：ubuntu 22.04 arm虚拟机下启动的ubuntu18.04 docker容器。</p><h2 id="2-安装ROS环境"><a href="#2-安装ROS环境" class="headerlink" title="2. 安装ROS环境"></a>2. 安装ROS环境</h2><p>参考<a href="https://blog.musnow.top/posts/3771271576/">【Linux】在ubuntu18.04arm中安装ROS环境</a>一文进行安装，主要基于ROS官网的教程。</p><h2 id="3-编译ROS环境的ORB-SLAM3"><a href="#3-编译ROS环境的ORB-SLAM3" class="headerlink" title="3. 编译ROS环境的ORB_SLAM3"></a>3. 编译ROS环境的ORB_SLAM3</h2><p>本文撰写时<code>UZ-SLAMLab/ORB_SLAM3</code>的最新提交为2022年2月10日的<code>4452a3c4ab75b1cde34e5505a36ec3f9edcdc4c4</code>，后文的教程基于此提交点。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/02/335d01e00274144aad4d37adaace52ad.png" alt="image.png"></p><h3 id="3-1-编译命令"><a href="#3-1-编译命令" class="headerlink" title="3.1. 编译命令"></a>3.1. 编译命令</h3><h4 id="3-1-1-先编译普通版本"><a href="#3-1-1-先编译普通版本" class="headerlink" title="3.1.1. 先编译普通版本"></a>3.1.1. 先编译普通版本</h4><p>本文不赘述安装ORB_SLAM3依赖项的步骤，您可以参考<a href="https://blog.musnow.top/posts/1589125738/">【SLAM】于ubuntu18.04上纯CPU运行GCNv2_SLAM的记录（ARM64&#x2F;AMD64） | 慕雪的寒舍</a> 一文中的依赖项安装步骤。参考博客里面的步骤安装opencv、eigen3、Pangolin6.0就可以了，不需要安装libtorch。</p><p>其中需要注意的是，如果你需要编译ROS的ORB_SLAM3，<strong>opencv不能安装3.4.5版本，必须安装3.2.0版本</strong>！好消息是，如果你是跟随者本站或者ROS官网的教程安装的ROS，那么opencv 3.2.0版本已经和ROS一起安装在你的系统里面了。</p><blockquote><p>经过博主的尝试，原文中给出的OpenCV 3.4.5的编译安装方法同样可以用于3.2.0版本，只需要将下载链接中的版本号更换为3.2.0即可。</p></blockquote><p>安装完毕依赖后，先<strong>以普通模式编译ORB_SLAM3</strong>，因为ROS版本依赖于普通版本才能进行编译，这一点必须要注意。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/UZ-SLAMLab/ORB_SLAM3.git ORB_SLAM3</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> ORB_SLAM3</span><br><span class="line"><span class="built_in">chmod</span> +x build.sh</span><br><span class="line">./build.sh</span><br></pre></td></tr></table></figure><h4 id="3-1-2-修改build-ros-sh脚本"><a href="#3-1-2-修改build-ros-sh脚本" class="headerlink" title="3.1.2. 修改build_ros.sh脚本"></a>3.1.2. 修改build_ros.sh脚本</h4><p>编译完毕普通版本后，才可以执行<code>build_ros.sh</code>脚本。但是先别急，cat这个脚本，看看里面写了啥</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu-linux-22-04-02-desktop:/work/ORB_SLAM3# cat build_ros.sh </span><br><span class="line">echo &quot;Building ROS nodes&quot;</span><br><span class="line"></span><br><span class="line">cd Examples/ROS/ORB_SLAM3</span><br><span class="line">mkdir build</span><br><span class="line">cd build</span><br><span class="line">cmake .. -DROS_BUILD_TYPE=Release</span><br><span class="line">make -j</span><br></pre></td></tr></table></figure><p>其中第一个命令就有问题了，最新版本的ORB_SLAM3源码里面，Examples路径下已经没有ROS目录了，这个目录现在是<code>Examples_old/ROS/ORB_SLAM3</code>。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/02/bee0b045b18a1fe693aea1048fd22862.png" alt="image.png"></p><p>如果你没有注意这个问题就开始执行<code>build_ros.sh</code>脚本，问题就会出现，因为<code>Examples/ROS/ORB_SLAM3</code>目录当前不存在，该脚本实际上是直接在项目根目录下创建了build目录然后cmake开始编译的，编译的完全不是ROS版本。</p><p>这个脚本里面还有另外一个坑，那就是<code>make -j</code>后面没有写任何数字。这会导致make无休止地使用系统资源，直到把你的整个系统内存和swap都吃光光。根据我找到的博客，ORB_SLAM3的编译最多能吃掉16GB内存，完全是个洪水猛兽。</p><p>最开始我没有注意这个脚本，以为它没有任何问题，就直接执行了，最终在编译时遇到了如下错误。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">c++: internal compiler error: Killed (program cc1plus)</span><br><span class="line">Please submit a full bug report,</span><br><span class="line">with preprocessed source if appropriate.</span><br><span class="line">See &lt;file:///usr/share/doc/gcc-7/README.Bugs&gt; for instructions.</span><br></pre></td></tr></table></figure><p>这个错误就是因为系统没有资源了。开另外一个终端，再启动编译，你可以轻易地观察到编译是怎么把整个系统内存给吃光光的，最终物理内存和swap都没了，操作系统自然会kill掉编译进程，从而导致了上述报错。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/02/53a81ab5712af2c3f117d62f91fe5211.png" alt="image.png"></p><p>如果你直接搜索“ORB_SLAM3编译失败”等字样，可能会搜到相关教程让你加大swap文件，这是一个可选项，但还不够可选，因为在我的测试中，即便再给出2GB的swap文件，编译依旧会因为内存不足而失败。下面给出新增swap文件的命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">apt install util-linux</span><br><span class="line"><span class="comment"># 分配2G</span></span><br><span class="line">sudo fallocate -l 2G /swapfile</span><br><span class="line"><span class="comment"># 给予权限</span></span><br><span class="line">sudo <span class="built_in">chmod</span> 600 /swapfile</span><br><span class="line"><span class="comment"># 激活权限（执行了之后swap就生效了）</span></span><br><span class="line">sudo mkswap /swapfile</span><br><span class="line">sudo swapon /swapfile</span><br><span class="line"><span class="comment"># 不需要的时候，使用如下命令删除swap文件</span></span><br><span class="line">swapoff -v /swapfile</span><br><span class="line"><span class="built_in">rm</span> /swapfile</span><br></pre></td></tr></table></figure><p>实际上，在物理内存大于8GB的环境中不需要这么麻烦，前文提到了脚本里面make没有写线程数，解决办法就是修正这个脚本，首先是修正目录，其次是将make后面加上<code>-j4</code>来限制make使用的资源，这样就能绕过内存不足导致的编译错误了。修改后的脚本如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Building ROS nodes&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> Examples_old/ROS/ORB_SLAM3</span><br><span class="line"><span class="built_in">mkdir</span> build</span><br><span class="line"><span class="built_in">cd</span> build</span><br><span class="line">cmake .. -DROS_BUILD_TYPE=Release</span><br><span class="line">make -j4</span><br></pre></td></tr></table></figure><p>如果你的环境物理内存低于8GB，可以考虑在加大swap文件的同时进一步减少make使用的线程数，比如<code>make -j2</code>。</p><h4 id="3-1-3-编译ROS版本"><a href="#3-1-3-编译ROS版本" class="headerlink" title="3.1.3. 编译ROS版本"></a>3.1.3. 编译ROS版本</h4><p>修正了build_ros.sh脚本之后，就可以开始编译ROS版本了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> +x build_ros.sh</span><br><span class="line">./build_ros.sh</span><br></pre></td></tr></table></figure><p>再次提醒，ROS版本的编译依赖于普通版本，需要先编译普通版本！</p><h3 id="3-2-编译期间遇到的各种问题"><a href="#3-2-编译期间遇到的各种问题" class="headerlink" title="3.2. 编译期间遇到的各种问题"></a>3.2. 编译期间遇到的各种问题</h3><p>部分问题参考：<a href="https://blog.csdn.net/shikaiaixuexi/article/details/143749912">记录配置ubuntu18.04下运行ORBSLAM3的ros接口的过程及执行单目imu模式遇到的问题</a></p><h4 id="3-2-1-cmake错误ROS-PACKAGE-PATH"><a href="#3-2-1-cmake错误ROS-PACKAGE-PATH" class="headerlink" title="3.2.1. cmake错误ROS_PACKAGE_PATH"></a>3.2.1. cmake错误ROS_PACKAGE_PATH</h4><p>遇到的第一个错误应该是环境变量有关，编译ros版本的时候，需要将源码路径加入到环境变量中，才可以正常编译。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">CMake Error at /opt/ros/melodic/share/ros/core/rosbuild/private.cmake:99 (message):</span><br><span class="line">  [rosbuild] rospack found package &quot;ORB_SLAM3&quot; at &quot;&quot;, but the current</span><br><span class="line">  directory is &quot;/work/ORB_SLAM3/Examples_old/ROS/ORB_SLAM3&quot;.  You should</span><br><span class="line">  double-check your ROS_PACKAGE_PATH to ensure that packages are found in the</span><br><span class="line">  correct precedence order.</span><br><span class="line">Call Stack (most recent call first):</span><br><span class="line">  /opt/ros/melodic/share/ros/core/rosbuild/public.cmake:177 (_rosbuild_check_package_location)</span><br><span class="line">  CMakeLists.txt:4 (rosbuild_init)</span><br></pre></td></tr></table></figure><p>在ORB_SLAM3项目根目录下执行如下命令即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> ROS_PACKAGE_PATH=<span class="variable">$ROS_PACKAGE_PATH</span>:<span class="variable">$PWD</span>/Examples_old/ROS/ORB_SLAM3</span><br></pre></td></tr></table></figure><p>修正之后即可正常开始编译。注意后续执行rosrun的bash也需要执行此命令，建议直接将其写入<code>~/.bashrc</code>中!</p><h4 id="3-2-2-头文件se3-hpp找不到"><a href="#3-2-2-头文件se3-hpp找不到" class="headerlink" title="3.2.2. 头文件se3.hpp找不到"></a>3.2.2. 头文件se3.hpp找不到</h4><p>编译到30%的时候，会提示<code>&lt;sophus/se3.hpp&gt;</code>头文件找不到</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[ 30%] Building CXX object CMakeFiles/Mono_Inertial.dir/src/ros_mono_inertial.cc.o</span><br><span class="line">In file included from /work/ORB_SLAM3/Examples_old/ROS/ORB_SLAM3/../../../include/Frame.h:30:0,</span><br><span class="line">                 from /work/ORB_SLAM3/Examples_old/ROS/ORB_SLAM3/../../../include/KeyFrame.h:28,</span><br><span class="line">                 from /work/ORB_SLAM3/Examples_old/ROS/ORB_SLAM3/../../../include/MapPoint.h:23,</span><br><span class="line">                 from /work/ORB_SLAM3/Examples_old/ROS/ORB_SLAM3/../../../include/FrameDrawer.h:24,</span><br><span class="line">                 from /work/ORB_SLAM3/Examples_old/ROS/ORB_SLAM3/../../../include/Viewer.h:23,</span><br><span class="line">                 from /work/ORB_SLAM3/Examples_old/ROS/ORB_SLAM3/../../../include/Tracking.h:26,</span><br><span class="line">                 from /work/ORB_SLAM3/Examples_old/ROS/ORB_SLAM3/../../../include/System.h:31,</span><br><span class="line">                 from /work/ORB_SLAM3/Examples_old/ROS/ORB_SLAM3/src/ros_mono_inertial.cc:34:</span><br><span class="line">/work/ORB_SLAM3/Examples_old/ROS/ORB_SLAM3/../../../include/ImuTypes.h:29:10: fatal error: sophus/se3.hpp: No such file or directory</span><br><span class="line"> #include &lt;sophus/se3.hpp&gt;</span><br><span class="line">          ^~~~~~~~~~~~~~~~****</span><br></pre></td></tr></table></figure><p>这个第三方库sophus已经在Thirdparty文件夹里面自带了，刚刚我们编译普通版本的时候，其实也已经编译好了这个第三方库了。要做的就是进它的目录make install安装一下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> Thirdparty/Sophus/build/</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><p>安装以后就解决这个问题了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu-linux-22-04-02-desktop:/work/ORB_SLAM3# cd Thirdparty/Sophus/build/</span><br><span class="line">root@ubuntu-linux-22-04-02-desktop:/work/ORB_SLAM3/Thirdparty/Sophus/build# make install</span><br><span class="line">[  8%] Built target test_sim2</span><br><span class="line">[ 16%] Built target test_se2</span><br><span class="line">[ 25%] Built target test_so3</span><br><span class="line">[ 33%] Built target test_rxso2</span><br><span class="line">[ 41%] Built target test_so2</span><br><span class="line">[ 50%] Built target test_se3</span><br><span class="line">[ 58%] Built target test_geometry</span><br><span class="line">[ 66%] Built target test_rxso3</span><br><span class="line">[ 75%] Built target test_sim3</span><br><span class="line">[ 83%] Built target test_velocities</span><br><span class="line">[ 91%] Built target test_common</span><br><span class="line">[100%] Built target HelloSO3</span><br><span class="line">Install the project...</span><br><span class="line">-- Install configuration: &quot;Release&quot;</span><br><span class="line">-- Installing: /usr/local/share/sophus/cmake/SophusTargets.cmake</span><br><span class="line">-- Installing: /usr/local/share/sophus/cmake/SophusConfig.cmake</span><br><span class="line">-- Installing: /usr/local/share/sophus/cmake/SophusConfigVersion.cmake</span><br><span class="line">-- Installing: /usr/local/include/sophus/average.hpp</span><br><span class="line">-- Installing: /usr/local/include/sophus/common.hpp</span><br><span class="line">-- Installing: /usr/local/include/sophus/geometry.hpp</span><br><span class="line">-- Installing: /usr/local/include/sophus/interpolate.hpp</span><br><span class="line">-- Installing: /usr/local/include/sophus/interpolate_details.hpp</span><br><span class="line">-- Installing: /usr/local/include/sophus/num_diff.hpp</span><br><span class="line">-- Installing: /usr/local/include/sophus/rotation_matrix.hpp</span><br><span class="line">-- Installing: /usr/local/include/sophus/rxso2.hpp</span><br><span class="line">-- Installing: /usr/local/include/sophus/rxso3.hpp</span><br><span class="line">-- Installing: /usr/local/include/sophus/se2.hpp</span><br><span class="line">-- Installing: /usr/local/include/sophus/se3.hpp</span><br><span class="line">-- Installing: /usr/local/include/sophus/sim2.hpp</span><br><span class="line">-- Installing: /usr/local/include/sophus/sim3.hpp</span><br><span class="line">-- Installing: /usr/local/include/sophus/sim_details.hpp</span><br><span class="line">-- Installing: /usr/local/include/sophus/so2.hpp</span><br><span class="line">-- Installing: /usr/local/include/sophus/so3.hpp</span><br><span class="line">-- Installing: /usr/local/include/sophus/types.hpp</span><br><span class="line">-- Installing: /usr/local/include/sophus/velocities.hpp</span><br><span class="line">-- Installing: /usr/local/include/sophus/formatstring.hpp</span><br></pre></td></tr></table></figure><h4 id="3-2-3-OpenCV-版本不匹配"><a href="#3-2-3-OpenCV-版本不匹配" class="headerlink" title="3.2.3. OpenCV 版本不匹配"></a>3.2.3. OpenCV 版本不匹配</h4><p>前文提到过，OpenCV必须安装 3.2.0 版本，是因为cv_bridge默认会指向ROS自带的3.2.0版本，而不是我们自己安装的其他版本，最终编译或者运行的时候就会导致链接错误或者coredump错误。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/ld: warning: libopencv_core.so.3.2, needed by /opt/ros/melodic/lib/libcv_bridge.so, may conflict with libopencv_core.so.3.4</span><br></pre></td></tr></table></figure><p>如果你已经安装了其他版本的opencv，需要删掉它们。从源码安装的话，直接进入opencv源码的build目录执行<code>make uninstall</code>就可以卸载掉自己安装的opencv。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/02/b1905e7093dcb9ee085ce7f23784385b.png" alt="image.png"></p><p>删掉了之后就会发现系统里面只剩下和ros一起安装的3.2.0版本opencv了，应该是下载ros环境的时候自动安装的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu-linux-22-04-02-desktop:/work/ORB_SLAM3# pkg-config --modversion opencv</span><br><span class="line">3.2.0</span><br></pre></td></tr></table></figure><p>随后我们需要修改CMakeLists文件，让编译的时候使用opencv 3.2.0版本。首先是根目录下的CMakeLists，修改如下部分的版本号为3.2即可</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ORB_SLAM3/CMakeLists.txt</span></span><br><span class="line"><span class="keyword">find_package</span>(OpenCV <span class="number">3.2</span>)</span><br><span class="line">   <span class="keyword">if</span>(<span class="keyword">NOT</span> OpenCV_FOUND)</span><br><span class="line">      <span class="keyword">message</span>(FATAL_ERROR <span class="string">&quot;OpenCV &gt; 3.2 not found.&quot;</span>)</span><br><span class="line">   <span class="keyword">endif</span>()</span><br></pre></td></tr></table></figure><p>然后是<code>Examples_old/ROS/ORB_SLAM3</code>里面的CMakeLists文件，修改如下部分为3.2.0版本</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ORB_SLAM3/Examples_old/ROS/ORB_SLAM3/CMakeLists.txt</span></span><br><span class="line"><span class="keyword">find_package</span>(OpenCV <span class="number">3.2</span>.<span class="number">0</span> QUIET) <span class="comment"># 修改为3.2.0</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">NOT</span> OpenCV_FOUND)</span><br><span class="line">   <span class="keyword">find_package</span>(OpenCV <span class="number">2.4</span>.<span class="number">3</span> QUIET)</span><br><span class="line">   <span class="keyword">if</span>(<span class="keyword">NOT</span> OpenCV_FOUND)</span><br><span class="line">      <span class="keyword">message</span>(FATAL_ERROR <span class="string">&quot;OpenCV &gt; 2.4.3 not found.&quot;</span>)</span><br><span class="line">   <span class="keyword">endif</span>()</span><br><span class="line"><span class="keyword">endif</span>()</span><br></pre></td></tr></table></figure><p>接下来就要删除所有编译缓存，重新编译一遍。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">rm -rf Thirdparty/g2o/build/</span><br><span class="line">rm -rf Thirdparty/DBoW2/build/</span><br><span class="line">rm -rf Thirdparty/Sophus/build/</span><br><span class="line">rm -rf Vocabulary/*.bin</span><br><span class="line">rm -rf ./build</span><br><span class="line">rm -rf Examples_old/ROS/ORB_SLAM3/build</span><br></pre></td></tr></table></figure><p><strong>注意ORB_SLAM3的普通版本也需要重新编译</strong>！因为最开始编译的时候我的普通版本是基于opecv 3.4.5编译的，如果不重新基于opencv 3.2.0编译普通版本，编译ROS的时候就会提示<code>libORB_SLAM3.so</code>需要3.4.5版本的opencv才能正常链接，终究还是版本对不上。</p><hr><p>另外，我们从源码使用cmake构建安装的opencv 3.2.0一般设置的安装目录都会和ROS自带的目录不同，比如cmake构建的安装目录是<code>/usr/local/lib</code>，ROS安装的目录是<code>/usr/lib/aarch64-linux-gnu</code>。所以cmake构建的时候会出现多个如下关于opencv的warning，可以不用管，不会影响程序编译和运行，因为它们都是opencv 3.2.0版本。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">runtime library [libopencv_core.so.3.2] in /usr/lib/aarch64-linux-gnu may be hidden by files in:</span><br><span class="line">  /usr/local/lib</span><br></pre></td></tr></table></figure><p>当然，你也可以选择直接使用ROS携带的opencv 3.2.0，不自己重新编译安装一个版本了（其实也不需要）。</p><h4 id="3-2-4-AR代码错误（四处）"><a href="#3-2-4-AR代码错误（四处）" class="headerlink" title="3.2.4. AR代码错误（四处）"></a>3.2.4. AR代码错误（四处）</h4><p>修复了opencv版本问题后，接下来就会遇到一堆由于<code>Examples_old/ROS/ORB_SLAM3/src/AR</code>路径下的代码问题导致的错误。如果你不需要使用MonoAR也就是<strong>单目AR</strong>功能，可以直接<strong>注释掉</strong>CMakeLists文件里面71行的如下部分，跳过AR代码的编译。</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ORB_SLAM3/Examples_old/ROS/ORB_SLAM3/CMakeLists.txt</span></span><br><span class="line"><span class="comment"># Node for monocular camera (Augmented Reality Demo)</span></span><br><span class="line">rosbuild_add_executable(MonoAR</span><br><span class="line"> src/AR/ros_mono_ar.cc</span><br><span class="line"> src/AR/ViewerAR.h</span><br><span class="line"> src/AR/ViewerAR.cc</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">target_link_libraries</span>(MonoAR</span><br><span class="line"> <span class="variable">$&#123;LIBS&#125;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>注释掉之后，应该就可以成功编译其他部分了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[rosbuild] Including /opt/ros/melodic/share/roslisp/rosbuild/roslisp.cmake</span><br><span class="line">[rosbuild] Including /opt/ros/melodic/share/roscpp/rosbuild/roscpp.cmake</span><br><span class="line">[rosbuild] Including /opt/ros/melodic/share/rospy/rosbuild/rospy.cmake</span><br><span class="line">Build type: Release</span><br><span class="line">-- Using flag -std=c++11.</span><br><span class="line">-- Configuring done</span><br><span class="line">-- Generating done</span><br><span class="line">-- Build files have been written to: /work/ORB_SLAM3/Examples_old/ROS/ORB_SLAM3/build</span><br><span class="line">[  0%] Built target rospack_genmsg_libexe</span><br><span class="line">[  0%] Built target rosbuild_precompile</span><br><span class="line">[ 40%] Built target RGBD</span><br><span class="line">[ 40%] Built target Stereo</span><br><span class="line">[ 80%] Built target Mono_Inertial</span><br><span class="line">[ 80%] Built target Stereo_Inertial</span><br><span class="line">[100%] Built target Mono</span><br></pre></td></tr></table></figure><p>如果你需要MonoAR，<strong>就需要上手改代码了</strong>。参考<a href="https://github.com/UZ-SLAMLab/ORB_SLAM3/issues/442">github.com&#x2F;UZ-SLAMLab&#x2F;ORB_SLAM3&#x2F;issues&#x2F;442</a>，依次修复问题。</p><p>这部分修改很杂，你可以直接根据我的提交记录来修改：<a href="https://github.com/musnows/ORB_SLAM3/commit/4e1cbdb5b9d18e0b9eb0f07ad70595d3f274200f">Fix compile error of ROS AR, used opencv 3.2.0 for ROS compile. · musnows&#x2F;ORB_SLAM3@4e1cbdb · GitHub</a></p><hr><p>1）类型<code>Sophus::SE3&lt;float&gt;</code>和<code>cv::Mat</code>不匹配</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/work/ORB_SLAM3/Examples_old/ROS/ORB_SLAM3/src/AR/ros_mono_ar.cc: In member function &#x27;void ImageGrabber::GrabImage(const ImageConstPtr&amp;)&#x27;:</span><br><span class="line">/work/ORB_SLAM3/Examples_old/ROS/ORB_SLAM3/src/AR/ros_mono_ar.cc:151:41: error: conversion from &#x27;Sophus::SE3f &#123;aka Sophus::SE3&lt;float&gt;&#125;&#x27; to non-scalar type &#x27;cv::Mat&#x27; requested</span><br><span class="line">     cv::Mat Tcw = mpSLAM-&gt;TrackMonocular(cv_ptr-&gt;image,cv_ptr-&gt;header.stamp.toSec());</span><br><span class="line">                   ~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br><span class="line">CMakeFiles/MonoAR.dir/build.make:198: recipe for target &#x27;CMakeFiles/MonoAR.dir/src/AR/ViewerAR.cc.o&#x27; failed</span><br></pre></td></tr></table></figure><p>修改<code>ORB_SLAM3/Examples_old/ROS/ORB_SLAM3/src/AR/ros_mono_ar.cc</code>的151行，被注释掉的是源代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// cv::Mat Tcw = mpSLAM-&gt;TrackMonocular(cv_ptr-&gt;image,cv_ptr-&gt;header.stamp.toSec());</span></span><br><span class="line">cv::Mat Tcw;</span><br><span class="line">Sophus::SE3f Tcw_SE3f = mpSLAM-&gt;<span class="built_in">TrackMonocular</span>(cv_ptr-&gt;image,cv_ptr-&gt;header.stamp.<span class="built_in">toSec</span>());</span><br><span class="line">Eigen::Matrix4f Tcw_Matrix = Tcw_SE3f.<span class="built_in">matrix</span>();</span><br><span class="line">cv::<span class="built_in">eigen2cv</span>(Tcw_Matrix, Tcw);</span><br></pre></td></tr></table></figure><p>2）<code>&#39;eigen2cv&#39; is not a member of &#39;cv&#39;</code> 错误</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/work/ORB_SLAM3/Examples_old/ROS/ORB_SLAM3/src/AR/ros_mono_ar.cc:155:9: error: &#x27;eigen2cv&#x27; is not a member of &#x27;cv&#x27;</span><br><span class="line">     cv::eigen2cv(Tcw_Matrix, Tcw);</span><br><span class="line">         ^~~~~~~~</span><br><span class="line">/work/ORB_SLAM3/Examples_old/ROS/ORB_SLAM3/src/AR/ros_mono_ar.cc:155:9: note: suggested alternative: &#x27;eigen&#x27;</span><br><span class="line">     cv::eigen2cv(Tcw_Matrix, Tcw);</span><br><span class="line">         ^~~~~~~~</span><br><span class="line">         eigen</span><br></pre></td></tr></table></figure><p>在<code>ORB_SLAM3/Examples_old/ROS/ORB_SLAM3/src/AR/ros_mono_ar.cc</code>和<code>ORB_SLAM3/Examples_old/ROS/ORB_SLAM3/src/AR/ViewerAR.h</code>顶部添加三个头文件</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Eigen/Dense&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;opencv2/core/eigen.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;opencv2/opencv.hpp&gt;</span></span></span><br></pre></td></tr></table></figure><p>3）类型<code>Eigen::Matrix&lt;float, 3, 1&gt;</code>和<code>cv::Mat</code>不匹配</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/work/ORB_SLAM3/Examples_old/ROS/ORB_SLAM3/src/AR/ViewerAR.cc: In member function &#x27;void ORB_SLAM3::Plane::Recompute()&#x27;:</span><br><span class="line">/work/ORB_SLAM3/Examples_old/ROS/ORB_SLAM3/src/AR/ViewerAR.cc:530:42: error: conversion from &#x27;Eigen::Vector3f &#123;aka Eigen::Matrix&lt;float, 3, 1&gt;&#125;&#x27; to non-scalar type &#x27;cv::Mat&#x27; requested</span><br><span class="line">             cv::Mat Xw = pMP-&gt;GetWorldPos();</span><br><span class="line">                          ~~~~~~~~~~~~~~~~^~</span><br></pre></td></tr></table></figure><p>修改<code>ORB_SLAM3/Examples_old/ROS/ORB_SLAM3/src/AR/ViewerAR.cc:530</code>处代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// cv::Mat Xw = pMP-&gt;GetWorldPos();</span></span><br><span class="line">cv::Mat Xw;</span><br><span class="line">cv::<span class="built_in">eigen2cv</span>(pMP-&gt;<span class="built_in">GetWorldPos</span>(), Xw);</span><br></pre></td></tr></table></figure><p>4）尾插错误 <code>no matching function for call to &#39;std::vector&lt;cv::Mat&gt;::push_back(Eigen::Vector3f)&#39;</code></p><p>这个问题也是类型不匹配</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/work/ORB_SLAM3/Examples_old/ROS/ORB_SLAM3/src/AR/ViewerAR.cc: In member function &#x27;ORB_SLAM3::Plane* ORB_SLAM3::ViewerAR::DetectPlane(cv::Mat, const std::vector&lt;ORB_SLAM3::MapPoint*&gt;&amp;, int)&#x27;:</span><br><span class="line">/work/ORB_SLAM3/Examples_old/ROS/ORB_SLAM3/src/AR/ViewerAR.cc:405:53: error: no matching function for call to &#x27;std::vector&lt;cv::Mat&gt;::push_back(Eigen::Vector3f)&#x27;</span><br><span class="line">                 vPoints.push_back(pMP-&gt;GetWorldPos());</span><br><span class="line">                                                     ^</span><br></pre></td></tr></table></figure><p>修改<code>ORB_SLAM3/Examples_old/ROS/ORB_SLAM3/src/AR/ViewerAR.cc:405</code>的代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vPoints.push_back(pMP-&gt;GetWorldPos());</span></span><br><span class="line">cv::Mat WorldPos;</span><br><span class="line">cv::<span class="built_in">eigen2cv</span>(pMP-&gt;<span class="built_in">GetWorldPos</span>(), WorldPos);</span><br><span class="line">vPoints.<span class="built_in">push_back</span>(WorldPos);</span><br></pre></td></tr></table></figure><h3 id="3-3-成功编译"><a href="#3-3-成功编译" class="headerlink" title="3.3. 成功编译"></a>3.3. 成功编译</h3><p>修改完毕上述四个问题后，就应该可以编译成功了。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/02/ecf71dac31b76332a3415d6ea13211a2.png" alt="image.png"></p><p>编译完成后会多出很多可执行文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu-linux-22-04-02-desktop:/work/ORB_SLAM3/Examples_old/ROS/ORB_SLAM3# ls</span><br><span class="line">Asus.yaml  CMakeLists.txt  Mono  MonoAR  Mono_Inertial  RGBD  Stereo  Stereo_Inertial  build  lib  manifest.xml  src</span><br></pre></td></tr></table></figure><p>注意这些可执行文件是不能直接运行的，因为它们是针对ROS设计的文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu-linux-22-04-02-desktop:/work/ORB_SLAM3/Examples_old/ROS/ORB_SLAM3# ./Mono</span><br><span class="line">[ERROR] [1739083807.698375008]: [registerPublisher] Failed to contact master at [localhost:11311].  Retrying...</span><br><span class="line">^C</span><br><span class="line">Usage: rosrun ORB_SLAM3 Mono path_to_vocabulary path_to_settings</span><br></pre></td></tr></table></figure><h2 id="4-在ROS下运行项目"><a href="#4-在ROS下运行项目" class="headerlink" title="4. 在ROS下运行项目"></a>4. 在ROS下运行项目</h2><p>参考博客：<a href="https://zhaoxuhui.top/blog/2020/09/30/orb-slam3-cmake-ros-compilation-and-test.html">ORB-SLAM3的CMake与ROS编译以及测试</a>；<a href="https://www.jianshu.com/p/31c95d9a5f97">ORB SLAM 2 demo 复现（普通模式 + ROS 模式） - 简书</a>；</p><h3 id="4-1-下载TUM和EuRoC数据集"><a href="#4-1-下载TUM和EuRoC数据集" class="headerlink" title="4.1. 下载TUM和EuRoC数据集"></a>4.1. 下载TUM和EuRoC数据集</h3><p>因为是在ROS环境下运行，所以数据集不能用之前下载的tgz格式的了，必须使用ROS专门的bag格式的数据集。</p><ul><li>TUM RGB-D数据集：<a href="https://cvg.cit.tum.de/data/datasets/rgbd-dataset/download">cvg.cit.tum.de&#x2F;data&#x2F;datasets&#x2F;rgbd-dataset&#x2F;download</a>；</li><li>EuRoC双目数据集：<a href="http://robotics.ethz.ch/~asl-datasets/ijrr_euroc_mav_dataset/machine_hall/MH_01_easy/MH_01_easy.bag">robotics.ethz.ch&#x2F;~asl-datasets&#x2F;ijrr_euroc_mav_dataset&#x2F;machine_ha…</a></li></ul><p>在TUM数据集的下载页面中，往下滑可以看到每个数据集的简单介绍，这里就能下载到bag格式的数据集。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/02/2ec14dc5b2954aba91c9d2b437da6038.png" alt="image.png"></p><p>比如<code>fr1/desk</code>对应的rosbag文件的下载链接：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://cvg.cit.tum.de/rgbd/dataset/freiburg1/rgbd_dataset_freiburg1_desk.bag</span><br></pre></td></tr></table></figure><p>下载完毕后，可以使用rosbag info命令查看数据集中有的topic信息：</p><ul><li>Topic是一个命名的通信管道，用于在不同的ROS节点之间传递信息；</li><li>每个Topic都有一个唯一的名称，节点可以通过这个名称来订阅这个topic的信息；</li><li>Topic中的数据以message的格式传输，message是ROS中定义好的数据结构，如 <code>sensor_msgs/Image</code>、<code>geometry_msgs/Pose</code> 等；</li></ul><p>举个例子，<code>fr1/desk</code>数据集的Topic信息如下，其中depth就是深度数据，rgb就是普通的彩色录像数据。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu-linux-22-04-02-desktop:/work/ORB_SLAM3# rosbag info datasets/TUM/rgbd_dataset_freiburg1_desk.bag</span><br><span class="line">path:         datasets/TUM/rgbd_dataset_freiburg1_desk.bag</span><br><span class="line">version:      2.0</span><br><span class="line">duration:     23.8s</span><br><span class="line">start:        May 10 2011 20:44:09.56 (1305031449.56)</span><br><span class="line">end:          May 10 2011 20:44:33.32 (1305031473.32)</span><br><span class="line">size:         371.7 MB</span><br><span class="line">messages:     19893</span><br><span class="line">compression:  bz2 [1210/1210 chunks; 29.85%]</span><br><span class="line">uncompressed:   1.2 GB @ 52.3 MB/s</span><br><span class="line">compressed:   370.9 MB @ 15.6 MB/s (29.85%)</span><br><span class="line">types:        sensor_msgs/CameraInfo         [c9a58c1b0b154e0e6da7578cb991d214]</span><br><span class="line">              sensor_msgs/Image              [060021388200f6f0f447d0fcd9c64743]</span><br><span class="line">              sensor_msgs/Imu                [6a62c6daae103f4ff57a132d6f95cec2]</span><br><span class="line">              tf/tfMessage                   [94810edda583a504dfda3829e70d7eec]</span><br><span class="line">              visualization_msgs/MarkerArray [f10fe193d6fac1bf68fad5d31da421a7]</span><br><span class="line">topics:       /camera/depth/camera_info     595 msgs    : sensor_msgs/CameraInfo        </span><br><span class="line">              /camera/depth/image           595 msgs    : sensor_msgs/Image             </span><br><span class="line">              /camera/rgb/camera_info       613 msgs    : sensor_msgs/CameraInfo        </span><br><span class="line">              /camera/rgb/image_color       613 msgs    : sensor_msgs/Image             </span><br><span class="line">              /cortex_marker_array         2360 msgs    : visualization_msgs/MarkerArray</span><br><span class="line">              /imu                        11815 msgs    : sensor_msgs/Imu               </span><br><span class="line">              /tf                          3302 msgs    : tf/tfMessage</span><br></pre></td></tr></table></figure><p>而给出的EuRoC双目数据集的Topic如下，有两个cam就对应了左侧和右侧的两个相机。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu-linux-22-04-02-desktop:/work/ORB_SLAM3/datasets# rosbag info MH_01_easy.bag </span><br><span class="line">path:        MH_01_easy.bag</span><br><span class="line">version:     2.0</span><br><span class="line">duration:    3:06s (186s)</span><br><span class="line">start:       Jun 25 2014 03:02:59.81 (1403636579.81)</span><br><span class="line">end:         Jun 25 2014 03:06:06.70 (1403636766.70)</span><br><span class="line">size:        2.5 GB</span><br><span class="line">messages:    47283</span><br><span class="line">compression: none [2456/2456 chunks]</span><br><span class="line">types:       geometry_msgs/PointStamped [c63aecb41bfdfd6b7e1fac37c7cbe7bf]</span><br><span class="line">             sensor_msgs/Image          [060021388200f6f0f447d0fcd9c64743]</span><br><span class="line">             sensor_msgs/Imu            [6a62c6daae103f4ff57a132d6f95cec2]</span><br><span class="line">topics:      /cam0/image_raw    3682 msgs    : sensor_msgs/Image         </span><br><span class="line">             /cam1/image_raw    3682 msgs    : sensor_msgs/Image         </span><br><span class="line">             /imu0             36820 msgs    : sensor_msgs/Imu           </span><br><span class="line">             /leica/position    3099 msgs    : geometry_msgs/PointStamped</span><br></pre></td></tr></table></figure><p>假设我们使用自己的摄像头的话，也是利用ROS的工具将我们摄像头的数据输入到一个Topic中，这样就可以供系统的其他组件，比如SLAM系统来读取，以此实现在ROS系统上硬件输入和软件的读取。这便是使用ROS模式和普通模式的最大区别，普通模式下我们必须要直接提供程序的数据输入源，才能让程序运行起来；而ROS模式下我们可以先把整个SLAM系统启动起来，再通过我们想要的方式往SLAM系统订阅的Topic里面喂数据即可。</p><h3 id="4-2-单目运行"><a href="#4-2-单目运行" class="headerlink" title="4.2. 单目运行"></a>4.2. 单目运行</h3><p>刚刚我们下载的TUM fr1/desk的数据集，即可以用作RGB-D模式的输入，又可以做单目摄像头的输入，因为深度数据是独立于RGB单目数据的。</p><p>刚刚我们直接运行Mono的时候，就打印出了一个Usage</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu-linux-22-04-02-desktop:/work/ORB_SLAM3/Examples_old/ROS/ORB_SLAM3# ./Mono</span><br><span class="line">[ERROR] [1739083807.698375008]: [registerPublisher] Failed to contact master at [localhost:11311].  Retrying...</span><br><span class="line">^C</span><br><span class="line">Usage: rosrun ORB_SLAM3 Mono path_to_vocabulary path_to_settings</span><br></pre></td></tr></table></figure><p>我们要使用的就是这个命令，rosrun代表启动一个节点，<code>ORB_SLAM3</code>是我们当前使用的包名称，也就是CMakeLists里面注册的项目名称，Mono是我们要执行的可执行文件名称。后面的两个参数分别是词袋文件和相机的配置文件。</p><p>最终执行的命令如下，需要在两个终端中执行（在项目根目录执行）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打开终端A</span></span><br><span class="line">roscore</span><br><span class="line"><span class="comment"># 打开终端B</span></span><br><span class="line">rosrun ORB_SLAM3 Mono Vocabulary/ORBvoc.txt Examples_old/Monocular/TUM1.yaml</span><br></pre></td></tr></table></figure><p>如果执行rosrun的时候提示ORB_SLAM3找不到，则需要执行如下命令（前文提到过）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> ROS_PACKAGE_PATH=<span class="variable">$ROS_PACKAGE_PATH</span>:<span class="variable">$PWD</span>/Examples_old/ROS/ORB_SLAM3</span><br></pre></td></tr></table></figure><p>执行了之后，就会启动ORB_SLAM3的Map Viewer，此时是黑屏的，因为么有任何数据被送到ORB_SLAM3订阅的Topic中。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/02/3fb20983c6b8e63056fa3ab9f7dc80a0.png" alt="image.png"></p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/02/6f1ba02f88e3314c3040368b1af6aec9.png" alt="image.png"></p><p>再新建一个终端，执行如下命令，将TUM数据集bag文件里面的Topic绑定到ORB_SLAM3订阅的Topic上，这样就能获取到数据了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rosbag play \</span><br><span class="line">    datasets/TUM/rgbd_dataset_freiburg1_desk.bag \</span><br><span class="line">    /camera/rgb/image_color:=/camera/image_raw</span><br></pre></td></tr></table></figure><p>其中，最后一个参数<code>/camera/rgb/image_color:=/camera/image_raw</code>指代将bag文件中的<code>/camera/rgb/image_color</code>绑定到<code>/camera/image_raw</code>上，后者就是ORB_SLAM3订阅的相机原始数据的Topic，相当于将bag中已有的图像数据重新喂给了我们的SLAM系统。</p><p>因为ROS的Topic机制，这种喂进去的数据集和接一个摄像头得到的实时数据，对于订阅这个Topic的SLAM系统而言是完全一样的！</p><p>执行这个命令后，就能在GUI里面看到相机的数据流和SLAM的建图了</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/02/713bc539193427764c593312fd392a8e.png" alt="image.png"></p><h3 id="4-3-RGB-D运行"><a href="#4-3-RGB-D运行" class="headerlink" title="4.3. RGB-D运行"></a>4.3. RGB-D运行</h3><p>RGB-D相机也是使用相同的命令来执行，先在另外一个终端执行roscore，然后执行如下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rosrun ORB_SLAM3 RGBD Vocabulary/ORBvoc.txt Examples_old/RGB-D/TUM1.yaml</span><br></pre></td></tr></table></figure><p>刚启动的时候也是黑屏</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/02/6f1ba02f88e3314c3040368b1af6aec9.png" alt="image.png"></p><p>再开另外一个终端，开始喂我们的数据集，这里用了两个<code>:=</code>号，分别绑定了原始的RGB相机数据到<code>/camera/rgb/image_raw </code>，绑定了深度数据到<code>/camera/depth_registered/image_raw</code>上</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rosbag play \</span><br><span class="line">    datasets/TUM/rgbd_dataset_freiburg1_desk.bag \</span><br><span class="line">    /camera/rgb/image_color:=/camera/rgb/image_raw \</span><br><span class="line">    /camera/depth/image:=/camera/depth_registered/image_raw</span><br></pre></td></tr></table></figure><p>随后GUI里面也开始显示图像了</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/02/e5a78bd10e4b6514f7ed63f02ce7dacd.png" alt="image.png"></p><p>等运行结束后，会发现此时SLAM的建图结果是不对的，所有的点都在很小的一块区域中</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/02/51dc1236b065fbedcde4273dbea37972.png" alt="image.png"></p><p>作为对比，下图为本地虚拟机在普通模式下运行时的RGB-D建图结果，很明显和上图完全不一样。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/02/fb081dc6226497056b3613b2220e9aa9.png" alt="image.png"></p><p>这是因为<code>Examples_old/RGB-D/TUM1.yaml</code>数据配置有问题。在TUM官网上提到了这两个数据集在ROS和非ROS中是不一样的，实际上这个文件里面也有注释</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deptmap values factor </span></span><br><span class="line"><span class="attr">DepthMapFactor:</span> <span class="number">5000</span> <span class="comment"># 1.0 for ROS_bag</span></span><br></pre></td></tr></table></figure><p>官网说明：<a href="https://cvg.cit.tum.de/data/datasets/rgbd-dataset/file_formats#intrinsic_camera_calibration_of_the_kinect">cvg.cit.tum.de&#x2F;data&#x2F;datasets&#x2F;rgbd-dataset&#x2F;file_formats#intrinsic…</a></p><blockquote><p><strong>Color images and depth maps</strong></p><p>We provide the time-stamped color and depth images as a gzipped tar file (TGZ).</p><ul><li>The color images are stored as 640x480 8-bit RGB images in PNG format.</li><li>The depth maps are stored as 640x480 16-bit monochrome images in PNG format.</li><li>The color and depth images are already pre-registered using the OpenNI driver from PrimeSense, i.e., the pixels in the color and depth images correspond already 1:1.</li><li>The depth images are scaled by a factor of 5000, i.e., a pixel value of 5000 in the depth image corresponds to a distance of 1 meter from the camera, 10000 to 2 meter distance, etc. A pixel value of 0 means missing value&#x2F;no data.</li></ul></blockquote><p>这里是深度值的校正系数(factor)，使用时的计算公式为<code>Z = depth_image[v,u] / factor</code>，在ROS中要把它改成1才可以。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">factor</span> <span class="string">=</span> <span class="number">5000</span> <span class="comment"># for the 16-bit PNG files</span></span><br><span class="line"><span class="string">factor</span> <span class="string">=</span> <span class="number">1</span>    <span class="comment"># for the 32-bit float images in the ROS bag files</span></span><br></pre></td></tr></table></figure><p>将DepthMapFactor修改为<code>1.0</code>之后的建图就正常一些了</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/02/e867d520f01580ce93b865cfc9b56025.png" alt="image.png"></p><h3 id="4-4-双目运行"><a href="#4-4-双目运行" class="headerlink" title="4.4. 双目运行"></a>4.4. 双目运行</h3><p>下载EuRoC对应的rosbag：<a href="http://robotics.ethz.ch/~asl-datasets/ijrr_euroc_mav_dataset/machine_hall/MH_01_easy/MH_01_easy.bag">MH_01_easy.bag</a>，上文已经给出过该数据集对应的Topic了，其中要用到的 Topic 是左右两个摄像头的数据 <code>/cam0/image_raw</code> 和 <code>/cam1/image_raw</code>。ORB_SLAM3 中双目 Stereo 接收的 Topic 分别为 <code>/camera/left/image_raw</code> 和 <code>/camera/right/image_raw</code>，因此在运行时也需要绑定一下 Topic。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">topics:      /cam0/image_raw    3682 msgs    : sensor_msgs/Image         </span><br><span class="line">             /cam1/image_raw    3682 msgs    : sensor_msgs/Image         </span><br><span class="line">             /imu0             36820 msgs    : sensor_msgs/Imu           </span><br><span class="line">             /leica/position    3099 msgs    : geometry_msgs/PointStamped</span><br></pre></td></tr></table></figure><p>双目的rosrun命令最后多了一个bool类型参数<code>do_rectify</code>，含义为是否进行矫正，根据需要选择true或false。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Usage: rosrun ORB_SLAM3 Stereo path_to_vocabulary path_to_settings do_rectify</span><br></pre></td></tr></table></figure><p>执行如下命令，先启动Stereo双目模式下的SLAM，然后开始播放数据集，同样是使用<code>:=</code>分别绑定左侧和右侧两个摄像头的数据。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 终端a</span></span><br><span class="line">roscore</span><br><span class="line"><span class="comment"># 终端b</span></span><br><span class="line">rosrun ORB_SLAM3 Stereo Vocabulary/ORBvoc.txt Examples_old/Stereo/EuRoC.yaml <span class="literal">true</span></span><br><span class="line"><span class="comment"># 终端c</span></span><br><span class="line">rosbag play MH_01_easy.bag /cam0/image_raw:=/camera/left/image_raw /cam1/image_raw:=/camera/right/image_raw</span><br></pre></td></tr></table></figure><p>也是成功运行起来了</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/02/4532d161bce1a806b99e91a7f55c5097.png" alt="image.png"></p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/02/fa1f127cf0f7c119d434b75416c9f6c1.png" alt="image.png"></p><h2 id="5-The-end"><a href="#5-The-end" class="headerlink" title="5. The end"></a>5. The end</h2><p>本文介绍了如何在ROS环境下编译ORB_SLAM3，并使用TUM和EuRoC数据集测试单目、双目、RGB-D三种模式在ROS下运行的效果。希望对你有帮助！</p><p>更新：ORB_SLAM2的ROS运行命令和本文记录的完全一致，只需要把rosrun里面的包名改成ORB_SLAM2就可以了。下图是在ROS模式下运行ORB_SLAM2的RGB-D的截图。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/02/269ace5a14d78815e436b9633e0cd435.png" alt="image.png"></p>]]></content>
    
    
    <summary type="html">在 ubuntu 18.04 arm 中于ROS环境编译与运行ORB_SLAM3，并以TUM数据集测试了ROS下单目、双目和RGB-D运行</summary>
    
    
    
    <category term="编程学习" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="项目开发记录" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="Linux" scheme="https://blog.musnow.top/tags/Linux/"/>
    
    <category term="Cpp" scheme="https://blog.musnow.top/tags/Cpp/"/>
    
    <category term="SLAM" scheme="https://blog.musnow.top/tags/SLAM/"/>
    
  </entry>
  
  <entry>
    <title>【SLAM】在 ubuntu 18.04 arm 容器中安装ROS环境</title>
    <link href="https://blog.musnow.top/posts/3771271576/"/>
    <id>https://blog.musnow.top/posts/3771271576/</id>
    <published>2025-02-09T05:06:07.000Z</published>
    <updated>2025-03-08T05:25:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>在ubuntu 18.04 arm（docker容器）中安装ROS环境。本文所使用的ROS安装命令实测可用于<strong>ubuntu 18.04 amd64</strong>的设备。</p><h2 id="1-简述"><a href="#1-简述" class="headerlink" title="1. 简述"></a>1. 简述</h2><p>由于本人对ROS并不是特别了解，这里就不引入ROS的背景介绍了。</p><p>ROS的安装主要基于官网的教程，先选择你当前使用的ubuntu版本对应的ROS，然后根据具体版本的ROS官方教程来安装就可以了。</p><p>先打开ROS官网：<a href="https://wiki.ros.org/cn">cn - ROS Wiki</a>。</p><p>选择“安装”，会进入如下页面，这里会提示你不同版本的ROS以及推荐安装的ubuntu系统。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/02/0fd67ca21e085e04f3ab28ed1c4f0b5d.png" alt="image.png"></p><p>因为我当前使用的是ubuntu18.04，所以选择ROS Melodic Morenia这一发行版。点进去后可以看到这里列出来了支持的操作系统和对应的架构版本，我们当前使用的 ubuntu 18.04 对应的发行版本代号是Bionic，这个版本的ROS是支持arm64架构的。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/02/6927cfd276dbb15ba32d8ea56c04c509.png" alt="image.png"></p><p>点击ubuntu链接，就会跳转到 ubuntu 18.04 上安装ROS的教程了：<a href="https://wiki.ros.org/cn/melodic/Installation/Ubuntu">cn&#x2F;melodic&#x2F;Installation&#x2F;Ubuntu - ROS Wiki</a>。</p><p>跟着教程一步一来，本文主要记录遇到过的坑。</p><h2 id="2-安装ROS"><a href="#2-安装ROS" class="headerlink" title="2. 安装ROS"></a>2. 安装ROS</h2><h3 id="2-1-配置软件源"><a href="#2-1-配置软件源" class="headerlink" title="2.1. 配置软件源"></a>2.1. 配置软件源</h3><p>官网给出了两个软件源的命令，一个是官方的源，另外一个是国内清华源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 官方源</span></span><br><span class="line">sudo sh -c <span class="string">&#x27;echo &quot;deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main&quot; &gt; /etc/apt/sources.list.d/ros-latest.list&#x27;</span></span><br><span class="line"><span class="comment"># 清华源</span></span><br><span class="line">sudo sh -c <span class="string">&#x27;. /etc/lsb-release &amp;&amp; echo &quot;deb http://mirrors.tuna.tsinghua.edu.cn/ros/ubuntu/ `lsb_release -cs` main&quot; &gt; /etc/apt/sources.list.d/ros-latest.list&#x27;</span></span><br></pre></td></tr></table></figure><p>这里推荐直接使用国内的清华源。执行这个命令之后就会遇到第一个错误，环境中缺少<code>lsb_release</code>命令。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu-linux-22-04-02-desktop:/work# lsb_release -sc</span><br><span class="line">bash: lsb_release: command not found</span><br></pre></td></tr></table></figure><p>需要apt安装<code>lsb-release</code>包，执行<code>apt-get install lsb-release</code>命令即可。安装了之后就可以使用<code>lsb_release</code>命令了，命令的作用是显示当前发行版的名称，前文已经提到了ubuntu 18.04是bionic。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu-linux-22-04-02-desktop:/work# lsb_release -sc</span><br><span class="line">bionic</span><br></pre></td></tr></table></figure><p>安装了该软件包后，重新执行上述添加软件源的命令。注意如果你刚刚已经执行了命令，则会得到一个有问题的软件源文件，<strong>需要删掉文件，再重新添加</strong>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先删除原本的文件（因为命令不存在导致源有问题）</span></span><br><span class="line"><span class="built_in">rm</span> -rf /etc/apt/sources.list.d/ros-latest.list</span><br><span class="line"><span class="comment"># 重新添加清华源</span></span><br><span class="line">sudo sh -c <span class="string">&#x27;. /etc/lsb-release &amp;&amp; echo &quot;deb http://mirrors.tuna.tsinghua.edu.cn/ros/ubuntu/ `lsb_release -cs` main&quot; &gt; /etc/apt/sources.list.d/ros-latest.list&#x27;</span></span><br></pre></td></tr></table></figure><p>随后还需要执行命令添加一下密钥（不管是清华源还是官方源都是这个命令）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-key adv --keyserver <span class="string">&#x27;hkp://keyserver.ubuntu.com:80&#x27;</span> --recv-key C1CF6E31E6BADE8868B172B4F42ED6FBAB17C654</span><br></pre></td></tr></table></figure><p>随后更新一下软件源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get -y update</span><br></pre></td></tr></table></figure><h3 id="2-2-安装ROS的不同版本的命令"><a href="#2-2-安装ROS的不同版本的命令" class="headerlink" title="2.2. 安装ROS的不同版本的命令"></a>2.2. 安装ROS的不同版本的命令</h3><p>现在软件源已经更新好了，可以根据自己的需要安装不同版本的ros了。官网给出了下面四种不同的命令，这里我直接选了第一个安装了完整版。</p><p><strong>桌面完整版（推荐）：</strong>  : 包含 ROS、<a href="https://wiki.ros.org/rqt">rqt</a>、<a href="https://wiki.ros.org/rviz">rviz</a>、机器人通用库、2D&#x2F;3D 模拟器、导航以及 2D&#x2F;3D 感知包。或 <a href="apt:ros-melodic-desktop-full?refresh=yes">单击这里</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install ros-melodic-desktop-full</span><br></pre></td></tr></table></figure><p><strong>桌面版：</strong>   包含 ROS，<a href="https://wiki.ros.org/rqt">rqt</a>，<a href="https://wiki.ros.org/rviz">rviz</a> 和机器人通用库，或 <a href="apt:ros-melodic-desktop?refresh=yes">单击这里</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install ros-melodic-desktop</span><br></pre></td></tr></table></figure><p><strong>ROS-基础包：</strong>  包含 ROS 包，构建和通信库。没有图形界面工具。或 <a href="apt:ros-melodic-ros-base?refresh=yes">单击这里</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install ros-melodic-ros-base</span><br></pre></td></tr></table></figure><p><strong>单独的包：</strong>  你也可以安装某个指定的ROS软件包（使用软件包名称替换掉下面的PACKAGE）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install ros-melodic-PACKAGE</span><br></pre></td></tr></table></figure><p>如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install ros-melodic-slam-gmapping</span><br></pre></td></tr></table></figure><p>完整版需要安装的东西很多，耐心等待一下。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/02/a6f8b7db264e501d9f9a1ee61dc76de3.png" alt="image.png"></p><p>在安装的途中，会弹出两次让你选择tzdata的弹窗，直接选择GMT+8或者<code>Asia/Shanghai</code>就可以了。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/02/c7da389a7940c44845993c902a7ff481.png" alt="image.png"></p><h3 id="2-3-ROS初始化"><a href="#2-3-ROS初始化" class="headerlink" title="2.3. ROS初始化"></a>2.3. ROS初始化</h3><p>随后依照官网的教程，使用<code>sudo rosdep init</code>命令来初始化ros系统。</p><p>注意，rosdep命令是不会跟随上面的完整桌面版包一起安装的，需要我们手动安装一下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install python-rosdep</span><br></pre></td></tr></table></figure><p>第一次执行<code>rosdep init</code>的时候，遇到了网络问题（http错误），通过<code>apt install iputils-ping</code>安装了ping命令，发现<code>raw.githubusercontent.com</code>域名走了<code>127.0.0.1</code>，延迟低于1ms，肯定是不对的。</p><p>最开始我以为它是走了错误的代理，但是ping了github.com是没有问题的，所以问题在DNS解析上。解决方案采用了最粗暴的方式，直接将<code>raw.githubusercontent.com</code>域名的IP写入了<code>/etc/hosts</code>文件，避免修改系统的DNS设置。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">185.199.109.133 raw.githubusercontent.com</span><br></pre></td></tr></table></figure><p>修改了之后，<code>ping raw.githubusercontent.com</code> 正常了</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/02/fffebeaf3d3d08eb4f7cd9c97982989c.png" alt="image.png"></p><p>随后就能正常执行rosdep初始化命令了。命令执行输出如下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu-linux-22-04-02-desktop:/# rosdep init</span><br><span class="line">Wrote /etc/ros/rosdep/sources.list.d/20-default.list</span><br><span class="line">Recommended: please run</span><br><span class="line"></span><br><span class="line">    rosdep update</span><br><span class="line"></span><br><span class="line">root@ubuntu-linux-22-04-02-desktop:/# rosdep update    </span><br><span class="line">reading in sources list data from /etc/ros/rosdep/sources.list.d</span><br><span class="line">Warning: running &#x27;rosdep update&#x27; as root is not recommended.</span><br><span class="line">  You should run &#x27;sudo rosdep fix-permissions&#x27; and invoke &#x27;rosdep update&#x27; again without sudo.</span><br><span class="line">Hit https://raw.githubusercontent.com/ros/rosdistro/master/rosdep/osx-homebrew.yaml</span><br><span class="line">Hit https://raw.githubusercontent.com/ros/rosdistro/master/rosdep/base.yaml</span><br><span class="line">Hit https://raw.githubusercontent.com/ros/rosdistro/master/rosdep/python.yaml</span><br><span class="line">Hit https://raw.githubusercontent.com/ros/rosdistro/master/rosdep/ruby.yaml</span><br><span class="line">Hit https://raw.githubusercontent.com/ros/rosdistro/master/releases/fuerte.yaml</span><br><span class="line">Query rosdistro index https://raw.githubusercontent.com/ros/rosdistro/master/index-v4.yaml</span><br><span class="line">Skip end-of-life distro &quot;ardent&quot;</span><br><span class="line">Skip end-of-life distro &quot;bouncy&quot;</span><br><span class="line">Skip end-of-life distro &quot;crystal&quot;</span><br><span class="line">Skip end-of-life distro &quot;dashing&quot;</span><br><span class="line">Skip end-of-life distro &quot;eloquent&quot;</span><br><span class="line">Skip end-of-life distro &quot;foxy&quot;</span><br><span class="line">Skip end-of-life distro &quot;galactic&quot;</span><br><span class="line">Skip end-of-life distro &quot;groovy&quot;</span><br><span class="line">Add distro &quot;humble&quot;</span><br><span class="line">Skip end-of-life distro &quot;hydro&quot;</span><br><span class="line">Skip end-of-life distro &quot;indigo&quot;</span><br><span class="line">Skip end-of-life distro &quot;iron&quot;</span><br><span class="line">Skip end-of-life distro &quot;jade&quot;</span><br><span class="line">Add distro &quot;jazzy&quot;</span><br><span class="line">Skip end-of-life distro &quot;kinetic&quot;</span><br><span class="line">Skip end-of-life distro &quot;lunar&quot;</span><br><span class="line">Skip end-of-life distro &quot;melodic&quot;</span><br><span class="line">Add distro &quot;noetic&quot;</span><br><span class="line">Add distro &quot;rolling&quot;</span><br><span class="line">updated cache in /root/.ros/rosdep/sources.cache</span><br></pre></td></tr></table></figure><h3 id="2-4-设置环境"><a href="#2-4-设置环境" class="headerlink" title="2.4. 设置环境"></a>2.4. 设置环境</h3><p>如果你用的是bash，执行如下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;source /opt/ros/melodic/setup.bash&quot;</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure><p>如果是zsh，执行如下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;source /opt/ros/melodic/setup.zsh&quot;</span> &gt;&gt; ~/.zshrc</span><br><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure><p>如果你不想让ROS环境始终生效，可以使用如下命令暂时在当前bash生效。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> /opt/ros/melodic/setup.bash</span><br></pre></td></tr></table></figure><p>注意：如果你不只安装了一个 ROS 发行版， <code>~/.bashrc</code> 只能使用你需要的 ROS 版本的 setup.bash脚本。</p><h3 id="2-5-ROS工具依赖"><a href="#2-5-ROS工具依赖" class="headerlink" title="2.5. ROS工具依赖"></a>2.5. ROS工具依赖</h3><p>rosinstall是一个常用的命令行工具，用于下载众多ROS包的 source tree。</p><p>可以通过下面的命令安装这个工具。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install -y \</span><br><span class="line">    python-rosinstall \</span><br><span class="line">    python-rosinstall-generator \</span><br><span class="line">    python-wstool build-essential</span><br></pre></td></tr></table></figure><h2 id="3-确认安装是否成功"><a href="#3-确认安装是否成功" class="headerlink" title="3. 确认安装是否成功"></a>3. 确认安装是否成功</h2><h3 id="3-1-roscore命令"><a href="#3-1-roscore命令" class="headerlink" title="3.1. roscore命令"></a>3.1. roscore命令</h3><p>到这里，我们的ROS安装就完成了，可以使用<code>roscore</code>命令来确定ros是否成功安装，出现如下输出即为安装成功。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu-linux-22-04-02-desktop:/# roscore</span><br><span class="line">... logging to /root/.ros/log/cfad45ce-e696-11ef-bdf0-001c42a84d93/roslaunch-ubuntu-linux-22-04-02-desktop-522.log</span><br><span class="line">Checking log directory for disk usage. This may take a while.</span><br><span class="line">Press Ctrl-C to interrupt</span><br><span class="line">Done checking log file disk usage. Usage is &lt;1GB.</span><br><span class="line"></span><br><span class="line">started roslaunch server http://ubuntu-linux-22-04-02-desktop:38385/</span><br><span class="line">ros_comm version 1.14.13</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">SUMMARY</span><br><span class="line">========</span><br><span class="line"></span><br><span class="line">PARAMETERS</span><br><span class="line"> * /rosdistro: melodic</span><br><span class="line"> * /rosversion: 1.14.13</span><br><span class="line"></span><br><span class="line">NODES</span><br><span class="line"></span><br><span class="line">auto-starting new master</span><br><span class="line">process[master]: started with pid [536]</span><br><span class="line">ROS_MASTER_URI=http://ubuntu-linux-22-04-02-desktop:11311/</span><br><span class="line"></span><br><span class="line">setting /run_id to cfad45ce-e696-11ef-bdf0-001c42a84d93</span><br><span class="line">process[rosout-1]: started with pid [547]</span><br><span class="line">started core service [/rosout]</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/02/c3c69f410aa5adf78b2391d069cf2ff1.png" alt="image.png"></p><h3 id="3-2-可能遇到的问题"><a href="#3-2-可能遇到的问题" class="headerlink" title="3.2. 可能遇到的问题"></a>3.2. 可能遇到的问题</h3><p>执行roscore命令的时候可能遇到如下问题，报错的重点是Permission denied缺少权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">king@ubuntu:~/slam/pkg$ roscore</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;/opt/ros/melodic/lib/python2.7/dist-packages/roslaunch/__init__.py&quot;, line 290, in main</span><br><span class="line">    write_pid_file(options.pid_fn, options.core, options.port)</span><br><span class="line">  File &quot;/opt/ros/melodic/lib/python2.7/dist-packages/roslaunch/__init__.py&quot;, line 112, in write_pid_file</span><br><span class="line">    with open(pid_fn, &quot;w&quot;) as f:</span><br><span class="line">IOError: [Errno 13] Permission denied: &#x27;/home/king/.ros/roscore-11311.pid&#x27;</span><br></pre></td></tr></table></figure><p>这个权限缺少并不是因为没有加sudo导致的，因为这个目录就是我们当前子用户的目录。</p><p>解决方案是修改这个目录的权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">chmod</span> -R 777 /home/king/.ros/</span><br></pre></td></tr></table></figure><p>随后就可以正常启动roscore了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">king@ubuntu:~/slam/pkg$ roscore</span><br><span class="line">WARNING: cannot create log directory [/home/king/.ros/log/4322bfb0-f665-11ef-8ac7-000c29839929]. Please set ROS_LOG_DIR to a writable location.</span><br><span class="line">Checking log directory for disk usage. This may take a while.</span><br><span class="line">Press Ctrl-C to interrupt</span><br><span class="line">Done checking log file disk usage. Usage is &lt;1GB.</span><br><span class="line"></span><br><span class="line">started roslaunch server http://ubuntu:40095/</span><br><span class="line">ros_comm version 1.14.13</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">SUMMARY</span><br><span class="line">========</span><br><span class="line"></span><br><span class="line">PARAMETERS</span><br><span class="line"> * /rosdistro: melodic</span><br><span class="line"> * /rosversion: 1.14.13</span><br><span class="line"></span><br><span class="line">NODES</span><br><span class="line"></span><br><span class="line">auto-starting new master</span><br><span class="line">process[master]: started with pid [111860]</span><br><span class="line">ROS_MASTER_URI=http://ubuntu:11311/</span><br><span class="line"></span><br><span class="line">setting /run_id to 4322bfb0-f665-11ef-8ac7-000c29839929</span><br><span class="line">process[rosout-1]: started with pid [111878]</span><br><span class="line">started core service [/rosout]</span><br></pre></td></tr></table></figure><h2 id="4-The-end"><a href="#4-The-end" class="headerlink" title="4. The end"></a>4. The end</h2><p>至此，ROS安装完毕啦！</p>]]></content>
    
    
    <summary type="html">在 ubuntu 18.04 arm（docker容器）中安装ROS环境</summary>
    
    
    
    <category term="编程学习" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="项目开发记录" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="Linux" scheme="https://blog.musnow.top/tags/Linux/"/>
    
    <category term="ubuntu" scheme="https://blog.musnow.top/tags/ubuntu/"/>
    
    <category term="SLAM" scheme="https://blog.musnow.top/tags/SLAM/"/>
    
  </entry>
  
  <entry>
    <title>【Linux】解决使用apt时“unable to initialize frontend: Dialog”的警告</title>
    <link href="https://blog.musnow.top/posts/4540337725/"/>
    <id>https://blog.musnow.top/posts/4540337725/</id>
    <published>2025-02-08T09:39:23.000Z</published>
    <updated>2025-02-09T09:42:30.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>解决使用apt时“unable to initialize frontend: Dialog”的警告。</p></blockquote><p>最近在ubuntu 18.04里面执行apt命令的时候总是遇到如下警告</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">debconf: unable to initialize frontend: Dialog</span><br><span class="line">debconf: (No usable dialog-like program is installed, so the dialog based frontend cannot be used. at /usr/share/perl5/Debconf/FrontEnd/Dialog.pm line 76, &lt;&gt; line 2.)</span><br></pre></td></tr></table></figure><p>其实也算不上警告吧，但是总是弹出来，还带了个unable字样，多半是哪里有点问题。</p><p>搜索了一下相关信息，是因为缺少了一个包，安装一下就可以了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install -y dialog</span><br></pre></td></tr></table></figure><p>安装完毕之后，使用apt的时候就不会出现上述警告了。</p>]]></content>
    
    
    <summary type="html">解决使用apt时“unable to initialize frontend: Dialog”的警告</summary>
    
    
    
    <category term="编程学习" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="Linux" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/Linux/"/>
    
    
    <category term="Linux" scheme="https://blog.musnow.top/tags/Linux/"/>
    
  </entry>
  
</feed>
