<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>慕雪的寒舍</title>
  
  <subtitle>雪下了一夜</subtitle>
  <link href="https://blog.musnow.top/atom.xml" rel="self"/>
  
  <link href="https://blog.musnow.top/"/>
  <updated>2025-02-12T06:31:39.000Z</updated>
  <id>https://blog.musnow.top/</id>
  
  <author>
    <name>慕雪年华</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【Hexo】hexo-butterfly主题添加影评书评页面</title>
    <link href="https://blog.musnow.top/posts/8855455861/"/>
    <id>https://blog.musnow.top/posts/8855455861/</id>
    <published>2025-02-12T05:49:29.000Z</published>
    <updated>2025-02-12T06:31:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>hexo-butterfly主题添加影评书评页面。</p><h2 id="1-说明"><a href="#1-说明" class="headerlink" title="1. 说明"></a>1. 说明</h2><p>在25年1月份，我的博客站点新增了一个<a href="https://blog.musnow.top/rating/">影评书评</a>页面，这个页面是基于之前添加的<a href="https://blog.musnow.top/equipment/">装备</a>页面的修改而来的。</p><blockquote><p>有关添加装备页面的教程，可以参考这篇博客：<a href="https://blog.musnow.top/posts/2383339565/">【Hexo】hexo-butterfly主题添加装备展示页面 | 慕雪的寒舍</a></p></blockquote><p>后续我在这个装备页面的基础上，让GPT帮忙修改了一下前端代码，实现了一个影评和书评的画廊视图页面。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/02/e65c6d2622d08322a542f681ee89b31b.png" alt="image.png"></p><p>本文将给出这个页面的css和pug文件，以及如何使用github action自动从我们的书评和影评文章来创建对应的yaml配置，用于最终生成这个页面。</p><h2 id="2-主题修改"><a href="#2-主题修改" class="headerlink" title="2. 主题修改"></a>2. 主题修改</h2><p>本站的butterfly主题停留在古早的4.9.5版本，此项修改可能对最新版的butterfly主题无效！</p><p>另外，修改hexo主题的前提是使用GIT方式来安装hexo主题（主题文件在themes文件夹内），如果你使用npm方式安装主题，换了一个环境或者npm更新主题版本之后你的主题修改就丢失了。</p><h3 id="2-1-前端文件修改"><a href="#2-1-前端文件修改" class="headerlink" title="2.1. 前端文件修改"></a>2.1. 前端文件修改</h3><p>这部分修改和添加装备页面需要做的修改一致。</p><p>修改<code>blog/themes/butterfly/layout/page.pug</code>文件，在<code>case page.type</code>的判断语句中新增一个rating的判断，添加在default之前即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">when &#x27;rating&#x27;</span><br><span class="line">  include includes/page/rating.pug</span><br></pre></td></tr></table></figure><p>随后再创建一个<code>blog/themes/butterfly/layout/includes/page/rating.pug</code>文件，写入如下内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">#rating</span><br><span class="line">  if site.data.rating</span><br><span class="line">    each i in site.data.rating</span><br><span class="line">      .rating-item</span><br><span class="line">        h2.rating-item-title= i.class_name</span><br><span class="line">        .rating-item-description= i.description</span><br><span class="line">        .rating-item-content</span><br><span class="line">          each item, index in i.rating_list</span><br><span class="line">            .rating-item-content-item</span><br><span class="line">              .rating-item-content-item-cover</span><br><span class="line">                img.rating-item-content-item-image(data-lazy-src=url_for(item.image) onerror=`this.onerror=null;this.src=&#x27;` + url_for(theme.error_img.flink) + `&#x27;` alt=item.name)</span><br><span class="line">              .rating-item-content-item-info</span><br><span class="line">                .rating-item-content-item-name= item.name</span><br><span class="line">                .rating-item-content-item-specification</span><br><span class="line">                  // 定义评分渲染函数</span><br><span class="line">                  - const renderRating = (rating) =&gt; &#123;</span><br><span class="line">                  -   const fullStar = &#x27;★&#x27;;</span><br><span class="line">                  -   const emptyStar = &#x27;☆&#x27;;</span><br><span class="line">                  -   const maxRating = 5;</span><br><span class="line">                  -   let stars = &#x27;&#x27;;</span><br><span class="line">                  -   for (let i = 0; i &lt; maxRating; i++) &#123;</span><br><span class="line">                  -     stars += i &lt; rating ? fullStar : emptyStar;</span><br><span class="line">                  -   &#125;</span><br><span class="line">                  -   // 格式化评分数字（保留一位小数）</span><br><span class="line">                  -   const formattedRating = Number(rating).toFixed(1);</span><br><span class="line">                  -   return `评分：$&#123;formattedRating&#125; $&#123;stars&#125;`;</span><br><span class="line">                  - &#125;</span><br><span class="line">                  | #&#123;renderRating(item.specification)&#125;</span><br><span class="line">                .rating-item-content-item-description= item.description</span><br><span class="line">                .rating-item-content-item-toolbar</span><br><span class="line">                  if item.link.includes(&#x27;https://&#x27;) || item.link.includes(&#x27;http://&#x27;)</span><br><span class="line">                    a.rating-item-content-item-link(href= item.link, target=&#x27;_blank&#x27;) 详情</span><br><span class="line">                  else</span><br><span class="line">                    a.rating-item-content-item-link(href= item.link, target=&#x27;_blank&#x27;) 查看文章</span><br></pre></td></tr></table></figure><p>随后在source文件夹下创建一个rating文件夹，在该文件夹内创建一个<code>index.md</code>文件，写入如下内容。其中title可以根据你的喜好修改，<code>aside: false</code>的含义是关闭侧边栏。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 影评 · 书评</span><br><span class="line">date: 2025-01-04 16:45:12</span><br><span class="line">aside: false</span><br><span class="line"><span class="section">type: rating</span></span><br><span class="line"><span class="section">---</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>再在<code>source/rating/</code>目录下创建一个<code>rating.css</code>文件，写入如下内容</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.rating-item-content</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">flex-direction</span>: row;</span><br><span class="line">    <span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> -<span class="number">8px</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.rating-item-content-item</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="built_in">calc</span>(<span class="number">25%</span> - <span class="number">12px</span>);</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">2px</span> solid <span class="number">#979797</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">8px</span> <span class="number">6px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">var</span>(--heo-card-bg);</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="built_in">var</span>(--heo-shadow-border);</span><br><span class="line">    <span class="attribute">min-height</span>: <span class="number">400px</span>;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">1200px</span>) &#123;</span><br><span class="line">    <span class="selector-class">.rating-item-content-item</span> &#123;</span><br><span class="line">      <span class="attribute">width</span>: <span class="built_in">calc</span>(<span class="number">50%</span> - <span class="number">12px</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">768px</span>) &#123;</span><br><span class="line">    <span class="selector-class">.rating-item-content-item</span> &#123;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.rating-item-content-item-info</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">8px</span> <span class="number">16px</span> <span class="number">16px</span> <span class="number">16px</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">12px</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.rating-item-content-item-name</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">18px</span>;</span><br><span class="line">    <span class="attribute">font-weight</span>: bold;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">8px</span>;</span><br><span class="line">    <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">    <span class="attribute">width</span>: fit-content;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.rating-item-content-item-specification</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">var</span>(--heo-secondtext);</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.rating-item-content-item-description</span> &#123;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">var</span>(--heo-secondtext);</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">60px</span>;</span><br><span class="line">    <span class="attribute">display</span>: -webkit-box;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    -webkit-line-clamp: <span class="number">3</span>;</span><br><span class="line">    -webkit-box-orient: vertical;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">a</span><span class="selector-class">.rating-item-content-item-link</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">var</span>(--heo-gray-op);</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">4px</span> <span class="number">8px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">8px</span>;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">a</span><span class="selector-class">.rating-item-content-item-link</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">var</span>(--heo-main);</span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">var</span>(--heo-white);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">h2</span><span class="selector-class">.rating-item-title</span> &#123;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.rating-item-description</span> &#123;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">4px</span> <span class="number">0</span> <span class="number">8px</span> <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">var</span>(--heo-secondtext);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.rating-item-content-item-cover</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">var</span>(--heo-secondbg);</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">img</span><span class="selector-class">.rating-item-content-item-image</span> &#123;</span><br><span class="line">    <span class="attribute">object-fit</span>: cover;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">div</span><span class="selector-id">#rating</span> &#123;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">26px</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.rating-item-content-item-toolbar</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: space-between;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">16px</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">a</span><span class="selector-class">.bber-reply</span> &#123;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>到这里，主题的修改就完成了。</p><h3 id="2-2-评分配置文件"><a href="#2-2-评分配置文件" class="headerlink" title="2.2. 评分配置文件"></a>2.2. 评分配置文件</h3><p>接下来要做的是新增一个对应的yaml配置文件，在<code>source/_data/</code>下新增一个<code>rating.yml</code>，评分项目的格式如下，包含了书评影评的名字、描述、文章链接、封面、评分（1到5的整数）</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">class_name:</span> <span class="string">电影世界</span></span><br><span class="line">  <span class="attr">description:</span> <span class="string">光影交织，大梦一场</span></span><br><span class="line">  <span class="attr">rating_list:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">桑尼的优势</span></span><br><span class="line">      <span class="attr">specification:</span> <span class="number">5</span></span><br><span class="line">      <span class="attr">description:</span> <span class="string">制作精良，剧情在线，神级反转，好看！</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">https://img.musnow.top/i/2025/01/a35d66e1ea8ffae6bb5ff248d1f53c63.png</span></span><br><span class="line">      <span class="attr">link:</span> <span class="string">/posts/1438650502/</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">class_name:</span> <span class="string">书籍海洋</span></span><br><span class="line">  <span class="attr">description:</span> <span class="string">行万里路，读万卷书</span></span><br><span class="line">  <span class="attr">rating_list:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">占位符</span></span><br><span class="line">      <span class="attr">specification:</span> <span class="number">4</span></span><br><span class="line">      <span class="attr">description:</span> <span class="string">占位符</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">/img/bg/op32.jpg</span></span><br><span class="line">      <span class="attr">link:</span> <span class="string">/</span></span><br></pre></td></tr></table></figure><p>到这里，就应该搞定了，可以在本地<code>hexo s</code>然后访问<code>/rating</code>路径看看是否有新增的页面了。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/02/e65c6d2622d08322a542f681ee89b31b.png" alt="image.png"></p><h2 id="3-Github-Action自动化配置"><a href="#3-Github-Action自动化配置" class="headerlink" title="3. Github Action自动化配置"></a>3. Github Action自动化配置</h2><p>现在页面已经创建好了，但我不想每次写个影评之后都要自己去修改<code>rating.yml</code>文件，那样太过麻烦，所以写了一个python脚本，来自动化生成这个文件。</p><h3 id="3-1-新增的front-matter"><a href="#3-1-新增的front-matter" class="headerlink" title="3.1. 新增的front-matter"></a>3.1. 新增的front-matter</h3><p>既然需要python脚本来处理，那么第一步就是把yaml文件里面的内容写到markdown文件的front-matter里面。这里新增了下面几个字段</p><table><thead><tr><th>字段</th><th>含义</th><th>说明</th></tr></thead><tbody><tr><td>rating_name</td><td>书籍或电影的名字</td><td>如果缺少此字段，则会使用title</td></tr><tr><td>rating_desc</td><td>书籍或电影的简述</td><td>如果缺少此字段，则使用description</td></tr><tr><td>rating_point</td><td>评分（1到5的整数）</td><td>默认为0</td></tr><tr><td>rating_cover</td><td>书籍或电影的封面</td><td>如果缺少此字段，则使用cover；若没有cover，则使用提前配置好的默认封面</td></tr></tbody></table><p>书评和影评文章的link会根据front-matter里面的abbrlink来生成。</p><h3 id="3-2-Python处理脚本"><a href="#3-2-Python处理脚本" class="headerlink" title="3.2. Python处理脚本"></a>3.2. Python处理脚本</h3><p>下面给出半GPT写的完整的Python脚本，顶部Config是需要配置的条目，<strong>分别是书评和影评的md文件路径、当没有设置rating_cover时使用的默认封面、abbrlink的前缀</strong>。</p><p>其中<code>POST_LINK_PREFIX</code>参数是abbrlink前缀，在我的站点中，文章的链接都是<code>/posts/&lt;abbrlink&gt;/</code>，abbrlink的前缀就是<code>/posts/</code>。这个参数根据你自己站点内abbrlink插件的配置来修改这个配置项。</p><p>剩下的代码，如果你不知道它们是怎么工作的，请不要修改。你可以丢给GPT让它根据你的需要来微调代码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> yaml</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Config</span>:</span><br><span class="line">    <span class="comment"># 书籍、影评md文件路径</span></span><br><span class="line">    MOVIE_FILE_PATH = <span class="string">&quot;Notes/CODE/blog/rating/movies&quot;</span></span><br><span class="line">    BOOK_FILE_PATH = <span class="string">&quot;Notes/CODE/blog/rating/books&quot;</span></span><br><span class="line">    <span class="comment"># 默认封面</span></span><br><span class="line">    DEFAULT_COVER = <span class="string">&#x27;/img/bg/op32.jpg&#x27;</span></span><br><span class="line">    <span class="comment"># abbrlink前缀</span></span><br><span class="line">    POST_LINK_PREFIX = <span class="string">&#x27;/posts/&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Rating</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;评价列表类&quot;&quot;&quot;</span></span><br><span class="line">    MOVIE = <span class="string">&#x27;电影世界&#x27;</span></span><br><span class="line">    MOVIE_DESC = <span class="string">&#x27;光影交织，大梦一场&#x27;</span></span><br><span class="line">    BOOK = <span class="string">&#x27;书籍海洋&#x27;</span></span><br><span class="line">    BOOK_DESC = <span class="string">&#x27;行万里路，读万卷书&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># RatingItem类</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Item</span>:</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, specification, description, image, link</span>):</span><br><span class="line">            self.name = name</span><br><span class="line">            self.specification = specification</span><br><span class="line">            self.description = description</span><br><span class="line">            self.image = image</span><br><span class="line">            self.link = link</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">to_dict</span>(<span class="params">self</span>):</span><br><span class="line">            <span class="string">&quot;&quot;&quot;将 Rating 对象转换为字典格式&quot;&quot;&quot;</span></span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                <span class="string">&#x27;name&#x27;</span>: self.name,</span><br><span class="line">                <span class="string">&#x27;specification&#x27;</span>: self.specification,</span><br><span class="line">                <span class="string">&#x27;description&#x27;</span>: self.description,</span><br><span class="line">                <span class="string">&#x27;image&#x27;</span>: self.image,</span><br><span class="line">                <span class="string">&#x27;link&#x27;</span>: self.link</span><br><span class="line">            &#125;</span><br><span class="line">        </span><br><span class="line"><span class="meta">        @staticmethod</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">default</span>():</span><br><span class="line">            <span class="string">&quot;&quot;&quot;获取到一个默认的item&quot;&quot;&quot;</span></span><br><span class="line">            <span class="keyword">return</span> Rating.Item(<span class="string">&#x27;占位符&#x27;</span>,<span class="number">0</span>,<span class="string">&#x27;占位符&#x27;</span>,Config.DEFAULT_COVER,<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建class内容的函数</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_class</span>(<span class="params">class_name, description, rating_list</span>):</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="string">&#x27;class_name&#x27;</span>: class_name,</span><br><span class="line">            <span class="string">&#x27;description&#x27;</span>: description,</span><br><span class="line">            <span class="string">&#x27;rating_list&#x27;</span>: rating_list</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MarkdownParser</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;md文件处理&quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">extract_front_matter</span>(<span class="params">file_path</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        提取 Markdown 文件中的 front-matter 内容。</span></span><br><span class="line"><span class="string">        假设 front-matter 是以 &#x27;---&#x27; 包围的 YAML 格式内容。</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">            content = file.read()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 使用正则表达式匹配 front-matter</span></span><br><span class="line">        <span class="keyword">match</span> = re.<span class="keyword">match</span>(<span class="string">r&#x27;---\n(.*?)\n---\n&#x27;</span>, content, re.DOTALL)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">match</span>:</span><br><span class="line">            front_matter = <span class="keyword">match</span>.group(<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> yaml.safe_load(front_matter)  <span class="comment"># 使用 yaml 解析 front-matter</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">extract_front_matter_from_dir</span>(<span class="params">dir_path</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        遍历指定目录及其子目录下的所有 .md 文件，提取它们的 front-matter 内容，并将所有内容添加到列表中。</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        front_matter_list = []</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 遍历目录中的所有文件和子目录</span></span><br><span class="line">        <span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(dir_path):</span><br><span class="line">            <span class="keyword">for</span> filename <span class="keyword">in</span> files:</span><br><span class="line">                file_path = os.path.join(root, filename)</span><br><span class="line">                </span><br><span class="line">                <span class="comment"># 只处理 .md 文件</span></span><br><span class="line">                <span class="keyword">if</span> filename.endswith(<span class="string">&#x27;.md&#x27;</span>):</span><br><span class="line">                    front_matter = MarkdownParser.extract_front_matter(file_path)</span><br><span class="line">                    <span class="keyword">if</span> front_matter:</span><br><span class="line">                        front_matter_list.append(front_matter)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> front_matter_list</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_rating_list</span>(<span class="params">file_path:<span class="built_in">str</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;遍历目录下的所有md文件，构建rating列表&quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 遍历md文件</span></span><br><span class="line">    front_matter_list = MarkdownParser.extract_front_matter_from_dir(file_path)</span><br><span class="line">    <span class="comment"># 目录下没有有效文件</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> front_matter_list:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Err: no md file in <span class="subst">&#123;file_path&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> [Rating.Item.default().to_dict()]</span><br><span class="line"></span><br><span class="line">    rating_list = []</span><br><span class="line">    <span class="keyword">for</span> fm <span class="keyword">in</span> front_matter_list:</span><br><span class="line">        <span class="comment"># 电影名字</span></span><br><span class="line">        name = fm.get(<span class="string">&#x27;rating_name&#x27;</span>, fm.get(<span class="string">&#x27;title&#x27;</span>, <span class="literal">None</span>))</span><br><span class="line">        <span class="comment"># 评价</span></span><br><span class="line">        desc = fm.get(<span class="string">&#x27;rating_desc&#x27;</span>, fm.get(<span class="string">&#x27;description&#x27;</span>, <span class="literal">None</span>))</span><br><span class="line">        <span class="comment"># md文件里面没有电影名字和描述，直接跳过这个md文件</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> name <span class="keyword">and</span> <span class="keyword">not</span> desc: </span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="comment"># 获取评分</span></span><br><span class="line">        rating_point = <span class="built_in">abs</span>(fm.get(<span class="string">&#x27;rating_point&#x27;</span>, <span class="number">0</span>))</span><br><span class="line">        <span class="keyword">if</span> rating_point &gt; <span class="number">5</span>: </span><br><span class="line">            rating_point = <span class="number">5</span></span><br><span class="line">        <span class="comment"># 封面</span></span><br><span class="line">        cover = fm.get(<span class="string">&#x27;rating_cover&#x27;</span>, fm.get(<span class="string">&#x27;cover&#x27;</span>, Config.DEFAULT_COVER))</span><br><span class="line">        link = Config.POST_LINK_PREFIX + <span class="built_in">str</span>(fm.get(<span class="string">&#x27;abbrlink&#x27;</span>,<span class="string">&#x27;&#x27;</span>)) + <span class="string">&#x27;/&#x27;</span></span><br><span class="line">        item = Rating.Item(name, rating_point, desc, cover, link)</span><br><span class="line">        rating_list.append(item.to_dict())</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 如果列表为空，添加默认的占位符</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> rating_list:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Err: no validate md file in <span class="subst">&#123;file_path&#125;</span>&quot;</span>)</span><br><span class="line">        rating_list.append(Rating.Item.default().to_dict())</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> rating_list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成整个YAML结构</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_rating_yaml</span>():</span><br><span class="line">    <span class="comment"># 电影世界的rating list</span></span><br><span class="line">    movie_ratings = generate_rating_list(Config.MOVIE_FILE_PATH)</span><br><span class="line">    <span class="comment"># 书籍海洋的rating list</span></span><br><span class="line">    book_ratings = generate_rating_list(Config.BOOK_FILE_PATH)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 创建每个class的字典</span></span><br><span class="line">    classes = [</span><br><span class="line">        Rating.create_class(Rating.MOVIE, Rating.MOVIE_DESC, movie_ratings),</span><br><span class="line">        Rating.create_class(Rating.BOOK, Rating.BOOK_DESC, book_ratings),</span><br><span class="line">    ]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 返回整个YAML数据结构</span></span><br><span class="line">    <span class="keyword">return</span> classes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存数据到YAML文件</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">save_yaml</span>(<span class="params">data, file_path</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">        yaml.dump(data, file, allow_unicode=<span class="literal">True</span>, default_flow_style=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 主函数</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 检查命令行参数是否传入文件路径</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) &lt; <span class="number">2</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Input Err: Please provide the YAML file path.&quot;</span>)</span><br><span class="line">        sys.exit(<span class="number">1</span>)  <span class="comment"># 退出程序并返回错误代码</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 获取命令行传入的文件路径</span></span><br><span class="line">    file_path = sys.argv[<span class="number">1</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 生成YAML数据</span></span><br><span class="line">    data = generate_rating_yaml()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 保存到文件</span></span><br><span class="line">    save_yaml(data, file_path)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;Rating Yaml save to <span class="subst">&#123;file_path&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>脚本依赖于pyyaml库，使用<code>pip install pyyaml</code>安装了这个库后，使用如下命令调用脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 test.py 目标YAML文件路径</span><br></pre></td></tr></table></figure><p>最终会在给定的<strong>目标文件路径</strong>写入生成的yaml内容，比如<code>python3 test.py ./rating.yml</code>就会在当前目录创建一个<code>rating.yml</code>文件并写入生成的内容。</p><h3 id="3-3-Github-Action文件"><a href="#3-3-Github-Action文件" class="headerlink" title="3.3. Github Action文件"></a>3.3. Github Action文件</h3><p>配置Github Action之前，请先参考<a href="https://blog.musnow.top/posts/8608489065/">【博客】使用GithubAction自动同步obisidian和hexo仓库 | 慕雪的寒舍</a>一文配置obsidian和hexo仓库的自动同步。后续的Action配置是在这个配置的基础之上的。</p><p>首先需要添加两个step，配置python环境并安装解析yaml文件需要的pyyaml库</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置 Python 环境</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Set</span> <span class="string">up</span> <span class="string">Python</span> <span class="number">3.10</span></span><br><span class="line">  <span class="attr">uses:</span> <span class="string">actions/setup-python@v4</span></span><br><span class="line">  <span class="attr">with:</span></span><br><span class="line">    <span class="attr">python-version:</span> <span class="string">&#x27;3.10&#x27;</span>  <span class="comment"># 使用的 Python 版本，可以根据需求选择 3.x 或具体版本号</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 pip 依赖</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">pip</span> <span class="string">dependencies</span></span><br><span class="line">  <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">    python -m pip install --upgrade pip</span></span><br><span class="line"><span class="string">    pip install pyyaml</span></span><br></pre></td></tr></table></figure><p>然后再在push之前添加一个脚本调用就可以了。脚本提供的参数是目标yaml文件的路径。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 处理影视和书评评分的yaml文件</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Generate</span> <span class="string">rating.yml</span> <span class="string">from</span> <span class="string">raw</span> <span class="string">markdown</span></span><br><span class="line">  <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">    <span class="string">python</span> <span class="string">Data/python_scripts/gen_rating.py</span> <span class="string">HexoBlog/source/_data/rating.yml</span></span><br></pre></td></tr></table></figure><p>最终的完整action文件如下。这个yaml文件其他部分的内容的作用参考上面贴出来的博客。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Sync</span> <span class="string">CODE</span> <span class="string">to</span> <span class="string">_posts</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;Notes/CODE/**&#x27;</span>   <span class="comment"># 监听 CODE 文件夹内的文件变化</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">sync:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">steps:</span>      </span><br><span class="line">      <span class="comment"># 检出 Obsidian 仓库的代码</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">obsidian</span> <span class="string">repository</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v3</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># 设置 Python 环境</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Set</span> <span class="string">up</span> <span class="string">Python</span> <span class="number">3.10</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/setup-python@v4</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">python-version:</span> <span class="string">&#x27;3.10&#x27;</span>  <span class="comment"># 使用的 Python 版本，可以根据需求选择 3.x 或具体版本号</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># 安装 pip 依赖</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">pip</span> <span class="string">dependencies</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          python -m pip install --upgrade pip</span></span><br><span class="line"><span class="string">          pip install pyyaml</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">      <span class="comment"># 设置 Git 配置</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Set</span> <span class="string">up</span> <span class="string">Git</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">ACTIONS_KEY:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.HEXO_PRI_KEY</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          mkdir -p ~/.ssh/</span></span><br><span class="line"><span class="string">          echo &quot;$ACTIONS_KEY&quot; &gt; ~/.ssh/id_rsa</span></span><br><span class="line"><span class="string">          chmod 700 ~/.ssh</span></span><br><span class="line"><span class="string">          chmod 600 ~/.ssh/id_rsa</span></span><br><span class="line"><span class="string">          ssh-keyscan github.com &gt;&gt; ~/.ssh/known_hosts</span></span><br><span class="line"><span class="string">          git config --global user.name &quot;musnows&quot;</span></span><br><span class="line"><span class="string">          git config --global user.email &quot;ezplayingd@126.com&quot;</span></span><br><span class="line"><span class="string">          git config --global core.quotepath false</span></span><br><span class="line"><span class="string">          git config --global i18n.commitEncoding utf-8 </span></span><br><span class="line"><span class="string">          git config --global i18n.logOutputEncoding utf-8 </span></span><br><span class="line"><span class="string"></span></span><br><span class="line">      <span class="comment"># 克隆 HexoBlog 仓库（私密仓库），使用 ssh 来进行认证</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">HexoBlog</span> <span class="string">repository</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          git clone git@github.com:musnows/Hexo-Blog.git HexoBlog</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">      <span class="comment"># 同步文件：将 A 仓库中的 CODE 文件夹内容复制到 HexoBlog 仓库的 _posts 文件夹</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Sync</span> <span class="string">files</span> <span class="string">from</span> <span class="string">CODE</span> <span class="string">to</span> <span class="string">_posts</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          rsync -av --delete Notes/CODE/ HexoBlog/source/_posts/</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">      <span class="comment"># 处理影视和书评评分的yaml文件</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Generate</span> <span class="string">rating.yml</span> <span class="string">from</span> <span class="string">raw</span> <span class="string">markdown</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          python Data/python_scripts/gen_rating.py HexoBlog/source/_data/rating.yml</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">      <span class="comment"># 提交更改并推送到 HexoBlog 仓库</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Commit</span> <span class="string">and</span> <span class="string">push</span> <span class="string">changes</span> <span class="string">to</span> <span class="string">HexoBlog</span> <span class="string">repository</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          cd HexoBlog</span></span><br><span class="line"><span class="string">          git add .</span></span><br><span class="line"><span class="string">          git commit -m &quot;Sync CODE to _posts at $(TZ=&#x27;Asia/Shanghai&#x27; date &#x27;+%Y-%m-%d %H:%M:%S&#x27;)&quot;</span></span><br><span class="line"><span class="string">          git push origin hexo</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure><h3 id="3-4-测试Action"><a href="#3-4-测试Action" class="headerlink" title="3.4. 测试Action"></a>3.4. 测试Action</h3><p>将脚本和更新后的action文件push到远端，触发action之后，就能看到结果了，成功根据md文件里面的配置生成出了yaml文件。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/02/c477eecbddcbf372c3721ce93e3e4f6c.png" alt="image.png"></p>]]></content>
    
    
    <summary type="html">hexo-butterfly主题添加影评书评页面，并用action实现自动化更新</summary>
    
    
    
    <category term="差生文具多" scheme="https://blog.musnow.top/categories/%E5%B7%AE%E7%94%9F%E6%96%87%E5%85%B7%E5%A4%9A/"/>
    
    <category term="博客建站" scheme="https://blog.musnow.top/categories/%E5%B7%AE%E7%94%9F%E6%96%87%E5%85%B7%E5%A4%9A/%E5%8D%9A%E5%AE%A2%E5%BB%BA%E7%AB%99/"/>
    
    
    <category term="博客建站" scheme="https://blog.musnow.top/tags/%E5%8D%9A%E5%AE%A2%E5%BB%BA%E7%AB%99/"/>
    
    <category term="Hexo" scheme="https://blog.musnow.top/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>【SLAM】在 ubuntu 18.04 arm 中以ROS环境编译与运行ORB_SLAM3</title>
    <link href="https://blog.musnow.top/posts/5090585017/"/>
    <id>https://blog.musnow.top/posts/5090585017/</id>
    <published>2025-02-09T08:18:59.000Z</published>
    <updated>2025-02-12T02:20:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>在ubuntu18.04arm中于ROS环境编译与运行ORB_SLAM3，并以TUM和EuRoC数据集测试了ROS下单目、双目和RGB-D运行。</p><h2 id="1-引言"><a href="#1-引言" class="headerlink" title="1. 引言"></a>1. 引言</h2><p>在之前的博客中，已经介绍了<a href="https://blog.musnow.top/posts/7873538113/">基于虚拟机docker环境以及云端的AutoDL环境运行ORB_SLAM3</a>的步骤。</p><p>在实际场景中，SLAM通常是需要在机器人平台上运行的，ROS就是一个比较常见的机器人开发平台，在ROS环境中运行，可以方便我们的SLAM系统与其他机器人功能模块（比如导航和路径规划）进行通信，而且在ros node模式下运行的SLAM更适合<strong>多机通讯环境</strong>，比如实现多机器人协同建图、机器人和PC交互等等功能。</p><p>ORB_SLAM3在本地运行的基础上，提供了在ROS中运行的机制，本文简述了如何在ubuntu 18.04 arm环境中安装ROS环境、编译ORB_SLAM3 ROS版本，以及用现有的数据集模拟摄像头信号输入来使用ORB_SLAM3的全流程。</p><p>本文示例环境：ubuntu 22.04 arm虚拟机下启动的ubuntu18.04 docker容器。</p><h2 id="2-安装ROS环境"><a href="#2-安装ROS环境" class="headerlink" title="2. 安装ROS环境"></a>2. 安装ROS环境</h2><p>参考<a href="https://blog.musnow.top/posts/3771271576/">【Linux】在ubuntu18.04arm中安装ROS环境</a>一文进行安装，主要基于ROS官网的教程。</p><h2 id="3-编译ROS环境的ORB-SLAM3"><a href="#3-编译ROS环境的ORB-SLAM3" class="headerlink" title="3. 编译ROS环境的ORB_SLAM3"></a>3. 编译ROS环境的ORB_SLAM3</h2><p>本文撰写时<code>UZ-SLAMLab/ORB_SLAM3</code>的最新提交为2022年2月10日的<code>4452a3c4ab75b1cde34e5505a36ec3f9edcdc4c4</code>，后文的教程基于此提交点。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/02/335d01e00274144aad4d37adaace52ad.png" alt="image.png"></p><h3 id="3-1-编译命令"><a href="#3-1-编译命令" class="headerlink" title="3.1. 编译命令"></a>3.1. 编译命令</h3><h4 id="3-1-1-先编译普通版本"><a href="#3-1-1-先编译普通版本" class="headerlink" title="3.1.1. 先编译普通版本"></a>3.1.1. 先编译普通版本</h4><p>本文不赘述安装ORB_SLAM3依赖项的步骤，您可以参考<a href="https://blog.musnow.top/posts/1589125738/">【SLAM】于ubuntu18.04上纯CPU运行GCNv2_SLAM的记录（ARM64&#x2F;AMD64） | 慕雪的寒舍</a> 一文中的依赖项安装步骤。参考博客里面的步骤安装opencv、eigen3、Pangolin6.0就可以了，不需要安装libtorch。</p><p>其中需要注意的是，如果你需要编译ROS的ORB_SLAM3，<strong>opencv不能安装3.4.5版本，必须安装3.2.0版本</strong>！好消息是，如果你是跟随者本站或者ROS官网的教程安装的ROS，那么opencv 3.2.0版本已经和ROS一起安装在你的系统里面了。</p><p>安装完毕依赖后，先<strong>以普通模式编译ORB_SLAM3</strong>，因为ROS版本依赖于普通版本才能进行编译，这一点必须要注意。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/UZ-SLAMLab/ORB_SLAM3.git ORB_SLAM3</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> ORB_SLAM3</span><br><span class="line"><span class="built_in">chmod</span> +x build.sh</span><br><span class="line">./build.sh</span><br></pre></td></tr></table></figure><h4 id="3-1-2-修改build-ros-sh脚本"><a href="#3-1-2-修改build-ros-sh脚本" class="headerlink" title="3.1.2. 修改build_ros.sh脚本"></a>3.1.2. 修改build_ros.sh脚本</h4><p>编译完毕普通版本后，才可以执行<code>build_ros.sh</code>脚本。但是先别急，cat这个脚本，看看里面写了啥</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu-linux-22-04-02-desktop:/work/ORB_SLAM3# cat build_ros.sh </span><br><span class="line">echo &quot;Building ROS nodes&quot;</span><br><span class="line"></span><br><span class="line">cd Examples/ROS/ORB_SLAM3</span><br><span class="line">mkdir build</span><br><span class="line">cd build</span><br><span class="line">cmake .. -DROS_BUILD_TYPE=Release</span><br><span class="line">make -j</span><br></pre></td></tr></table></figure><p>其中第一个命令就有问题了，最新版本的ORB_SLAM3源码里面，Examples路径下已经没有ROS目录了，这个目录现在是<code>Examples_old/ROS/ORB_SLAM3</code>。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/02/bee0b045b18a1fe693aea1048fd22862.png" alt="image.png"></p><p>如果你没有注意这个问题就开始执行<code>build_ros.sh</code>脚本，问题就会出现，因为<code>Examples/ROS/ORB_SLAM3</code>目录当前不存在，该脚本实际上是直接在项目根目录下创建了build目录然后cmake开始编译的，编译的完全不是ROS版本。</p><p>这个脚本里面还有另外一个坑，那就是<code>make -j</code>后面没有写任何数字。这会导致make无休止地使用系统资源，直到把你的整个系统内存和swap都吃光光。根据我找到的博客，ORB_SLAM3的编译最多能吃掉16GB内存，完全是个洪水猛兽。</p><p>最开始我没有注意这个脚本，以为它没有任何问题，就直接执行了，最终在编译时遇到了如下错误。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">c++: internal compiler error: Killed (program cc1plus)</span><br><span class="line">Please submit a full bug report,</span><br><span class="line">with preprocessed source if appropriate.</span><br><span class="line">See &lt;file:///usr/share/doc/gcc-7/README.Bugs&gt; for instructions.</span><br></pre></td></tr></table></figure><p>这个错误就是因为系统没有资源了。开另外一个终端，再启动编译，你可以轻易地观察到编译是怎么把整个系统内存给吃光光的，最终物理内存和swap都没了，操作系统自然会kill掉编译进程，从而导致了上述报错。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/02/53a81ab5712af2c3f117d62f91fe5211.png" alt="image.png"></p><p>如果你直接搜索“ORB_SLAM3编译失败”等字样，可能会搜到相关教程让你加大swap文件，这是一个可选项，但还不够可选，因为在我的测试中，即便再给出2GB的swap文件，编译依旧会因为内存不足而失败。下面给出新增swap文件的命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">apt install util-linux</span><br><span class="line"><span class="comment"># 分配2G</span></span><br><span class="line">sudo fallocate -l 2G /swapfile</span><br><span class="line"><span class="comment"># 给予权限</span></span><br><span class="line">sudo <span class="built_in">chmod</span> 600 /swapfile</span><br><span class="line"><span class="comment"># 激活权限（执行了之后swap就生效了）</span></span><br><span class="line">sudo mkswap /swapfile</span><br><span class="line">sudo swapon /swapfile</span><br><span class="line"><span class="comment"># 不需要的时候，使用如下命令删除swap文件</span></span><br><span class="line">swapoff -v /swapfile</span><br><span class="line"><span class="built_in">rm</span> /swapfile</span><br></pre></td></tr></table></figure><p>实际上，在物理内存大于8GB的环境中不需要这么麻烦，前文提到了脚本里面make没有写线程数，解决办法就是修正这个脚本，首先是修正目录，其次是将make后面加上<code>-j4</code>来限制make使用的资源，这样就能绕过内存不足导致的编译错误了。修改后的脚本如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Building ROS nodes&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> Examples_old/ROS/ORB_SLAM3</span><br><span class="line"><span class="built_in">mkdir</span> build</span><br><span class="line"><span class="built_in">cd</span> build</span><br><span class="line">cmake .. -DROS_BUILD_TYPE=Release</span><br><span class="line">make -j4</span><br></pre></td></tr></table></figure><p>如果你的环境物理内存低于8GB，可以考虑在加大swap文件的同时进一步减少make使用的线程数，比如<code>make -j2</code>。</p><h4 id="3-1-3-编译ROS版本"><a href="#3-1-3-编译ROS版本" class="headerlink" title="3.1.3. 编译ROS版本"></a>3.1.3. 编译ROS版本</h4><p>修正了build_ros.sh脚本之后，就可以开始编译ROS版本了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> +x build_ros.sh</span><br><span class="line">./build_ros.sh</span><br></pre></td></tr></table></figure><p>再次提醒，ROS版本的编译依赖于普通版本，需要先编译普通版本！</p><h3 id="3-2-编译期间遇到的各种问题"><a href="#3-2-编译期间遇到的各种问题" class="headerlink" title="3.2. 编译期间遇到的各种问题"></a>3.2. 编译期间遇到的各种问题</h3><p>部分问题参考：<a href="https://blog.csdn.net/shikaiaixuexi/article/details/143749912">记录配置ubuntu18.04下运行ORBSLAM3的ros接口的过程及执行单目imu模式遇到的问题</a></p><h4 id="3-2-1-cmake错误ROS-PACKAGE-PATH"><a href="#3-2-1-cmake错误ROS-PACKAGE-PATH" class="headerlink" title="3.2.1. cmake错误ROS_PACKAGE_PATH"></a>3.2.1. cmake错误ROS_PACKAGE_PATH</h4><p>遇到的第一个错误应该是环境变量有关，编译ros版本的时候，需要将源码路径加入到环境变量中，才可以正常编译。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">CMake Error at /opt/ros/melodic/share/ros/core/rosbuild/private.cmake:99 (message):</span><br><span class="line">  [rosbuild] rospack found package &quot;ORB_SLAM3&quot; at &quot;&quot;, but the current</span><br><span class="line">  directory is &quot;/work/ORB_SLAM3/Examples_old/ROS/ORB_SLAM3&quot;.  You should</span><br><span class="line">  double-check your ROS_PACKAGE_PATH to ensure that packages are found in the</span><br><span class="line">  correct precedence order.</span><br><span class="line">Call Stack (most recent call first):</span><br><span class="line">  /opt/ros/melodic/share/ros/core/rosbuild/public.cmake:177 (_rosbuild_check_package_location)</span><br><span class="line">  CMakeLists.txt:4 (rosbuild_init)</span><br></pre></td></tr></table></figure><p>在ORB_SLAM3项目根目录下执行如下命令即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> ROS_PACKAGE_PATH=<span class="variable">$ROS_PACKAGE_PATH</span>:<span class="variable">$PWD</span>/Examples_old/ROS/ORB_SLAM3</span><br></pre></td></tr></table></figure><p>修正之后即可正常开始编译</p><h4 id="3-2-2-头文件se3-hpp找不到"><a href="#3-2-2-头文件se3-hpp找不到" class="headerlink" title="3.2.2. 头文件se3.hpp找不到"></a>3.2.2. 头文件se3.hpp找不到</h4><p>编译到30%的时候，会提示<code>&lt;sophus/se3.hpp&gt;</code>头文件找不到</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[ 30%] Building CXX object CMakeFiles/Mono_Inertial.dir/src/ros_mono_inertial.cc.o</span><br><span class="line">In file included from /work/ORB_SLAM3/Examples_old/ROS/ORB_SLAM3/../../../include/Frame.h:30:0,</span><br><span class="line">                 from /work/ORB_SLAM3/Examples_old/ROS/ORB_SLAM3/../../../include/KeyFrame.h:28,</span><br><span class="line">                 from /work/ORB_SLAM3/Examples_old/ROS/ORB_SLAM3/../../../include/MapPoint.h:23,</span><br><span class="line">                 from /work/ORB_SLAM3/Examples_old/ROS/ORB_SLAM3/../../../include/FrameDrawer.h:24,</span><br><span class="line">                 from /work/ORB_SLAM3/Examples_old/ROS/ORB_SLAM3/../../../include/Viewer.h:23,</span><br><span class="line">                 from /work/ORB_SLAM3/Examples_old/ROS/ORB_SLAM3/../../../include/Tracking.h:26,</span><br><span class="line">                 from /work/ORB_SLAM3/Examples_old/ROS/ORB_SLAM3/../../../include/System.h:31,</span><br><span class="line">                 from /work/ORB_SLAM3/Examples_old/ROS/ORB_SLAM3/src/ros_mono_inertial.cc:34:</span><br><span class="line">/work/ORB_SLAM3/Examples_old/ROS/ORB_SLAM3/../../../include/ImuTypes.h:29:10: fatal error: sophus/se3.hpp: No such file or directory</span><br><span class="line"> #include &lt;sophus/se3.hpp&gt;</span><br><span class="line">          ^~~~~~~~~~~~~~~~****</span><br></pre></td></tr></table></figure><p>这个第三方库sophus已经在Thirdparty文件夹里面自带了，刚刚我们编译普通版本的时候，其实也已经编译好了这个第三方库了。要做的就是进它的目录make install安装一下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> Thirdparty/Sophus/build/</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><p>安装以后就解决这个问题了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu-linux-22-04-02-desktop:/work/ORB_SLAM3# cd Thirdparty/Sophus/build/</span><br><span class="line">root@ubuntu-linux-22-04-02-desktop:/work/ORB_SLAM3/Thirdparty/Sophus/build# make install</span><br><span class="line">[  8%] Built target test_sim2</span><br><span class="line">[ 16%] Built target test_se2</span><br><span class="line">[ 25%] Built target test_so3</span><br><span class="line">[ 33%] Built target test_rxso2</span><br><span class="line">[ 41%] Built target test_so2</span><br><span class="line">[ 50%] Built target test_se3</span><br><span class="line">[ 58%] Built target test_geometry</span><br><span class="line">[ 66%] Built target test_rxso3</span><br><span class="line">[ 75%] Built target test_sim3</span><br><span class="line">[ 83%] Built target test_velocities</span><br><span class="line">[ 91%] Built target test_common</span><br><span class="line">[100%] Built target HelloSO3</span><br><span class="line">Install the project...</span><br><span class="line">-- Install configuration: &quot;Release&quot;</span><br><span class="line">-- Installing: /usr/local/share/sophus/cmake/SophusTargets.cmake</span><br><span class="line">-- Installing: /usr/local/share/sophus/cmake/SophusConfig.cmake</span><br><span class="line">-- Installing: /usr/local/share/sophus/cmake/SophusConfigVersion.cmake</span><br><span class="line">-- Installing: /usr/local/include/sophus/average.hpp</span><br><span class="line">-- Installing: /usr/local/include/sophus/common.hpp</span><br><span class="line">-- Installing: /usr/local/include/sophus/geometry.hpp</span><br><span class="line">-- Installing: /usr/local/include/sophus/interpolate.hpp</span><br><span class="line">-- Installing: /usr/local/include/sophus/interpolate_details.hpp</span><br><span class="line">-- Installing: /usr/local/include/sophus/num_diff.hpp</span><br><span class="line">-- Installing: /usr/local/include/sophus/rotation_matrix.hpp</span><br><span class="line">-- Installing: /usr/local/include/sophus/rxso2.hpp</span><br><span class="line">-- Installing: /usr/local/include/sophus/rxso3.hpp</span><br><span class="line">-- Installing: /usr/local/include/sophus/se2.hpp</span><br><span class="line">-- Installing: /usr/local/include/sophus/se3.hpp</span><br><span class="line">-- Installing: /usr/local/include/sophus/sim2.hpp</span><br><span class="line">-- Installing: /usr/local/include/sophus/sim3.hpp</span><br><span class="line">-- Installing: /usr/local/include/sophus/sim_details.hpp</span><br><span class="line">-- Installing: /usr/local/include/sophus/so2.hpp</span><br><span class="line">-- Installing: /usr/local/include/sophus/so3.hpp</span><br><span class="line">-- Installing: /usr/local/include/sophus/types.hpp</span><br><span class="line">-- Installing: /usr/local/include/sophus/velocities.hpp</span><br><span class="line">-- Installing: /usr/local/include/sophus/formatstring.hpp</span><br></pre></td></tr></table></figure><h4 id="3-2-3-OpenCV-版本不匹配"><a href="#3-2-3-OpenCV-版本不匹配" class="headerlink" title="3.2.3. OpenCV 版本不匹配"></a>3.2.3. OpenCV 版本不匹配</h4><p>前文提到过，OpenCV必须安装 3.2.0 版本，是因为cv_bridge默认会指向ROS自带的3.2.0版本，而不是我们自己安装的其他版本，最终编译或者运行的时候就会导致链接错误或者coredump错误。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/ld: warning: libopencv_core.so.3.2, needed by /opt/ros/melodic/lib/libcv_bridge.so, may conflict with libopencv_core.so.3.4</span><br></pre></td></tr></table></figure><p>如果你已经安装了其他版本的opencv，需要删掉它们。从源码安装的话，直接进入opencv源码的build目录执行<code>make uninstall</code>就可以卸载掉自己安装的opencv。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/02/b1905e7093dcb9ee085ce7f23784385b.png" alt="image.png"></p><p>删掉了之后就会发现系统里面只剩下和ros一起安装的3.2.0版本opencv了，应该是下载ros环境的时候自动安装的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu-linux-22-04-02-desktop:/work/ORB_SLAM3# pkg-config --modversion opencv</span><br><span class="line">3.2.0</span><br></pre></td></tr></table></figure><p>随后我们需要修改CMakeLists文件，让编译的时候使用opencv 3.2.0版本。首先是根目录下的CMakeLists，修改如下部分的版本号为3.2即可</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ORB_SLAM3/CMakeLists.txt</span></span><br><span class="line"><span class="keyword">find_package</span>(OpenCV <span class="number">3.2</span>)</span><br><span class="line">   <span class="keyword">if</span>(<span class="keyword">NOT</span> OpenCV_FOUND)</span><br><span class="line">      <span class="keyword">message</span>(FATAL_ERROR <span class="string">&quot;OpenCV &gt; 3.2 not found.&quot;</span>)</span><br><span class="line">   <span class="keyword">endif</span>()</span><br></pre></td></tr></table></figure><p>然后是<code>Examples_old/ROS/ORB_SLAM3</code>里面的CMakeLists文件，修改如下部分为3.2.0版本</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ORB_SLAM3/Examples_old/ROS/ORB_SLAM3/CMakeLists.txt</span></span><br><span class="line"><span class="keyword">find_package</span>(OpenCV <span class="number">3.2</span>.<span class="number">0</span> QUIET) <span class="comment"># 修改为3.2.0</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">NOT</span> OpenCV_FOUND)</span><br><span class="line">   <span class="keyword">find_package</span>(OpenCV <span class="number">2.4</span>.<span class="number">3</span> QUIET)</span><br><span class="line">   <span class="keyword">if</span>(<span class="keyword">NOT</span> OpenCV_FOUND)</span><br><span class="line">      <span class="keyword">message</span>(FATAL_ERROR <span class="string">&quot;OpenCV &gt; 2.4.3 not found.&quot;</span>)</span><br><span class="line">   <span class="keyword">endif</span>()</span><br><span class="line"><span class="keyword">endif</span>()</span><br></pre></td></tr></table></figure><p>接下来就要删除所有编译缓存，重新编译一遍。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">rm -rf Thirdparty/g2o/build/</span><br><span class="line">rm -rf Thirdparty/DBoW2/build/</span><br><span class="line">rm -rf Thirdparty/Sophus/build/</span><br><span class="line">rm -rf Vocabulary/*.bin</span><br><span class="line">rm -rf ./build</span><br><span class="line">rm -rf Examples_old/ROS/ORB_SLAM3/build</span><br></pre></td></tr></table></figure><p><strong>注意普通版本也需要重新编译</strong>！因为最开始编译的时候我的普通版本是基于opecv 3.4.5编译的，如果不重新基于opencv 3.2.0编译普通版本，编译ROS的时候就会提示<code>libORB_SLAM3.so</code>需要3.4.5版本的opencv才能正常链接，终究还是版本对不上。</p><h4 id="3-2-4-AR代码错误（四处）"><a href="#3-2-4-AR代码错误（四处）" class="headerlink" title="3.2.4. AR代码错误（四处）"></a>3.2.4. AR代码错误（四处）</h4><p>修复了opencv版本问题后，接下来就会遇到一堆由于<code>Examples_old/ROS/ORB_SLAM3/src/AR</code>路径下的代码问题导致的错误。如果你不需要使用MonoAR也就是<strong>单目AR</strong>功能，可以直接<strong>注释掉</strong>CMakeLists文件里面71行的如下部分，跳过AR代码的编译。</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ORB_SLAM3/Examples_old/ROS/ORB_SLAM3/CMakeLists.txt</span></span><br><span class="line"><span class="comment"># Node for monocular camera (Augmented Reality Demo)</span></span><br><span class="line">rosbuild_add_executable(MonoAR</span><br><span class="line"> src/AR/ros_mono_ar.cc</span><br><span class="line"> src/AR/ViewerAR.h</span><br><span class="line"> src/AR/ViewerAR.cc</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">target_link_libraries</span>(MonoAR</span><br><span class="line"> <span class="variable">$&#123;LIBS&#125;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>注释掉之后，应该就可以成功编译其他部分了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[rosbuild] Including /opt/ros/melodic/share/roslisp/rosbuild/roslisp.cmake</span><br><span class="line">[rosbuild] Including /opt/ros/melodic/share/roscpp/rosbuild/roscpp.cmake</span><br><span class="line">[rosbuild] Including /opt/ros/melodic/share/rospy/rosbuild/rospy.cmake</span><br><span class="line">Build type: Release</span><br><span class="line">-- Using flag -std=c++11.</span><br><span class="line">-- Configuring done</span><br><span class="line">-- Generating done</span><br><span class="line">-- Build files have been written to: /work/ORB_SLAM3/Examples_old/ROS/ORB_SLAM3/build</span><br><span class="line">[  0%] Built target rospack_genmsg_libexe</span><br><span class="line">[  0%] Built target rosbuild_precompile</span><br><span class="line">[ 40%] Built target RGBD</span><br><span class="line">[ 40%] Built target Stereo</span><br><span class="line">[ 80%] Built target Mono_Inertial</span><br><span class="line">[ 80%] Built target Stereo_Inertial</span><br><span class="line">[100%] Built target Mono</span><br></pre></td></tr></table></figure><p>如果你需要MonoAR，<strong>就需要上手改代码了</strong>。参考<a href="https://github.com/UZ-SLAMLab/ORB_SLAM3/issues/442">github.com&#x2F;UZ-SLAMLab&#x2F;ORB_SLAM3&#x2F;issues&#x2F;442</a>，依次修复问题。</p><p>这部分修改很杂，你可以直接根据我的提交记录来修改：<a href="https://github.com/musnows/ORB_SLAM3/commit/4e1cbdb5b9d18e0b9eb0f07ad70595d3f274200f">Fix compile error of ROS AR, used opencv 3.2.0 for ROS compile. · musnows&#x2F;ORB_SLAM3@4e1cbdb · GitHub</a></p><hr><p>1）类型<code>Sophus::SE3&lt;float&gt;</code>和<code>cv::Mat</code>不匹配</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/work/ORB_SLAM3/Examples_old/ROS/ORB_SLAM3/src/AR/ros_mono_ar.cc: In member function &#x27;void ImageGrabber::GrabImage(const ImageConstPtr&amp;)&#x27;:</span><br><span class="line">/work/ORB_SLAM3/Examples_old/ROS/ORB_SLAM3/src/AR/ros_mono_ar.cc:151:41: error: conversion from &#x27;Sophus::SE3f &#123;aka Sophus::SE3&lt;float&gt;&#125;&#x27; to non-scalar type &#x27;cv::Mat&#x27; requested</span><br><span class="line">     cv::Mat Tcw = mpSLAM-&gt;TrackMonocular(cv_ptr-&gt;image,cv_ptr-&gt;header.stamp.toSec());</span><br><span class="line">                   ~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br><span class="line">CMakeFiles/MonoAR.dir/build.make:198: recipe for target &#x27;CMakeFiles/MonoAR.dir/src/AR/ViewerAR.cc.o&#x27; failed</span><br></pre></td></tr></table></figure><p>修改<code>ORB_SLAM3/Examples_old/ROS/ORB_SLAM3/src/AR/ros_mono_ar.cc</code>的151行，被注释掉的是源代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// cv::Mat Tcw = mpSLAM-&gt;TrackMonocular(cv_ptr-&gt;image,cv_ptr-&gt;header.stamp.toSec());</span></span><br><span class="line">cv::Mat Tcw;</span><br><span class="line">Sophus::SE3f Tcw_SE3f = mpSLAM-&gt;<span class="built_in">TrackMonocular</span>(cv_ptr-&gt;image,cv_ptr-&gt;header.stamp.<span class="built_in">toSec</span>());</span><br><span class="line">Eigen::Matrix4f Tcw_Matrix = Tcw_SE3f.<span class="built_in">matrix</span>();</span><br><span class="line">cv::<span class="built_in">eigen2cv</span>(Tcw_Matrix, Tcw);</span><br></pre></td></tr></table></figure><p>2）<code>&#39;eigen2cv&#39; is not a member of &#39;cv&#39;</code> 错误</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/work/ORB_SLAM3/Examples_old/ROS/ORB_SLAM3/src/AR/ros_mono_ar.cc:155:9: error: &#x27;eigen2cv&#x27; is not a member of &#x27;cv&#x27;</span><br><span class="line">     cv::eigen2cv(Tcw_Matrix, Tcw);</span><br><span class="line">         ^~~~~~~~</span><br><span class="line">/work/ORB_SLAM3/Examples_old/ROS/ORB_SLAM3/src/AR/ros_mono_ar.cc:155:9: note: suggested alternative: &#x27;eigen&#x27;</span><br><span class="line">     cv::eigen2cv(Tcw_Matrix, Tcw);</span><br><span class="line">         ^~~~~~~~</span><br><span class="line">         eigen</span><br></pre></td></tr></table></figure><p>在<code>ORB_SLAM3/Examples_old/ROS/ORB_SLAM3/src/AR/ros_mono_ar.cc</code>和<code>ORB_SLAM3/Examples_old/ROS/ORB_SLAM3/src/AR/ViewerAR.h</code>顶部添加三个头文件</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Eigen/Dense&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;opencv2/core/eigen.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;opencv2/opencv.hpp&gt;</span></span></span><br></pre></td></tr></table></figure><p>3）类型<code>Eigen::Matrix&lt;float, 3, 1&gt;</code>和<code>cv::Mat</code>不匹配</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/work/ORB_SLAM3/Examples_old/ROS/ORB_SLAM3/src/AR/ViewerAR.cc: In member function &#x27;void ORB_SLAM3::Plane::Recompute()&#x27;:</span><br><span class="line">/work/ORB_SLAM3/Examples_old/ROS/ORB_SLAM3/src/AR/ViewerAR.cc:530:42: error: conversion from &#x27;Eigen::Vector3f &#123;aka Eigen::Matrix&lt;float, 3, 1&gt;&#125;&#x27; to non-scalar type &#x27;cv::Mat&#x27; requested</span><br><span class="line">             cv::Mat Xw = pMP-&gt;GetWorldPos();</span><br><span class="line">                          ~~~~~~~~~~~~~~~~^~</span><br></pre></td></tr></table></figure><p>修改<code>ORB_SLAM3/Examples_old/ROS/ORB_SLAM3/src/AR/ViewerAR.cc:530</code>处代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// cv::Mat Xw = pMP-&gt;GetWorldPos();</span></span><br><span class="line">cv::Mat Xw;</span><br><span class="line">cv::<span class="built_in">eigen2cv</span>(pMP-&gt;<span class="built_in">GetWorldPos</span>(), Xw);</span><br></pre></td></tr></table></figure><p>4）尾插错误 <code>no matching function for call to &#39;std::vector&lt;cv::Mat&gt;::push_back(Eigen::Vector3f)&#39;</code></p><p>这个问题也是类型不匹配</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/work/ORB_SLAM3/Examples_old/ROS/ORB_SLAM3/src/AR/ViewerAR.cc: In member function &#x27;ORB_SLAM3::Plane* ORB_SLAM3::ViewerAR::DetectPlane(cv::Mat, const std::vector&lt;ORB_SLAM3::MapPoint*&gt;&amp;, int)&#x27;:</span><br><span class="line">/work/ORB_SLAM3/Examples_old/ROS/ORB_SLAM3/src/AR/ViewerAR.cc:405:53: error: no matching function for call to &#x27;std::vector&lt;cv::Mat&gt;::push_back(Eigen::Vector3f)&#x27;</span><br><span class="line">                 vPoints.push_back(pMP-&gt;GetWorldPos());</span><br><span class="line">                                                     ^</span><br></pre></td></tr></table></figure><p>修改<code>ORB_SLAM3/Examples_old/ROS/ORB_SLAM3/src/AR/ViewerAR.cc:405</code>的代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vPoints.push_back(pMP-&gt;GetWorldPos());</span></span><br><span class="line">cv::Mat WorldPos;</span><br><span class="line">cv::<span class="built_in">eigen2cv</span>(pMP-&gt;<span class="built_in">GetWorldPos</span>(), WorldPos);</span><br><span class="line">vPoints.<span class="built_in">push_back</span>(WorldPos);</span><br></pre></td></tr></table></figure><h3 id="3-3-成功编译"><a href="#3-3-成功编译" class="headerlink" title="3.3. 成功编译"></a>3.3. 成功编译</h3><p>修改完毕上述四个问题后，就应该可以编译成功了。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/02/ecf71dac31b76332a3415d6ea13211a2.png" alt="image.png"></p><p>编译完成后会多出很多可执行文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu-linux-22-04-02-desktop:/work/ORB_SLAM3/Examples_old/ROS/ORB_SLAM3# ls</span><br><span class="line">Asus.yaml  CMakeLists.txt  Mono  MonoAR  Mono_Inertial  RGBD  Stereo  Stereo_Inertial  build  lib  manifest.xml  src</span><br></pre></td></tr></table></figure><p>注意这些可执行文件是不能直接运行的，因为它们是针对ROS设计的文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu-linux-22-04-02-desktop:/work/ORB_SLAM3/Examples_old/ROS/ORB_SLAM3# ./Mono</span><br><span class="line">[ERROR] [1739083807.698375008]: [registerPublisher] Failed to contact master at [localhost:11311].  Retrying...</span><br><span class="line">^C</span><br><span class="line">Usage: rosrun ORB_SLAM3 Mono path_to_vocabulary path_to_settings</span><br></pre></td></tr></table></figure><h2 id="4-在ROS下运行项目"><a href="#4-在ROS下运行项目" class="headerlink" title="4. 在ROS下运行项目"></a>4. 在ROS下运行项目</h2><p>参考博客：<a href="https://zhaoxuhui.top/blog/2020/09/30/orb-slam3-cmake-ros-compilation-and-test.html">ORB-SLAM3的CMake与ROS编译以及测试</a>；<a href="https://www.jianshu.com/p/31c95d9a5f97">ORB SLAM 2 demo 复现（普通模式 + ROS 模式） - 简书</a>；</p><h3 id="4-1-下载TUM和EuRoC数据集"><a href="#4-1-下载TUM和EuRoC数据集" class="headerlink" title="4.1. 下载TUM和EuRoC数据集"></a>4.1. 下载TUM和EuRoC数据集</h3><p>因为是在ROS环境下运行，所以数据集不能用之前下载的tgz格式的了，必须使用ROS专门的bag格式的数据集。</p><ul><li>TUM RGB-D数据集：<a href="https://cvg.cit.tum.de/data/datasets/rgbd-dataset/download">cvg.cit.tum.de&#x2F;data&#x2F;datasets&#x2F;rgbd-dataset&#x2F;download</a>；</li><li>EuRoC双目数据集：<a href="http://robotics.ethz.ch/~asl-datasets/ijrr_euroc_mav_dataset/machine_hall/MH_01_easy/MH_01_easy.bag">robotics.ethz.ch&#x2F;~asl-datasets&#x2F;ijrr_euroc_mav_dataset&#x2F;machine_ha…</a></li></ul><p>在TUM数据集的下载页面中，往下滑可以看到每个数据集的简单介绍，这里就能下载到bag格式的数据集。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/02/2ec14dc5b2954aba91c9d2b437da6038.png" alt="image.png"></p><p>下载完毕后，可以使用rosbag info命令查看数据集中有的topic信息：</p><ul><li>Topic是一个命名的通信管道，用于在不同的ROS节点之间传递信息；</li><li>每个Topic都有一个唯一的名称，节点可以通过这个名称来订阅这个topic的信息；</li><li>Topic中的数据以message的格式传输，message是ROS中定义好的数据结构，如 <code>sensor_msgs/Image</code>、<code>geometry_msgs/Pose</code> 等；</li></ul><p>举个例子，<code>fr1/desk</code>数据集的Topic信息如下，其中depth就是深度数据，rgb就是普通的彩色录像数据。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu-linux-22-04-02-desktop:/work/ORB_SLAM3# rosbag info datasets/TUM/rgbd_dataset_freiburg1_desk.bag</span><br><span class="line">path:         datasets/TUM/rgbd_dataset_freiburg1_desk.bag</span><br><span class="line">version:      2.0</span><br><span class="line">duration:     23.8s</span><br><span class="line">start:        May 10 2011 20:44:09.56 (1305031449.56)</span><br><span class="line">end:          May 10 2011 20:44:33.32 (1305031473.32)</span><br><span class="line">size:         371.7 MB</span><br><span class="line">messages:     19893</span><br><span class="line">compression:  bz2 [1210/1210 chunks; 29.85%]</span><br><span class="line">uncompressed:   1.2 GB @ 52.3 MB/s</span><br><span class="line">compressed:   370.9 MB @ 15.6 MB/s (29.85%)</span><br><span class="line">types:        sensor_msgs/CameraInfo         [c9a58c1b0b154e0e6da7578cb991d214]</span><br><span class="line">              sensor_msgs/Image              [060021388200f6f0f447d0fcd9c64743]</span><br><span class="line">              sensor_msgs/Imu                [6a62c6daae103f4ff57a132d6f95cec2]</span><br><span class="line">              tf/tfMessage                   [94810edda583a504dfda3829e70d7eec]</span><br><span class="line">              visualization_msgs/MarkerArray [f10fe193d6fac1bf68fad5d31da421a7]</span><br><span class="line">topics:       /camera/depth/camera_info     595 msgs    : sensor_msgs/CameraInfo        </span><br><span class="line">              /camera/depth/image           595 msgs    : sensor_msgs/Image             </span><br><span class="line">              /camera/rgb/camera_info       613 msgs    : sensor_msgs/CameraInfo        </span><br><span class="line">              /camera/rgb/image_color       613 msgs    : sensor_msgs/Image             </span><br><span class="line">              /cortex_marker_array         2360 msgs    : visualization_msgs/MarkerArray</span><br><span class="line">              /imu                        11815 msgs    : sensor_msgs/Imu               </span><br><span class="line">              /tf                          3302 msgs    : tf/tfMessage</span><br></pre></td></tr></table></figure><p>而给出的EuRoC双目数据集的Topic如下，有两个cam就对应了左侧和右侧的两个相机。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu-linux-22-04-02-desktop:/work/ORB_SLAM3/datasets# rosbag info MH_01_easy.bag </span><br><span class="line">path:        MH_01_easy.bag</span><br><span class="line">version:     2.0</span><br><span class="line">duration:    3:06s (186s)</span><br><span class="line">start:       Jun 25 2014 03:02:59.81 (1403636579.81)</span><br><span class="line">end:         Jun 25 2014 03:06:06.70 (1403636766.70)</span><br><span class="line">size:        2.5 GB</span><br><span class="line">messages:    47283</span><br><span class="line">compression: none [2456/2456 chunks]</span><br><span class="line">types:       geometry_msgs/PointStamped [c63aecb41bfdfd6b7e1fac37c7cbe7bf]</span><br><span class="line">             sensor_msgs/Image          [060021388200f6f0f447d0fcd9c64743]</span><br><span class="line">             sensor_msgs/Imu            [6a62c6daae103f4ff57a132d6f95cec2]</span><br><span class="line">topics:      /cam0/image_raw    3682 msgs    : sensor_msgs/Image         </span><br><span class="line">             /cam1/image_raw    3682 msgs    : sensor_msgs/Image         </span><br><span class="line">             /imu0             36820 msgs    : sensor_msgs/Imu           </span><br><span class="line">             /leica/position    3099 msgs    : geometry_msgs/PointStamped</span><br></pre></td></tr></table></figure><p>假设我们使用自己的摄像头的话，也是利用ROS的工具将我们摄像头的数据输入到一个Topic中，这样就可以供系统的其他组件，比如SLAM系统来读取，以此实现在ROS系统上硬件输入和软件的读取。这便是使用ROS模式和普通模式的最大区别，普通模式下我们必须要直接提供程序的数据输入源，才能让程序运行起来；而ROS模式下我们可以先把整个SLAM系统启动起来，再通过我们想要的方式往SLAM系统订阅的Topic里面喂数据即可。</p><h3 id="4-2-单目运行"><a href="#4-2-单目运行" class="headerlink" title="4.2. 单目运行"></a>4.2. 单目运行</h3><p>刚刚我们下载的TUM fr1/desk的数据集，即可以用作RGB-D模式的输入，又可以做单目摄像头的输入，因为深度数据是独立于RGB单目数据的。</p><p>刚刚我们直接运行Mono的时候，就打印出了一个Usage</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu-linux-22-04-02-desktop:/work/ORB_SLAM3/Examples_old/ROS/ORB_SLAM3# ./Mono</span><br><span class="line">[ERROR] [1739083807.698375008]: [registerPublisher] Failed to contact master at [localhost:11311].  Retrying...</span><br><span class="line">^C</span><br><span class="line">Usage: rosrun ORB_SLAM3 Mono path_to_vocabulary path_to_settings</span><br></pre></td></tr></table></figure><p>我们要使用的就是这个命令，rosrun代表启动一个节点，<code>ORB_SLAM3</code>是我们当前使用的包名称，也就是CMakeLists里面注册的项目名称，Mono是我们要执行的可执行文件名称。后面的两个参数分别是词袋文件和相机的配置文件。</p><p>最终执行的命令如下，需要在两个终端中执行（在项目根目录执行）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打开终端A</span></span><br><span class="line">roscore</span><br><span class="line"><span class="comment"># 打开终端B</span></span><br><span class="line">rosrun ORB_SLAM3 Mono Vocabulary/ORBvoc.txt Examples_old/Monocular/TUM1.yaml</span><br></pre></td></tr></table></figure><p>执行了之后，就会启动ORB_SLAM3的Map Viewer，此时是黑屏的，因为么有任何数据被送到ORB_SLAM3订阅的Topic中。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/02/3fb20983c6b8e63056fa3ab9f7dc80a0.png" alt="image.png"></p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/02/6f1ba02f88e3314c3040368b1af6aec9.png" alt="image.png"></p><p>再新建一个终端，执行如下命令，将TUM数据集bag文件里面的Topic绑定到ORB_SLAM3订阅的Topic上，这样就能获取到数据了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rosbag play \</span><br><span class="line">datasets/TUM/rgbd_dataset_freiburg1_desk.bag \</span><br><span class="line">/camera/rgb/image_color:=/camera/image_raw</span><br></pre></td></tr></table></figure><p>其中，最后一个参数<code>/camera/rgb/image_color:=/camera/image_raw</code>指代将bag文件中的<code>/camera/rgb/image_color</code>绑定到<code>/camera/image_raw</code>上，后者就是ORB_SLAM3订阅的相机原始数据的Topic，相当于将bag中已有的图像数据重新喂给了我们的SLAM系统。</p><p>因为ROS的Topic机制，这种喂进去的数据集和接一个摄像头得到的实时数据，对于订阅这个Topic的SLAM系统而言是完全一样的！</p><p>执行这个命令后，就能在GUI里面看到相机的数据流和SLAM的建图了</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/02/713bc539193427764c593312fd392a8e.png" alt="image.png"></p><h3 id="4-3-RGB-D运行"><a href="#4-3-RGB-D运行" class="headerlink" title="4.3. RGB-D运行"></a>4.3. RGB-D运行</h3><p>RGB-D相机也是使用相同的命令来执行，先在另外一个终端执行roscore，然后执行如下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rosrun ORB_SLAM3 RGBD Vocabulary/ORBvoc.txt Examples_old/RGB-D/TUM1.yaml</span><br></pre></td></tr></table></figure><p>刚启动的时候也是黑屏</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/02/6f1ba02f88e3314c3040368b1af6aec9.png" alt="image.png"></p><p>再开另外一个终端，开始喂我们的数据集，这里用了两个<code>:=</code>号，分别绑定了原始的RGB相机数据到<code>/camera/rgb/image_raw </code>，绑定了深度数据到<code>/camera/depth_registered/image_raw</code>上</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rosbag play \</span><br><span class="line">datasets/TUM/rgbd_dataset_freiburg1_desk.bag \</span><br><span class="line">/camera/rgb/image_color:=/camera/rgb/image_raw \</span><br><span class="line">/camera/depth/image:=/camera/depth_registered/image_raw</span><br></pre></td></tr></table></figure><p>随后GUI里面也开始显示图像了</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/02/e5a78bd10e4b6514f7ed63f02ce7dacd.png" alt="image.png"></p><p>等运行结束后，会发现此时SLAM的建图结果是不对的，所有的点都在很小的一块区域中</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/02/51dc1236b065fbedcde4273dbea37972.png" alt="image.png"></p><p>作为对比，下图为本地虚拟机在普通模式下运行时的RGB-D建图结果，很明显和上图完全不一样。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/02/fb081dc6226497056b3613b2220e9aa9.png" alt="image.png"></p><p>这是因为<code>Examples_old/RGB-D/TUM1.yaml</code>数据配置有问题。在TUM官网上提到了这两个数据集在ROS和非ROS中是不一样的，实际上这个文件里面也有注释</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deptmap values factor </span></span><br><span class="line"><span class="attr">DepthMapFactor:</span> <span class="number">5000</span> <span class="comment"># 1.0 for ROS_bag</span></span><br></pre></td></tr></table></figure><p>官网说明：<a href="https://cvg.cit.tum.de/data/datasets/rgbd-dataset/file_formats#intrinsic_camera_calibration_of_the_kinect">cvg.cit.tum.de&#x2F;data&#x2F;datasets&#x2F;rgbd-dataset&#x2F;file_formats#intrinsic…</a></p><blockquote><p><strong>Color images and depth maps</strong></p><p>We provide the time-stamped color and depth images as a gzipped tar file (TGZ).</p><ul><li>The color images are stored as 640x480 8-bit RGB images in PNG format.</li><li>The depth maps are stored as 640x480 16-bit monochrome images in PNG format.</li><li>The color and depth images are already pre-registered using the OpenNI driver from PrimeSense, i.e., the pixels in the color and depth images correspond already 1:1.</li><li>The depth images are scaled by a factor of 5000, i.e., a pixel value of 5000 in the depth image corresponds to a distance of 1 meter from the camera, 10000 to 2 meter distance, etc. A pixel value of 0 means missing value&#x2F;no data.</li></ul></blockquote><p>这里是深度值的校正系数(factor)，使用时的计算公式为<code>Z = depth_image[v,u] / factor</code>，在ROS中要把它改成1才可以。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">factor</span> <span class="string">=</span> <span class="number">5000</span> <span class="comment"># for the 16-bit PNG files</span></span><br><span class="line"><span class="string">factor</span> <span class="string">=</span> <span class="number">1</span>    <span class="comment"># for the 32-bit float images in the ROS bag files</span></span><br></pre></td></tr></table></figure><p>将DepthMapFactor修改为<code>1.0</code>之后的建图就正常一些了</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/02/e867d520f01580ce93b865cfc9b56025.png" alt="image.png"></p><h3 id="4-4-双目运行"><a href="#4-4-双目运行" class="headerlink" title="4.4. 双目运行"></a>4.4. 双目运行</h3><p>下载EuRoC对应的rosbag：<a href="http://robotics.ethz.ch/~asl-datasets/ijrr_euroc_mav_dataset/machine_hall/MH_01_easy/MH_01_easy.bag">MH_01_easy.bag</a>，上文已经给出过该数据集对应的Topic了，其中要用到的 Topic 是左右两个摄像头的数据 <code>/cam0/image_raw</code> 和 <code>/cam1/image_raw</code>。ORB_SLAM3 中双目 Stereo 接收的 Topic 分别为 <code>/camera/left/image_raw</code> 和 <code>/camera/right/image_raw</code>，因此在运行时也需要绑定一下 Topic。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">topics:      /cam0/image_raw    3682 msgs    : sensor_msgs/Image         </span><br><span class="line">             /cam1/image_raw    3682 msgs    : sensor_msgs/Image         </span><br><span class="line">             /imu0             36820 msgs    : sensor_msgs/Imu           </span><br><span class="line">             /leica/position    3099 msgs    : geometry_msgs/PointStamped</span><br></pre></td></tr></table></figure><p>双目的rosrun命令最后多了一个bool类型参数<code>do_rectify</code>，含义为是否进行矫正，根据需要选择true或false。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Usage: rosrun ORB_SLAM3 Stereo path_to_vocabulary path_to_settings do_rectify</span><br></pre></td></tr></table></figure><p>执行如下命令，先启动Stereo双目模式下的SLAM，然后开始播放数据集，同样是使用<code>:=</code>分别绑定左侧和右侧两个摄像头的数据。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 终端a</span></span><br><span class="line">roscore</span><br><span class="line"><span class="comment"># 终端b</span></span><br><span class="line">rosrun ORB_SLAM3 Stereo Vocabulary/ORBvoc.txt Examples_old/Stereo/EuRoC.yaml <span class="literal">true</span></span><br><span class="line"><span class="comment"># 终端c</span></span><br><span class="line">rosbag play MH_01_easy.bag /cam0/image_raw:=/camera/left/image_raw /cam1/image_raw:=/camera/right/image_raw</span><br></pre></td></tr></table></figure><p>也是成功运行起来了</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/02/4532d161bce1a806b99e91a7f55c5097.png" alt="image.png"></p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/02/fa1f127cf0f7c119d434b75416c9f6c1.png" alt="image.png"></p><h2 id="5-The-end"><a href="#5-The-end" class="headerlink" title="5. The end"></a>5. The end</h2><p>本文介绍了如何在ROS环境下编译ORB_SLAM3，并使用TUM和EuRoC数据集测试单目、双目、RGB-D三种模式在ROS下运行的效果。希望对你有帮助！</p><p>更新：ORB_SLAM2的ROS运行命令和本文记录的完全一致，只需要把rosrun里面的包名改成ORB_SLAM2就可以了。下图是在ROS模式下运行ORB_SLAM2的RGB-D的截图。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/02/269ace5a14d78815e436b9633e0cd435.png" alt="image.png"></p>]]></content>
    
    
    <summary type="html">在 ubuntu 18.04 arm 中于ROS环境编译与运行ORB_SLAM3，并以TUM数据集测试了ROS下单目、双目和RGB-D运行</summary>
    
    
    
    <category term="编程学习" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="Linux" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/Linux/"/>
    
    
    <category term="Linux" scheme="https://blog.musnow.top/tags/Linux/"/>
    
    <category term="Cpp" scheme="https://blog.musnow.top/tags/Cpp/"/>
    
    <category term="SLAM" scheme="https://blog.musnow.top/tags/SLAM/"/>
    
  </entry>
  
  <entry>
    <title>【Linux】在 ubuntu 18.04 arm 容器中安装ROS环境</title>
    <link href="https://blog.musnow.top/posts/3771271576/"/>
    <id>https://blog.musnow.top/posts/3771271576/</id>
    <published>2025-02-09T05:06:07.000Z</published>
    <updated>2025-02-09T10:58:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>在ubuntu18.04arm（docker容器）中安装ROS环境。</p><h2 id="1-简述"><a href="#1-简述" class="headerlink" title="1. 简述"></a>1. 简述</h2><p>由于本人对ROS并不是特别了解，这里就不引入ROS的背景介绍了。</p><p>ROS的安装主要基于官网的教程，先选择你当前使用的ubuntu版本对应的ROS，然后根据具体版本的ROS官方教程来安装就可以了。</p><p>先打开ROS官网：<a href="https://wiki.ros.org/cn">cn - ROS Wiki</a>。</p><p>选择“安装”，会进入如下页面，这里会提示你不同版本的ROS以及推荐安装的ubuntu系统。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/02/0fd67ca21e085e04f3ab28ed1c4f0b5d.png" alt="image.png"></p><p>因为我当前使用的是ubuntu18.04，所以选择ROS Melodic Morenia这一发行版。点进去后可以看到这里列出来了支持的操作系统和对应的架构版本，我们当前使用的 ubuntu 18.04 对应的发行版本代号是Bionic，这个版本的ROS是支持arm64架构的。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/02/6927cfd276dbb15ba32d8ea56c04c509.png" alt="image.png"></p><p>点击ubuntu链接，就会跳转到 ubuntu 18.04 上安装ROS的教程了：<a href="https://wiki.ros.org/cn/melodic/Installation/Ubuntu">cn&#x2F;melodic&#x2F;Installation&#x2F;Ubuntu - ROS Wiki</a>。</p><p>跟着教程一步一来，本文主要记录遇到过的坑。</p><h2 id="2-安装ROS"><a href="#2-安装ROS" class="headerlink" title="2. 安装ROS"></a>2. 安装ROS</h2><h3 id="2-1-配置软件源"><a href="#2-1-配置软件源" class="headerlink" title="2.1. 配置软件源"></a>2.1. 配置软件源</h3><p>官网给出了两个软件源的命令，一个是官方的源，另外一个是国内清华源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 官方源</span></span><br><span class="line">sudo sh -c <span class="string">&#x27;echo &quot;deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main&quot; &gt; /etc/apt/sources.list.d/ros-latest.list&#x27;</span></span><br><span class="line"><span class="comment"># 清华源</span></span><br><span class="line">sudo sh -c <span class="string">&#x27;. /etc/lsb-release &amp;&amp; echo &quot;deb http://mirrors.tuna.tsinghua.edu.cn/ros/ubuntu/ `lsb_release -cs` main&quot; &gt; /etc/apt/sources.list.d/ros-latest.list&#x27;</span></span><br></pre></td></tr></table></figure><p>这里推荐直接使用国内的清华源。执行这个命令之后就会遇到第一个错误，环境中缺少<code>lsb_release</code>命令。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu-linux-22-04-02-desktop:/work# lsb_release -sc</span><br><span class="line">bash: lsb_release: command not found</span><br></pre></td></tr></table></figure><p>需要apt安装<code>lsb-release</code>包，执行<code>apt-get install lsb-release</code>命令即可。安装了之后就可以使用<code>lsb_release</code>命令了，命令的作用是显示当前发行版的名称，前文已经提到了ubuntu 18.04是bionic。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu-linux-22-04-02-desktop:/work# lsb_release -sc</span><br><span class="line">bionic</span><br></pre></td></tr></table></figure><p>安装了该软件包后，重新执行上述添加软件源的命令。注意如果你刚刚已经执行了命令，则会得到一个有问题的软件源文件，<strong>需要删掉文件，再重新添加</strong>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先删除原本的文件（因为命令不存在导致源有问题）</span></span><br><span class="line"><span class="built_in">rm</span> -rf /etc/apt/sources.list.d/ros-latest.list</span><br><span class="line"><span class="comment"># 重新添加清华源</span></span><br><span class="line">sudo sh -c <span class="string">&#x27;. /etc/lsb-release &amp;&amp; echo &quot;deb http://mirrors.tuna.tsinghua.edu.cn/ros/ubuntu/ `lsb_release -cs` main&quot; &gt; /etc/apt/sources.list.d/ros-latest.list&#x27;</span></span><br></pre></td></tr></table></figure><p>随后还需要执行命令添加一下密钥（不管是清华源还是官方源都是这个命令）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-key adv --keyserver <span class="string">&#x27;hkp://keyserver.ubuntu.com:80&#x27;</span> --recv-key C1CF6E31E6BADE8868B172B4F42ED6FBAB17C654</span><br></pre></td></tr></table></figure><p>随后更新一下软件源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get -y update</span><br></pre></td></tr></table></figure><h3 id="2-2-安装ROS的不同版本的命令"><a href="#2-2-安装ROS的不同版本的命令" class="headerlink" title="2.2. 安装ROS的不同版本的命令"></a>2.2. 安装ROS的不同版本的命令</h3><p>现在软件源已经更新好了，可以根据自己的需要安装不同版本的ros了。官网给出了下面四种不同的命令，这里我直接选了第一个安装了完整版。</p><p><strong>桌面完整版（推荐）：</strong>  : 包含 ROS、<a href="https://wiki.ros.org/rqt">rqt</a>、<a href="https://wiki.ros.org/rviz">rviz</a>、机器人通用库、2D&#x2F;3D 模拟器、导航以及 2D&#x2F;3D 感知包。或 <a href="apt:ros-melodic-desktop-full?refresh=yes">单击这里</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install ros-melodic-desktop-full</span><br></pre></td></tr></table></figure><p><strong>桌面版：</strong>   包含 ROS，<a href="https://wiki.ros.org/rqt">rqt</a>，<a href="https://wiki.ros.org/rviz">rviz</a> 和机器人通用库，或 <a href="apt:ros-melodic-desktop?refresh=yes">单击这里</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install ros-melodic-desktop</span><br></pre></td></tr></table></figure><p><strong>ROS-基础包：</strong>  包含 ROS 包，构建和通信库。没有图形界面工具。或 <a href="apt:ros-melodic-ros-base?refresh=yes">单击这里</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install ros-melodic-ros-base</span><br></pre></td></tr></table></figure><p><strong>单独的包：</strong>  你也可以安装某个指定的ROS软件包（使用软件包名称替换掉下面的PACKAGE）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install ros-melodic-PACKAGE</span><br></pre></td></tr></table></figure><p>如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install ros-melodic-slam-gmapping</span><br></pre></td></tr></table></figure><p>完整版需要安装的东西很多，耐心等待一下。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/02/a6f8b7db264e501d9f9a1ee61dc76de3.png" alt="image.png"></p><p>在安装的图中，会弹出两次让你选择tzdata的弹窗，直接选择GMT+8或者<code>Asia/Shanghai</code>就可以了。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/02/c7da389a7940c44845993c902a7ff481.png" alt="image.png"></p><h3 id="2-3-ROS初始化"><a href="#2-3-ROS初始化" class="headerlink" title="2.3. ROS初始化"></a>2.3. ROS初始化</h3><p>随后依照官网的教程，使用rosdep来初始化ros系统。</p><p>注意，rosdep命令是不会跟随上面的完整桌面版包一起安装的，需要我们手动安装一下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install python-rosdep</span><br></pre></td></tr></table></figure><p>第一次执行<code>rosdep init</code>的时候，遇到了网络问题（http错误），通过<code>apt install iputils-ping</code>安装了ping命令，发现<code>raw.githubusercontent.com</code>域名走了<code>127.0.0.1</code>，延迟低于1ms，肯定是不对的。</p><p>最开始我以为它是走了错误的代理，但是ping了github.com是没有问题的，所以问题在DNS解析上。解决方案采用了最粗暴的方式，直接将<code>raw.githubusercontent.com</code>域名的IP写入了<code>/etc/hosts</code>文件，避免修改系统的DNS设置。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">185.199.109.133 raw.githubusercontent.com</span><br></pre></td></tr></table></figure><p>修改了之后，<code>ping raw.githubusercontent.com</code> 正常了</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/02/fffebeaf3d3d08eb4f7cd9c97982989c.png" alt="image.png"></p><p>随后就能正常执行rosdep初始化命令了。命令执行输出如下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu-linux-22-04-02-desktop:/# rosdep init</span><br><span class="line">Wrote /etc/ros/rosdep/sources.list.d/20-default.list</span><br><span class="line">Recommended: please run</span><br><span class="line"></span><br><span class="line">rosdep update</span><br><span class="line"></span><br><span class="line">root@ubuntu-linux-22-04-02-desktop:/# rosdep update    </span><br><span class="line">reading in sources list data from /etc/ros/rosdep/sources.list.d</span><br><span class="line">Warning: running &#x27;rosdep update&#x27; as root is not recommended.</span><br><span class="line">  You should run &#x27;sudo rosdep fix-permissions&#x27; and invoke &#x27;rosdep update&#x27; again without sudo.</span><br><span class="line">Hit https://raw.githubusercontent.com/ros/rosdistro/master/rosdep/osx-homebrew.yaml</span><br><span class="line">Hit https://raw.githubusercontent.com/ros/rosdistro/master/rosdep/base.yaml</span><br><span class="line">Hit https://raw.githubusercontent.com/ros/rosdistro/master/rosdep/python.yaml</span><br><span class="line">Hit https://raw.githubusercontent.com/ros/rosdistro/master/rosdep/ruby.yaml</span><br><span class="line">Hit https://raw.githubusercontent.com/ros/rosdistro/master/releases/fuerte.yaml</span><br><span class="line">Query rosdistro index https://raw.githubusercontent.com/ros/rosdistro/master/index-v4.yaml</span><br><span class="line">Skip end-of-life distro &quot;ardent&quot;</span><br><span class="line">Skip end-of-life distro &quot;bouncy&quot;</span><br><span class="line">Skip end-of-life distro &quot;crystal&quot;</span><br><span class="line">Skip end-of-life distro &quot;dashing&quot;</span><br><span class="line">Skip end-of-life distro &quot;eloquent&quot;</span><br><span class="line">Skip end-of-life distro &quot;foxy&quot;</span><br><span class="line">Skip end-of-life distro &quot;galactic&quot;</span><br><span class="line">Skip end-of-life distro &quot;groovy&quot;</span><br><span class="line">Add distro &quot;humble&quot;</span><br><span class="line">Skip end-of-life distro &quot;hydro&quot;</span><br><span class="line">Skip end-of-life distro &quot;indigo&quot;</span><br><span class="line">Skip end-of-life distro &quot;iron&quot;</span><br><span class="line">Skip end-of-life distro &quot;jade&quot;</span><br><span class="line">Add distro &quot;jazzy&quot;</span><br><span class="line">Skip end-of-life distro &quot;kinetic&quot;</span><br><span class="line">Skip end-of-life distro &quot;lunar&quot;</span><br><span class="line">Skip end-of-life distro &quot;melodic&quot;</span><br><span class="line">Add distro &quot;noetic&quot;</span><br><span class="line">Add distro &quot;rolling&quot;</span><br><span class="line">updated cache in /root/.ros/rosdep/sources.cache</span><br></pre></td></tr></table></figure><h3 id="2-4-设置环境"><a href="#2-4-设置环境" class="headerlink" title="2.4. 设置环境"></a>2.4. 设置环境</h3><p>如果你用的是bash，执行如下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;source /opt/ros/melodic/setup.bash&quot;</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure><p>如果是zsh，执行如下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;source /opt/ros/melodic/setup.zsh&quot;</span> &gt;&gt; ~/.zshrc</span><br><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure><p>如果你不想让ROS环境始终生效，可以使用如下命令暂时在当前bash生效。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> /opt/ros/melodic/setup.bash</span><br></pre></td></tr></table></figure><p>注意：如果你不只安装了一个 ROS 发行版， <code>~/.bashrc</code> 只能使用你需要的 ROS 版本的 setup.bash脚本。</p><h3 id="2-5-ROS工具依赖"><a href="#2-5-ROS工具依赖" class="headerlink" title="2.5. ROS工具依赖"></a>2.5. ROS工具依赖</h3><p>rosinstall是一个常用的命令行工具，用于下载众多ROS包的 source tree。</p><p>可以通过下面的命令安装这个工具。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install python-rosinstall python-rosinstall-generator python-wstool build-essential</span><br></pre></td></tr></table></figure><h2 id="3-确认安装是否成功"><a href="#3-确认安装是否成功" class="headerlink" title="3. 确认安装是否成功"></a>3. 确认安装是否成功</h2><p>到这里，我们的ROS安装就完成了，可以使用<code>roscore</code>命令来确定ros是否成功安装，出现如下输出即为安装成功。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu-linux-22-04-02-desktop:/# roscore</span><br><span class="line">... logging to /root/.ros/log/cfad45ce-e696-11ef-bdf0-001c42a84d93/roslaunch-ubuntu-linux-22-04-02-desktop-522.log</span><br><span class="line">Checking log directory for disk usage. This may take a while.</span><br><span class="line">Press Ctrl-C to interrupt</span><br><span class="line">Done checking log file disk usage. Usage is &lt;1GB.</span><br><span class="line"></span><br><span class="line">started roslaunch server http://ubuntu-linux-22-04-02-desktop:38385/</span><br><span class="line">ros_comm version 1.14.13</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">SUMMARY</span><br><span class="line">========</span><br><span class="line"></span><br><span class="line">PARAMETERS</span><br><span class="line"> * /rosdistro: melodic</span><br><span class="line"> * /rosversion: 1.14.13</span><br><span class="line"></span><br><span class="line">NODES</span><br><span class="line"></span><br><span class="line">auto-starting new master</span><br><span class="line">process[master]: started with pid [536]</span><br><span class="line">ROS_MASTER_URI=http://ubuntu-linux-22-04-02-desktop:11311/</span><br><span class="line"></span><br><span class="line">setting /run_id to cfad45ce-e696-11ef-bdf0-001c42a84d93</span><br><span class="line">process[rosout-1]: started with pid [547]</span><br><span class="line">started core service [/rosout]</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/02/c3c69f410aa5adf78b2391d069cf2ff1.png" alt="image.png"></p>]]></content>
    
    
    <summary type="html">在 ubuntu 18.04 arm（docker容器）中安装ROS环境</summary>
    
    
    
    <category term="编程学习" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="Linux" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/Linux/"/>
    
    
    <category term="Linux" scheme="https://blog.musnow.top/tags/Linux/"/>
    
    <category term="SLAM" scheme="https://blog.musnow.top/tags/SLAM/"/>
    
  </entry>
  
  <entry>
    <title>【Linux】解决使用apt时“unable to initialize frontend: Dialog”的警告</title>
    <link href="https://blog.musnow.top/posts/4031478666/"/>
    <id>https://blog.musnow.top/posts/4031478666/</id>
    <published>2025-02-08T09:39:23.000Z</published>
    <updated>2025-02-09T09:42:30.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>解决使用apt时“unable to initialize frontend: Dialog”的警告。</p></blockquote><p>最近在ubuntu 18.04里面执行apt命令的时候总是遇到如下警告</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">debconf: unable to initialize frontend: Dialog</span><br><span class="line">debconf: (No usable dialog-like program is installed, so the dialog based frontend cannot be used. at /usr/share/perl5/Debconf/FrontEnd/Dialog.pm line 76, &lt;&gt; line 2.)</span><br></pre></td></tr></table></figure><p>其实也算不上警告吧，但是总是弹出来，还带了个unable字样，多半是哪里有点问题。</p><p>搜索了一下相关信息，是因为缺少了一个包，安装一下就可以了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install -y dialog</span><br></pre></td></tr></table></figure><p>安装完毕之后，使用apt的时候就不会出现上述警告了。</p>]]></content>
    
    
    <summary type="html">解决使用apt时“unable to initialize frontend: Dialog”的警告</summary>
    
    
    
    <category term="编程学习" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="Linux" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/Linux/"/>
    
    
    <category term="Linux" scheme="https://blog.musnow.top/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>【SLAM】在本地虚拟机和AutoDL云端环境以TUM-RGBD数据集运行ORB_SLAM3</title>
    <link href="https://blog.musnow.top/posts/7873538113/"/>
    <id>https://blog.musnow.top/posts/7873538113/</id>
    <published>2025-02-04T00:36:23.000Z</published>
    <updated>2025-02-09T08:49:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>在本地虚拟机和AutoDL云端环境运行ORB_SLAM3的介绍。</p><h2 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1. 介绍"></a>1. 介绍</h2><p>ORB-SLAM3是西班牙萨拉戈萨大学于2020年7月中旬开源的作品，与ORB-SLAM、ORB-SLAM2一脉相承，是一个能够使用单目、立体、RGB-D相机，兼容针孔及鱼眼相机模型进行视觉、视觉+惯导和多地图的综合性SLAM方案。</p><ul><li>论文：<a href="https://arxiv.org/abs/2007.11898">ORB-SLAM3: An Accurate Open-Source Library for Visual, Visual-Inertial and Multi-Map SLAM</a>;</li><li>源码：<a href="https://github.com/UZ-SLAMLab/ORB_SLAM3">github.com&#x2F;UZ-SLAMLab&#x2F;ORB_SLAM3</a></li></ul><p>本文不关注ORB-SLAM3的理论实现，仅记录如何在本地环境中运行ORB-SLAM3。</p><p>更多参考资料：</p><ul><li><a href="https://blog.csdn.net/weixin_45947476/article/details/123595935">ORB-SLAM3论文详细解读_orbslam3论文-CSDN博客</a>；</li><li><a href="https://blog.csdn.net/hhaowang/article/details/117318737">ORB-SLAM3技术详解（1）简介与论文解读_西班牙zaragoza大学于2020年7月最新开源了orb-slam3的论文和源码-CSDN博客</a>；</li><li><a href="https://blog.csdn.net/m0_37605642/article/details/134016846">ORB-SLAM系列算法相关介绍（综合版）_orb slam-CSDN博客</a>；</li></ul><p>因为之前折腾过GCNv2-SLAM，在本地运行ORB-SLAM3比GCNv2-SLAM更简单。</p><h2 id="2-依赖安装"><a href="#2-依赖安装" class="headerlink" title="2. 依赖安装"></a>2. 依赖安装</h2><p>ORB-SLAM3的依赖项和GCNv2几乎完全一致，且ORB-SLAM3不需要PyTorch，依赖项如下所示：</p><ul><li>opencv大于3.0版本；</li><li>eigen3大于3.1.0版本；</li><li>Pangolin没有版本要求，用6.0没问题；</li><li>需要<code>libpython2.7-dev</code>包；</li></ul><p>ubuntu18.04系统安装依赖项可以参考我先前编写的GCNv2博客：</p><ul><li><a href="https://blog.musnow.top/posts/1589125738/">【SLAM】于ubuntu18.04上纯CPU运行GCNv2_SLAM的记录（ARM64&#x2F;AMD64） | 慕雪的寒舍</a>；</li><li><a href="https://blog.musnow.top/posts/1071165018/">【SLAM】于AutoDL云上GPU运行GCNv2_SLAM的记录 | 慕雪的寒舍</a>；</li></ul><p>参考博客里面的步骤安装opencv、eigen3、Pangolin6.0就可以了，不需要安装libtorch。</p><p>如果你想使用AutoDL云端环境运行，选择2080ti的PyTorch1.5.1版本镜像即可。</p><h2 id="3-编译项目"><a href="#3-编译项目" class="headerlink" title="3. 编译项目"></a>3. 编译项目</h2><p>项目的编译非常简单，安装好所有依赖项后，直接使用根目录下的build.sh脚本编译就可以了，不需要修改该脚本。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/UZ-SLAMLab/ORB_SLAM3.git ORB_SLAM3</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> ORB_SLAM3</span><br><span class="line"><span class="built_in">chmod</span> +x build.sh</span><br><span class="line">./build.sh</span><br></pre></td></tr></table></figure><p>初次编译的时候，会遇到如下cmake告警，提示需要opencv 4.4版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">CMake Warning at CMakeLists.txt:33 (find_package):</span><br><span class="line">  Could not find a configuration file for package &quot;OpenCV&quot; that is compatible</span><br><span class="line">  with requested version &quot;4.4&quot;.</span><br><span class="line"></span><br><span class="line">  The following configuration files were considered but not accepted:</span><br><span class="line"></span><br><span class="line">    /usr/local/share/OpenCV/OpenCVConfig.cmake, version: 3.4.5</span><br><span class="line">    /usr/share/OpenCV/OpenCVConfig.cmake, version: 3.2.0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">CMake Error at CMakeLists.txt:35 (message):</span><br><span class="line">  OpenCV &gt; 4.4 not found.</span><br></pre></td></tr></table></figure><p>但实际上Github的项目README里面已经说了只需要opencv大于3.0版本就可以了。根据Github Issue：<a href="https://github.com/UZ-SLAMLab/ORB_SLAM3/issues/456">github.com&#x2F;UZ-SLAMLab&#x2F;ORB_SLAM3&#x2F;issues&#x2F;456</a>，直接修改项目根目录下的<code>CMakeLists.txt</code>文件就能解决此问题，将如下部分从4.4改成3.4即可。</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">find_package</span>(OpenCV <span class="number">3.4</span>)</span><br><span class="line">   <span class="keyword">if</span>(<span class="keyword">NOT</span> OpenCV_FOUND)</span><br><span class="line">      <span class="keyword">message</span>(FATAL_ERROR <span class="string">&quot;OpenCV &gt; 3.4 not found.&quot;</span>)</span><br><span class="line">   <span class="keyword">endif</span>()</span><br></pre></td></tr></table></figure><p>修改了之后，需要先删除刚刚的编译缓存，重新运行脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rm</span> -rf Thirdparty/g2o/build/</span><br><span class="line"><span class="built_in">rm</span> -rf Thirdparty/DBoW2/build/</span><br><span class="line"><span class="built_in">rm</span> -rf Thirdparty/Sophus/build/</span><br><span class="line"><span class="built_in">rm</span> -rf Vocabulary/*.bin</span><br><span class="line"><span class="built_in">rm</span> -rf ./build</span><br></pre></td></tr></table></figure><p>AutoDL云端环境正常编译通过</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/02/907029347552b7f2d693eaeced1f865e.png" alt="image.png"></p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/02/32a03247e02290a884a86a8584e3a60d.png" alt="image.png"></p><p>本地arm64虚拟机ubuntu 18.04 docker容器内也能正常编译</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/02/ab0369af6d4ce3e2453b6fddb247f759.png" alt="image.png"></p><h2 id="4-使用TUM-RGB-D数据集运行项目"><a href="#4-使用TUM-RGB-D数据集运行项目" class="headerlink" title="4. 使用TUM RGB-D数据集运行项目"></a>4. 使用TUM RGB-D数据集运行项目</h2><h3 id="4-1-下载和处理数据集"><a href="#4-1-下载和处理数据集" class="headerlink" title="4.1. 下载和处理数据集"></a>4.1. 下载和处理数据集</h3><p>这里需要的操作和GCNv2是一样的，下载了RGB-D数据集后需要用python脚本处理一下。</p><p>下载地址：<a href="https://cvg.cit.tum.de/data/datasets/rgbd-dataset/download">cvg.cit.tum.de&#x2F;data&#x2F;datasets&#x2F;rgbd-dataset&#x2F;download</a></p><p>下载<code>fr1/desk</code>数据集，这是一个桌子的RGBD数据</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/01/6ebeb1fe9366e07ea5dd7f0697b72d4f.png" alt="image.png"></p><p>在GCNv2_SLAM工程下新建<code>datasets/TUM</code>,将数据集下载到其中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 新建datasets/TUM数据集文件夹</span></span><br><span class="line"><span class="built_in">mkdir</span> -p datasets/TUM </span><br><span class="line"><span class="built_in">cd</span> datasets/TUM</span><br><span class="line"><span class="comment"># 下载数据集到datasets/TUM文件夹内</span></span><br><span class="line">wget -O rgbd_dataset_freiburg1_desk.tgz https://cvg.cit.tum.de/rgbd/dataset/freiburg1/rgbd_dataset_freiburg1_desk.tgz</span><br><span class="line"><span class="comment"># 解压数据集</span></span><br><span class="line">tar -xvf rgbd_dataset_freiburg1_desk.tgz</span><br></pre></td></tr></table></figure><p>然后还需要下载一个<code>associate.py</code>脚本来处理一下数据集才能正常运行</p><p>下载地址：<a href="https://svncvpr.in.tum.de/cvpr-ros-pkg/trunk/rgbd_benchmark/rgbd_benchmark_tools/src/rgbd_benchmark_tools/associate.py">svncvpr.in.tum.de</a>，同时在<a href="https://github.com/musnows/GCNv2_SLAM/blob/86c1efc0cc6c40669df20c0a62017815e18771b7/docker/associate.py">我的Github仓库</a>也做了留档。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -O associate.py https://svncvpr.in.tum.de/cvpr-ros-pkg/trunk/rgbd_benchmark/rgbd_benchmark_tools/src/rgbd_benchmark_tools/associate.py</span><br></pre></td></tr></table></figure><p>这个脚本只能用python2运行，需要下载numpy库。注意AutoDL的环境中python绑定到了python3，环境中的python2被拦掉了，所以需要安装独立的python2命令来运行python2。</p><p>在Pytorch1.5.1版本的AutoDL镜像中，可以直接使用下面的命令来安装python2和pip2：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install -y python-dev python-pip</span><br></pre></td></tr></table></figure><blockquote><p>安装了以后，云端AutoDL环境需要使用python2和pip2命令，本地虚拟机中使用python和pip命令就可以了（本地的python和pip命令一般绑定的都是python2）</p></blockquote><p>随后安装numpy库就ok了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">root@autodl-container-e39d46b8d3-01da7b14:~/autodl-tmp/GCNv2_SLAM/datasets/TUM# pip2 install numpy</span><br><span class="line">DEPRECATION: Python 2.7 reached the end of its life on January 1st, 2020. Please upgrade your Python as Python 2.7 is no longer maintained. pip 21.0 will drop support for Python 2.7 in January 2021. More details about Python 2 support in pip can be found at https://pip.pypa.io/en/latest/development/release-process/#python-2-support pip 21.0 will remove support for this functionality.</span><br><span class="line">Looking in indexes: http://mirrors.aliyun.com/pypi/simple</span><br><span class="line">Collecting numpy</span><br><span class="line">  Downloading http://mirrors.aliyun.com/pypi/packages/3a/5f/47e578b3ae79e2624e205445ab77a1848acdaa2929a00eeef6b16eaaeb20/numpy-1.16.6-cp27-cp27mu-manylinux1_x86_64.whl (17.0 MB)</span><br><span class="line">     |████████████████████████████████| 17.0 MB 21.1 MB/s </span><br><span class="line">Installing collected packages: numpy</span><br><span class="line">Successfully installed numpy-1.16.6</span><br></pre></td></tr></table></figure><p>执行脚本来处理两个文件，在数据文件夹里执行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python2 associate.py rgbd_dataset_freiburg1_desk/rgb.txt rgbd_dataset_freiburg1_desk/depth.txt &gt; rgbd_dataset_freiburg1_desk/associate.txt</span><br></pre></td></tr></table></figure><p>执行python命令后可以看看合并成功了没有，如下应该就是没问题了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1305031472.895713 rgb/1305031472.895713.png 1305031472.892944 depth/1305031472.892944.png</span><br><span class="line">1305031472.927685 rgb/1305031472.927685.png 1305031472.924814 depth/1305031472.924814.png</span><br><span class="line">1305031472.963756 rgb/1305031472.963756.png 1305031472.961213 depth/1305031472.961213.png</span><br></pre></td></tr></table></figure><p>在同一个网站下载的其他TUM数据集也需要用相同的方式进行处理。</p><p>更新：突然发现其实在<code>ORB_SLAM3/Examples/RGB-D/associations</code>目录里面已经有处理好的文件了。但是这不代表不需要下载数据集，依旧需要下载TUM数据集获取原始的图像文件。</p><h3 id="4-2-运行项目"><a href="#4-2-运行项目" class="headerlink" title="4.2. 运行项目"></a>4.2. 运行项目</h3><p>在项目根目录下，使用如下命令运行项目，最后两个参数指向数据集的路径以及数据集整理后的<code>associate.txt</code>文件路径。第三个参数<code>TUM1.yaml</code>对应我们下载的freiburg1数据集。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">./Examples/RGB-D/rgbd_tum \</span><br><span class="line">    ./Vocabulary/ORBvoc.txt \</span><br><span class="line">    ./Examples/RGB-D/TUM1.yaml \</span><br><span class="line">    ./datasets/TUM/rgbd_dataset_freiburg1_desk \</span><br><span class="line">    ./datasets/TUM/rgbd_dataset_freiburg1_desk/associate.txt</span><br></pre></td></tr></table></figure><p>注意，最后两个参数一定要填对，如果你填写了错误的目录或文件名，执行命令后程序会阻塞，不会有任何有效输出（第一次运行的时候我就填错目录了，一直阻塞在那里，傻等了好久）</p><p>正常情况下，项目运行输出如下</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/02/a7fd2ea5ca2df3e3eedb44f18fb28660.png" alt="image.png"></p><h3 id="4-3-AutoDL云端运行"><a href="#4-3-AutoDL云端运行" class="headerlink" title="4.3. AutoDL云端运行"></a>4.3. AutoDL云端运行</h3><p>云端运行，VNC中能正常显示画面</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/02/081d1078f247d6de3efc232436fd7ef0.png" alt="image.png"></p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/02/d981c22438e163a0519b6446fcac1ef9.png" alt="image.png"></p><p>AutoDL云端运行后的输出如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">[root@autodl-container-0d454391d6-b3b7582b:~/gcn/ORB_SLAM3]$ ./Examples/RGB-D/rgbd_tum \</span><br><span class="line">&gt;     ./Vocabulary/ORBvoc.txt \</span><br><span class="line">&gt;     ./Examples/RGB-D/TUM1.yaml \</span><br><span class="line">&gt;     ./datasets/TUM/rgbd_dataset_freiburg1_desk \</span><br><span class="line">&gt;     ./datasets/TUM/rgbd_dataset_freiburg1_desk/associate.txt</span><br><span class="line"></span><br><span class="line">ORB-SLAM3 Copyright (C) 2017-2020 Carlos Campos, Richard Elvira, Juan J. Gómez, José M.M. Montiel and Juan D. Tardós, University of Zaragoza.</span><br><span class="line">ORB-SLAM2 Copyright (C) 2014-2016 Raúl Mur-Artal, José M.M. Montiel and Juan D. Tardós, University of Zaragoza.</span><br><span class="line">This program comes with ABSOLUTELY NO WARRANTY;</span><br><span class="line">This is free software, and you are welcome to redistribute it</span><br><span class="line">under certain conditions. See LICENSE.txt.</span><br><span class="line"></span><br><span class="line">Input sensor was set to: RGB-D</span><br><span class="line">Loading settings from ./Examples/RGB-D/TUM1.yaml</span><br><span class="line">        -Loaded camera 1</span><br><span class="line">Camera.newHeight optional parameter does not exist...</span><br><span class="line">Camera.newWidth optional parameter does not exist...</span><br><span class="line">        -Loaded image info</span><br><span class="line">        -Loaded RGB-D calibration</span><br><span class="line">        -Loaded ORB settings</span><br><span class="line">Viewer.imageViewScale optional parameter does not exist...</span><br><span class="line">        -Loaded viewer settings</span><br><span class="line">System.LoadAtlasFromFile optional parameter does not exist...</span><br><span class="line">System.SaveAtlasToFile optional parameter does not exist...</span><br><span class="line">        -Loaded Atlas settings</span><br><span class="line">System.thFarPoints optional parameter does not exist...</span><br><span class="line">        -Loaded misc parameters</span><br><span class="line">----------------------------------</span><br><span class="line">SLAM settings: </span><br><span class="line">        -Camera 1 parameters (Pinhole): [ 517.306 516.469 318.643 255.314 ]</span><br><span class="line">        -Camera 1 distortion parameters: [  0.262383 -0.953104 -0.005358 0.002628 1.16331 ]</span><br><span class="line">        -Original image size: [ 640 , 480 ]</span><br><span class="line">        -Current image size: [ 640 , 480 ]</span><br><span class="line">        -Sequence FPS: 30</span><br><span class="line">        -RGB-D depth map factor: 5000</span><br><span class="line">        -Features per image: 1000</span><br><span class="line">        -ORB scale factor: 1.2</span><br><span class="line">        -ORB number of scales: 8</span><br><span class="line">        -Initial FAST threshold: 20</span><br><span class="line">        -Min FAST threshold: 7</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Loading ORB Vocabulary. This could take a while...</span><br><span class="line">Vocabulary loaded!</span><br><span class="line"></span><br><span class="line">Initialization of Atlas from scratch </span><br><span class="line">Creation of new map with id: 0</span><br><span class="line">Creation of new map with last KF id: 0</span><br><span class="line">Seq. Name: </span><br><span class="line">There are 1 cameras in the atlas</span><br><span class="line">Camera 0 is pinhole</span><br><span class="line"></span><br><span class="line">-------</span><br><span class="line">Start processing sequence ...</span><br><span class="line">Images in the sequence: 573</span><br><span class="line"></span><br><span class="line">First KF:0; Map init KF:0</span><br><span class="line">New Map created with 937 points</span><br><span class="line">Framebuffer with requested attributes not available. Using available framebuffer. You may see visual artifacts.Starting the Viewer</span><br><span class="line">Shutdown</span><br><span class="line">-------</span><br><span class="line"></span><br><span class="line">median tracking time: 0.0371458</span><br><span class="line">mean tracking time: 0.0415715</span><br><span class="line"></span><br><span class="line">Saving camera trajectory to CameraTrajectory.txt ...</span><br><span class="line"></span><br><span class="line">Saving keyframe trajectory to KeyFrameTrajectory.txt ...</span><br></pre></td></tr></table></figure><h3 id="4-4-本地虚拟机运行"><a href="#4-4-本地虚拟机运行" class="headerlink" title="4.4. 本地虚拟机运行"></a>4.4. 本地虚拟机运行</h3><p>示例环境：ubuntu 22.04 arm虚拟机下启动的ubuntu18.04 docker容器。</p><h4 id="4-4-1-解决段错误"><a href="#4-4-1-解决段错误" class="headerlink" title="4.4.1. 解决段错误"></a>4.4.1. 解决段错误</h4><p>本地虚拟机初次运行的时候遇到了段错误（有图像输出，主要是Shutdown的时候段错误）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">-------</span><br><span class="line">Start processing sequence ...</span><br><span class="line">Images in the sequence: 573</span><br><span class="line"></span><br><span class="line">First KF:0; Map init KF:0</span><br><span class="line">New Map created with 939 points</span><br><span class="line">Starting the Viewer</span><br><span class="line">Shutdown</span><br><span class="line">-------</span><br><span class="line"></span><br><span class="line">median tracking time: 0.0136386</span><br><span class="line">mean tracking time: 0.0140401</span><br><span class="line"></span><br><span class="line">Saving camera trajectory to CameraTrajectory.txt ...</span><br><span class="line"></span><br><span class="line">Saving keyframe trajectory to KeyFrameTrajectory.txt ...</span><br><span class="line">Segmentation fault (core dumped)</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/02/fb081dc6226497056b3613b2220e9aa9.png" alt="image.png"></p><p>根据：<a href="https://github.com/UZ-SLAMLab/ORB_SLAM3/issues/452">github.com&#x2F;UZ-SLAMLab&#x2F;ORB_SLAM3&#x2F;issues&#x2F;452</a>，需要修改代码，主要修改<code>ORB_SLAM3/src/System.cc</code>中的<code>System::Shutdown()</code>函数，将函数中原有的注释去掉，并将最后一部分的<code>&quot;ORB-SLAM2: Map Viewer&quot;</code>改成<code>&quot;ORB-SLAM3: Map Viewer&quot;</code>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">System::Shutdown</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">unique_lock&lt;mutex&gt; <span class="title">lock</span><span class="params">(mMutexReset)</span></span>;</span><br><span class="line">        mbShutDown = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Shutdown&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    mpLocalMapper-&gt;<span class="built_in">RequestFinish</span>();</span><br><span class="line">    mpLoopCloser-&gt;<span class="built_in">RequestFinish</span>();</span><br><span class="line">    <span class="comment">// 取消这里代码的注释</span></span><br><span class="line">    <span class="keyword">if</span>(mpViewer)</span><br><span class="line">    &#123;</span><br><span class="line">        mpViewer-&gt;<span class="built_in">RequestFinish</span>();</span><br><span class="line">        <span class="keyword">while</span>(!mpViewer-&gt;<span class="built_in">isFinished</span>())</span><br><span class="line">            <span class="built_in">usleep</span>(<span class="number">5000</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Wait until all thread have effectively stopped</span></span><br><span class="line">    <span class="keyword">while</span>(!mpLocalMapper-&gt;<span class="built_in">isFinished</span>() || !mpLoopCloser-&gt;<span class="built_in">isFinished</span>() || mpLoopCloser-&gt;<span class="built_in">isRunningGBA</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!mpLocalMapper-&gt;<span class="built_in">isFinished</span>())</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;mpLocalMapper is not finished&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span>(!mpLoopCloser-&gt;<span class="built_in">isFinished</span>())</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;mpLoopCloser is not finished&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span>(mpLoopCloser-&gt;<span class="built_in">isRunningGBA</span>())&#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;mpLoopCloser is running GBA&quot;</span> &lt;&lt; endl;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;break anyway...&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">usleep</span>(<span class="number">5000</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!mStrSaveAtlasToFile.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        Verbose::<span class="built_in">PrintMess</span>(<span class="string">&quot;Atlas saving to file &quot;</span> + mStrSaveAtlasToFile, Verbose::VERBOSITY_NORMAL);</span><br><span class="line">        <span class="built_in">SaveAtlas</span>(FileType::BINARY_FILE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 此处注释取消并将ORB-SLAM2改成ORB-SLAM3</span></span><br><span class="line">    <span class="keyword">if</span>(mpViewer)</span><br><span class="line">        pangolin::<span class="built_in">BindToContext</span>(<span class="string">&quot;ORB-SLAM3: Map Viewer&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> REGISTER_TIMES</span></span><br><span class="line">    mpTracker-&gt;<span class="built_in">PrintTimeStats</span>();</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改后需要删除项目根目录下的build目录，重新编译</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/02/76d5b1f7b348d27099c2c4d5c075dee1.png" alt="image.png"></p><h4 id="4-4-2-运行结果"><a href="#4-4-2-运行结果" class="headerlink" title="4.4.2. 运行结果"></a>4.4.2. 运行结果</h4><p>重新编译后再次运行</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/02/7eaf968e45c9b489dff7572e15f1ca82.png" alt="image.png"></p><p>本地虚拟机运行结束后完整输出如下，这次没有段错误了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu-linux-22-04-02-desktop:/work/ORB_SLAM3# ./Examples/RGB-D/rgbd_tum \</span><br><span class="line">&gt;     ./Vocabulary/ORBvoc.txt \</span><br><span class="line">&gt;     ./Examples/RGB-D/TUM1.yaml \</span><br><span class="line">&gt;     ./datasets/TUM/rgbd_dataset_freiburg1_desk \</span><br><span class="line">&gt;     ./datasets/TUM/rgbd_dataset_freiburg1_desk/associate.txt</span><br><span class="line"></span><br><span class="line">ORB-SLAM3 Copyright (C) 2017-2020 Carlos Campos, Richard Elvira, Juan J. Gómez, José M.M. Montiel and Juan D. Tardós, University of Zaragoza.</span><br><span class="line">ORB-SLAM2 Copyright (C) 2014-2016 Raúl Mur-Artal, José M.M. Montiel and Juan D. Tardós, University of Zaragoza.</span><br><span class="line">This program comes with ABSOLUTELY NO WARRANTY;</span><br><span class="line">This is free software, and you are welcome to redistribute it</span><br><span class="line">under certain conditions. See LICENSE.txt.</span><br><span class="line"></span><br><span class="line">Input sensor was set to: RGB-D</span><br><span class="line">Loading settings from ./Examples/RGB-D/TUM1.yaml</span><br><span class="line">-Loaded camera 1</span><br><span class="line">Camera.newHeight optional parameter does not exist...</span><br><span class="line">Camera.newWidth optional parameter does not exist...</span><br><span class="line">-Loaded image info</span><br><span class="line">-Loaded RGB-D calibration</span><br><span class="line">-Loaded ORB settings</span><br><span class="line">Viewer.imageViewScale optional parameter does not exist...</span><br><span class="line">-Loaded viewer settings</span><br><span class="line">System.LoadAtlasFromFile optional parameter does not exist...</span><br><span class="line">System.SaveAtlasToFile optional parameter does not exist...</span><br><span class="line">-Loaded Atlas settings</span><br><span class="line">System.thFarPoints optional parameter does not exist...</span><br><span class="line">-Loaded misc parameters</span><br><span class="line">----------------------------------</span><br><span class="line">SLAM settings: </span><br><span class="line">-Camera 1 parameters (Pinhole): [ 517.306 516.469 318.643 255.314 ]</span><br><span class="line">-Camera 1 distortion parameters: [  0.262383 -0.953104 -0.005358 0.002628 1.16331 ]</span><br><span class="line">-Original image size: [ 640 , 480 ]</span><br><span class="line">-Current image size: [ 640 , 480 ]</span><br><span class="line">-Sequence FPS: 30</span><br><span class="line">-RGB-D depth map factor: 5000</span><br><span class="line">-Features per image: 1000</span><br><span class="line">-ORB scale factor: 1.2</span><br><span class="line">-ORB number of scales: 8</span><br><span class="line">-Initial FAST threshold: 20</span><br><span class="line">-Min FAST threshold: 7</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Loading ORB Vocabulary. This could take a while...</span><br><span class="line">Vocabulary loaded!</span><br><span class="line"></span><br><span class="line">Initialization of Atlas from scratch </span><br><span class="line">Creation of new map with id: 0</span><br><span class="line">Creation of new map with last KF id: 0</span><br><span class="line">Seq. Name: </span><br><span class="line">There are 1 cameras in the atlas</span><br><span class="line">Camera 0 is pinhole</span><br><span class="line"></span><br><span class="line">-------</span><br><span class="line">Start processing sequence ...</span><br><span class="line">Images in the sequence: 573</span><br><span class="line"></span><br><span class="line">First KF:0; Map init KF:0</span><br><span class="line">New Map created with 939 points</span><br><span class="line">Starting the Viewer</span><br><span class="line">Shutdown</span><br><span class="line">-------</span><br><span class="line"></span><br><span class="line">median tracking time: 0.0124658</span><br><span class="line">mean tracking time: 0.0127179</span><br><span class="line"></span><br><span class="line">Saving camera trajectory to CameraTrajectory.txt ...</span><br><span class="line"></span><br><span class="line">Saving keyframe trajectory to KeyFrameTrajectory.txt ...</span><br><span class="line">root@ubuntu-linux-22-04-02-desktop:/work/ORB_SLAM3# </span><br></pre></td></tr></table></figure><h3 id="4-5-结果对比"><a href="#4-5-结果对比" class="headerlink" title="4.5. 结果对比"></a>4.5. 结果对比</h3><p>从输出结果来看，本地4核8G的虚拟机环境运行速度为<code>0.0124658</code>，约合<code>80.2 HZ</code>，快于AutoDL云端12核+2080ti环境运行的<code>0.0371458</code>，约合<code>26.9 HZ</code>。由于ORB-SLAM3不依赖于PyTorch，<strong>应该</strong>没有使用显卡的解算能力（俺不确定哈），这部分差异主要是由于CPU造成的。云端CPU和GPU都是容器化共享的，因此影响了性能。</p><p>而且，在GCNv2的本地纯CPU运行中（相同环境），由于缺少显卡，只跑出了可怜巴巴的<code>0.5HZ</code>的速度，可见在无显卡环境中ORB-SLAM3运行速度快于GCNv2-SLAM。至于二者的性能和精度，暂时不太清楚如何对比。</p><h2 id="5-The-end"><a href="#5-The-end" class="headerlink" title="5. The end"></a>5. The end</h2><p>本文简单介绍了如何使用ORB-SLAM3运行TUM RGB-D数据集，纯CPU运行快于GCNv2-SLAM。</p>]]></content>
    
    
    <summary type="html">在本地虚拟机和AutoDL云端环境以TUM-RGBD数据集运行ORB_SLAM3的介绍</summary>
    
    
    
    <category term="编程学习" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="Linux" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/Linux/"/>
    
    
    <category term="Linux" scheme="https://blog.musnow.top/tags/Linux/"/>
    
    <category term="Cpp" scheme="https://blog.musnow.top/tags/Cpp/"/>
    
    <category term="SLAM" scheme="https://blog.musnow.top/tags/SLAM/"/>
    
  </entry>
  
  <entry>
    <title>【SLAM】于AutoDL云上GPU运行GCNv2_SLAM的记录</title>
    <link href="https://blog.musnow.top/posts/1071165018/"/>
    <id>https://blog.musnow.top/posts/1071165018/</id>
    <published>2025-02-02T01:57:33.000Z</published>
    <updated>2025-02-04T08:51:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>配置GCNv2_SLAM所需环境并实现AutoDL云端运行项目的全过程记录。</p><h2 id="1-引子"><a href="#1-引子" class="headerlink" title="1. 引子"></a>1. 引子</h2><p>前几天写了一篇在本地虚拟机里面CPU运行GCNv2_SLAM项目的博客：<a href="https://blog.musnow.top/posts/1589125738/">链接</a>，关于GCNv2_SLAM项目相关的介绍请移步此文章，本文不再重复说明。</p><ul><li><a href="https://ieeexplore.ieee.org/document/8758836">GCNv2: Efficient Correspondence Prediction for Real-Time SLAM</a>;</li><li><a href="https://github.com/jiexiong2016/GCNv2_SLAM">github.com&#x2F;jiexiong2016&#x2F;GCNv2_SLAM</a>;</li></ul><p>在之前的测试中，本地虚拟机CPU运行的效果非常差，推理速度只有可怜兮兮的<code>0.5 HZ</code>，但是我手头又没有带显卡的环境，所以想到了可以去网上租个带显卡的容器化环境。</p><p>AutoDL就是一个租GPU环境的平台: <a href="https://www.autodl.com/">https://www.autodl.com/</a>，而且autodl租显卡是可以按小时付费的，比按月付费的更加划算，更好过自己买个显卡在本地倒腾ubuntu环境，所以就直接开整了！</p><p>先注册一个AutoDL的账户，给里面充值一丢丢钱，然后就可以租一个显卡容器化环境来运行GCNv2_SLAM啦！</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/02/c16bf7fe837c06718a76843ba7b923eb.png" alt="image.png"></p><h2 id="2-AutoDL环境选择"><a href="#2-AutoDL环境选择" class="headerlink" title="2. AutoDL环境选择"></a>2. AutoDL环境选择</h2><p>老版本PyTorch的镜像由于4090无法使用太低的cuda版本导致无法选择，如果需要使用更低版本的pytorch镜像，则需要租用2080ti或者1080ti显卡的环境。</p><p>2080ti显卡可以选择如下环境，实测可用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PyTorch  1.5.1</span><br><span class="line">Python  3.8(ubuntu18.04)</span><br><span class="line">Cuda  10.1</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/02/9f33c7eb80a44080fd587573e315f769.png" alt="image.png"></p><p>创建环境后，建议使用左侧的ssh登录指令直接在本地终端里面执行，登录到云端。如果你没有本地的ssh终端，也可以点击JupyterLab里面的终端来运行命令。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/02/2a97018925b0281e8faeb64ef8cb5ff9.png" alt="image.png"></p><p>后文涉及到下载很多文件，如果从github下载很慢，可以在本地下好之后通过JupyterLab传到云端去。注意传文件之前要先在文件列表里面选好目标的目录。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/02/a924fd5dea1fa0ef7a020aa1487a8a37.png" alt="image.png"></p><p>还可以尝试autodl自带的代理：<a href="https://www.autodl.com/docs/network_turbo/">www.autodl.com/docs/network_turbo&#x2F;</a>，但是慕雪试用的时候这个代理一直返回503，不可用状态。</p><h2 id="3-依赖安装"><a href="#3-依赖安装" class="headerlink" title="3. 依赖安装"></a>3. 依赖安装</h2><h3 id="3-1-需要的apt包安装"><a href="#3-1-需要的apt包安装" class="headerlink" title="3.1. 需要的apt包安装"></a>3.1. 需要的apt包安装</h3><p>运行之前先更新一下环境，这部分操作和在本地虚拟机里面安装环境都是一样的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update -y</span><br><span class="line">sudo apt-get upgrade -y</span><br></pre></td></tr></table></figure><p>更新的时候会有一个新的sshd配置的提醒，这里直接选择1用新版本配置就可以了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">A new version (/tmp/file1bBLK4) of configuration file /etc/ssh/sshd_config is available, but the version installed currently has been</span><br><span class="line">locally modified.</span><br><span class="line"></span><br><span class="line">  1. install the package maintainer&#x27;s version             5. show a 3-way difference between available versions</span><br><span class="line">  2. keep the local version currently installed           6. do a 3-way merge between available versions</span><br><span class="line">  3. show the differences between the versions            7. start a new shell to examine the situation</span><br><span class="line">  4. show a side-by-side difference between the versions</span><br><span class="line">What do you want to do about modified configuration file sshd_config? 1</span><br></pre></td></tr></table></figure><p>因为选了Pytorch镜像，Python工具组系统已经自带了，不需要安装。</p><p>安装要用的到的工具包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 工具包</span></span><br><span class="line">sudo apt-get install -y \</span><br><span class="line">    apt-utils \</span><br><span class="line">    curl wget unzip zip \</span><br><span class="line">    cmake make automake \</span><br><span class="line">    openssh-server \</span><br><span class="line">    net-tools \</span><br><span class="line">    vim git gcc g++</span><br></pre></td></tr></table></figure><p>安装x11相关的依赖包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># x11 for gui</span></span><br><span class="line">sudo apt-get install -y  \</span><br><span class="line">    libx11-xcb1 \</span><br><span class="line">    libfreetype6 \</span><br><span class="line">    libdbus-1-3 \</span><br><span class="line">    libfontconfig1 \</span><br><span class="line">    libxkbcommon0   \</span><br><span class="line">    libxkbcommon-x11-0</span><br></pre></td></tr></table></figure><h3 id="3-2-Pangolin-6-0"><a href="#3-2-Pangolin-6-0" class="headerlink" title="3.2. Pangolin-6.0"></a>3.2. Pangolin-6.0</h3><h4 id="3-2-1-依赖项安装"><a href="#3-2-1-依赖项安装" class="headerlink" title="3.2.1. 依赖项安装"></a>3.2.1. 依赖项安装</h4><p>安装Pangolin之前先安装如下依赖包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># pangolin</span></span><br><span class="line">sudo apt-get install -y \</span><br><span class="line">    libgl1-mesa-dev \</span><br><span class="line">    libglew-dev \</span><br><span class="line">    libboost-dev \</span><br><span class="line">    libboost-thread-dev \</span><br><span class="line">    libboost-filesystem-dev \</span><br><span class="line">    libpython2.7-dev \</span><br><span class="line">    libglu1-mesa-dev freeglut3-dev</span><br></pre></td></tr></table></figure><p>在AutoDL的PyTorch 1.5.1镜像中，安装Pangolin依赖包的时候的终端输出如下，出现了<strong>依赖项版本冲突</strong>问题。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">root@autodl-container-e39d46b8d3-01da7b14:~# apt-get install -y     libgl1-mesa-dev     libglew-dev     libboost-dev     libboost-thread-dev     libboost-filesystem-dev     libpython2.7-dev     libglu1-mesa-dev freeglut3-dev</span><br><span class="line">Reading package lists... Done</span><br><span class="line">Building dependency tree     </span><br><span class="line">Reading state information... Done</span><br><span class="line">Some packages could not be installed. This may mean that you have</span><br><span class="line">requested an impossible situation or if you are using the unstable</span><br><span class="line">distribution that some required packages have not yet been created</span><br><span class="line">or been moved out of Incoming.</span><br><span class="line">The following information may help to resolve the situation:</span><br><span class="line"></span><br><span class="line">The following packages have unmet dependencies:</span><br><span class="line"> freeglut3-dev : Depends: libxext-dev but it is not going to be installed</span><br><span class="line">                 Depends: libxt-dev but it is not going to be installed</span><br><span class="line"> libgl1-mesa-dev : Depends: mesa-common-dev (= 20.0.8-0ubuntu1~18.04.1) but it is not going to be installed</span><br><span class="line">                   Depends: libx11-dev but it is not going to be installed</span><br><span class="line">                   Depends: libx11-xcb-dev but it is not going to be installed</span><br><span class="line">                   Depends: libxdamage-dev but it is not going to be installed</span><br><span class="line">                   Depends: libxext-dev but it is not going to be installed</span><br><span class="line">                   Depends: libxfixes-dev but it is not going to be installed</span><br><span class="line">                   Depends: libxxf86vm-dev but it is not going to be installed</span><br><span class="line">E: Unable to correct problems, you have held broken packages.</span><br></pre></td></tr></table></figure><p>这里依赖冲突的问题是安装的x11依赖包有两个版本过高了，需要降级下面这两个依赖包。<strong>如果你安装依赖项时没有出现依赖项冲突就成功安装了，则不需要执行下面的降级命令</strong>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">apt-get install -y \</span><br><span class="line">    libx11-xcb1=2:1.6.4-3ubuntu0.4 \</span><br><span class="line">    libx11-6=2:1.6.4-3ubuntu0.4</span><br></pre></td></tr></table></figure><p>降级成功后，重新执行上述安装Pangolin依赖项的命令，就能成功安装了。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/02/612a64181be8520b7fc2020b05279a54.png" alt="image.png"></p><h4 id="3-2-2-编译安装"><a href="#3-2-2-编译安装" class="headerlink" title="3.2.2. 编译安装"></a>3.2.2. 编译安装</h4><p>随后使用如下命令来编译安装Pangolin，Github地址：<a href="https://github.com/stevenlovegrove/Pangolin/releases/tag/v0.6">Pangolin-0.6</a>。</p><p>建议这些依赖包都进入<code>~/autodl-tmp</code>数据盘来下载和安装，这样即便后续需要更换镜像也能保留数据，不需要重新下载</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载</span></span><br><span class="line">wget -O Pangolin-0.6.tar.gz https://github.com/stevenlovegrove/Pangolin/archive/refs/tags/v0.6.tar.gz</span><br><span class="line"><span class="comment"># 解压</span></span><br><span class="line">tar -zxvf Pangolin-0.6.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="built_in">pushd</span> Pangolin-0.6</span><br><span class="line">    <span class="built_in">rm</span> -rf build</span><br><span class="line">    <span class="built_in">mkdir</span> build &amp;&amp; <span class="built_in">cd</span> build</span><br><span class="line">    <span class="comment"># 编译安装 </span></span><br><span class="line">    cmake -DCPP11_NO_BOOST=1 ..</span><br><span class="line">    make -j$(<span class="built_in">nproc</span>)</span><br><span class="line">    make install</span><br><span class="line">    <span class="comment"># 刷新动态库</span></span><br><span class="line">    ldconfig</span><br><span class="line"><span class="built_in">popd</span></span><br></pre></td></tr></table></figure><p>编译安装成功</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/02/1c07fc6dbf06de466e2a7e2a231cb489.png" alt="image.png"></p><p>示例代码HelloPangolin也能编译成功，只不过当前我们还没有配置GUI，所以会有x11错误无法运行（后文会讲述如何配置GUI和VNC）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">root@autodl-container-e39d46b8d3-01da7b14:~/pkg/Pangolin-0.6/build# cd ../examples/HelloPangolin</span><br><span class="line">root@autodl-container-e39d46b8d3-01da7b14:~/pkg/Pangolin-0.6/examples/HelloPangolin# mkdir build &amp;&amp; cd build</span><br><span class="line">root@autodl-container-e39d46b8d3-01da7b14:~/pkg/Pangolin-0.6/examples/HelloPangolin/build# cmake ..</span><br><span class="line">-- The C compiler identification is GNU 7.5.0</span><br><span class="line">-- The CXX compiler identification is GNU 7.5.0</span><br><span class="line">-- Check for working C compiler: /usr/bin/cc</span><br><span class="line">-- Check for working C compiler: /usr/bin/cc -- works</span><br><span class="line">-- Detecting C compiler ABI info</span><br><span class="line">-- Detecting C compiler ABI info - done</span><br><span class="line">-- Detecting C compile features</span><br><span class="line">-- Detecting C compile features - done</span><br><span class="line">-- Check for working CXX compiler: /usr/bin/c++</span><br><span class="line">-- Check for working CXX compiler: /usr/bin/c++ -- works</span><br><span class="line">-- Detecting CXX compiler ABI info</span><br><span class="line">-- Detecting CXX compiler ABI info - done</span><br><span class="line">-- Detecting CXX compile features</span><br><span class="line">-- Detecting CXX compile features - done</span><br><span class="line">CMake Warning (dev) in CMakeLists.txt:</span><br><span class="line">  No cmake_minimum_required command is present.  A line of code such as</span><br><span class="line"></span><br><span class="line">    cmake_minimum_required(VERSION 3.10)</span><br><span class="line"></span><br><span class="line">  should be added at the top of the file.  The version specified may be lower</span><br><span class="line">  if you wish to support older CMake versions for this project.  For more</span><br><span class="line">  information run &quot;cmake --help-policy CMP0000&quot;.</span><br><span class="line">This warning is for project developers.  Use -Wno-dev to suppress it.</span><br><span class="line"></span><br><span class="line">-- Configuring done</span><br><span class="line">CMake Warning (dev) at CMakeLists.txt:5 (add_executable):</span><br><span class="line">  Policy CMP0003 should be set before this line.  Add code such as</span><br><span class="line"></span><br><span class="line">    if(COMMAND cmake_policy)</span><br><span class="line">      cmake_policy(SET CMP0003 NEW)</span><br><span class="line">    endif(COMMAND cmake_policy)</span><br><span class="line"></span><br><span class="line">  as early as possible but after the most recent call to</span><br><span class="line">  cmake_minimum_required or cmake_policy(VERSION).  This warning appears</span><br><span class="line">  because target &quot;HelloPangolin&quot; links to some libraries for which the linker</span><br><span class="line">  must search:</span><br><span class="line"></span><br><span class="line">    rt, pthread, rt, pthread</span><br><span class="line"></span><br><span class="line">  and other libraries with known full path:</span><br><span class="line"></span><br><span class="line">    /usr/local/lib/libpangolin.so</span><br><span class="line"></span><br><span class="line">  CMake is adding directories in the second list to the linker search path in</span><br><span class="line">  case they are needed to find libraries from the first list (for backwards</span><br><span class="line">  compatibility with CMake 2.4).  Set policy CMP0003 to OLD or NEW to enable</span><br><span class="line">  or disable this behavior explicitly.  Run &quot;cmake --help-policy CMP0003&quot; for</span><br><span class="line">  more information.</span><br><span class="line">This warning is for project developers.  Use -Wno-dev to suppress it.</span><br><span class="line"></span><br><span class="line">-- Generating done</span><br><span class="line">-- Build files have been written to: /root/pkg/Pangolin-0.6/examples/HelloPangolin/build</span><br><span class="line">root@autodl-container-e39d46b8d3-01da7b14:~/pkg/Pangolin-0.6/examples/HelloPangolin/build# make</span><br><span class="line">Scanning dependencies of target HelloPangolin</span><br><span class="line">[ 50%] Building CXX object CMakeFiles/HelloPangolin.dir/main.o</span><br><span class="line">[100%] Linking CXX executable HelloPangolin</span><br><span class="line">[100%] Built target HelloPangolin</span><br><span class="line">root@autodl-container-e39d46b8d3-01da7b14:~/pkg/Pangolin-0.6/examples/HelloPangolin/build# ./HelloPangolin </span><br><span class="line">terminate called after throwing an instance of &#x27;std::runtime_error&#x27;</span><br><span class="line">  what():  Pangolin X11: Failed to open X display</span><br><span class="line">Aborted (core dumped)</span><br></pre></td></tr></table></figure><h3 id="3-3-OpenCV-3-4-5"><a href="#3-3-OpenCV-3-4-5" class="headerlink" title="3.3. OpenCV 3.4.5"></a>3.3. OpenCV 3.4.5</h3><p>先安装依赖项</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install -y \</span><br><span class="line">build-essential libgtk2.0-dev \</span><br><span class="line">libavcodec-dev libavformat-dev \</span><br><span class="line">libjpeg.dev libtiff5.dev libswscale-dev \</span><br><span class="line">libcanberra-gtk-module</span><br></pre></td></tr></table></figure><p>因为AutoDL环境是amd64，所以直接用下面的命令安装libjasper就OK了，不需要额外的处理</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># amd64 添加新源后继续安装</span></span><br><span class="line">sudo apt-get install -y software-properties-common </span><br><span class="line">sudo add-apt-repository <span class="string">&quot;deb http://security.ubuntu.com/ubuntu xenial-security main&quot;</span></span><br><span class="line">sudo apt-get -y update </span><br><span class="line">sudo apt-get install -y libjasper1 libjasper-dev</span><br></pre></td></tr></table></figure><p>以下是安装libjasper的截图</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/02/5902d476da93c3adfb6af65231e3d168.png" alt="image.png"></p><p>安装好了依赖项后，使用如下命令编译opencv，Github地址：<a href="https://github.com/opencv/opencv/releases/tag/3.4.5">opencv的3.4.5版本</a>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载和解压</span></span><br><span class="line">wget -O opencv-3.4.5.tar.gz https://github.com/opencv/opencv/archive/refs/tags/3.4.5.tar.gz</span><br><span class="line">tar -zxvf opencv-3.4.5.tar.gz</span><br><span class="line"><span class="comment"># 开始编译和安装</span></span><br><span class="line"><span class="built_in">pushd</span> opencv-3.4.5</span><br><span class="line">    <span class="built_in">rm</span> -rf build</span><br><span class="line">    <span class="built_in">mkdir</span> build &amp;&amp; <span class="built_in">cd</span> build </span><br><span class="line">    <span class="comment"># 构建和编译安装，-j4代表4线程并发</span></span><br><span class="line">    cmake -D CMAKE_BUILD_TYPE=Release -D CMAKE_INSTALL_PREFIX=/usr/local ..</span><br><span class="line">    make -j$(<span class="built_in">nproc</span>)</span><br><span class="line">    make install</span><br><span class="line">    <span class="comment"># 刷新动态库</span></span><br><span class="line">    ldconfig</span><br><span class="line"><span class="built_in">popd</span></span><br></pre></td></tr></table></figure><p>正常编译安装，莫得问题</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/02/2fc7a4798d20675737e1db1f7539b952.png" alt="image.png"></p><h3 id="3-4-Eigen-3-7"><a href="#3-4-Eigen-3-7" class="headerlink" title="3.4. Eigen 3.7"></a>3.4. Eigen 3.7</h3><p>Eigen包在gitlab里面下载：<a href="https://gitlab.com/libeigen/eigen/-/releases/3.3.7">gitlab.com&#x2F;libeigen&#x2F;eigen&#x2F;-&#x2F;releases&#x2F;3.3.7</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载</span></span><br><span class="line">wget -O eigen-3.3.7.tar.gz https://gitlab.com/libeigen/eigen/-/archive/3.3.7/eigen-3.3.7.tar.gz</span><br><span class="line">tar -zxvf eigen-3.3.7.tar.gz</span><br><span class="line"><span class="comment"># 开始编译和安装</span></span><br><span class="line"><span class="built_in">cd</span> eigen-3.3.7</span><br><span class="line"><span class="built_in">mkdir</span> build &amp;&amp; <span class="built_in">cd</span> build</span><br><span class="line">cmake ..</span><br><span class="line">make &amp;&amp; make install</span><br><span class="line"><span class="comment"># 拷贝路径（避免头文件引用不到）</span></span><br><span class="line">sudo <span class="built_in">cp</span> -r /usr/local/include/eigen3/Eigen /usr/local/include</span><br></pre></td></tr></table></figure><p>还是用相同的cpp的demo代码来测试是否安装成功（直接g++编译就可以了）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="comment">//需要将头文件从 /usr/local/include/eigen3/ 复制到 /usr/local/include</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Eigen/Dense&gt;</span></span></span><br><span class="line"><span class="comment">//using Eigen::MatrixXd;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> Eigen;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> Eigen::internal;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> Eigen::Architecture;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;*******************1D-object****************&quot;</span>&lt;&lt;endl;</span><br><span class="line">        Vector4d v1;</span><br><span class="line">        v1&lt;&lt; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;v1=\n&quot;</span>&lt;&lt;v1&lt;&lt;endl;</span><br><span class="line"> </span><br><span class="line">        <span class="function">VectorXd <span class="title">v2</span><span class="params">(<span class="number">3</span>)</span></span>;</span><br><span class="line">        v2&lt;&lt;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;v2=\n&quot;</span>&lt;&lt;v2&lt;&lt;endl;</span><br><span class="line"> </span><br><span class="line">        Array4i v3;</span><br><span class="line">        v3&lt;&lt;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;v3=\n&quot;</span>&lt;&lt;v3&lt;&lt;endl;</span><br><span class="line"> </span><br><span class="line">        <span class="function">ArrayXf <span class="title">v4</span><span class="params">(<span class="number">3</span>)</span></span>;</span><br><span class="line">        v4&lt;&lt;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;v4=\n&quot;</span>&lt;&lt;v4&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正常编译运行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">root@autodl-container-e39d46b8d3-01da7b14:~/pkg/eigen-3.3.7/build# g++ test.cpp -o t</span><br><span class="line">root@autodl-container-e39d46b8d3-01da7b14:~/pkg/eigen-3.3.7/build# ./t</span><br><span class="line">*******************1D-object****************</span><br><span class="line">v1=</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">v2=</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">v3=</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">v4=</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td></tr></table></figure><h3 id="3-5-Libtorch-1-5-0"><a href="#3-5-Libtorch-1-5-0" class="headerlink" title="3.5. Libtorch 1.5.0"></a>3.5. Libtorch 1.5.0</h3><h4 id="3-5-1-关于手工编译的说明"><a href="#3-5-1-关于手工编译的说明" class="headerlink" title="3.5.1. 关于手工编译的说明"></a>3.5.1. 关于手工编译的说明</h4><p>因为我们选择的autodl环境里面已经带了Pytorch了，所以可以不需要自己手动从源码构建了。</p><p>我尝试过从源码构建pytorch 1.1.0版本，会在构建的半路被killed掉，不清楚问题在哪里，猜测是构建占用内存cpu过多导致的，当时被kill掉的输出如下，大约在74%的时候，前后都没有出现error，就直接被干掉了。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/02/b14ebcee0574f7686f2718cb7e1b1f33.png" alt="image.png"><br> <img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/02/544077ff057e3ee249dddf844975dd5f.png" alt="image.png"></p><h4 id="3-5-2-不能使用本地已有的版本"><a href="#3-5-2-不能使用本地已有的版本" class="headerlink" title="3.5.2. 不能使用本地已有的版本"></a>3.5.2. 不能使用本地已有的版本</h4><p>我们选用的autodl镜像里面其实已经自带了一个可用的Torch目录，路径如下所示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/root/miniconda3/lib/python3.8/site-packages/torch/share/cmake/Torch</span><br></pre></td></tr></table></figure><p>但是这个目录中引用的libtorch预编译版本是不包含C++11ABI兼容机制的，会最终导致Pangolin链接失败，<strong>错误输出如下所示</strong>。这个链接失败的问题和使用的Pangolin版本没有关系，尝试过Pangolin5.0和6.0都会链接失败。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[100%] Linking CXX executable ../GCN2/rgbd_gcn</span><br><span class="line">../lib/libORB_SLAM2.so: undefined reference to `pangolin::Split(std::string const&amp;, char)&#x27;</span><br><span class="line">../lib/libORB_SLAM2.so: undefined reference to `pangolin::CreatePanel(std::string const&amp;)&#x27;</span><br><span class="line">../lib/libORB_SLAM2.so: undefined reference to `DBoW2::FORB::fromString(cv::Mat&amp;, std::string const&amp;)&#x27;</span><br><span class="line">../lib/libORB_SLAM2.so: undefined reference to `pangolin::BindToContext(std::string)&#x27;</span><br><span class="line">../lib/libORB_SLAM2.so: undefined reference to `DBoW2::FORB::toString(cv::Mat const&amp;)&#x27;</span><br><span class="line">../lib/libORB_SLAM2.so: undefined reference to `pangolin::CreateWindowAndBind(std::string, int, int, pangolin::Params const&amp;)&#x27;</span><br><span class="line">collect2: error: ld returned 1 exit status</span><br><span class="line">CMakeFiles/rgbd_gcn.dir/build.make:152: recipe for target &#x27;../GCN2/rgbd_gcn&#x27; failed</span><br><span class="line">make[2]: *** [../GCN2/rgbd_gcn] Error 1</span><br><span class="line">CMakeFiles/Makefile2:67: recipe for target &#x27;CMakeFiles/rgbd_gcn.dir/all&#x27; failed</span><br><span class="line">make[1]: *** [CMakeFiles/rgbd_gcn.dir/all] Error 2</span><br><span class="line">Makefile:83: recipe for target &#x27;all&#x27; failed</span><br><span class="line">make: *** [all] Error 2</span><br></pre></td></tr></table></figure><p>在GCNv2的GITHUB中是有提到这个问题的，翻译过来就是不要使用预编译版本的libtorch，因为会出现CXX11 ABI导致的连接错误。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/02/28648c35c47c9423677cbc031ee7b21b.png" alt="image.png"></p><p>在Pytroch 1.3.0之后的版本，官方就已经提供了带CXX11 ABI兼容的预编译版本了，所以可以下载预编译包之后来使用。直接使用容器内的libtorch依旧会有链接问题。</p><h4 id="3-5-3-下载预编译版本"><a href="#3-5-3-下载预编译版本" class="headerlink" title="3.5.3. 下载预编译版本"></a>3.5.3. 下载预编译版本</h4><p>最开始我选择的就是pytorch1.1.0版本的镜像，但是由于没办法从源码编译所以切换成了pytorch1.5.1的镜像。因为在pytorch1.3.0之后官方才提供了CXX11 ABI兼容的预编译包，在这之前的版本都需要手工编译，否则会有链接错误。</p><p>我们需要做的操作是从官网上下一个带CXX11 ABI兼容的libtorch预编译包，下载地址中包含<code>cxx11-abi</code>的才是带有CXX11 ABI兼容的。1.5.0版本的libtorch包下载地址如下，其中cu101代表cuda10.1，最后的libtorch版本是1.5.0（libtorch 1.5.1版本的包下不了）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://download.pytorch.org/libtorch/cu101/libtorch-cxx11-abi-shared-with-deps-1.5.0.zip</span><br></pre></td></tr></table></figure><p>直接通过unzip解压这个目录，就能得到一个libtorch文件夹，后文需要的<code>TORCH_PATH</code>在libtorch的<code>libtorch/share/cmake/Torch</code>目录中就有：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@autodl-container-e39d46b8d3-01da7b14:~/autodl-tmp# ls libtorch/share/cmake/Torch</span><br><span class="line">TorchConfig.cmake  TorchConfigVersion.cmake</span><br></pre></td></tr></table></figure><p>预编译的libtorch包容量都挺大的，建议本地提前下好然后上传到autodl里面，在autodl里面直接下载太耗时了，都是钱呐！</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/02/026d3b62639df227067ffd0ca0c204ef.png" alt="image.png"></p><h2 id="4-编译GCNv2-SLAM"><a href="#4-编译GCNv2-SLAM" class="headerlink" title="4. 编译GCNv2_SLAM"></a>4. 编译GCNv2_SLAM</h2><p>上正主了，克隆一下代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/jiexiong2016/GCNv2_SLAM.git</span><br></pre></td></tr></table></figure><p>因为这次是在autodl环境中跑，有了显卡，pytorch的版本和之前的博客中的完全不一样，所以需要修改的代码内容也不一样。可以参考博客 <a href="https://blog.csdn.net/yangyu0515/article/details/136621489">GCNv2_SLAM-CPU详细安装教程(ubuntu18.04)-CSDN博客</a> 中的说明进行修改。</p><h3 id="4-1-修改build-sh"><a href="#4-1-修改build-sh" class="headerlink" title="4.1. 修改build.sh"></a>4.1. 修改build.sh</h3><p>预编译版本的<code>TORCH_PATH</code>在压缩包解压后libtorch目录中，即<code>libtorch/share/cmake/Torch</code>目录。修改build.sh脚本中的路径为此目录就可以了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-DTORCH_PATH=/root/autodl-tmp/libtorch/share/cmake/Torch</span><br></pre></td></tr></table></figure><p>修改之后就可以开始编译，并根据报错来解决后面的一些问题了</p><h3 id="4-2-修改代码兼容高版本libtorch"><a href="#4-2-修改代码兼容高版本libtorch" class="headerlink" title="4.2. 修改代码兼容高版本libtorch"></a>4.2. 修改代码兼容高版本libtorch</h3><p>这部分修改可以在我的Github仓库中找到：<a href="https://github.com/musnows/GCNv2_SLAM/tree/pytorch1.5.0">github.com&#x2F;musnows&#x2F;GCNv2_SLAM&#x2F;tree&#x2F;pytorch1.5.0</a></p><h4 id="4-2-1-C-14编译配置"><a href="#4-2-1-C-14编译配置" class="headerlink" title="4.2.1. C++14编译配置"></a>4.2.1. C++14编译配置</h4><p>初次运行会出现如下错误，高版本的torch需要C++14来编译，因为用到了14的新特性</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/root/autodl-tmp/libtorch/include/c10/util/C++17.h:27:2: error: #error You need C++14 to compile PyTorch</span><br><span class="line">   27 | #error You need C++14 to compile PyTorch</span><br><span class="line">      |  ^~~~~</span><br></pre></td></tr></table></figure><p>需要我们修改camke文件，修改<code>GCNv2_SLAM/CMakeLists.txt</code>，新增如下内容</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 头部插入</span></span><br><span class="line"><span class="keyword">set</span>(CMAKE_CXX_STANDARD <span class="number">14</span>)</span><br><span class="line"><span class="keyword">set</span>(CMAKE_CXX_STANDARD_REQUIRED <span class="keyword">ON</span>)</span><br><span class="line"><span class="comment"># 修改尾部的11为14</span></span><br><span class="line"><span class="comment"># set_property(TARGET rgbd_gcn PROPERTY CXX_STANDARD 11)</span></span><br><span class="line"><span class="keyword">set_property</span>(<span class="keyword">TARGET</span> rgbd_gcn PROPERTY CXX_STANDARD <span class="number">14</span>)</span><br></pre></td></tr></table></figure><p>然后还需要注释掉和C++11判断相关的cmake配置，也就是下面这一堆</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Check C++11 or C++0x support</span></span><br><span class="line"><span class="comment">#include(CheckCXXCompilerFlag)</span></span><br><span class="line"><span class="comment">#CHECK_CXX_COMPILER_FLAG(&quot;-std=c++11&quot; COMPILER_SUPPORTS_CXX11)</span></span><br><span class="line"><span class="comment">#CHECK_CXX_COMPILER_FLAG(&quot;-std=c++0x&quot; COMPILER_SUPPORTS_CXX0X)</span></span><br><span class="line"><span class="comment">#if(COMPILER_SUPPORTS_CXX11)</span></span><br><span class="line"><span class="comment">#   set(CMAKE_CXX_FLAGS &quot;$&#123;CMAKE_CXX_FLAGS&#125; -std=c++11&quot;)</span></span><br><span class="line">   <span class="keyword">add_definitions</span>(-DCOMPILEDWITHC11)</span><br><span class="line"><span class="comment">#   message(STATUS &quot;Using flag -std=c++11.&quot;)</span></span><br><span class="line"><span class="comment">#elseif(COMPILER_SUPPORTS_CXX0X)</span></span><br><span class="line"><span class="comment">#   set(CMAKE_CXX_FLAGS &quot;$&#123;CMAKE_CXX_FLAGS&#125; -std=c++0x&quot;)</span></span><br><span class="line"><span class="comment">#   add_definitions(-DCOMPILEDWITHC0X)</span></span><br><span class="line"><span class="comment">#   message(STATUS &quot;Using flag -std=c++0x.&quot;)</span></span><br><span class="line"><span class="comment">#else()</span></span><br><span class="line"><span class="comment">#   message(FATAL_ERROR &quot;The compiler $&#123;CMAKE_CXX_COMPILER&#125; has no C++11 support. Please use a different C++ compiler.&quot;)</span></span><br><span class="line"><span class="comment">#endif()</span></span><br></pre></td></tr></table></figure><p>其中<code>add_definitions(-DCOMPILEDWITHC11)</code>不要注释掉，有用！</p><p>修改cmake后需要删除<code>GCNv2_SLAM/build</code>目录重新运行build.sh脚本，否则修改可能不会生效。</p><h4 id="4-2-2-缺少对应的operator-x3D"><a href="#4-2-2-缺少对应的operator-x3D" class="headerlink" title="4.2.2. 缺少对应的operator&#x3D;"></a>4.2.2. 缺少对应的operator&#x3D;</h4><p>报错如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/root/autodl-tmp/GCNv2_SLAM/src/GCNextractor.cc: In constructor ‘ORB_SLAM2::GCNextractor::GCNextractor(int, float, int, int, int)’:</span><br><span class="line">/root/autodl-tmp/GCNv2_SLAM/src/GCNextractor.cc:218:37: error: no match for ‘operator=’ (operand types are ‘std::shared_ptr&lt;torch::jit::Module&gt;’ and ‘torch::jit::Module’)</span><br><span class="line">     module = torch::jit::load(net_fn);</span><br><span class="line">                                     ^</span><br><span class="line">In file included from /usr/include/c++/7/memory:81:0,</span><br><span class="line">                 from /root/miniconda3/lib/python3.8/site-packages/torch/include/c10/core/Allocator.h:4,</span><br><span class="line">                 from /root/miniconda3/lib/python3.8/site-packages/torch/include/ATen/ATen.h:3,</span><br><span class="line">                 from /root/miniconda3/lib/python3.8/site-packages/torch/include/torch/csrc/api/include/torch/types.h:3,</span><br><span class="line">                 from /root/miniconda3/lib/python3.8/site-packages/torch/include/torch/script.h:3,</span><br><span class="line">                 from /root/autodl-tmp/GCNv2_SLAM/include/GCNextractor.h:24,</span><br><span class="line">                 from /root/autodl-tmp/GCNv2_SLAM/src/GCNextractor.cc:63:</span><br></pre></td></tr></table></figure><p>问题主要是<code>torch::jit::Module</code>入参不再是一个指针了，所以要把<code>shared_ptr</code>给改成普通对象。</p><p>修改<code>GCNv2_SLAM/include/GCNextractor.h</code>文件的99行：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//原代码</span></span><br><span class="line">std::shared_ptr&lt;torch::jit::script::Module&gt; <span class="keyword">module</span>;</span><br><span class="line"><span class="comment">//更改为</span></span><br><span class="line">torch::jit::script::Module <span class="keyword">module</span>;</span><br></pre></td></tr></table></figure><p>还需要对应修改<code>GCNv2_SLAM/src/GCNextractor.cc</code>的270行：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//原代码</span></span><br><span class="line"><span class="keyword">auto</span> output = <span class="keyword">module</span>-&gt;forward(inputs).<span class="built_in">toTuple</span>();</span><br><span class="line"><span class="comment">//更改为</span></span><br><span class="line"><span class="keyword">auto</span> output = <span class="keyword">module</span>.forward(inputs).<span class="built_in">toTuple</span>();</span><br></pre></td></tr></table></figure><h4 id="4-2-3-标准库chrono编译问题"><a href="#4-2-3-标准库chrono编译问题" class="headerlink" title="4.2.3. 标准库chrono编译问题"></a>4.2.3. 标准库chrono编译问题</h4><p>如果你的cmake修改不对，还可能会遇到chrono导致的编译报错</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">/root/autodl-tmp/GCNv2_SLAM/GCN2/rgbd_gcn.cc: In function ‘int main(int, char**)’:</span><br><span class="line">/root/autodl-tmp/GCNv2_SLAM/GCN2/rgbd_gcn.cc:97:22: error: ‘std::chrono::monotonic_clock’ has not been declared</span><br><span class="line">         std::chrono::monotonic_clock::time_point t1 = std::chrono::monotonic_clock::now();</span><br><span class="line">                      ^~~~~~~~~~~~~~~</span><br><span class="line">/root/autodl-tmp/GCNv2_SLAM/GCN2/rgbd_gcn.cc:106:22: error: ‘std::chrono::monotonic_clock’ has not been declared</span><br><span class="line">         std::chrono::monotonic_clock::time_point t2 = std::chrono::monotonic_clock::now();</span><br><span class="line">                      ^~~~~~~~~~~~~~~</span><br><span class="line">/root/autodl-tmp/GCNv2_SLAM/GCN2/rgbd_gcn.cc:109:84: error: ‘t2’ was not declared in this scope</span><br><span class="line">         double ttrack = std::chrono::duration_cast&lt;std::chrono::duration&lt;double&gt; &gt;(t2 - t1).count();</span><br><span class="line">                                                                                    ^~</span><br><span class="line">/root/autodl-tmp/GCNv2_SLAM/GCN2/rgbd_gcn.cc:109:84: note: suggested alternative: ‘tm’</span><br><span class="line">         double ttrack = std::chrono::duration_cast&lt;std::chrono::duration&lt;double&gt; &gt;(t2 - t1).count();</span><br><span class="line">                                                                                    ^~</span><br><span class="line">                                                                                    tm</span><br><span class="line">/root/autodl-tmp/GCNv2_SLAM/GCN2/rgbd_gcn.cc:109:89: error: ‘t1’ was not declared in this scope</span><br><span class="line">         double ttrack = std::chrono::duration_cast&lt;std::chrono::duration&lt;double&gt; &gt;(t2 - t1).count();</span><br><span class="line">                                                                                         ^~</span><br><span class="line">/root/autodl-tmp/GCNv2_SLAM/GCN2/rgbd_gcn.cc:109:89: note: suggested alternative: ‘tm’</span><br><span class="line">         double ttrack = std::chrono::duration_cast&lt;std::chrono::duration&lt;double&gt; &gt;(t2 - t1).count();</span><br><span class="line">                                                                                         ^~</span><br><span class="line">                                                                                         tm</span><br><span class="line">^CCMakeFiles/rgbd_gcn.dir/build.make:62: recipe for target &#x27;CMakeFiles/rgbd_gcn.dir/GCN2/rgbd_gcn.cc.o&#x27; failed</span><br><span class="line">make[2]: *** [CMakeFiles/rgbd_gcn.dir/GCN2/rgbd_gcn.cc.o] Interrupt</span><br><span class="line">CMakeFiles/Makefile2:67: recipe for target &#x27;CMakeFiles/rgbd_gcn.dir/all&#x27; failed</span><br><span class="line">make[1]: *** [CMakeFiles/rgbd_gcn.dir/all] Interrupt</span><br><span class="line">Makefile:83: recipe for target &#x27;all&#x27; failed</span><br><span class="line">make: *** [all] Interrupt</span><br></pre></td></tr></table></figure><p>错误的主要含义就是<code>std::chrono::monotonic_clock</code>不存在，这是老版本的一个类，C++11新版本已经给它删掉了。查看<code>GCN2/rgbd_gcn.cc</code>代码可以发现，这里有宏定义来区分</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// GCNv2_SLAM/GCN2/rgbd_gcn.cc</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> COMPILEDWITHC11</span></span><br><span class="line">        std::chrono::steady_clock::time_point t1 = std::chrono::steady_clock::<span class="built_in">now</span>();</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">        std::chrono::monotonic_clock::time_point t1 = std::chrono::monotonic_clock::<span class="built_in">now</span>();</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>前文提到的<code>GCNv2_SLAM/CMakeLists.txt</code>中需要保留<code>add_definitions(-DCOMPILEDWITHC11)</code>就是这个原因。有了这个宏定义此处代码就会编译<code>std::chrono::steady_clock</code>，不会有编译错误了。</p><h4 id="4-2-4-修改PT文件"><a href="#4-2-4-修改PT文件" class="headerlink" title="4.2.4. 修改PT文件"></a>4.2.4. 修改PT文件</h4><p>依旧需要修改3个pt文件，注意这时候修改的内容和CPU运行不一样！</p><p>修改<code>GCNv2_SLAM/GCN2</code>下gcn2_320x240.pt、gcn2_640x480.pt和gcn2_tiny_320x240.pt中的内容。需要先解压文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unzip gcn2_320x240.pt</span><br></pre></td></tr></table></figure><p>解压出来之后会有<code>GCNv2_SLAM/GCN2/gcn/code/gcn.py</code>文件，这里的<code>grid_sampler</code>函数在pytorch 1.3.0之前是默认传入True的，1.3.0改成默认False了，所以需要手动传入True</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 原代码</span></span><br><span class="line">_32 = torch.squeeze(torch.grid_sampler(<span class="built_in">input</span>, grid, <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line"><span class="comment"># 修改为</span></span><br><span class="line">_32 = torch.squeeze(torch.grid_sampler(<span class="built_in">input</span>, grid, <span class="number">0</span>, <span class="number">0</span>, <span class="literal">True</span>))</span><br></pre></td></tr></table></figure><p>替换了之后，重新压缩pt文件，先删了原本的，重新压缩</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rm</span> -rf gcn2_320x240.pt</span><br><span class="line">zip -r gcn2_320x240.pt gcn</span><br><span class="line"><span class="built_in">rm</span> -rf gcn <span class="comment">#删除刚刚的gcn文件夹</span></span><br></pre></td></tr></table></figure><p>这只是一个例子，其他几个gcn2压缩包都要用相同的方式修改！</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">unzip gcn2_640x480.pt</span><br><span class="line"><span class="built_in">rm</span> -rf gcn2_640x480.pt</span><br><span class="line"><span class="comment"># 修改下面这个文件</span></span><br><span class="line"><span class="comment">#   GCNv2_SLAM/GCN2/gcn2_480x640/code/gcn2_480x640.py</span></span><br><span class="line"><span class="comment"># 重新压缩</span></span><br><span class="line">zip -r gcn2_640x480.pt gcn2_480x640</span><br><span class="line"><span class="built_in">rm</span> -rf gcn2_480x640</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">unzip gcn2_tiny_320x240.pt</span><br><span class="line"><span class="built_in">rm</span> -rf gcn2_tiny_320x240.pt</span><br><span class="line"><span class="comment"># 修改文件</span></span><br><span class="line"><span class="comment">#   gcnv2slam/GCNv2_SLAM/GCN2/gcn2_tiny/code/gcn2_tiny.py</span></span><br><span class="line"><span class="comment"># 重新压缩</span></span><br><span class="line">zip -r gcn2_tiny_320x240.pt gcn2_tiny</span><br><span class="line"><span class="built_in">rm</span> -rf gcn2_tiny</span><br></pre></td></tr></table></figure><h3 id="4-3-编译项目"><a href="#4-3-编译项目" class="headerlink" title="4.3. 编译项目"></a>4.3. 编译项目</h3><p>修改了上面提到的几处问题，就能正常编译成功了</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/02/a67122422a0a7f536f5e1fe241ef06d3.png" alt="image.png"></p><p>如果需要从头重新编译项目，需要删除build目录缓存。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rm</span> -rf Thirdparty/g2o/build/</span><br><span class="line"><span class="built_in">rm</span> -rf Thirdparty/DBoW2/build/</span><br><span class="line"><span class="built_in">rm</span> -rf Vocabulary/*.bin</span><br><span class="line"><span class="built_in">rm</span> -rf ./build</span><br></pre></td></tr></table></figure><h2 id="5-配置VNC环境"><a href="#5-配置VNC环境" class="headerlink" title="5. 配置VNC环境"></a>5. 配置VNC环境</h2><h3 id="5-1-安装VNC服务端"><a href="#5-1-安装VNC服务端" class="headerlink" title="5.1. 安装VNC服务端"></a>5.1. 安装VNC服务端</h3><p>默认情况下autodl是没有GUI环境的，也就没有办法运行项目（会有x11报错）</p><p>所以我们需要依照官方文档来配置一下GUI：<a href="https://www.autodl.com/docs/gui/">www.autodl.com/docs/gui/</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装基本的依赖包</span></span><br><span class="line">apt update &amp;&amp; apt install -y libglu1-mesa-dev mesa-utils xterm xauth x11-xkb-utils xfonts-base xkb-data libxtst6 libxv1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装libjpeg-turbo和turbovnc</span></span><br><span class="line"><span class="built_in">export</span> TURBOVNC_VERSION=2.2.5</span><br><span class="line"><span class="built_in">export</span> LIBJPEG_VERSION=2.0.90</span><br><span class="line">wget http://aivc.ks3-cn-beijing.ksyun.com/packages/libjpeg-turbo/libjpeg-turbo-official_<span class="variable">$&#123;LIBJPEG_VERSION&#125;</span>_amd64.deb</span><br><span class="line">wget http://aivc.ks3-cn-beijing.ksyun.com/packages/turbovnc/turbovnc_<span class="variable">$&#123;TURBOVNC_VERSION&#125;</span>_amd64.deb</span><br><span class="line">dpkg -i libjpeg-turbo-official_<span class="variable">$&#123;LIBJPEG_VERSION&#125;</span>_amd64.deb</span><br><span class="line">dpkg -i turbovnc_<span class="variable">$&#123;TURBOVNC_VERSION&#125;</span>_amd64.deb</span><br><span class="line"><span class="built_in">rm</span> -rf *.deb</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动VNC服务端，这一步可能涉及vnc密码配置（注意不是实例的账户密码）。另外如果出现报错xauth未找到，那么使用apt install xauth再安装一次</span></span><br><span class="line"><span class="built_in">rm</span> -rf /tmp/.X1*  <span class="comment"># 如果再次启动，删除上一次的临时文件，否则无法正常启动</span></span><br><span class="line">USER=root /opt/TurboVNC/bin/vncserver :1 -desktop X -auth /root/.Xauthority -geometry 1920x1080 -depth 24 -rfbwait 120000 -rfbauth /root/.vnc/passwd -fp /usr/share/fonts/X11/misc/,/usr/share/fonts -rfbport 6006</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查是否启动，如果有vncserver的进程，证明已经启动</span></span><br><span class="line">ps -ef | grep vnc | grep -v grep</span><br></pre></td></tr></table></figure><p>启动vnc服务端会让你输入密码，为了方便我直接用了autodl实例的密码。只读密码<code>view-only password</code>选择n不设置。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@autodl-container-e39d46b8d3-01da7b14:~/vnc]$ USER=root /opt/TurboVNC/bin/vncserver :1 -desktop X -auth /root/.Xauthority -geometry 1920x1080 -depth 24 -rfbwait 120000 -rfbauth /root/.vnc/passwd -fp /usr/share/fonts/X11/misc/,/usr/share/fonts -rfbport 6006</span><br><span class="line"></span><br><span class="line">You will require a password to access your desktops.</span><br><span class="line"></span><br><span class="line">Password: </span><br><span class="line">Warning: password truncated to the length of 8.</span><br><span class="line">Verify:   </span><br><span class="line">Would you like to enter a view-only password (y/n)? n</span><br><span class="line">xauth:  file /root/.Xauthority does not exist</span><br><span class="line"></span><br><span class="line">Desktop &#x27;TurboVNC: autodl-container-e39d46b8d3-01da7b14:1 (root)&#x27; started on display autodl-container-e39d46b8d3-01da7b14:1</span><br><span class="line"></span><br><span class="line">Creating default startup script /root/.vnc/xstartup.turbovnc</span><br><span class="line">Starting applications specified in /root/.vnc/xstartup.turbovnc</span><br><span class="line">Log file is /root/.vnc/autodl-container-e39d46b8d3-01da7b14:1.log</span><br></pre></td></tr></table></figure><p>启动vnc服务端后就能搜到进程了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@autodl-container-e39d46b8d3-01da7b14:~/vnc# ps -ef | grep vnc | grep -v grep</span><br><span class="line">root      28861      1  0 11:22 pts/0    00:00:00 /opt/TurboVNC/bin/Xvnc :1 -desktop TurboVNC: autodl-container-64eb44b6f5-c569ba8d:1 (root) -httpd /opt/TurboVNC/bin//../java -auth /root/.Xauthority -geometr</span><br></pre></td></tr></table></figure><p>如果关闭了实例之后需要重启vnc，执行这两个命令就行了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rm</span> -rf /tmp/.X1*  <span class="comment"># 如果再次启动，删除上一次的临时文件，否则无法正常启动</span></span><br><span class="line">USER=root /opt/TurboVNC/bin/vncserver :1 -desktop X -auth /root/.Xauthority -geometry 1920x1080 -depth 24 -rfbwait 120000 -rfbauth /root/.vnc/passwd -fp /usr/share/fonts/X11/misc/,/usr/share/fonts -rfbport 6006</span><br></pre></td></tr></table></figure><h3 id="5-2-本地端口绑定"><a href="#5-2-本地端口绑定" class="headerlink" title="5.2. 本地端口绑定"></a>5.2. 本地端口绑定</h3><p>随后还需要进行本地ssh端口绑定，先到autodl的控制台实例列表里面复制一下ssh链接命令，应该长这样</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -p 端口号 root@域名</span><br></pre></td></tr></table></figure><p>使用下面这个命令在本地的终端运行，就能实现把远程的端口绑定到本地的6006端口了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -CNgv -L 6006:127.0.0.1:6006 root@域名 -p 端口号</span><br></pre></td></tr></table></figure><p>如果命令正确，输入这个命令后会让你键入autodl实例的密码，在控制台里面复制然后ctrl+shift+v（command+v）粘贴就行了。</p><p>期间需要保持这个终端一直开启，不然转发会终止。</p><h3 id="5-3-链接VNC"><a href="#5-3-链接VNC" class="headerlink" title="5.3. 链接VNC"></a>5.3. 链接VNC</h3><p>这里我使用了祖传的<a href="https://www.realvnc.com/en/connect/download/viewer/">VNC Viewer</a>来连云端，全平台都有客户端，下载安装就可以了。</p><p>安装了之后，直接在顶栏输入<code>127.0.0.1:6006</code>来链接云端。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/02/54f3efbf747088dde3378beaae3b2de3.png" alt="image.png"></p><p>如果提示connection closed大概率是vnc服务没有正常安装或者端口转发没有成功，请重试上述步骤。顺利的话，就会弹出来让你输入密码。</p><p><strong>这里的密码是启动vnc服务端时设置的密码</strong>，根据你设置的密码输入就行。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/02/12ae5231f3cd6a02a793333cf3dc4841.png"></p><p>链接成功，会是黑屏，正常情况</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/02/e5b8b4825b46610a7b1dc41a36934b62.png" alt="image.png"></p><h3 id="5-4-测试VNC是否安装成功"><a href="#5-4-测试VNC是否安装成功" class="headerlink" title="5.4. 测试VNC是否安装成功"></a>5.4. 测试VNC是否安装成功</h3><p>我们可以用Pangolin的示例程序来试试有没有配置成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> Pangolin-0.6/examples/HelloPangolin</span><br><span class="line"><span class="built_in">mkdir</span> build &amp;&amp; <span class="built_in">cd</span> build</span><br><span class="line">cmake ..</span><br><span class="line">make</span><br></pre></td></tr></table></figure><p>编译完成之后需要先执行<code>export DISPLAY=:1</code>启用GUI再启动需要GUI的程序</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> DISPLAY=:1</span><br><span class="line">./HelloPangolin </span><br></pre></td></tr></table></figure><p>如果没有export直接启动，还是会报错</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@autodl-container-e39d46b8d3-01da7b14:~/autodl-tmp/Pangolin-0.6/examples/HelloPangolin/build# ./HelloPangolin </span><br><span class="line">terminate called after throwing an instance of &#x27;std::runtime_error&#x27;</span><br><span class="line">  what():  Pangolin X11: Failed to open X display</span><br><span class="line">Aborted (core dumped)</span><br></pre></td></tr></table></figure><p>export了环境变量之后就能正常启动，且VNC里面也能看到画面了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@autodl-container-e39d46b8d3-01da7b14:~/autodl-tmp/Pangolin-0.6/examples/HelloPangolin/build# export DISPLAY=:1</span><br><span class="line">root@autodl-container-e39d46b8d3-01da7b14:~/autodl-tmp/Pangolin-0.6/examples/HelloPangolin/build# ./HelloPangolin </span><br></pre></td></tr></table></figure><p>出现下面这个魔方就是安装VNC成功啦</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/02/50899e86b90c9553dee4da5655e76ed4.png" alt="image.png"></p><p>你也可以编译opencv的demo来测试vnc是否正常</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> opencv-3.4.5/samples/cpp/example_cmake</span><br><span class="line"><span class="built_in">mkdir</span> build &amp;&amp; <span class="built_in">cd</span> build </span><br><span class="line">cmake ..</span><br><span class="line">make</span><br><span class="line"><span class="comment"># 导入环境变量之后再启动</span></span><br><span class="line"><span class="built_in">export</span> DISPLAY=:1</span><br><span class="line">./opencv_example</span><br></pre></td></tr></table></figure><p>如果正常，vnc里面会出现一个hello opencv，因为没有摄像头所以是黑屏</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/02/b2fb06eb34c33fb8cf008136419e0cc9.png" alt="image.png"></p><h2 id="6-运行GCNv2-SLAM分析TUM数据集"><a href="#6-运行GCNv2-SLAM分析TUM数据集" class="headerlink" title="6. 运行GCNv2_SLAM分析TUM数据集"></a>6. 运行GCNv2_SLAM分析TUM数据集</h2><p>接下来就可以运行项目了，还是去下载TUM数据集，这里把之前博客的命令copy过来。</p><h3 id="6-1-下载数据集"><a href="#6-1-下载数据集" class="headerlink" title="6.1. 下载数据集"></a>6.1. 下载数据集</h3><p>下载地址：<a href="https://cvg.cit.tum.de/data/datasets/rgbd-dataset/download">cvg.cit.tum.de&#x2F;data&#x2F;datasets&#x2F;rgbd-dataset&#x2F;download</a></p><p>下载<code>fr1/desk</code>数据集，这是一个桌子的RGBD数据</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/01/6ebeb1fe9366e07ea5dd7f0697b72d4f.png" alt="image.png"></p><p>在GCNv2_SLAM工程下新建<code>datasets/TUM</code>,将数据集下载到其中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 新建datasets/TUM数据集文件夹</span></span><br><span class="line"><span class="built_in">mkdir</span> -p datasets/TUM </span><br><span class="line"><span class="built_in">cd</span> datasets/TUM</span><br><span class="line"><span class="comment"># 下载数据集到datasets/TUM文件夹内</span></span><br><span class="line">wget -O rgbd_dataset_freiburg1_desk.tgz https://cvg.cit.tum.de/rgbd/dataset/freiburg1/rgbd_dataset_freiburg1_desk.tgz</span><br><span class="line"><span class="comment"># 解压数据集</span></span><br><span class="line">tar -xvf rgbd_dataset_freiburg1_desk.tgz</span><br></pre></td></tr></table></figure><p>然后还需要下载一个<code>associate.py</code>脚本来处理一下数据集才能正常运行</p><p>下载地址：<a href="https://svncvpr.in.tum.de/cvpr-ros-pkg/trunk/rgbd_benchmark/rgbd_benchmark_tools/src/rgbd_benchmark_tools/associate.py">svncvpr.in.tum.de</a>，同时在<a href="https://github.com/musnows/GCNv2_SLAM/blob/86c1efc0cc6c40669df20c0a62017815e18771b7/docker/associate.py">我的Github仓库</a>也做了留档。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -O associate.py https://svncvpr.in.tum.de/cvpr-ros-pkg/trunk/rgbd_benchmark/rgbd_benchmark_tools/src/rgbd_benchmark_tools/associate.py</span><br></pre></td></tr></table></figure><p>这个脚本只能用python2运行，需要下载numpy库。注意autodl的环境中python绑定到了python3，环境中的python2被拦掉了，所以需要安装独立的python2命令来运行python2。</p><p>在Pytorch1.5.1版本的autodl镜像中，可以直接使用下面的命令来安装python2和pip2：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install -y python-dev python-pip</span><br></pre></td></tr></table></figure><p>随后安装numpy库就ok了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">root@autodl-container-e39d46b8d3-01da7b14:~/autodl-tmp/GCNv2_SLAM/datasets/TUM# pip2 install numpy</span><br><span class="line">DEPRECATION: Python 2.7 reached the end of its life on January 1st, 2020. Please upgrade your Python as Python 2.7 is no longer maintained. pip 21.0 will drop support for Python 2.7 in January 2021. More details about Python 2 support in pip can be found at https://pip.pypa.io/en/latest/development/release-process/#python-2-support pip 21.0 will remove support for this functionality.</span><br><span class="line">Looking in indexes: http://mirrors.aliyun.com/pypi/simple</span><br><span class="line">Collecting numpy</span><br><span class="line">  Downloading http://mirrors.aliyun.com/pypi/packages/3a/5f/47e578b3ae79e2624e205445ab77a1848acdaa2929a00eeef6b16eaaeb20/numpy-1.16.6-cp27-cp27mu-manylinux1_x86_64.whl (17.0 MB)</span><br><span class="line">     |████████████████████████████████| 17.0 MB 21.1 MB/s </span><br><span class="line">Installing collected packages: numpy</span><br><span class="line">Successfully installed numpy-1.16.6</span><br></pre></td></tr></table></figure><p>执行脚本来处理两个文件，在数据文件夹里执行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python2 associate.py rgbd_dataset_freiburg1_desk/rgb.txt rgbd_dataset_freiburg1_desk/depth.txt &gt; rgbd_dataset_freiburg1_desk/associate.txt</span><br></pre></td></tr></table></figure><p>执行python命令后可以看看合并成功了没有，如下应该就是没问题了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1305031472.895713 rgb/1305031472.895713.png 1305031472.892944 depth/1305031472.892944.png</span><br><span class="line">1305031472.927685 rgb/1305031472.927685.png 1305031472.924814 depth/1305031472.924814.png</span><br><span class="line">1305031472.963756 rgb/1305031472.963756.png 1305031472.961213 depth/1305031472.961213.png</span><br></pre></td></tr></table></figure><p>在同一个网站下载的其他TUM数据集也需要用相同的方式进行处理</p><h3 id="6-2-运行项目"><a href="#6-2-运行项目" class="headerlink" title="6.2. 运行项目"></a>6.2. 运行项目</h3><p>随后进入项目的GCN2目录执行命令，我把命令中的路径都改成了相对路径</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 注意需要导入vnc环境变量</span></span><br><span class="line"><span class="built_in">export</span> DISPLAY=:1</span><br><span class="line"><span class="comment"># 运行项目</span></span><br><span class="line"><span class="built_in">cd</span> GCN2</span><br><span class="line">GCN_PATH=gcn2_320x240.pt ./rgbd_gcn ../Vocabulary/GCNvoc.bin TUM3_small.yaml ../datasets/TUM/rgbd_dataset_freiburg1_desk ../datasets/TUM/rgbd_dataset_freiburg1_desk/associate.txt</span><br></pre></td></tr></table></figure><p>项目能正常运行，VNC中也有图像输出</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/02/90d472a3a51c0e26823a5d4e0249e583.png" alt="image.png"></p><p>运行结束后的输出如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">[root@autodl-container-e39d46b8d3-01da7b14:~/autodl-tmp/GCNv2_SLAM/GCN2]$ GCN_PATH=gcn2_320x240.pt ./rgbd_gcn ../Vocabulary/GCNvoc.bin TUM3_small.yaml ../datasets/TUM/rgbd_dataset_freiburg1_desk ../datasets/TUM/rgbd_dataset_freiburg1_desk/associate.txt</span><br><span class="line"></span><br><span class="line">ORB-SLAM2 Copyright (C) 2014-2016 Raul Mur-Artal, University of Zaragoza.</span><br><span class="line">This program comes with ABSOLUTELY NO WARRANTY;</span><br><span class="line">This is free software, and you are welcome to redistribute it</span><br><span class="line">under certain conditions. See LICENSE.txt.</span><br><span class="line"></span><br><span class="line">Input sensor was set to: RGB-D</span><br><span class="line"></span><br><span class="line">Loading ORB Vocabulary. This could take a while...</span><br><span class="line">Vocabulary loaded!</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Camera Parameters: </span><br><span class="line">- fx: 267.7</span><br><span class="line">- fy: 269.6</span><br><span class="line">- cx: 160.05</span><br><span class="line">- cy: 123.8</span><br><span class="line">- k1: 0</span><br><span class="line">- k2: 0</span><br><span class="line">- p1: 0</span><br><span class="line">- p2: 0</span><br><span class="line">- fps: 30</span><br><span class="line">- color order: RGB (ignored if grayscale)</span><br><span class="line"></span><br><span class="line">ORB Extractor Parameters: </span><br><span class="line">- Number of Features: 1000</span><br><span class="line">- Scale Levels: 8</span><br><span class="line">- Scale Factor: 1.2</span><br><span class="line">- Initial Fast Threshold: 20</span><br><span class="line">- Minimum Fast Threshold: 7</span><br><span class="line"></span><br><span class="line">Depth Threshold (Close/Far Points): 5.97684</span><br><span class="line"></span><br><span class="line">-------</span><br><span class="line">Start processing sequence ...</span><br><span class="line">Images in the sequence: 573</span><br><span class="line"></span><br><span class="line">Framebuffer with requested attributes not available. Using available framebuffer. You may see visual artifacts.New map created with 251 points</span><br><span class="line">Finished!</span><br><span class="line">-------</span><br><span class="line"></span><br><span class="line">median tracking time: 0.0187857</span><br><span class="line">mean tracking time: 0.0193772</span><br><span class="line"></span><br><span class="line">Saving camera trajectory to CameraTrajectory.txt ...</span><br><span class="line"></span><br><span class="line">trajectory saved!</span><br><span class="line"></span><br><span class="line">Saving keyframe trajectory to KeyFrameTrajectory.txt ...</span><br><span class="line"></span><br><span class="line">trajectory saved!</span><br></pre></td></tr></table></figure><p>用时0.0187857，约合53hz，和论文里面GTX1070laptop的80hz还是差的有点远。</p><p>后面又跑了几次，结果更慢了。不过整体还是比CPU运行快了n多倍了！</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">median tracking time: 0.0225817</span><br><span class="line">mean tracking time: 0.0236844</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/02/586e7b5cb58e0d06104c7cba18674c8d.png"></p><h2 id="7-尝试4090运行失败"><a href="#7-尝试4090运行失败" class="headerlink" title="7. 尝试4090运行失败"></a>7. 尝试4090运行失败</h2><h3 id="7-1-环境配置（PyTorch-1-11-0）"><a href="#7-1-环境配置（PyTorch-1-11-0）" class="headerlink" title="7.1. 环境配置（PyTorch 1.11.0）"></a>7.1. 环境配置（PyTorch 1.11.0）</h3><p>我尝试使用过4090显卡，环境如下。4090没办法选更低版本的PyTorch了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PyTorch  1.11.0</span><br><span class="line">Python  3.8(ubuntu20.04)</span><br><span class="line">Cuda  11.3</span><br></pre></td></tr></table></figure><p><strong>依赖项都用相同的命令安装</strong>，以下是安装依赖项时的部分截图。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/02/683388a19f6bf7cd4023774a4d6ed745.png"></p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/02/4092f72fabfdc9ef3e38e732b36a1dd5.png"></p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/02/3ba57ba8d3591426e8988e55117a1aef.png" alt="image.png"></p><p>对应的Pytorch 1.11.0版本的libtorch下载链接如下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://download.pytorch.org/libtorch/cu113/libtorch-cxx11-abi-shared-with-deps-1.11.0%2Bcu113.zip</span><br></pre></td></tr></table></figure><p>整个包比较大，一共有1.6GB，需要慢慢等待下载了。建议还是本地提前下好再传上去，毕竟autodl每一分钟都是钱呐！</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/02/b84a9e7819ee2b4179df0a74a62daaf5.png" alt="image.png"></p><p>最终项目可以正常编译完成（也需要执行上文提到的代码修改）</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/02/e65a1b852168d63fa22cc2030323ecc7.png" alt="image.png"></p><h3 id="7-2-数据集处理"><a href="#7-2-数据集处理" class="headerlink" title="7.2. 数据集处理"></a>7.2. 数据集处理</h3><p>在Pytorch1.11.0镜像中需要用下面的方式安装python2来处理数据集，主要是python-pip包会提示不可用，没办法直接安装。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装python2</span></span><br><span class="line">apt-get install -y python-dev-is-python2</span><br><span class="line"><span class="comment"># 安装pip2</span></span><br><span class="line">wget https://bootstrap.pypa.io/pip/2.7/get-pip.py</span><br><span class="line">python2 get-pip.py</span><br></pre></td></tr></table></figure><p>获取到的python2如下，随后正常安装numpy来运行脚本就行了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@autodl-container-64eb44b6f5-c569ba8d:~# python2 -V</span><br><span class="line">Python 2.7.18</span><br><span class="line">root@autodl-container-64eb44b6f5-c569ba8d:~# pip2 -V</span><br><span class="line">pip 20.3.4 from /usr/local/lib/python2.7/dist-packages/pip (python 2.7)</span><br></pre></td></tr></table></figure><h3 id="7-3-运行GCN2发生coredump"><a href="#7-3-运行GCN2发生coredump" class="headerlink" title="7.3. 运行GCN2发生coredump"></a>7.3. 运行GCN2发生coredump</h3><p>还是用相同的命令启动程序</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> DISPLAY=:1</span><br><span class="line"><span class="built_in">cd</span> GCN2</span><br><span class="line">GCN_PATH=gcn2_320x240.pt ./rgbd_gcn ../Vocabulary/GCNvoc.bin TUM3_small.yaml ../datasets/TUM/rgbd_dataset_freiburg1_desk ../datasets/TUM/rgbd_dataset_freiburg1_desk/associate.txt</span><br></pre></td></tr></table></figure><p>完蛋，coredump了！</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">Camera Parameters: </span><br><span class="line">- fx: 267.7</span><br><span class="line">- fy: 269.6</span><br><span class="line">- cx: 160.05</span><br><span class="line">- cy: 123.8</span><br><span class="line">- k1: 0</span><br><span class="line">- k2: 0</span><br><span class="line">- p1: 0</span><br><span class="line">- p2: 0</span><br><span class="line">- fps: 30</span><br><span class="line">- color order: RGB (ignored if grayscale)</span><br><span class="line">terminate called after throwing an instance of &#x27;c10::Error&#x27;</span><br><span class="line">  what():  Legacy model format is not supported on mobile.</span><br><span class="line">Exception raised from deserialize at ../torch/csrc/jit/serialization/import.cpp:267 (most recent call first):</span><br><span class="line">frame #0: c10::Error::Error(c10::SourceLocation, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;) + 0x6b (0x7fefb6de20eb in /root/autodl-tmp/libtorch/lib/libc10.so)</span><br><span class="line">frame #1: c10::detail::torchCheckFail(char const*, char const*, unsigned int, char const*) + 0xd1 (0x7fefb6dddc41 in /root/autodl-tmp/libtorch/lib/libc10.so)</span><br><span class="line">frame #2: &lt;unknown function&gt; + 0x35dd53d (0x7feff3ef353d in /root/autodl-tmp/libtorch/lib/libtorch_cpu.so)</span><br><span class="line">frame #3: torch::jit::load(std::shared_ptr&lt;caffe2::serialize::ReadAdapterInterface&gt;, c10::optional&lt;c10::Device&gt;, std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;&amp;) + 0x1cd (0x7feff3ef48ad in /root/autodl-tmp/libtorch/lib/libtorch_cpu.so)</span><br><span class="line">frame #4: torch::jit::load(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, c10::optional&lt;c10::Device&gt;, std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;&amp;) + 0xc1 (0x7feff3ef64c1 in /root/autodl-tmp/libtorch/lib/libtorch_cpu.so)</span><br><span class="line">frame #5: torch::jit::load(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, c10::optional&lt;c10::Device&gt;) + 0x6f (0x7feff3ef65cf in /root/autodl-tmp/libtorch/lib/libtorch_cpu.so)</span><br><span class="line">frame #6: ORB_SLAM2::GCNextractor::GCNextractor(int, float, int, int, int) + 0x670 (0x7ff071e213c0 in /root/autodl-tmp/GCNv2_SLAM/lib/libORB_SLAM2.so)</span><br><span class="line">frame #7: ORB_SLAM2::Tracking::Tracking(ORB_SLAM2::System*, DBoW2::TemplatedVocabulary&lt;cv::Mat, DBoW2::FORB&gt;*, ORB_SLAM2::FrameDrawer*, ORB_SLAM2::MapDrawer*, ORB_SLAM2::Map*, ORB_SLAM2::KeyFrameDatabase*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, int) + 0x1e7e (0x7ff071dfcf0e in /root/autodl-tmp/GCNv2_SLAM/lib/libORB_SLAM2.so)</span><br><span class="line">frame #8: ORB_SLAM2::System::System(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, ORB_SLAM2::System::eSensor, bool) + 0x5ae (0x7ff071de459e in /root/autodl-tmp/GCNv2_SLAM/lib/libORB_SLAM2.so)</span><br><span class="line">frame #9: main + 0x22f (0x5609d811ae2f in ./rgbd_gcn)</span><br><span class="line">frame #10: __libc_start_main + 0xf3 (0x7fefb704a083 in /lib/x86_64-linux-gnu/libc.so.6)</span><br><span class="line">frame #11: _start + 0x2e (0x5609d811c7ce in ./rgbd_gcn)</span><br><span class="line"></span><br><span class="line">Aborted (core dumped)</span><br></pre></td></tr></table></figure><p>GPT说此问题是因为save模型和load模型的PyTorch版本不一致，导致无法加载。如果不出意外的话GCNv2应该是用README里面写的PyTorch 1.0.1版本来保存模型的，可能是1.0.1版本已经和1.11.0版本完全不兼容了。</p><p>这个问题我没找到解决方案，于是放弃治疗。本来GCNv2就是一个很老的项目了，在40系显卡上不好运行也正常。网上其实能搜到一篇在<a href="https://blog.csdn.net/qq_45482740/article/details/134299049">4060拯救者上运行GCNv2</a>的博客，但是那篇博客里面并没有提到这个coredump的问题，问GPT也没给出一个可行的方案，还是不浪费时间了。</p><h3 id="7-4-尝试使用-PyTorch-1-10-0-镜像"><a href="#7-4-尝试使用-PyTorch-1-10-0-镜像" class="headerlink" title="7.4. 尝试使用 PyTorch 1.10.0 镜像"></a>7.4. 尝试使用 PyTorch 1.10.0 镜像</h3><p>上面这个coredump搜到了几篇<a href="https://github.com/LaurentMazare/tch-rs/issues/469">github issue</a>，有的提到了可能是PyTorch 1.11.0版本和之前版本的镜像加载方式不同，导致无法load镜像。所以尝试使用PyTorch 1.10.0版本来重新测试一下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PyTorch  1.10.0</span><br><span class="line">Python  3.8(ubuntu20.04)</span><br><span class="line">Cuda  11.3</span><br></pre></td></tr></table></figure><p>对应版本libtorch的下载链接，其他依赖项用上文提到的命令安装就可以了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://download.pytorch.org/libtorch/cu113/libtorch-cxx11-abi-shared-with-deps-1.10.0%2Bcu113.zip</span><br></pre></td></tr></table></figure><p>然而并不行，依旧会有错误，这一次没有加载模型的error了，变成了段错误。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Start processing sequence ...</span><br><span class="line">Images in the sequence: 573</span><br><span class="line"></span><br><span class="line">Pass &#x27;Combine redundant instructions&#x27; is not initialized.</span><br><span class="line">Verify if there is a pass dependency cycle.</span><br><span class="line">Required Passes:</span><br><span class="line">Segmentation fault (core dumped)</span><br></pre></td></tr></table></figure><p>在类似项目<code>YOLO_ORB_SLAM3</code>的仓库中能找到相关的issue：<a href="https://github.com/YWL0720/YOLO_ORB_SLAM3/issues/12">github.com&#x2F;YWL0720&#x2F;YOLO_ORB_SLAM3&#x2F;issues&#x2F;12</a>，依旧是libtorch版本不对导致的问题，issue中提到的解决办法是将libtorch降低到1.7.1版本。</p><p>看来是没辙啦，因为40系显卡至少需要CUDA 11.3版本，在AutoDL上最低只能选择到PyTorch 1.10.0的镜像了，没法装1.7.0的镜像。</p><p>不再尝试了。</p><h2 id="8-The-end"><a href="#8-The-end" class="headerlink" title="8. The end"></a>8. The end</h2><p>本文成功在2080ti的环境上运行了GCNv2_SLAM项目，虽然运行速度依旧抵不上论文中用1070laptop跑出来的80HZ，但总比本地CPU运行的龟速快多了。</p>]]></content>
    
    
    <summary type="html">配置GCNv2_SLAM所需环境并实现AutoDL云端运行项目的全过程记录</summary>
    
    
    
    <category term="编程学习" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="Linux" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/Linux/"/>
    
    
    <category term="Linux" scheme="https://blog.musnow.top/tags/Linux/"/>
    
    <category term="Cpp" scheme="https://blog.musnow.top/tags/Cpp/"/>
    
    <category term="SLAM" scheme="https://blog.musnow.top/tags/SLAM/"/>
    
  </entry>
  
  <entry>
    <title>【SLAM】于ubuntu18.04上纯CPU运行GCNv2_SLAM的记录（ARM64/AMD64）</title>
    <link href="https://blog.musnow.top/posts/1589125738/"/>
    <id>https://blog.musnow.top/posts/1589125738/</id>
    <published>2025-01-31T01:27:42.000Z</published>
    <updated>2025-02-09T08:50:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>配置GCNv2_SLAM所需的环境并实现纯cpu运行项目的全过程记录。</p><p>前排提醒：<strong>本文所述安装方式只在没有显卡的虚拟机上通过了测试，有显卡的主机涉及到CUDA等显卡依赖项版本问题，本文可能不适用</strong>！</p><h2 id="1-环境说明"><a href="#1-环境说明" class="headerlink" title="1. 环境说明"></a>1. 环境说明</h2><p>GCNv2_SLAM是比较出名的基于RGB-D传感器的SLAM系统之一，对应的论文和github如下：</p><ul><li><a href="https://ieeexplore.ieee.org/document/8758836">GCNv2: Efficient Correspondence Prediction for Real-Time SLAM</a>;</li><li><a href="https://github.com/jiexiong2016/GCNv2_SLAM">github.com&#x2F;jiexiong2016&#x2F;GCNv2_SLAM</a>;</li></ul><p>不过，对新手不友好的一点是，项目github的readme里面并没有详细的描述如何安装依赖项和运行这个项目（毕竟论文开源代码的目标人群都是会SLAM的），在慕雪搜索相关资料的时候还遇到了大量水文，给本来就不太了解opencv和pytorch的我造成了更大的困扰。</p><p>不过，最终我还是搜索到了几篇写的很不错的导引文章，里面详细说明了如何在纯CPU环境中运行这个项目，包括安装依赖项的全过程。</p><ul><li>强推：<a href="https://blog.csdn.net/yangyu0515/article/details/136621489">GCNv2_SLAM-CPU详细安装教程(ubuntu18.04)-CSDN博客</a>；</li><li><a href="https://blog.csdn.net/NolanTHU/article/details/124106912?utm_medium=distribute.pc_relevant.none-task-blog-2" title="GCNv2复现-CPU-CSDN博客">GCNv2复现-CPU-CSDN博客</a>；</li><li><a href="https://www.liuxiao.org/2019/07/%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0%EF%BC%9Agcnv2-efficient-correspondence-prediction-for-real-time-slam/" title="论文笔记：GCNv2: Efficient Correspondence Prediction for Real-Time SLAM – 技术刘">论文笔记：GCNv2: Efficient Correspondence Prediction for Real-Time SLAM – 技术刘</a></li></ul><p>本文是对上述博客的汇总和记录，同时我还将GCNv2_SLAM的运行环境制作成了dockerfile，可以在支持docker的linux桌面环境中运行。该镜像只在parallels的ubuntu-22.04-arm64虚拟机中测试过，不保证对其他环境也适用。</p><blockquote><p>你可以在我的github中找到修改过后的项目和dockerfile文件：<a href="https://github.com/musnows/GCNv2_SLAM/tree/cpu">github.com&#x2F;musnows&#x2F;GCNv2_SLAM&#x2F;tree&#x2F;cpu</a>；构建docker镜像和使用docker容器纯cpu运行GCNv2项目的引导可见：<a href="https://github.com/musnows/GCNv2_SLAM/blob/cpu/docker/README.md">musnows&#x2F;GCNv2_SLAM&#x2F;docker&#x2F;README</a>。</p></blockquote><p>前期准备：</p><ul><li>ubuntu-18.04-desktop虚拟机或支持docker的ubuntu-desktop虚拟机；</li><li>一个能正常clone到github项目的网络环境（不然会很烦）；</li></ul><p>本文示例环境：ubuntu 22.04 arm虚拟机下启动的ubuntu18.04 docker容器（套娃）。</p><p>话不多说，开整！</p><h2 id="2-安装依赖项"><a href="#2-安装依赖项" class="headerlink" title="2. 安装依赖项"></a>2. 安装依赖项</h2><p>项目运行主要要手动安装4个依赖项，以及数不清的apt包。</p><h3 id="2-1-基础apt包安装"><a href="#2-1-基础apt包安装" class="headerlink" title="2.1. 基础apt包安装"></a>2.1. 基础apt包安装</h3><p>运行之前先更新一下环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update -y</span><br><span class="line">sudo apt-get upgrade -y</span><br></pre></td></tr></table></figure><p>首先是要用的到的工具包（这些都用得上）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 工具包</span></span><br><span class="line">sudo apt-get install -y \</span><br><span class="line">    apt-utils \</span><br><span class="line">    curl wget unzip zip \</span><br><span class="line">    cmake make automake \</span><br><span class="line">    openssh-server \</span><br><span class="line">    net-tools \</span><br><span class="line">    vim git gcc g++</span><br></pre></td></tr></table></figure><p>随后是python工具组</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install -y \</span><br><span class="line">    python-dev \</span><br><span class="line">    python-pip \</span><br><span class="line">    python3-dev \</span><br><span class="line">    python3-pip \</span><br><span class="line">    python-all-dev \</span><br><span class="line">    python3-all-dev</span><br></pre></td></tr></table></figure><p>还需要安装x11相关的依赖包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># x11 for gui</span></span><br><span class="line">sudo apt-get install -y  \</span><br><span class="line">    libx11-xcb1 \</span><br><span class="line">    libfreetype6 \</span><br><span class="line">    libdbus-1-3 \</span><br><span class="line">    libfontconfig1 \</span><br><span class="line">    libxkbcommon0   \</span><br><span class="line">    libxkbcommon-x11-0</span><br></pre></td></tr></table></figure><h3 id="2-2-Pangolin-6-0"><a href="#2-2-Pangolin-6-0" class="headerlink" title="2.2. Pangolin 6.0"></a>2.2. Pangolin 6.0</h3><p>安装pangolin之前先安装如下依赖包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># pangolin</span></span><br><span class="line">sudo apt-get install -y \</span><br><span class="line">    libgl1-mesa-dev \</span><br><span class="line">    libglew-dev \</span><br><span class="line">    libboost-dev \</span><br><span class="line">    libboost-thread-dev \</span><br><span class="line">    libboost-filesystem-dev \</span><br><span class="line">    libpython2.7-dev \</span><br><span class="line">    libglu1-mesa-dev freeglut3-dev</span><br></pre></td></tr></table></figure><p>随后使用如下命令来编译安装Pangolin，Github地址：<a href="https://github.com/stevenlovegrove/Pangolin/releases/tag/v0.6">Pangolin-0.6</a>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载</span></span><br><span class="line">wget -O Pangolin-0.6.tar.gz https://github.com/stevenlovegrove/Pangolin/archive/refs/tags/v0.6.tar.gz</span><br><span class="line"><span class="comment"># 解压</span></span><br><span class="line">tar -zxvf Pangolin-0.6.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="built_in">pushd</span> Pangolin-0.6</span><br><span class="line">    <span class="built_in">rm</span> -rf build</span><br><span class="line">    <span class="built_in">mkdir</span> build &amp;&amp; <span class="built_in">cd</span> build</span><br><span class="line">    <span class="comment"># 编译安装 </span></span><br><span class="line">    cmake -DCPP11_NO_BOOST=1 ..</span><br><span class="line">    make -j$(<span class="built_in">nproc</span>)</span><br><span class="line">    make install</span><br><span class="line">    <span class="comment"># 刷新动态库</span></span><br><span class="line">    ldconfig</span><br><span class="line"><span class="built_in">popd</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/01/0efd5c46bd0e3e0ac45d22bef1b8c2f2.png" alt="image.png"></p><p>随后使用如下命令检查是否安装成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 检查安装成功(能不能编译demo)</span></span><br><span class="line"><span class="built_in">cd</span> Pangolin-0.6/examples/HelloPangolin</span><br><span class="line"><span class="built_in">mkdir</span> build &amp;&amp; <span class="built_in">cd</span> build</span><br><span class="line">cmake ..</span><br><span class="line">make</span><br></pre></td></tr></table></figure><p>一切正常的话，应该能编译成功。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu-linux-22-04-02-desktop:/work/docker/Pangolin-0.6/examples/HelloPangolin/build<span class="comment"># make</span></span><br><span class="line">Scanning dependencies of target HelloPangolin</span><br><span class="line">[ 50%] Building CXX object CMakeFiles/HelloPangolin.<span class="built_in">dir</span>/main.o</span><br><span class="line">[100%] Linking CXX executable HelloPangolin</span><br><span class="line">[100%] Built target HelloPangolin</span><br></pre></td></tr></table></figure><p>随后执行<code>./HelloPangolin</code>运行程序（需要在GUI环境中执行），如果出现了一个三色正方体的弹窗就是ok了</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/01/d18bcd36789140c2ab88aeb843f01281.png" alt="image.png"></p><h3 id="2-3-OpenCV-3-4-5"><a href="#2-3-OpenCV-3-4-5" class="headerlink" title="2.3. OpenCV 3.4.5"></a>2.3. OpenCV 3.4.5</h3><p>先安装依赖项</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 解决:Unmet dependencies.Try&#x27;apt--fix-broken install&#x27;with no packages(or specify a solution)</span></span><br><span class="line">sudo apt --fix-broken install</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get upgrade</span><br><span class="line"><span class="comment"># 安装依赖项</span></span><br><span class="line">sudo apt-get install -y \</span><br><span class="line">build-essential libgtk2.0-dev \</span><br><span class="line">libavcodec-dev libavformat-dev \</span><br><span class="line">libjpeg.dev libtiff5.dev libswscale-dev \</span><br><span class="line">libcanberra-gtk-module</span><br></pre></td></tr></table></figure><p>opencv的依赖项<strong>libjasper</strong>包在arm64和amd64上有区别，如果是amd64环境，使用如下命令安装。命令已在ubuntu18.04虚拟机中测试通过，就是<code>security.ubuntu.com</code>可能会因为网络问题无法联通，多试几次就OK了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># amd64</span></span><br><span class="line"><span class="comment"># 添加新源后继续安装</span></span><br><span class="line">sudo apt-get install -y software-properties-common </span><br><span class="line"><span class="comment"># 下面这条命令实测在arm64上不能用，先不要执行</span></span><br><span class="line">sudo add-apt-repository <span class="string">&quot;deb http://security.ubuntu.com/ubuntu xenial-security main&quot;</span></span><br><span class="line">sudo apt-get -y update </span><br><span class="line">sudo apt-get install -y libjasper1 libjasper-dev</span><br></pre></td></tr></table></figure><p>如果是arm64，使用上面的命令安装会出现404错误，在本站<a href="https://blog.musnow.top/posts/4284761477/">另外一篇博客</a>中有记录。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Err:6 http://security.ubuntu.com/ubuntu xenial-security/main arm64 Packages</span><br><span class="line">  404  Not Found [IP: 185.125.190.83 80]</span><br><span class="line">Fetched 106 kB in 2s (44.6 kB/s)</span><br><span class="line">Reading package lists... Done</span><br><span class="line">E: Failed to fetch http://security.ubuntu.com/ubuntu/dists/xenial-security/main/binary-arm64/Packages  404  Not Found [IP: 185.125.190.83 80]</span><br><span class="line">E: Some index files failed to download. They have been ignored, or old ones used instead.</span><br></pre></td></tr></table></figure><p>在arm64上需要借助老版本的清华源来安装，将如下命令写入脚本文件使用sudo执行。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env bash</span></span><br><span class="line"><span class="built_in">set</span> -e</span><br><span class="line"><span class="comment"># arm64 ubuntu 18.04</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ xenial main multiverse restricted universe\n\</span></span><br><span class="line"><span class="string">    deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ xenial-security main multiverse restricted universe\n\</span></span><br><span class="line"><span class="string">    deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ xenial-updates main multiverse restricted universe\n\</span></span><br><span class="line"><span class="string">    deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ xenial-backports main multiverse restricted universe\n\</span></span><br><span class="line"><span class="string">    deb-src http://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ xenial main multiverse restricted universe\n\</span></span><br><span class="line"><span class="string">    deb-src http://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ xenial-security main multiverse restricted universe\n\</span></span><br><span class="line"><span class="string">    deb-src http://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ xenial-updates main multiverse restricted universe&quot;</span> &gt;&gt; /etc/apt/sources.list &amp;&amp; \</span><br><span class="line">apt-get -y update</span><br><span class="line">apt-get install -y libjasper1 libjasper-dev</span><br></pre></td></tr></table></figure><details><summary>arm64成功安装libjasper的命令行输出</summary><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu-linux-22-04-02-desktop:/# apt-get install -y libjasper1 libjasper-dev</span><br><span class="line">Reading package lists... Done</span><br><span class="line">Building dependency tree   </span><br><span class="line">Reading state information... Done</span><br><span class="line">Suggested packages:</span><br><span class="line">  libjasper-runtime</span><br><span class="line">The following NEW packages will be installed:</span><br><span class="line">  libjasper-dev libjasper1</span><br><span class="line">0 upgraded, 2 newly installed, 0 to remove and 0 not upgraded.</span><br><span class="line">Need to get 613 kB of archives.</span><br><span class="line">After this operation, 1327 kB of additional disk space will be used.</span><br><span class="line">Get:1 http://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports xenial-security/main arm64 libjasper1 arm64 1.900.1-debian1-2.4ubuntu1.3 [111 kB]</span><br><span class="line">Get:2 http://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports xenial-security/main arm64 libjasper-dev arm64 1.900.1-debian1-2.4ubuntu1.3 [502 kB]</span><br><span class="line">Fetched 613 kB in 1s (758 kB/s)    </span><br><span class="line">debconf: unable to initialize frontend: Dialog</span><br><span class="line">debconf: (No usable dialog-like program is installed, so the dialog based frontend cannot be used. at /usr/share/perl5/Debconf/FrontEnd/Dialog.pm line 76, &lt;&gt; line 2.)</span><br><span class="line">debconf: falling back to frontend: Readline</span><br><span class="line">Selecting previously unselected package libjasper1:arm64.</span><br><span class="line">(Reading database ... 67223 files and directories currently installed.)</span><br><span class="line">Preparing to unpack .../libjasper1_1.900.1-debian1-2.4ubuntu1.3_arm64.deb ...</span><br><span class="line">root@ubuntu-linux-22-04-02-desktop:/#</span><br></pre></td></tr></table></figure></details><br><p>安装好了依赖项后，使用如下命令编译opencv，Github地址：<a href="https://github.com/opencv/opencv/releases/tag/3.4.5">opencv的3.4.5版本</a>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载和解压</span></span><br><span class="line">wget -O opencv-3.4.5.tar.gz https://github.com/opencv/opencv/archive/refs/tags/3.4.5.tar.gz</span><br><span class="line">tar -zxvf opencv-3.4.5.tar.gz</span><br><span class="line"><span class="comment"># 开始编译和安装</span></span><br><span class="line"><span class="built_in">pushd</span> opencv-3.4.5</span><br><span class="line">    <span class="built_in">rm</span> -rf build</span><br><span class="line">    <span class="built_in">mkdir</span> build &amp;&amp; <span class="built_in">cd</span> build </span><br><span class="line">    <span class="comment"># 构建和编译安装，-j4代表4线程并发</span></span><br><span class="line">    cmake -D CMAKE_BUILD_TYPE=Release -D CMAKE_INSTALL_PREFIX=/usr/local ..</span><br><span class="line">    make -j$(<span class="built_in">nproc</span>)</span><br><span class="line">    make install</span><br><span class="line">    <span class="comment"># 刷新动态库</span></span><br><span class="line">    ldconfig</span><br><span class="line"><span class="built_in">popd</span></span><br></pre></td></tr></table></figure><p>使用如下命令检测opencv是否安装成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu-linux-22-04-02-desktop:/work/docker/pkg/opencv-3.4.5/build<span class="comment"># pkg-config --modversion opencv</span></span><br><span class="line">3.4.5</span><br><span class="line">root@ubuntu-linux-22-04-02-desktop:/work/docker/pkg/opencv-3.4.5/build<span class="comment"># pkg-config --cflags opencv</span></span><br><span class="line">-I/usr/local/include/opencv -I/usr/local/include</span><br><span class="line">root@ubuntu-linux-22-04-02-desktop:/work/docker/pkg/opencv-3.4.5/build<span class="comment"># pkg-config --libs   opencv</span></span><br><span class="line">-L/usr/local/lib -lopencv_dnn -lopencv_ml -lopencv_objdetect -lopencv_shape -lopencv_stitching -lopencv_superres -lopencv_videostab -lopencv_calib3d -lopencv_features2d -lopencv_highgui -lopencv_videoio -lopencv_imgcodecs -lopencv_video -lopencv_photo -lopencv_imgproc -lopencv_flann -lopencv_core</span><br></pre></td></tr></table></figure><p>可以试试编译测试demo代码，注意需要在GUI环境中执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 检测是否安装成功</span></span><br><span class="line"><span class="built_in">cd</span> opencv-3.4.5/samples/cpp/example_cmake</span><br><span class="line"><span class="built_in">mkdir</span> build &amp;&amp; <span class="built_in">cd</span> build </span><br><span class="line">cmake ..</span><br><span class="line">make</span><br><span class="line">./opencv_example</span><br></pre></td></tr></table></figure><p>如果成功运行，会弹出一个hello opencv的弹窗。如果你的环境有摄像头，则会出现摄像头画面，如果没有摄像头，则为黑屏画面。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/01/cf9ec531bb3ead1d358fb888106eeab2.png" alt="image.png"></p><p>如果运行这个demo的时候遇到了<code>Failed to load module &quot;canberra-gtk-module&quot;</code>错误，是因为缺少了一个软件包，安装一下就可以了（上文安装包中已经列出）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install libcanberra-gtk-module</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/01/e11b909249a7ad2dec8e0500b4a69bd6.png" alt="image.png"></p><h3 id="2-4-Eigen-3-7"><a href="#2-4-Eigen-3-7" class="headerlink" title="2.4. Eigen 3.7"></a>2.4. Eigen 3.7</h3><p>Eigen包在gitlab里面下载：<a href="https://gitlab.com/libeigen/eigen/-/releases/3.3.7">gitlab.com&#x2F;libeigen&#x2F;eigen&#x2F;-&#x2F;releases&#x2F;3.3.7</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载</span></span><br><span class="line">wget -O eigen-3.3.7.tar.gz https://gitlab.com/libeigen/eigen/-/archive/3.3.7/eigen-3.3.7.tar.gz</span><br><span class="line">tar -zxvf eigen-3.3.7.tar.gz</span><br><span class="line"><span class="comment"># 开始编译和安装</span></span><br><span class="line"><span class="built_in">cd</span> eigen-3.3.7</span><br><span class="line"><span class="built_in">mkdir</span> build &amp;&amp; <span class="built_in">cd</span> build</span><br><span class="line">cmake ..</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><p>注意需要执行cp命令拷贝一下头文件到另外一个目录中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在很多程序中include时经常使用#include &lt;Eigen/Dense&gt;而不是使用#include &lt;eigen3/Eigen/Dense&gt;</span></span><br><span class="line"><span class="comment"># 因此安装后需要将头文件从 /usr/local/include/eigen3/ 复制到 /usr/local/include</span></span><br><span class="line"><span class="comment"># 后续小节会有C++测试代码说明</span></span><br><span class="line">sudo <span class="built_in">cp</span> -r /usr/local/include/eigen3/Eigen /usr/local/include</span><br></pre></td></tr></table></figure><p>这里给出一个cpp的demo代码来测试是否安装成功（直接g++编译就可以了）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="comment">//需要将头文件从 /usr/local/include/eigen3/ 复制到 /usr/local/include</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Eigen/Dense&gt;</span></span></span><br><span class="line"><span class="comment">//using Eigen::MatrixXd;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> Eigen;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> Eigen::internal;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> Eigen::Architecture;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;*******************1D-object****************&quot;</span>&lt;&lt;endl;</span><br><span class="line">        Vector4d v1;</span><br><span class="line">        v1&lt;&lt; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;v1=\n&quot;</span>&lt;&lt;v1&lt;&lt;endl;</span><br><span class="line"> </span><br><span class="line">        <span class="function">VectorXd <span class="title">v2</span><span class="params">(<span class="number">3</span>)</span></span>;</span><br><span class="line">        v2&lt;&lt;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;v2=\n&quot;</span>&lt;&lt;v2&lt;&lt;endl;</span><br><span class="line"> </span><br><span class="line">        Array4i v3;</span><br><span class="line">        v3&lt;&lt;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;v3=\n&quot;</span>&lt;&lt;v3&lt;&lt;endl;</span><br><span class="line"> </span><br><span class="line">        <span class="function">ArrayXf <span class="title">v4</span><span class="params">(<span class="number">3</span>)</span></span>;</span><br><span class="line">        v4&lt;&lt;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;v4=\n&quot;</span>&lt;&lt;v4&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu-linux-22-04-02-desktop:/work/docker/pkg/eigen-3.3.7/build<span class="comment"># g++ test.cpp -o test_eigen</span></span><br><span class="line">root@ubuntu-linux-22-04-02-desktop:/work/docker/pkg/eigen-3.3.7/build<span class="comment"># ./test_eigen</span></span><br><span class="line">*******************1D-object****************</span><br><span class="line">v1=</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">v2=</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">v3=</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">v4=</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td></tr></table></figure><h3 id="2-5-Pytorch-1-0-1-libtorch"><a href="#2-5-Pytorch-1-0-1-libtorch" class="headerlink" title="2.5. Pytorch 1.0.1 (libtorch)"></a>2.5. Pytorch 1.0.1 (libtorch)</h3><p>原博客中安装的是1.4.0，但是在我测试的arm环境中1.4.0有非常多的错误，这里直接采用GCNv2 Github中给出的1.0.1版本进行安装。</p><p>安装之前需要保证环境中有python3（测试环境为3.6.9）并安装pyyaml包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install python3-dev python3-pip</span><br><span class="line">pip3 install pyyaml</span><br></pre></td></tr></table></figure><p>随后克隆pytorch并编译libtorch动态库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> --recursive -b v1.0.1 https://github.com/pytorch/pytorch</span><br><span class="line"><span class="built_in">cd</span> pytorch &amp;&amp; <span class="built_in">mkdir</span> build &amp;&amp; <span class="built_in">cd</span> build</span><br><span class="line">python3 ../tools/build_libtorch.py</span><br></pre></td></tr></table></figure><p>这里就有难题啦！整个pytorch的库加上sub-modules一共有3gb之大，要想从github上安稳克隆下来可不简单。这里给大家分享一个百度云盘的链接，是所有子模组都被成功clone之后的压缩包。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">通过网盘分享的文件：pytorch.full.1.0.1.tar.gz</span><br><span class="line">链接: https://pan.baidu.com/s/1XHeYcHH5CMKmacFodFzqeA 提取码: 4h2g</span><br></pre></td></tr></table></figure><p>下载了这个压缩包，使用<code>tar -zxvf</code>解压后，使用如下命令检查一下子模组是否完整，如果完整的话这个命令不会有任何输出。不完整它会继续下载子模组</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git submodule update --init --recursive</span><br></pre></td></tr></table></figure><p>在执行<code>python3 ../tools/build_libtorch.py</code>之前还需要进行两处代码的修改，这里直接给出sed命令，在pytorch库的根目录执行。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sed -i <span class="string">&quot;s/yaml.load(\(.*\))/yaml.load(\1, Loader=yaml.FullLoader)/g&quot;</span> aten/src/ATen/cwrap_parser.py</span><br><span class="line">sed -i <span class="string">&quot;s/yaml.load(\(.*\))/yaml.load(\1, Loader=yaml.FullLoader)/g&quot;</span> tools/cwrap/cwrap.py</span><br></pre></td></tr></table></figure><p>两个代码文件中都只有一处要修改的地方，分别是<code>pytorch/tools/cwrap/cwrap.py</code>文件里面的91行和<code>pytorch/aten/src/ATen/cwrap_parser.py</code>的18行。</p><p>这里的修改是因为pyyaml库的变动（环境中安装的pyyaml版本为6.0.1），需要传入第二个参数Loader。原有的代码是没有传入的，编译的时候会出现如下错误，日志中的重点就是 <code>TypeError: load() missing 1 required positional argument: &#39;Loader&#39;</code> 缺少参数的报错。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;/work/pytorch/cmake/../aten/src/ATen/gen.py&quot;, line 465, in &lt;module&gt;</span><br><span class="line">    generate_outputs()</span><br><span class="line">  File &quot;/work/pytorch/cmake/../aten/src/ATen/gen.py&quot;, line 390, in generate_outputs</span><br><span class="line">    for file in cwrap_files</span><br><span class="line">  File &quot;/work/pytorch/cmake/../aten/src/ATen/gen.py&quot;, line 391, in &lt;listcomp&gt;</span><br><span class="line">    for d in cwrap_parser.parse(file)]</span><br><span class="line">  File &quot;/work/pytorch/aten/src/ATen/cwrap_parser.py&quot;, line 18, in parse</span><br><span class="line">    declaration = yaml.load(&#x27;\n&#x27;.join(declaration_lines))</span><br><span class="line">TypeError: load() missing 1 required positional argument: &#x27;Loader&#x27;</span><br><span class="line">caffe2/CMakeFiles/ATEN_CPU_FILES_GEN_TARGET.dir/build.make:132: recipe for target &#x27;aten/src/ATen/CPUByteType.cpp&#x27; failed</span><br><span class="line">make[2]: *** [aten/src/ATen/CPUByteType.cpp] Error 1</span><br><span class="line">CMakeFiles/Makefile2:3522: recipe for target &#x27;caffe2/CMakeFiles/ATEN_CPU_FILES_GEN_TARGET.dir/all&#x27; failed</span><br><span class="line">make[1]: *** [caffe2/CMakeFiles/ATEN_CPU_FILES_GEN_TARGET.dir/all] Error 2</span><br><span class="line">make[1]: *** Waiting for unfinished jobs....</span><br><span class="line">[ 15%] Building CXX object third_party/protobuf/cmake/CMakeFiles/libprotobuf.dir/__/src/google/protobuf/wrappers.pb.cc.o</span><br><span class="line">[ 15%] Linking CXX static library ../../../lib/libprotobuf.a</span><br><span class="line">[ 15%] Built target libprotobuf</span><br><span class="line">Makefile:140: recipe for target &#x27;all&#x27; failed</span><br><span class="line">make: *** [all] Error 2</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;../tools/build_libtorch.py&quot;, line 30, in &lt;module&gt;</span><br><span class="line">    subprocess.check_call(command, universal_newlines=True, env=my_env)</span><br><span class="line">  File &quot;/usr/lib/python3.6/subprocess.py&quot;, line 311, in check_call</span><br><span class="line">    raise CalledProcessError(retcode, cmd)</span><br><span class="line">subprocess.CalledProcessError: Command &#x27;[&#x27;/work/pytorch/tools/build_pytorch_libs.sh&#x27;, &#x27;--use-nnpack&#x27;, &#x27;--use-qnnpack&#x27;, &#x27;caffe2&#x27;]&#x27; returned non-zero exit status 2.</span><br></pre></td></tr></table></figure><p>说实话，个人认为pyyaml库的这个变动非常不合理，版本更迭后，一个强制需要传入的参数应该给出缺省值才对。如果它给出了缺省值，那么这里的代码即便没有传入也不会报错了。</p><p>修改了这两处代码后，执行<code>python3 ../tools/build_libtorch.py</code>，不出意外的话编译就成功啦。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/01/d18e645bc9b88ea66615dc534394c570.png" alt="image.png"></p><p>原博主使用的pytorch 1.4.0需要解决的问题比我这里更多，如果你想通过pytorch 1.4.0来编译libtorch，请参考本文最开头贴出的博客。</p><h2 id="3-编译GCNv2-SLAM"><a href="#3-编译GCNv2-SLAM" class="headerlink" title="3. 编译GCNv2_SLAM"></a>3. 编译GCNv2_SLAM</h2><p>接下来我们就可以编译正主啦！首先克隆代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/jiexiong2016/GCNv2_SLAM.git</span><br></pre></td></tr></table></figure><h3 id="3-1-修改build-sh编译项目"><a href="#3-1-修改build-sh编译项目" class="headerlink" title="3.1. 修改build.sh编译项目"></a>3.1. 修改build.sh编译项目</h3><p>修改项目根目录下的build.sh，将<code>TORCH_PATH</code>修改为pytorch中的<code>torch/lib/tmp_install/share/cmake/Torch</code>目录。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmake .. -DCMAKE_BUILD_TYPE=Release -DTORCH_PATH=/work/gcnv2slam/pytorch/torch/lib/tmp_install/share/cmake/Torch</span><br></pre></td></tr></table></figure><p>修改了之后，应该就可以执行<code>./build.sh</code>来编译项目了。</p><blockquote><p>比较奇怪的是我的环境中并没有cuda也依旧能在不修改任何代码的情况下编译成功。</p></blockquote><p>最开始的时候，我遇到了一个难题，参考的博客中大多数都用的pytorch 1.4.0，里面都提到了修改<code>TORCH_PATH</code>为<code>pytorch/torch/share/cmake/Torch</code>目录，但是在我的pytorch 1.0.1里面压根没有这个目录。</p><p>本来都要放弃了，最终在GCNv2项目的github里面找到了说明，主要的修改点是<a href="https://github.com/jiexiong2016/GCNv2_SLAM/commit/21cc44894ab6d854fee18bf18b0501c4e134b6b0">jiexiong2016&#x2F;GCNv2_SLAM&#x2F;commit&#x2F;21cc44894</a>这一笔提交，readme里面描述如下</p><blockquote><p>The built libtorch library is located at <code>pytorch/torch/lib/tmp_install/</code> in default.</p><p><strong>Update: Have added support for master branch of pytorch or version larger than 1.0.1. For newer version, set</strong> <strong>​<code>TORCH_PATH</code>​</strong> <strong>to</strong> <strong>​<code>pytorch/torch/share/cmake/Torch</code>​</strong></p></blockquote><p>说白了就是在1.0.1版本中的<code>TORCH_PATH</code>是在<code>pytorch/torch/lib/tmp_install/</code>里面的，更新的pytorch版本是在<code>pytorch/torch/share</code>目录，而1.0.1版本中不存在<code>pytorch/torch/share</code>目录。</p><h3 id="3-2-修改代码来实现纯CPU运行"><a href="#3-2-修改代码来实现纯CPU运行" class="headerlink" title="3.2. 修改代码来实现纯CPU运行"></a>3.2. 修改代码来实现纯CPU运行</h3><h4 id="3-2-1-修改GCNextractor-cc"><a href="#3-2-1-修改GCNextractor-cc" class="headerlink" title="3.2.1. 修改GCNextractor.cc"></a>3.2.1. 修改GCNextractor.cc</h4><p>第一处修改点在<code>GCNv2_SLAM/src/GCNextractor.cc</code>文件中</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一处原代码216行:</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span> *net_fn = <span class="built_in">getenv</span>(<span class="string">&quot;GCN_PATH&quot;</span>);</span><br><span class="line">net_fn = (net_fn == <span class="literal">nullptr</span>) ? <span class="string">&quot;gcn2.pt&quot;</span> : net_fn;</span><br><span class="line"><span class="keyword">module</span> = torch::jit::<span class="built_in">load</span>(net_fn);</span><br><span class="line"><span class="comment">//修改为:</span></span><br><span class="line">torch::DeviceType device_type;</span><br><span class="line">device_type = torch::kCPU;</span><br><span class="line"><span class="function">torch::Device <span class="title">device</span><span class="params">(device_type)</span></span>;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span> *net_fn = <span class="built_in">getenv</span>(<span class="string">&quot;GCN_PATH&quot;</span>);</span><br><span class="line">net_fn = (net_fn == <span class="literal">nullptr</span>) ? <span class="string">&quot;gcn2.pt&quot;</span> : net_fn;</span><br><span class="line"><span class="keyword">module</span> = torch::jit::<span class="built_in">load</span>(net_fn,device);</span><br><span class="line"></span><br><span class="line"><span class="comment">//第二处原代码226行:</span></span><br><span class="line">device_type = torch::kCUDA;</span><br><span class="line"><span class="comment">//修改为:</span></span><br><span class="line">device_type = torch::kCPU;</span><br></pre></td></tr></table></figure><p>修改后的截图如下</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/01/49a212d2e23e839f20752c2281cf01bb.png" alt="image.png"></p><h4 id="3-2-2-修改GCN2下pt文件"><a href="#3-2-2-修改GCN2下pt文件" class="headerlink" title="3.2.2. 修改GCN2下pt文件"></a>3.2.2. 修改GCN2下pt文件</h4><blockquote><p>其实pt文件是不影响编译的，可以在编译完成后再修改</p></blockquote><p>修改<code>GCNv2_SLAM/GCN2</code>下gcn2_320x240.pt、gcn2_640x480.pt和gcn2_tiny_320x240.pt中的内容。需要先解压文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unzip gcn2_320x240.pt</span><br></pre></td></tr></table></figure><p>解压出来之后会有<code>GCNv2_SLAM/GCN2/gcn/code/gcn.py</code>文件，将里面的<code>cuda:0</code>修改成<code>cpu</code>，批量替换就可以了，每个文件里面都是8处。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/01/00fb3643a1eb11af130ecbba57a93ba2.png" alt="image.png"></p><p>替换了之后，重新压缩pt文件，先删了原本的，重新压缩</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rm</span> -rf gcn2_320x240.pt</span><br><span class="line">zip -r gcn2_320x240.pt gcn</span><br><span class="line"><span class="built_in">rm</span> -rf gcn <span class="comment">#删除刚刚的gcn文件夹</span></span><br></pre></td></tr></table></figure><p>这只是一个例子，其他几个gcn2压缩包都要用相同的方式修改！</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">unzip gcn2_640x480.pt</span><br><span class="line"><span class="built_in">rm</span> -rf gcn2_640x480.pt</span><br><span class="line"><span class="comment"># 修改下面这个文件</span></span><br><span class="line"><span class="comment">#   GCNv2_SLAM/GCN2/gcn2_480x640/code/gcn2_480x640.py</span></span><br><span class="line"><span class="comment"># 重新压缩</span></span><br><span class="line">zip -r gcn2_640x480.pt gcn2_480x640</span><br><span class="line"><span class="built_in">rm</span> -rf gcn2_480x640</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">unzip gcn2_tiny_320x240.pt</span><br><span class="line"><span class="built_in">rm</span> -rf gcn2_tiny_320x240.pt</span><br><span class="line"><span class="comment"># 修改文件</span></span><br><span class="line"><span class="comment">#   gcnv2slam/GCNv2_SLAM/GCN2/gcn2_tiny/code/gcn2_tiny.py</span></span><br><span class="line"><span class="comment"># 重新压缩</span></span><br><span class="line">zip -r gcn2_tiny_320x240.pt gcn2_tiny</span><br><span class="line"><span class="built_in">rm</span> -rf gcn2_tiny</span><br></pre></td></tr></table></figure><h4 id="3-2-3-重新编译"><a href="#3-2-3-重新编译" class="headerlink" title="3.2.3. 重新编译"></a>3.2.3. 重新编译</h4><p>修改之后重新编译项目，先删除原有的编译缓存</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rm</span> -rf Thirdparty/g2o/build/</span><br><span class="line"><span class="built_in">rm</span> -rf Thirdparty/DBoW2/build/</span><br><span class="line"><span class="built_in">rm</span> -rf Vocabulary/*.bin</span><br><span class="line"><span class="built_in">rm</span> -rf ./build</span><br></pre></td></tr></table></figure><p>没有问题，编译成功了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Configuring and building ORB_SLAM2 ...</span><br><span class="line">mkdir: cannot create directory &#x27;build&#x27;: File exists</span><br><span class="line">Build type: Release</span><br><span class="line">-- Using flag -std=c++11.</span><br><span class="line">TORCH_PATH set to: /work/gcnv2slam/pytorch/torch/lib/tmp_install/share/cmake/Torch</span><br><span class="line">-- Torch version is: 1.0.0</span><br><span class="line">-- Configuring done</span><br><span class="line">-- Generating done</span><br><span class="line">-- Build files have been written to: /work/gcnv2slam/GCNv2_SLAM/build</span><br><span class="line">[ 91%] Built target ORB_SLAM2</span><br><span class="line">[100%] Built target rgbd_gcn</span><br><span class="line">root@ubuntu-linux-22-04-02-desktop:/work/gcnv2slam/GCNv2_SLAM# </span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/01/faa50cc2fe6df1df46f1d4ea3f60d00a.png" alt="image.png"></p><h2 id="4-使用TUM训练集运行项目"><a href="#4-使用TUM训练集运行项目" class="headerlink" title="4. 使用TUM训练集运行项目"></a>4. 使用TUM训练集运行项目</h2><h3 id="4-1-下载数据集"><a href="#4-1-下载数据集" class="headerlink" title="4.1. 下载数据集"></a>4.1. 下载数据集</h3><p>下载地址：<a href="https://cvg.cit.tum.de/data/datasets/rgbd-dataset/download">cvg.cit.tum.de&#x2F;data&#x2F;datasets&#x2F;rgbd-dataset&#x2F;download</a></p><p>下载<code>fr1/desk</code>数据集，这是一个桌子的RGBD数据</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/01/6ebeb1fe9366e07ea5dd7f0697b72d4f.png" alt="image.png"></p><p>在GCNv2_SLAM工程下新建<code>datasets/TUM</code>,将数据集下载到其中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 新建datasets/TUM数据集文件夹</span></span><br><span class="line"><span class="built_in">mkdir</span> -p datasets/TUM </span><br><span class="line"><span class="built_in">cd</span> datasets/TUM</span><br><span class="line"><span class="comment"># 下载数据集到datasets/TUM文件夹内</span></span><br><span class="line">wget -O rgbd_dataset_freiburg1_desk.tgz https://cvg.cit.tum.de/rgbd/dataset/freiburg1/rgbd_dataset_freiburg1_desk.tgz</span><br><span class="line"><span class="comment"># 解压数据集</span></span><br><span class="line">tar -xvf rgbd_dataset_freiburg1_desk.tgz</span><br></pre></td></tr></table></figure><p>然后还需要下载一个<code>associate.py</code>脚本来处理一下数据集才能正常运行</p><p>下载地址：<a href="https://svncvpr.in.tum.de/cvpr-ros-pkg/trunk/rgbd_benchmark/rgbd_benchmark_tools/src/rgbd_benchmark_tools/associate.py">svncvpr.in.tum.de</a>，同时在<a href="https://github.com/musnows/GCNv2_SLAM/blob/86c1efc0cc6c40669df20c0a62017815e18771b7/docker/associate.py">我的Github仓库</a>也做了留档。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -O associate.py https://svncvpr.in.tum.de/cvpr-ros-pkg/trunk/rgbd_benchmark/rgbd_benchmark_tools/src/rgbd_benchmark_tools/associate.py</span><br></pre></td></tr></table></figure><p>这个脚本只能用python2运行，需要下载numpy库（环境中python2是2.7.17）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 容器内库安装</span></span><br><span class="line">apt-get install -y python-pip</span><br><span class="line">pip install numpy</span><br><span class="line"><span class="comment"># 在数据文件夹里执行命令</span></span><br><span class="line">python associate.py rgbd_dataset_freiburg1_desk/rgb.txt rgbd_dataset_freiburg1_desk/depth.txt &gt; rgbd_dataset_freiburg1_desk/associate.txt</span><br></pre></td></tr></table></figure><p>注意下载numpy库的时候不要用镜像源，否则无法安装。直接下就行了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu-linux-22-04-02-desktop:/work/gcnv2slam/GCNv2_SLAM/datasets/TUM# pip install numpy                            </span><br><span class="line">Collecting numpy</span><br><span class="line">  Downloading https://files.pythonhosted.org/packages/b7/6f/24647f014eef9b67a24adfcbcd4f4928349b4a0f8393b3d7fe648d4d2de3/numpy-1.16.6.zip (5.1MB)</span><br><span class="line">    100% |################################| 5.2MB 470kB/s </span><br><span class="line">Building wheels for collected packages: numpy</span><br><span class="line">  Running setup.py bdist_wheel for numpy ... done</span><br><span class="line">  Stored in directory: /root/.cache/pip/wheels/cb/c2/c1/d99e8bf789c8dd07623af6be95e6a89984c85a05e31b8513c3</span><br><span class="line">Successfully built numpy</span><br><span class="line">Installing collected packages: numpy</span><br><span class="line">Successfully installed numpy-1.16.6</span><br></pre></td></tr></table></figure><p>执行python命令后可以看看合并成功了没有，如下应该就是没问题了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu-linux-22-04-02-desktop:/work/gcnv2slam/GCNv2_SLAM/datasets/TUM# python associate.py rgbd_dataset_freiburg1_desk/rgb.txt rgbd_dataset_freiburg1_desk/depth.txt &gt; rgbd_dataset_freiburg1_desk/associate.txt</span><br><span class="line">root@ubuntu-linux-22-04-02-desktop:/work/gcnv2slam/GCNv2_SLAM/datasets/TUM# tail rgbd_dataset_freiburg1_desk/associate.txt</span><br><span class="line">1305031472.895713 rgb/1305031472.895713.png 1305031472.892944 depth/1305031472.892944.png</span><br><span class="line">1305031472.927685 rgb/1305031472.927685.png 1305031472.924814 depth/1305031472.924814.png</span><br><span class="line">1305031472.963756 rgb/1305031472.963756.png 1305031472.961213 depth/1305031472.961213.png</span><br></pre></td></tr></table></figure><p>在同一个网站下载的其他数据集也需要用相同的方式进行处理</p><h3 id="4-2-运行GCN2"><a href="#4-2-运行GCN2" class="headerlink" title="4.2. 运行GCN2"></a>4.2. 运行GCN2</h3><p>随后进入项目的GCN2目录执行命令，我把命令中的路径都改成了相对路径</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> GCN2</span><br><span class="line">GCN_PATH=gcn2_320x240.pt ./rgbd_gcn ../Vocabulary/GCNvoc.bin TUM3_small.yaml ../datasets/TUM/rgbd_dataset_freiburg1_desk ../datasets/TUM/rgbd_dataset_freiburg1_desk/associate.txt</span><br></pre></td></tr></table></figure><p>如果运行tiny数据集，命令如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> GCN2</span><br><span class="line">GCN_PATH=gcn2_tiny_320x240.pt ./rgbd_gcn ../Vocabulary/GCNvoc.bin TUM3_small.yaml ../datasets/TUM/rgbd_dataset_freiburg1_desk ../datasets/TUM/rgbd_dataset_freiburg1_desk/associate.txt</span><br></pre></td></tr></table></figure><p>在mac上虚拟机安装的arn版本ubuntu22.04中用docker安装的ubuntu18.04成功运行本项目，虽然很卡，但是运行起来了！</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/01/7fcdd32c86feb3a9bb6f008f155c7bd1.png" alt="image.png"></p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/01/1cf6ea0426239abcba02e8a38ce24bea.png" alt="image.png"></p><p>最终结束后的输出如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu-linux-22-04-02-desktop:/work/gcnv2slam/GCNv2_SLAM# cd GCN2/</span><br><span class="line">root@ubuntu-linux-22-04-02-desktop:/work/gcnv2slam/GCNv2_SLAM/GCN2# GCN_PATH=gcn2_320x240.pt ./rgbd_gcn ../Vocabulary/GCNvoc.bin TUM3_small.yaml ../datasets/TUM/rgbd_dataset_freiburg1_desk ../datasets/TUM/rgbd_dataset_freiburg1_desk/associate.txt</span><br><span class="line"></span><br><span class="line">ORB-SLAM2 Copyright (C) 2014-2016 Raul Mur-Artal, University of Zaragoza.</span><br><span class="line">This program comes with ABSOLUTELY NO WARRANTY;</span><br><span class="line">This is free software, and you are welcome to redistribute it</span><br><span class="line">under certain conditions. See LICENSE.txt.</span><br><span class="line"></span><br><span class="line">Input sensor was set to: RGB-D</span><br><span class="line"></span><br><span class="line">Loading ORB Vocabulary. This could take a while...</span><br><span class="line">Vocabulary loaded!</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Camera Parameters: </span><br><span class="line">- fx: 267.7</span><br><span class="line">- fy: 269.6</span><br><span class="line">- cx: 160.05</span><br><span class="line">- cy: 123.8</span><br><span class="line">- k1: 0</span><br><span class="line">- k2: 0</span><br><span class="line">- p1: 0</span><br><span class="line">- p2: 0</span><br><span class="line">- fps: 30</span><br><span class="line">- color order: RGB (ignored if grayscale)</span><br><span class="line"></span><br><span class="line">ORB Extractor Parameters: </span><br><span class="line">- Number of Features: 1000</span><br><span class="line">- Scale Levels: 8</span><br><span class="line">- Scale Factor: 1.2</span><br><span class="line">- Initial Fast Threshold: 20</span><br><span class="line">- Minimum Fast Threshold: 7</span><br><span class="line"></span><br><span class="line">Depth Threshold (Close/Far Points): 5.97684</span><br><span class="line"></span><br><span class="line">-------</span><br><span class="line">Start processing sequence ...</span><br><span class="line">Images in the sequence: 573</span><br><span class="line"></span><br><span class="line">New map created with 251 points</span><br><span class="line">Finished!</span><br><span class="line">-------</span><br><span class="line"></span><br><span class="line">median tracking time: 1.7969</span><br><span class="line">mean tracking time: 1.82306</span><br><span class="line"></span><br><span class="line">Saving camera trajectory to CameraTrajectory.txt ...</span><br><span class="line"></span><br><span class="line">trajectory saved!</span><br><span class="line"></span><br><span class="line">Saving keyframe trajectory to KeyFrameTrajectory.txt ...</span><br><span class="line"></span><br><span class="line">trajectory saved!</span><br><span class="line">root@ubuntu-linux-22-04-02-desktop:/work/gcnv2slam/GCNv2_SLAM/GCN2# </span><br></pre></td></tr></table></figure><p>同时我在vmware16安装的ubuntu18.04虚拟机中也运行了本项目，速度更慢。宿主机配置为牙膏厂的i5-10400+16GB内存，虚拟机分配了8核8GB。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/01/ccc2d0ed4241b2f467c7b9a927c31bdb.png" alt="image.png"></p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/01/278aa853a4e9cbea395cfd737990b94e.png" alt="image.png"></p><h3 id="4-3-简单分析一下结果"><a href="#4-3-简单分析一下结果" class="headerlink" title="4.3. 简单分析一下结果"></a>4.3. 简单分析一下结果</h3><p>在mac m3 16G上parallels安装的arm64版本ubuntu22.04虚拟机（4核8G）中用docker运行的ubuntu18.04容器，容器内运行<code>gcn2_320x240.pt</code>的速度如下，约合0.55hz</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">median tracking time: 1.7969</span><br><span class="line">mean tracking time: 1.82306</span><br></pre></td></tr></table></figure><p>在vmware16安装的amd64版本ubuntu18.04的虚拟机（8核8G）中，运行<code>gcn2_320x240.pt</code>的速度如下，约合0.21hz。没想到比arm的速度还慢！</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">median tracking time: 4.70296</span><br><span class="line">mean tracking time: 4.62603</span><br></pre></td></tr></table></figure><p>作为对比，GCNv2论文中提到了两个平台的运行结果，翻译如下</p><blockquote><p>“GCNv2和我们改进了SLAM方法的GCN-SLAM，在配备Intel i7-7700HQ和移动版NVIDIA 1070的笔记本电脑上运行约80 Hz。为了实现更高的帧率，以满足Jetson TX2上实时推理的需求，我们引入了GCNv2的一个较小版本，称为GCNv2-tiny，在此版本中，我们从conv2开始将特征图的数量减少了一半。GCNv2-tiny运行在40 Hz，使用GCNv2-tiny的GCN-SLAM在TX2上运行为20 Hz，非常适合部署在无人机上。”</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/01/1dc51921ed6220eafbbc17f2f04f218c.png" alt="image.png"></p></blockquote><p>只能说纯CPU运行的效果也太差了！应该是因为GCNv2_SLAM项目有用到神经网络，所以没有显卡的话速度会非常慢。</p><h2 id="5-The-end"><a href="#5-The-end" class="headerlink" title="5. The end"></a>5. The end</h2><p>折腾了好几天，才成功把GCNv2_SLAM需要的环境给配置好，可惜GCNv2用到了深度神经网络，在没有GPU的环境下纯CPU运行的效果太差了，不知道有没有办法优化一下。</p><p>另外，我似乎没搜到GCNv2_SLAM在较新一点的带N卡的电脑（比如30系以后的N卡）中运行的<strong>教程博客</strong>，如果想用GPU来运行一下本项目，估计又是一个大麻烦事……</p><p>更新：慕雪已在AutoDL云平台的2080ti显卡容器化环境中成功运行了GCNv2_SLAM，效果远好于本地CPU运行，详见<a href="https://blog.musnow.top/posts/1071165018">【SLAM】于AutoDL云上GPU运行GCNv2_SLAM的记录</a>。</p>]]></content>
    
    
    <summary type="html">配置GCNv2_SLAM所需的环境并实现纯CPU运行项目的全过程记录</summary>
    
    
    
    <category term="编程学习" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="Linux" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/Linux/"/>
    
    
    <category term="Linux" scheme="https://blog.musnow.top/tags/Linux/"/>
    
    <category term="Cpp" scheme="https://blog.musnow.top/tags/Cpp/"/>
    
    <category term="SLAM" scheme="https://blog.musnow.top/tags/SLAM/"/>
    
  </entry>
  
  <entry>
    <title>【Docker】dockerfile识别当前构建的镜像平台</title>
    <link href="https://blog.musnow.top/posts/8484489314/"/>
    <id>https://blog.musnow.top/posts/8484489314/</id>
    <published>2025-01-30T08:37:37.000Z</published>
    <updated>2025-01-30T08:37:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>在编写dockerfile的时候，可能会遇到需要针对不同平台进行不同操作的时候，这需要我们对dockerfile进行针对性修改。</p><p>比如opencv的依赖项<code>libjasper-dev</code>在ubuntu18.04上就需要根据不同的平台做不同的处理，关于这个库的安装在另外一篇<a href="https://blog.musnow.top/posts/4284761477/">博客</a>里面有介绍。</p><p>在dockerfile中，我们可以通过下面的方式来区分当前编译的镜像平台是什么。</p><p>这里使用ARG引入了变量TARGETARCH，这是docker的builder会自动传入的一个变量，指代的是当前构建的镜像的版本。通过这个变量我们就可以写判断语句，根据不同的平台做不同的操作了。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ARG</span> TARGETARCH</span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> install/libjasper /tmp/install/libjasper</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$TARGETARCH</span>&quot;</span> = <span class="string">&quot;amd64&quot;</span> ]; <span class="keyword">then</span> \</span></span><br><span class="line"><span class="language-bash">        <span class="built_in">echo</span> <span class="string">&quot;Installing libjasper for amd64&quot;</span>; \</span></span><br><span class="line"><span class="language-bash">        <span class="built_in">chmod</span> 777 /tmp/install/libjasper/install_libjasper_amd64.sh; \</span></span><br><span class="line"><span class="language-bash">        /tmp/install/libjasper/install_libjasper_amd64.sh; \</span></span><br><span class="line"><span class="language-bash">    <span class="keyword">elif</span> [ <span class="string">&quot;<span class="variable">$TARGETARCH</span>&quot;</span> = <span class="string">&quot;arm64&quot;</span> ]; <span class="keyword">then</span> \</span></span><br><span class="line"><span class="language-bash">        <span class="built_in">echo</span> <span class="string">&quot;Installing libjasper for arm64&quot;</span>; \</span></span><br><span class="line"><span class="language-bash">        <span class="built_in">chmod</span> 777 /tmp/install/libjasper/install_libjasper_arm64.sh; \</span></span><br><span class="line"><span class="language-bash">        /tmp/install/libjasper/install_libjasper_arm64.sh; \</span></span><br><span class="line"><span class="language-bash">    <span class="keyword">else</span> \</span></span><br><span class="line"><span class="language-bash">        <span class="built_in">echo</span> <span class="string">&quot;Unsupported architecture for install libjasper: <span class="variable">$TARGETARCH</span>&quot;</span>; \</span></span><br><span class="line"><span class="language-bash">        <span class="built_in">exit</span> 1; \</span></span><br><span class="line"><span class="language-bash">    <span class="keyword">fi</span></span></span><br></pre></td></tr></table></figure><p>问题就解决啦！</p>]]></content>
    
    
    <summary type="html">dockerfile如何识别当前构建的镜像平台？</summary>
    
    
    
    <category term="编程学习" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="Docker学习" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/Docker%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Docker" scheme="https://blog.musnow.top/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>【Linux】opencv在arm64上提示找不到libjasper-dev</title>
    <link href="https://blog.musnow.top/posts/4284761477/"/>
    <id>https://blog.musnow.top/posts/4284761477/</id>
    <published>2025-01-30T07:59:12.000Z</published>
    <updated>2025-01-30T08:00:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>解决opencv在arm64上提示找不到libjasper-dev的问题。</p><h2 id="问题说明"><a href="#问题说明" class="headerlink" title="问题说明"></a>问题说明</h2><p>最近我在尝试编译opencv，安装依赖项<code>libjasper1</code>和<code>libjasper-dev</code>的时候就遇到了这个问题。在amd64平台上，我们可以通过下面的命令安装（ubuntu18.04）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">apt-get install -y software-properties-common </span><br><span class="line">add-apt-repository <span class="string">&quot;deb http://security.ubuntu.com/ubuntu xenial-security main&quot;</span></span><br><span class="line">apt-get -y update </span><br><span class="line">apt-get install -y libjasper1 libjasper-dev</span><br></pre></td></tr></table></figure><p>但是在arm64的机器上，这个新添加的源会提示404。注意404不是网络问题，而是指定的文件不存在。根据这里显示的url，其实就是因为<code>binary-arm64</code>这个路径不存在。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Err:6 http://security.ubuntu.com/ubuntu xenial-security/main arm64 Packages</span><br><span class="line">  404  Not Found [IP: 185.125.190.83 80]</span><br><span class="line">Fetched 106 kB in 2s (44.6 kB/s)</span><br><span class="line">Reading package lists... Done</span><br><span class="line">E: Failed to fetch http://security.ubuntu.com/ubuntu/dists/xenial-security/main/binary-arm64/Packages  404  Not Found [IP: 185.125.190.83 80]</span><br><span class="line">E: Some index files failed to download. They have been ignored, or old ones used instead.</span><br></pre></td></tr></table></figure><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>根据<a href="https://blog.csdn.net/u011622208/article/details/105252720">这篇博客</a>，arm架构的ubuntu18.04需要使用下面的方式安装这两个库。</p><p>将下面的清华源写入<code>/etc/apt/sources.list</code>文件的末尾（注意，如果你执行过上文的命令错误添加了会404的源，需要将那个源注释掉）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ xenial main multiverse restricted universe</span><br><span class="line">deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ xenial-security main multiverse restricted universe</span><br><span class="line">deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ xenial-updates main multiverse restricted universe</span><br><span class="line">deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ xenial-backports main multiverse restricted universe</span><br><span class="line">deb-src http://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ xenial main multiverse restricted universe</span><br><span class="line">deb-src http://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ xenial-security main multiverse restricted universe</span><br><span class="line">deb-src http://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ xenial-updates main multiverse restricted universe</span><br><span class="line">deb-src http://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ xenial-backports main multiverse restricted universe</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/01/d9fb2bd9e4567f93eaaa617dd5f981ba.png" alt="image.png"></p><p>修改文件之后，执行如下命令就可以安装了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt-get -y update </span><br><span class="line">apt-get install -y libjasper1 libjasper-dev</span><br></pre></td></tr></table></figure><p>安装成功的输出如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu-linux-22-04-02-desktop:/# apt-get install -y libjasper1 libjasper-dev</span><br><span class="line">Reading package lists... Done</span><br><span class="line">Building dependency tree   </span><br><span class="line">Reading state information... Done</span><br><span class="line">Suggested packages:</span><br><span class="line">  libjasper-runtime</span><br><span class="line">The following NEW packages will be installed:</span><br><span class="line">  libjasper-dev libjasper1</span><br><span class="line">0 upgraded, 2 newly installed, 0 to remove and 0 not upgraded.</span><br><span class="line">Need to get 613 kB of archives.</span><br><span class="line">After this operation, 1327 kB of additional disk space will be used.</span><br><span class="line">Get:1 http://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports xenial-security/main arm64 libjasper1 arm64 1.900.1-debian1-2.4ubuntu1.3 [111 kB]</span><br><span class="line">Get:2 http://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports xenial-security/main arm64 libjasper-dev arm64 1.900.1-debian1-2.4ubuntu1.3 [502 kB]</span><br><span class="line">Fetched 613 kB in 1s (758 kB/s)    </span><br><span class="line">debconf: unable to initialize frontend: Dialog</span><br><span class="line">debconf: (No usable dialog-like program is installed, so the dialog based frontend cannot be used. at /usr/share/perl5/Debconf/FrontEnd/Dialog.pm line 76, &lt;&gt; line 2.)</span><br><span class="line">debconf: falling back to frontend: Readline</span><br><span class="line">Selecting previously unselected package libjasper1:arm64.</span><br><span class="line">(Reading database ... 67223 files and directories currently installed.)</span><br><span class="line">Preparing to unpack .../libjasper1_1.900.1-debian1-2.4ubuntu1.3_arm64.deb ...</span><br></pre></td></tr></table></figure><p>搞定！</p>]]></content>
    
    
    <summary type="html">解决opencv在arm64上提示找不到libjasper-dev的问题</summary>
    
    
    
    <category term="编程学习" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="Linux" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/Linux/"/>
    
    
    <category term="Linux" scheme="https://blog.musnow.top/tags/Linux/"/>
    
    <category term="SLAM" scheme="https://blog.musnow.top/tags/SLAM/"/>
    
  </entry>
  
  <entry>
    <title>【Docker】docker使用buildx同时构建多平台镜像</title>
    <link href="https://blog.musnow.top/posts/7885829874/"/>
    <id>https://blog.musnow.top/posts/7885829874/</id>
    <published>2025-01-30T06:26:19.000Z</published>
    <updated>2025-01-30T08:35:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>在使用docker build的时候，有的时候需要构建非当前平台版本的镜像，比如我在arm的机器上构建x86的镜像，反之亦然。这时候传统的docker build命令就行不通了，需要使用buildx来支持构建多平台镜像。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker buildx build --platform linux/arm64,linux/amd64 -t ubuntu-x11:18.04 .</span><br></pre></td></tr></table></figure><p>执行这个命令的时候，可能会遇到如下输出（mac下的docker desktop）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">❯ docker buildx build --platform linux/arm64,linux/amd64 -t ubuntu-x11:18.04 .</span><br><span class="line">[+] Building 0.0s (0/0)                                                               docker:desktop-linux</span><br><span class="line">ERROR: Multi-platform build is not supported for the docker driver.</span><br><span class="line">Switch to a different driver, or turn on the containerd image store, and try again.</span><br><span class="line">Learn more at https://docs.docker.com/go/build-multi-platform/</span><br></pre></td></tr></table></figure><p>这个ERROR的含义是当前的docker builder不支持多平台镜像build，需要切换builder。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先创建一个新的 buildx builder，并指定 docker-container 作为驱动</span></span><br><span class="line">docker buildx create --name mybuilder --use --driver docker-container</span><br><span class="line"><span class="comment"># 确保 buildx 处于正确状态</span></span><br><span class="line">docker buildx <span class="built_in">ls</span></span><br><span class="line"><span class="comment"># 随后就可以正常 build 了</span></span><br><span class="line">docker buildx build --platform linux/arm64,linux/amd64 -t ubuntu-x11:18.04 --push . </span><br></pre></td></tr></table></figure><p>这里必须要给命令加上一个<code>--push</code>选项将镜像push到远端仓库或者本地仓库，因为buildx没有办法直接把镜像写入images中。如果需要push到dockerhub则需要先执行<code>docker login</code>登录一下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">WARNING: No output specified with docker-container driver. Build result will only remain in the build cache. To push result image into registry use --push or to load image into docker use --load</span><br><span class="line">dockerfile:1</span><br></pre></td></tr></table></figure><p>不过，后续我执行命令的时候一直因为dockerhub没有办法连上导致拉不下原始的镜像，麻了……</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">❯ docker buildx build --platform linux/amd64 -t musnows/ubuntu-x11:18.04  --push  . </span><br><span class="line"></span><br><span class="line">[+] Building 30.8s (3/3) FINISHED                                               docker-container:mybuilder</span><br><span class="line"> =&gt; [internal] load build definition from dockerfile                                                  0.0s</span><br><span class="line"> =&gt; =&gt; transferring dockerfile: 1.88kB                                                                0.0s</span><br><span class="line"> =&gt; ERROR [internal] load metadata for docker.io/musnows/ubuntu:18.04                                30.7s</span><br><span class="line"> =&gt; [auth] musnows/ubuntu:pull token for registry-1.docker.io                                         0.0s</span><br><span class="line">------</span><br><span class="line"> &gt; [internal] load metadata for docker.io/musnows/ubuntu:18.04:</span><br><span class="line">------</span><br><span class="line">dockerfile:2</span><br><span class="line">--------------------</span><br><span class="line">   1 |     # this images is build from dockerfile.base</span><br><span class="line">   2 | &gt;&gt;&gt; FROM musnows/ubuntu:18.04</span><br><span class="line">   3 |     </span><br><span class="line">   4 |     ARG DEBIAN_FRONTEND=noninteractive</span><br><span class="line">--------------------</span><br><span class="line">ERROR: failed to solve: musnows/ubuntu:18.04: failed to resolve source metadata for docker.io/musnows/ubuntu:18.04: failed to authorize: failed to fetch oauth token: Post &quot;https://auth.docker.io/token&quot;: dial tcp [2a03:2880:f10d:183:face:b00c:0:25de]:443: i/o timeout</span><br></pre></td></tr></table></figure><p>更新：发现了一篇<a href="https://blog.csdn.net/qq_32550077/article/details/144139191">博客</a>提到了和我相同的错误，是因为之前创建builder的时候用了另外一个mybuilder，导致它识别不到我们的登录信息。所以需要使用默认的builder才能访问到认证信息，正常拉取容器。</p><p>使用下面俩命令切换回默认的builder</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker context use default</span><br><span class="line">docker buildx use default</span><br></pre></td></tr></table></figure><p>切换了之后就能正常构建了，不过还是没办法一次构建俩平台的镜像，又回到了原点……</p>]]></content>
    
    
    <summary type="html">docker使用buildx同时构建多平台镜像</summary>
    
    
    
    <category term="编程学习" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="Docker真好玩" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/Docker%E7%9C%9F%E5%A5%BD%E7%8E%A9/"/>
    
    
    <category term="Docker" scheme="https://blog.musnow.top/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>【博客】使用GithubAction自动同步obisidian和hexo仓库</title>
    <link href="https://blog.musnow.top/posts/8608489065/"/>
    <id>https://blog.musnow.top/posts/8608489065/</id>
    <published>2025-01-20T08:30:43.000Z</published>
    <updated>2025-02-12T05:46:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>使用Github Action自动同步obisidian和hexo仓库，避免手动操作。</p><h2 id="1-烦恼"><a href="#1-烦恼" class="headerlink" title="1. 烦恼"></a>1. 烦恼</h2><p>先来说说慕雪现在的笔记和博客是怎么管理的吧，我正在使用两套笔记软件</p><ul><li>思源笔记：私密性高一些，不是博客的笔记都在这里面。由于思源笔记不是markdown编辑器，不能直接和hexo对接；</li><li>obisdian：专门管理hexo的博客；</li></ul><p>然后我的hexo博客和obsidian又有分离，hexo配置仓库是一个单独的git仓库（后文简称为hexo仓库），obsidian博客库也是一个单独的git仓库（后文简称为obisidian仓库）。</p><p>我采用的操作特别繁琐，步骤如下：</p><ol><li>在obsidian里面写好博客之后，手动使用FreeFileSync软件，将<code>obisidian/blog</code>目录同步到<code>hexo/source/_posts</code>目录中（这两个目录完全一样）;</li><li>然后再到hexo本地仓库中执行hexo三板斧命令，给新的博客生成abbrlink，push到hexo的github仓库；</li><li>再用FreeFileSync反向将<code>hexo/source/_posts</code>目录同步回<code>obisidian/blog</code>目录，因为新的博客会多出abbrlink；</li></ol><p>是不是听起来都头大了？</p><h2 id="2-曾经的想法"><a href="#2-曾经的想法" class="headerlink" title="2. 曾经的想法"></a>2. 曾经的想法</h2><p>先前我一直在想怎么让这套流程简化，考虑过几个方案都不太满意。我想过直接把obsidian vaults丢到<code>hexo/source/_posts</code>目录里面，但是考虑到我的obsidian中还有博客模板这种不需要上传到博客里面的内容，此项并不方便（虽然hexo其实可以跳过渲染某些md文件）</p><p>现在就想出了自动化的方案，也就是用github action来同步obsidian和hexo的仓库，当<code>obisidian/blog</code>目录有变动的时候，触发action，自动将这个目录的内容拷贝到<code>hexo/source/_posts</code>仓库目录中，并push到hexo仓库。</p><p>这里就有一个问题，abbrlink是基于hexo插件生成的，如果用这种方式那就没办法给新的博客md文件生成一个固定abbrlink了。不管是怎么让github action执行<code>hexo g</code>命令，最<strong>后都会出现远程仓库md文件中有abbrlink，但本地需要pull才能更新的问题</strong>，这会对我后续的博客编写和git操作带来不便（毕竟之前都是无脑push上去的）</p><p>之前每次想折腾github action的时候就会发现这个问题（由于没记笔记导致折腾的时候忘记了之前为啥没搞定……），然后又不了了之。</p><p>今天突然想起来，既然问题是在abbrlink插件上，那我不用hexo来生成abbrlink不就行了？反正abbrlink本质上和随机数没啥关系，我只要给新的博客手动加上一个和其他博客不冲突的abbrlink不就ok了？</p><blockquote><p>注：hexo的abbrlink插件是通过crc16&#x2F;crc32算法计算得到文件的abbrlink的，并非随机数生成。但对于abbrlink的作用来看，只要博客上每个文章都有一个独立的abbrlink其实就够了，所以abbrlink说它是随机数也没啥问题。</p></blockquote><p>解决方法明了：用别的方法给新博客生成abbrlink，然后再用github action自动化同步obsidian仓库和hexo仓库。</p><h2 id="3-解决步骤"><a href="#3-解决步骤" class="headerlink" title="3. 解决步骤"></a>3. 解决步骤</h2><h3 id="3-1-生成abbrlink的python脚本"><a href="#3-1-生成abbrlink的python脚本" class="headerlink" title="3.1. 生成abbrlink的python脚本"></a>3.1. 生成abbrlink的python脚本</h3><p>其实obsidian中是有一个<a href="https://github.com/Hoshino-Yumetsuki/obsidian-plugin-abbrlink/">abbrlink插件</a>的，首先感谢插件作者能提供一个hexo-abbrlink插件的替代品。但是，这个插件不太符合本人的需求，因为它直接针对于obsidian全局，会把我的其他文件以及博客模板文件都加上abbrlink。</p><p>折腾了一会后，感觉不如返璞归真，直接写个python脚本，把所有博客文件的abbrlink遍历出来，然后生成30个不冲突的abbrlink写入到一个文件里面，每次写新博客的时候从这个文件里面取一个abbrlink出来用就完事啦！</p><p>说干就干，GPT，启动！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成不冲突的abbrlink</span></span><br><span class="line"><span class="keyword">import</span> yaml</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">MD_FILE_PATH = <span class="string">&#x27;../../Notes/CODE&#x27;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;博客md文件路径&quot;&quot;&quot;</span></span><br><span class="line">NEW_ABBRLINK_SIZE = <span class="number">20</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;生成几个abbrlink&quot;&quot;&quot;</span></span><br><span class="line">NEW_ABBRLINK_MD_FILE = <span class="string">&#x27;../../Notes/ABBRLINK归档.md&#x27;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;生成的abbrlink写入这个md文件里面&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">extract_front_matter</span>(<span class="params">file_path</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    提取 Markdown 文件中的 front-matter 内容。</span></span><br><span class="line"><span class="string">    假设 front-matter 是以 &#x27;---&#x27; 包围的 YAML 格式内容。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">        content = file.read()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 使用正则表达式匹配 front-matter</span></span><br><span class="line">    <span class="keyword">match</span> = re.<span class="keyword">match</span>(<span class="string">r&#x27;---\n(.*?)\n---\n&#x27;</span>, content, re.DOTALL)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">match</span>:</span><br><span class="line">        front_matter = <span class="keyword">match</span>.group(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> yaml.safe_load(front_matter)  <span class="comment"># 使用 yaml 解析 front-matter</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">remove_front_matter</span>(<span class="params">file_path</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    移除 Markdown 文件中的 front-matter 部分，返回去除 front-matter 后的内容。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">        content = file.read()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 使用正则表达式去除 front-matter</span></span><br><span class="line">    cleaned_content = re.sub(<span class="string">r&#x27;---\n(.*?)\n---\n&#x27;</span>, <span class="string">&#x27;&#x27;</span>, content, flags=re.DOTALL)</span><br><span class="line">    <span class="keyword">return</span> cleaned_content</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">update_front_matter</span>(<span class="params">file_path, new_front_matter</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    更新 Markdown 文件中的 front-matter 内容。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&#x27;r+&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">        content = file.read()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 使用正则表达式替换 front-matter</span></span><br><span class="line">    new_front_matter_str = yaml.dump(new_front_matter, default_flow_style=<span class="literal">False</span>)</span><br><span class="line">    content = re.sub(<span class="string">r&#x27;---\n(.*?)\n---\n&#x27;</span>, <span class="string">f&#x27;---\n<span class="subst">&#123;new_front_matter_str&#125;</span>\n---\n&#x27;</span>, content, flags=re.DOTALL)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 写回文件</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">        file.write(content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">extract_front_matter_from_dir</span>(<span class="params">directory_path</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    遍历指定目录及其子目录下的所有 .md 文件，提取它们的 front-matter 内容，并将所有内容添加到列表中。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    front_matter_list = []</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 遍历目录中的所有文件和子目录</span></span><br><span class="line">    <span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(directory_path):</span><br><span class="line">        <span class="keyword">for</span> filename <span class="keyword">in</span> files:</span><br><span class="line">            file_path = os.path.join(root, filename)</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 只处理 .md 文件</span></span><br><span class="line">            <span class="keyword">if</span> filename.endswith(<span class="string">&#x27;.md&#x27;</span>):</span><br><span class="line">                front_matter = extract_front_matter(file_path)</span><br><span class="line">                <span class="keyword">if</span> front_matter:</span><br><span class="line">                    front_matter_list.append(front_matter)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> front_matter_list</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_unique_10digit_numbers</span>(<span class="params">existing_numbers, n</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    生成 n 个不在 existing_numbers 列表中的 10 位数字。</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    :param existing_numbers: 已存在的整数列表</span></span><br><span class="line"><span class="string">    :param n: 需要生成的数字数量</span></span><br><span class="line"><span class="string">    :return: 不重复的 10 位数字列表</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    unique_numbers = <span class="built_in">set</span>(existing_numbers)  <span class="comment"># 将现有的数字转换为集合，加速查找</span></span><br><span class="line">    generated_numbers = []</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 如果现有数字数量已经非常大，可能无法生成足够的唯一数字</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(unique_numbers) &gt; <span class="number">9999999999</span> - <span class="number">1000000000</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">len</span>(generated_numbers) &lt; n:</span><br><span class="line">        num = random.randint(<span class="number">1000000000</span>, <span class="number">9999999999</span>)  <span class="comment"># 随机生成一个10位数字</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> num <span class="keyword">not</span> <span class="keyword">in</span> unique_numbers:</span><br><span class="line">            generated_numbers.append(num)</span><br><span class="line">            unique_numbers.add(num)  <span class="comment"># 将新生成的数字添加到现有数字集合中</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> generated_numbers</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">write_int_list_to_md</span>(<span class="params">file_path, int_list</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    将整数列表的成员按行写入一个Markdown文件。</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    :param file_path: Markdown文件的路径</span></span><br><span class="line"><span class="string">    :param int_list: 要写入文件的整数列表</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">        <span class="keyword">for</span> number <span class="keyword">in</span> int_list:</span><br><span class="line">            file.write(<span class="string">f&quot;<span class="subst">&#123;number&#125;</span>\n&quot;</span>)  <span class="comment"># 每个数字写一行</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例使用</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 假设 markdown 文件目录路径为 &quot;../../Notes/CODE&quot;</span></span><br><span class="line">    file_path = MD_FILE_PATH</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 提取所有 .md 文件的 front-matter</span></span><br><span class="line">    front_matter_list = extract_front_matter_from_dir(file_path)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 打印所有文件的 front-matter</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> front_matter_list:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;没有找到 front-matter 或目录为空。&quot;</span>)</span><br><span class="line">        os.abort()</span><br><span class="line">        </span><br><span class="line">    abbrlink_list = []</span><br><span class="line">    <span class="keyword">for</span> fm <span class="keyword">in</span> front_matter_list:</span><br><span class="line">        <span class="comment"># print(f&quot;文件的 front-matter 内容:&quot;, fm)</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;abbrlink&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> fm:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;ERR! abbrlink not in <span class="subst">&#123;fm&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        </span><br><span class="line">        link = <span class="built_in">int</span>(fm[<span class="string">&#x27;abbrlink&#x27;</span>])</span><br><span class="line">        <span class="keyword">if</span> link <span class="keyword">in</span> abbrlink_list:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;ERR! <span class="subst">&#123;link&#125;</span> in abbrlink list!&quot;</span>)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        </span><br><span class="line">        abbrlink_list.append(link)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 获取新的abbrlink</span></span><br><span class="line">    new_abbrlink = generate_unique_10digit_numbers(abbrlink_list, NEW_ABBRLINK_SIZE)</span><br><span class="line">    <span class="keyword">for</span> link <span class="keyword">in</span> new_abbrlink:</span><br><span class="line">        <span class="built_in">print</span>(link)</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Gen abbrlink success&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    write_int_list_to_md(NEW_ABBRLINK_MD_FILE, new_abbrlink)</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Write abbrlink to&quot;</span>, NEW_ABBRLINK_MD_FILE)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>脚本运行效果如下，会生成新的abbrlink链接数字，然后写入到指定的md文件中。这样在obsidian里面就能看到这个md文件，取用里面的abbrlink了。用完了之后再手动执行一下脚本更新abbrlink就完事啦。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">❯ python3 gen_abbrlink.py</span><br><span class="line">8608489065</span><br><span class="line">7885829874</span><br><span class="line">8484489314</span><br><span class="line">4284761477</span><br><span class="line">1589125738</span><br><span class="line">9151131777</span><br><span class="line">4800824161</span><br><span class="line">7141292217</span><br><span class="line">2714461943</span><br><span class="line">5131440419</span><br><span class="line">2816690027</span><br><span class="line">9574459795</span><br><span class="line">6572894529</span><br><span class="line">2920325088</span><br><span class="line">2724835080</span><br><span class="line">7631222809</span><br><span class="line">1802821635</span><br><span class="line">3120273636</span><br><span class="line">2860205445</span><br><span class="line">3100823185</span><br><span class="line">Gen abbrlink success</span><br><span class="line">Write abbrlink to ../../Notes/ABBRLINK归档.md</span><br></pre></td></tr></table></figure><h3 id="3-2-Github-Action配置"><a href="#3-2-Github-Action配置" class="headerlink" title="3.2. Github Action配置"></a>3.2. Github Action配置</h3><p>接下来就是配置Github Action来同步两个仓库了。让GPT写了个大概，发现GPT在瞎说，它给出https的仓库clone链接，并表示用自带的<code>GITHUB_TOKEN</code>就能克隆私有仓库了，但实际上完全没用。最后还是得用老办法ssh密钥对来实现。</p><p>首先使用如下命令生成一个ssh密钥，弹出的提示中填写一个文件名字（不然会覆盖默认目录的ssh密钥对）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;github action&quot;</span> </span><br></pre></td></tr></table></figure><p>然后，搞清楚同步的方向，我的需要是将obsidian仓库中的内容同步到hexo仓库，所以公钥放在hexo仓库，私钥放在obsidian仓库中。</p><p>在hexo仓库（被推送的仓库）中，仓库设置<code>Settings-&gt;Deploy keys-&gt;Add deploy key</code>添加公钥，命名为<code>HEXO_PUB_KEY</code>。<strong>注意需要勾选允许write写入仓库</strong>，不然默认权限只允许pull和clone仓库。</p><p>在obsidian仓库中，仓库设置<code>Settings-&gt;Secrets and variables-&gt;Secrets</code>添加私钥，命名为<code>HEXO_PRI_KEY</code>。</p><p>最后的Github Action Workflow文件如下，将该文件写入obsidian仓库的<code>.github/workflows/sync-code-to-posts.yml</code>即可，每个步骤都写了注释。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Sync</span> <span class="string">CODE</span> <span class="string">to</span> <span class="string">_posts</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;Notes/CODE/**&#x27;</span> <span class="comment"># 监听 CODE 文件夹内的文件变化，没有变化不会触发action</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">sync:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">steps:</span>      </span><br><span class="line">      <span class="comment"># 检出 obsidian 仓库的代码</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">muob</span> <span class="string">repository</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v3</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># 设置 Git 配置</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Set</span> <span class="string">up</span> <span class="string">Git</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">ACTIONS_KEY:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.HEXO_PRI_KEY</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          mkdir -p ~/.ssh/</span></span><br><span class="line"><span class="string">          echo &quot;$ACTIONS_KEY&quot; &gt; ~/.ssh/id_rsa</span></span><br><span class="line"><span class="string">          chmod 700 ~/.ssh</span></span><br><span class="line"><span class="string">          chmod 600 ~/.ssh/id_rsa</span></span><br><span class="line"><span class="string">          ssh-keyscan github.com &gt;&gt; ~/.ssh/known_hosts</span></span><br><span class="line"><span class="string">          git config --global user.name &quot;musnows&quot;</span></span><br><span class="line"><span class="string">          git config --global user.email &quot;ezplayingd@126.com&quot;</span></span><br><span class="line"><span class="string">          git config --global core.quotepath false</span></span><br><span class="line"><span class="string">          git config --global i18n.commitEncoding utf-8 </span></span><br><span class="line"><span class="string">          git config --global i18n.logOutputEncoding utf-8 </span></span><br><span class="line"><span class="string"></span>      <span class="comment"># 克隆 HexoBlog 仓库（私有仓库），使用 ssh 来进行认证</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">HexoBlog</span> <span class="string">repository</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          git clone git@github.com:musnows/Hexo-Blog.git HexoBlog</span></span><br><span class="line"><span class="string"></span>      <span class="comment"># 同步文件：将 obsidain 仓库中的 CODE 文件夹内容复制到 HexoBlog 仓库的 _posts 文件夹</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Sync</span> <span class="string">files</span> <span class="string">from</span> <span class="string">CODE</span> <span class="string">to</span> <span class="string">_posts</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          rsync -av --delete Notes/CODE/ HexoBlog/source/_posts/</span></span><br><span class="line"><span class="string"></span>      <span class="comment"># 提交更改并推送到 HexoBlog 仓库</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Commit</span> <span class="string">and</span> <span class="string">push</span> <span class="string">changes</span> <span class="string">to</span> <span class="string">HexoBlog</span> <span class="string">repository</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          cd HexoBlog</span></span><br><span class="line"><span class="string">          git add .</span></span><br><span class="line"><span class="string">          git commit -m &quot;Sync CODE to _posts at $(TZ=&#x27;Asia/Shanghai&#x27; date &#x27;+%Y-%m-%d %H:%M:%S&#x27;)&quot;</span></span><br><span class="line"><span class="string">          git push origin hexo</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure><p>第二步的Git操作中，我们将仓库配置的<code>secrets.HEXO_PRI_KEY</code>映射成环境变量<code>ACTIONS_KEY</code>，然后写入执行action的ubuntu环境的<code>~/.ssh/id_rsa</code>私钥文件中，这样就能操作另外一个仓库了。</p><p>第四步的Sync操作使用了rsync命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rsync -av --delete 源文件夹 目标文件夹</span><br></pre></td></tr></table></figure><p>解释一下这里的几个命令参数，<code>-a</code>用于保持文件的原有属性，<code>-v</code>代表verbose，会输出详细的日志，<code>--delete</code>用于在目标目录中删除源目录中不存在的文件（同步删除操作）。</p><h2 id="4-测试效果"><a href="#4-测试效果" class="headerlink" title="4. 测试效果"></a>4. 测试效果</h2><p>我在目录中创建了一个测试文件，push到了远端仓库中，触发了action</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/01/40821a1949dd75d7c817e7b5b0577d28.png" alt="image.png"></p><p>hexo配置仓库成功被push了，有更新的文件也是在obsidain仓库中被修改的文件，符合预期。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/01/4c93f0fba8ab3fe1c66d3e1842b807ae.png" alt="image.png"></p><p>这样就搞定啦！以后我只需要push博客到obsidian仓库中，就能自动同步到hexo仓库内了。不需要手动做那部分繁琐的操作</p>]]></content>
    
    
    <summary type="html">使用GithubAction自动同步obisidian和hexo仓库，避免手动操作</summary>
    
    
    
    <category term="差生文具多" scheme="https://blog.musnow.top/categories/%E5%B7%AE%E7%94%9F%E6%96%87%E5%85%B7%E5%A4%9A/"/>
    
    <category term="博客建站" scheme="https://blog.musnow.top/categories/%E5%B7%AE%E7%94%9F%E6%96%87%E5%85%B7%E5%A4%9A/%E5%8D%9A%E5%AE%A2%E5%BB%BA%E7%AB%99/"/>
    
    
    <category term="博客建站" scheme="https://blog.musnow.top/tags/%E5%8D%9A%E5%AE%A2%E5%BB%BA%E7%AB%99/"/>
    
    <category term="Hexo" scheme="https://blog.musnow.top/tags/Hexo/"/>
    
    <category term="obsidian" scheme="https://blog.musnow.top/tags/obsidian/"/>
    
  </entry>
  
  <entry>
    <title>【AI】在思源笔记中使用LM Studio部署的本地AI</title>
    <link href="https://blog.musnow.top/posts/1891619455/"/>
    <id>https://blog.musnow.top/posts/1891619455/</id>
    <published>2025-01-19T00:55:26.000Z</published>
    <updated>2025-01-20T09:19:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>如何在思源笔记中使用本地部署的lmstudio提供的api。</p><h2 id="书接上文"><a href="#书接上文" class="headerlink" title="书接上文"></a>书接上文</h2><p>在 <a href="https://blog.musnow.top/posts/3021867508">【AI】如何安装LM Studio并配置qwen2.5本地ai</a> 一文中，介绍了如何安装LM Studio软件并使用通义千问本地AI大模型。</p><p>LM Studio软件可以基于本地大模型提供一个和openai api兼容的本地AI服务器，基于此，我们可以使用思源笔记自带的AI模块，利用本地的LM Studio来在思源笔记中使用本地部署的AI。</p><p>思源笔记中AI模块有两种用法，一种是选择内容后，让AI帮忙写总结、续写、格式优化等（AI输出的内容会插入到选中内容之后），另外一种就是直接问AI，AI的回答会直接插入到我们的问题之后。</p><h2 id="如何操作"><a href="#如何操作" class="headerlink" title="如何操作"></a>如何操作</h2><h3 id="启动LM-Studio本地服务器Server"><a href="#启动LM-Studio本地服务器Server" class="headerlink" title="启动LM Studio本地服务器Server"></a>启动LM Studio本地服务器Server</h3><p>首先需要配置好并打开LM Studio（教程博客上文已给出），点击developer开发者页面，在这里可以选中一个你想使用的模型，然后点击左上角的start server启动本地服务器。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/01/0e8f59dffba478bef26467be77af56c8.png" alt="image.png"></p><p>成功启动，可以在下方的终端中看到如下内容</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/01/c0e6e37514a856f315e1123cce110f3c.png" alt="image.png"></p><h3 id="思源笔记中配置LM-Studio的API"><a href="#思源笔记中配置LM-Studio的API" class="headerlink" title="思源笔记中配置LM Studio的API"></a>思源笔记中配置LM Studio的API</h3><p>来到思源笔记的设置中，需要填写如下内容，参考官方文档 <a href="https://lm-studio.cn/docs/api/openai-api">lm-studio.cn&#x2F;docs&#x2F;api&#x2F;openai-api</a>。</p><table><thead><tr><th>参数</th><th>值</th></tr></thead><tbody><tr><td>url</td><td><code>http://127.0.0.1:1234/v1</code></td></tr><tr><td>api key</td><td><code>lm-stdio</code></td></tr><tr><td>模型</td><td>查看lmstdio本地服务器页面显示的模型名字</td></tr></tbody></table><p>其中模型的名称可以在LM Studio开发者页面右侧的API Usage中看到，复制此处的模型名称即可 (“This model’s API identifier”下方的模型名称)</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/01/4b41c7156e8be8a75866a1a447012b08.png" alt="image.png"></p><p>最终思源笔记AI配置好的结果如下，注意要选择AI提供商为openai，其他设置无需修改。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/01/15ca21102730b83d4e2a3211f55b6919.png" alt="image.png"></p><h2 id="搞定！"><a href="#搞定！" class="headerlink" title="搞定！"></a>搞定！</h2><p>接下来就可以在思源笔记中使用AI了，斜杠菜单里面能呼出ai编写模块。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/01/7fa398d4f8635e8b1f8bdc6e3248eabe.png" alt="image.png"></p><p>ai的回答会直接插入到我们输入的问题后方。不过很明显这里通义千问是在瞎说了，思源笔记不是一个便签类应用，也不是阿里云开发的……哈哈哈哈</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/01/83f7e7a76c1611778292ea19cb36d2fa.png" alt="image.png"></p>]]></content>
    
    
    <summary type="html">如何在思源笔记中使用本地部署的LM Studio大模型提供的api</summary>
    
    
    
    <category term="差生文具多" scheme="https://blog.musnow.top/categories/%E5%B7%AE%E7%94%9F%E6%96%87%E5%85%B7%E5%A4%9A/"/>
    
    <category term="编程工具" scheme="https://blog.musnow.top/categories/%E5%B7%AE%E7%94%9F%E6%96%87%E5%85%B7%E5%A4%9A/%E7%BC%96%E7%A8%8B%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="思源笔记" scheme="https://blog.musnow.top/tags/%E6%80%9D%E6%BA%90%E7%AC%94%E8%AE%B0/"/>
    
    <category term="AI" scheme="https://blog.musnow.top/tags/AI/"/>
    
  </entry>
  
  <entry>
    <title>【AI】如何安装LM Studio并配置qwen2.5本地AI</title>
    <link href="https://blog.musnow.top/posts/3021867508/"/>
    <id>https://blog.musnow.top/posts/3021867508/</id>
    <published>2025-01-19T00:52:26.000Z</published>
    <updated>2025-01-20T09:19:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>如何安装LM Studio并配置qwen2.5本地ai。</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这几年以ChatGPT为首的生成式人工智能可是火爆了全网，我在学习编程的过程中也经常使用AI咨询一些问题，绝大部分问题ChatGPT给出的答案都是比较靠谱的，还是节省了不少时间的。</p><p>随着一个又一个开源人工智能模型的发布，我们现在已经可以在自己的电脑上也部署一个本地的生成式人工智能大模型，来辅助我们学习或构建本地的AI知识库。</p><p>本文将介绍如何安装本地AI部署需要用到的软件LM Studio，并下载国产开源大模型通义千问2.5进行部署。</p><h2 id="下载LM-Stdio和大模型"><a href="#下载LM-Stdio和大模型" class="headerlink" title="下载LM Stdio和大模型"></a>下载LM Stdio和大模型</h2><p>参考视频：<a href="https://www.bilibili.com/video/BV1TJ4m157GH/">本地运行通义千问72B！兼容AMD显卡或纯CPU【LM Studio】_哔哩哔哩_bilibili</a><br>下面是下载lmstudio的链接，和下载通义千问大模型的链接。</p><ul><li>LM Studio官网：<a href="https://lmstudio.ai/">https://lmstudio.ai</a>。依照您的操作系统，下载软件之后<strong>无脑下一步安装</strong>即可，本文不做截图演示；</li><li>魔搭社区通义千问：<a href="https://modelscope.cn/organization/qwen">https://modelscope.cn/organization/qwen</a></li></ul><p>注意，魔塔社区需要登录才能看到页面，不登陆看不到模型列表的。登录后，根据你的需要点进2.5或者2.5-coder的页面中（coder是针对编程优化过的）</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/01/5ef1ada9ffeeac8eb130143ed07ab24f.png" alt="image.png"></p><p>以coder为例，点进去能看到一些文章，32B、14B、7B字样的仓库，我们要的就是这些仓库，里面能下载到通义千问的本地模型文件。请根据您的电脑配置选择合适大小的模型</p><ul><li>家用轻薄本（2022年以后新出款的），只能下载1.5B或者3B的模型文件进行尝试；</li><li>M1\2\3\4系列Mac轻薄本，至少需要内存大于等于16GB才能尝试7B的模型（m系列mac内存越大就能尝试参数越大的模型）；</li><li>至少要有英伟达或amd独显，且显存大于8GB才能尝试14B及以上模型；</li></ul><p>以上仅为慕雪根据本人的设备和使用体验进行的推测，仅供参考；</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/01/1fef55282538e7e036a1c83880e9c20f.png" alt="image.png"></p><p>我们要下载的文件，是后缀带了GGUF的。为了方便，直接在魔搭社区的搜索栏搜索“通义千问 gguf”关键词即可</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/01/a0d025c463baf3e8580e2a055ff309d0.png" alt="image.png"></p><p>这里以“通义千问2.5-7B-Instruct-GGUF”为例，点进去，点击模型文件，建议选择后缀为<code>q2</code>的模型文件进行下载。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/01/4195eaf4e4cd5b53409829072fb3e51a.png" alt="image.png"></p><h2 id="LM-Studio配置使用通义千问"><a href="#LM-Studio配置使用通义千问" class="headerlink" title="LM Studio配置使用通义千问"></a>LM Studio配置使用通义千问</h2><h3 id="创建模型文件路径"><a href="#创建模型文件路径" class="headerlink" title="创建模型文件路径"></a>创建模型文件路径</h3><p>下载了模型文件之后，就可以配置lmstudio了，此处有重点需要敲黑板，lmstudio一定要依照特定文件夹层级来放置模型文件，才能正确识别模型。</p><p>首先创建一个空的文件夹，比如我在D盘的“Program Files”中创建了一个GPT文件夹</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D:\Program Files\GPT</span><br></pre></td></tr></table></figure><p>随后，我们需要按如下格式来创建文件夹，一定要这样创建！</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D:\Program Files\GPT\Qwen\Qwen2.5-7B-Instruct-GGUF</span><br></pre></td></tr></table></figure><p>最后，我们将刚刚下载的<code>qwen2.5-7b-instruct-q2_k.gguf</code>这个文件，放置到上述文件夹中就OK了。</p><p>如果我还想下载一个14B的模型咋办？那也要按这个套路去创建文件夹，然后把模型文件塞到这个文件夹里面。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D:\Program Files\GPT\Qwen\Qwen2.5-14B-Instruct-GGUF</span><br></pre></td></tr></table></figure><p>创建好了文件夹之后，在lmstudio的modules页面，选择上级目录作为模型文件的根目录，这样就能显示出模型文件了。按上文给出的例子，需要将<code>D:\Program Files\GPT</code>选择为模型文件根目录。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/01/86a03f4917f5ef5ef7af64893a441936.png" alt="image.png"></p><p>在mac电脑上也是同理，也需要按这个层级去创建文件夹和放置模型文件。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/01/c4e7d2fcb0cb6cf76b65d3d71a083202.png" alt="image.png"></p><p>只要文件路径ok，最终就能在lmstudio的页面看到你刚刚下载的本地模型。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/01/b6b62d344c5617682eace30dd2bf4aae.png" alt="image.png"></p><h3 id="使用本地模型"><a href="#使用本地模型" class="headerlink" title="使用本地模型"></a>使用本地模型</h3><p>接下来就能正常使用啦！进入lmstdio的chat聊天页面，在顶栏选择本地模型，会弹出设置页面让你选择。首先第一个设置上下文长度是这个模型能记住的上下文数量，设置的越多，模型能记住的内容也就越多，但所消耗的内存也就越多。另外，现在的大模型其实还是记不住太多东西， 所以不建议设置成超过10000的数字。这里我直接保持了默认的4096。</p><p>然后是GPU卸载，这个翻译不好，英文显示的是GPU OFFLOAD，意思是你希望使用多少CPU，这个参数越小代表CPU压力大，越大代表GPU压力越大。如果设置为0，则是纯CPU推理，如果设置为最大值，则是纯GPU推理。<strong>一般情况下建议直接往最大值设置或者设置成最大值的90%让CPU也干点活</strong>。</p><p>第三个参数CPU Thread Pool Size是一个编程方面的名词，翻译过来是“CPU线程池大小”，理论上来说，这个参数越大性能也就越好。</p><p>线程池的最大值一般是你CPU支持的多线程数量，比如我的M3 MBA就只有8核，所以最大值只能设置为8。建议设置为最大值的80%，避免LM Studio吃满所有CPU导致你的电脑变卡，干不了其他事。</p><p>剩余参数我也不太懂，建议不要修改。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/01/a72d8aae62d4584841ed984b2291b4e1.png" alt="image.png"></p><p>点击右下角的确定加载模型，接下来就能像在线的网页一样和这些模型聊天了。所有的计算都是在你的机器本地运行的，不会有隐私问题啦！</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/01/7eef88623d6c1d911ef9778d7752904f.png" alt="image.png"></p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/01/8f3a6772d9d0346c20fffef238a5db0e.png" alt="image.png"></p><h3 id="什么是token-x2F-s（token每秒）"><a href="#什么是token-x2F-s（token每秒）" class="headerlink" title="什么是token&#x2F;s（token每秒）"></a>什么是token&#x2F;s（token每秒）</h3><p>在lmstudio的回复中能看到你当前使用的模型的token生成速度<code>tok/sec</code>，也就是每秒能生成几个token。慕雪其实也不太懂这方面的知识，但是可以简单将每秒的token数理解为每秒本地的大模型能生成几个字。</p><p>一般要14token&#x2F;s才能符合人类阅读的速度，你可以根据这个指标来衡量你的电脑能支撑得起多少B的大模型。</p><h3 id="性能参考"><a href="#性能参考" class="headerlink" title="性能参考"></a>性能参考</h3><p>下面给出慕雪使用过的设备lmstudio部署本地通义千问模型的性能<code>tok/sec</code>，仅供参考</p><table><thead><tr><th>主机</th><th>模型</th><th>量化</th><th>生成速度(tok&#x2F;sec)</th></tr></thead><tbody><tr><td>M3 MACBOOK AIR 16GB</td><td>Qwen2.5-7B-Instruct-GGUF</td><td>q2_k</td><td>18</td></tr><tr><td></td><td>Qwen2.5-3B-Instruct-GGUF</td><td>q2_k</td><td>38</td></tr><tr><td></td><td>Qwen2.5-Coder-1.5B-Instruct-GGUF</td><td>q2_k</td><td>63</td></tr><tr><td></td><td>Qwen2.5-Coder-7B-Instruct-GGUF</td><td>q2_k</td><td>18</td></tr><tr><td>5700X&#x2F;7800XT&#x2F;32GB</td><td>Qwen1.5-14B-Instruct-GGUF</td><td>q2_k</td><td>36</td></tr><tr><td></td><td>Qwen1.5-7B-Instruct-GGUF</td><td>q2_k</td><td>66</td></tr><tr><td></td><td>Qwen1.5-32B-Instruct-GGUF</td><td>q2_k</td><td>6.3</td></tr><tr><td></td><td>Qwen2.5-Coder-7B-Instruct-GGUF</td><td>q2_k</td><td>68</td></tr></tbody></table><h2 id="拓展：构建本地知识库"><a href="#拓展：构建本地知识库" class="headerlink" title="拓展：构建本地知识库"></a>拓展：构建本地知识库</h2><p>构建本地知识库需要下载Anything LLM软件：<a href="https://anythingllm.com/download">anythingllm.com&#x2F;download</a>，参考视频：<a href="https://www.bilibili.com/video/BV1ci421v7xZ/">Qwen2本地部署和接入知识库 支持N卡&#x2F;A卡&#x2F;纯CPU_哔哩哔哩_bilibili</a>。</p><p>慕雪尝试过，目前效果不咋样，用<code>Qwen2.5-3B-Instruct-GGUF</code>即便是很小的文档也分析不明白，<strong>个人认为处于不可用阶段</strong>。也有可能是慕雪的配置有问题，但是懒得折腾了。</p><p>如果你感兴趣，可以依据视频的教程自己尝试一下，本文就不演示啦！</p>]]></content>
    
    
    <summary type="html">如何安装LM Studio并配置通义千问qwen2.5本地AI</summary>
    
    
    
    <category term="差生文具多" scheme="https://blog.musnow.top/categories/%E5%B7%AE%E7%94%9F%E6%96%87%E5%85%B7%E5%A4%9A/"/>
    
    <category term="编程工具" scheme="https://blog.musnow.top/categories/%E5%B7%AE%E7%94%9F%E6%96%87%E5%85%B7%E5%A4%9A/%E7%BC%96%E7%A8%8B%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="AI" scheme="https://blog.musnow.top/tags/AI/"/>
    
  </entry>
  
  <entry>
    <title>【Docker】安装Answer以及配置html代码片段</title>
    <link href="https://blog.musnow.top/posts/2922671846/"/>
    <id>https://blog.musnow.top/posts/2922671846/</id>
    <published>2024-12-26T07:42:05.000Z</published>
    <updated>2024-12-29T00:39:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>Docker安装Answer以及配置html代码片段。</p><h2 id="1-引言"><a href="#1-引言" class="headerlink" title="1. 引言"></a>1. 引言</h2><p>好久不见，最近一直在忙活学校期末和实习的事情，好久都没有更新博客了。最近闲下来了之后，又开始折腾docker了。</p><p>先简单介绍一下Answer吧，它是国内的思否平台开源的一个问答社区软件，简单来说，就是一个开源的类似stackoverflow和思否的问答论坛，可以由我们自行部署。</p><p><a href="https://segmentfault.com/a/1190000042672978">SegmentFault 思否正式开源问答社区软件 Answer</a></p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/12/23e7fe039ea67edeb9f2d2d0eba83da8.png" alt="image.png"></p><h2 id="2-Answer的安装和配置"><a href="#2-Answer的安装和配置" class="headerlink" title="2. Answer的安装和配置"></a>2. Answer的安装和配置</h2><h3 id="2-1-安装"><a href="#2-1-安装" class="headerlink" title="2.1. 安装"></a>2.1. 安装</h3><p>Answer的<a href="https://answer.apache.org/zh-CN/docs/">官方文档</a>是我折腾过这么多docker以来，个人感觉最完善的。一是因为answer本身的安装就不是特别复杂，二是文档中把常见的场景和可能遇到的问题都涉及到了，还是很棒的。</p><blockquote><p>文档：<a href="https://answer.apache.org/zh-CN/docs/installation">安装Answer</a></p></blockquote><p>这里推荐大家使用docker-compose来安装，后续升级方便一些。你可以用官方提供的命令快速下载配置文件并启动answer</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https://raw.githubusercontent.com/apache/incubator-answer/main/docker-compose.yaml | docker compose -p answer -f - up</span><br></pre></td></tr></table></figure><p>这个命令的链接是官方文档给出的yaml示例文件，内容如下。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">answer:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">apache/answer</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;9080:80&#x27;</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">on-failure</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">answer-data:/data</span></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">answer-data:</span></span><br></pre></td></tr></table></figure><p>这里默认采用了docker自带的volums来作为answer数据持久化的方式。为了更好的管理本地文件，你可以使用下面的docker-compose配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">answer:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">apache/answer</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;9080:80&#x27;</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">on-failure</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./data:/data</span></span><br></pre></td></tr></table></figure><p>创建一个专门的文件夹，然后将上述配置写入<code>docker-compose.yml</code>文件，使用如下命令启动容器即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker-compose pull</span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><p>随后你就可以访问<code>IP:9080</code>，进行answer的后续配置了。都是可视化的，且支持中文。配置比较简单，文档中也给出了截图，这里就不演示了。Answer支持sqlite、MySQL、PostgreSQL三种数据库，支持的还是比较全面的。如果你只是自己私下用用，或者服务器配置不是很高，直接用sqlite就可以了，性能足够了。</p><p>按指引创建了默认的管理员账户后，使用该账户登录answer，即可在页面左侧进入answer的管理控制台，在这里能对站点做更多的配置，包括配置站点logo、配置smtp、限制站点是否需要登录才能查看、限制可供注册的邮箱域名等等，这些都是常见的个人站点配置项，都比较直观，这里就不赘述了。</p><p>目前answer的最新版本是1.4.1，后文所述内容基于此版本。</p><h3 id="2-2-升级"><a href="#2-2-升级" class="headerlink" title="2.2. 升级"></a>2.2. 升级</h3><p>因为我们是用docker-compose部署的answer，所以升级很简单，直接pull拉取了新镜像，升级就ok了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker-compose down  <span class="comment"># 停止并删除原有容器</span></span><br><span class="line">docker-compose pull  <span class="comment"># 拉取新镜像</span></span><br><span class="line">docker-compose up -d <span class="comment"># 拉起新容器</span></span><br></pre></td></tr></table></figure><p>以防万一，在升级之前一定要备份原有的容器volumes数据和数据库！</p><h3 id="2-3-插件"><a href="#2-3-插件" class="headerlink" title="2.3. 插件"></a>2.3. 插件</h3><p>Answer的插件并不能直接在容器中动态安装，如果需要新的插件，得自己重新基于原有的docker镜像构建出一个新的带插件的镜像。这部分操作在answer的官方文档中有很详细的说明。</p><blockquote><p>文档：<a href="https://answer.apache.org/zh-CN/docs/plugins">使用插件</a></p></blockquote><p>下面是一个示例的dockerfile，用于安装几个常见的插件。注意官方的镜像在默认情况下提供了reviewer-basic、connector-basic、captcha-basic这三个插件，如果你需要使用它们，在构建自己的新镜像的时候也需要加上这三个插件。</p><p>为了方便在本地构建这个镜像，我在官方给出的dockerfile的基础上新增了一个sed命令来修改<code>golang:1.22-alpine</code>容器里面的镜像源配置，这样在本地构建的速度能加快。否则容易因为网络问题导致无法正常构建。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> apache/answer AS answer-builder</span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> golang:<span class="number">1.22</span>-alpine AS golang-builder</span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> --from=answer-builder /usr/bin/answer /usr/bin/answer</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># dockerfile中修改镜像源进行构建</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> sed -i <span class="string">&#x27;s/dl-cdn.alpinelinux.org/mirrors.ustc.edu.cn/g&#x27;</span> /etc/apk/repositories &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    apk update &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    apk upgrade &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    apk --no-cache add \</span></span><br><span class="line"><span class="language-bash">    build-base git bash nodejs npm go &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    npm install -g pnpm@8.9.2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加插件，注意基础审核插件也需要添加</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> answer build \</span></span><br><span class="line"><span class="language-bash">    --with github.com/apache/incubator-answer-plugins/storage-s3 \</span></span><br><span class="line"><span class="language-bash">    --with github.com/apache/incubator-answer-plugins/search-elasticsearch \</span></span><br><span class="line"><span class="language-bash">    --with github.com/apache/incubator-answer-plugins/render-markdown-codehighlight \</span></span><br><span class="line"><span class="language-bash">    --with github.com/apache/incubator-answer-plugins/editor-formula \</span></span><br><span class="line"><span class="language-bash">    --with github.com/apache/incubator-answer-plugins/reviewer-baidu \</span></span><br><span class="line"><span class="language-bash">    --with github.com/apache/incubator-answer-plugins/reviewer-basic \</span></span><br><span class="line"><span class="language-bash">    --with github.com/apache/incubator-answer-plugins/connector-basic \</span></span><br><span class="line"><span class="language-bash">    --with github.com/apache/incubator-answer-plugins/captcha-basic \</span></span><br><span class="line"><span class="language-bash">    --output /usr/bin/new_answer</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> alpine</span><br><span class="line"><span class="keyword">LABEL</span><span class="language-bash"> maintainer=<span class="string">&quot;linkinstar@apache.org&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ARG</span> TIMEZONE</span><br><span class="line"><span class="keyword">ENV</span> TIMEZONE=$&#123;TIMEZONE:-<span class="string">&quot;Asia/Shanghai&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apk update \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; apk --no-cache add \</span></span><br><span class="line"><span class="language-bash">        bash \</span></span><br><span class="line"><span class="language-bash">        ca-certificates \</span></span><br><span class="line"><span class="language-bash">        curl \</span></span><br><span class="line"><span class="language-bash">        dumb-init \</span></span><br><span class="line"><span class="language-bash">        gettext \</span></span><br><span class="line"><span class="language-bash">        openssh \</span></span><br><span class="line"><span class="language-bash">        sqlite \</span></span><br><span class="line"><span class="language-bash">        gnupg \</span></span><br><span class="line"><span class="language-bash">        tzdata \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; <span class="built_in">ln</span> -sf /usr/share/zoneinfo/<span class="variable">$&#123;TIMEZONE&#125;</span> /etc/localtime \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;TIMEZONE&#125;</span>&quot;</span> &gt; /etc/timezone</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> --from=golang-builder /usr/bin/new_answer /usr/bin/answer</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> --from=answer-builder /data /data</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> --from=answer-builder /entrypoint.sh /entrypoint.sh</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">chmod</span> 755 /entrypoint.sh</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">VOLUME</span><span class="language-bash"> /data</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">80</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;/entrypoint.sh&quot;</span>]</span></span><br></pre></td></tr></table></figure><p>使用如下命令构建带插件的镜像，构建出来的新镜像tag为answer-with-plugin</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t answer-with-plugin .</span><br></pre></td></tr></table></figure><p>如果像我一样想在arm的mac上构建一个给x86运行的镜像，则需要使用如下命令，否则构建出来的镜像会是arm的，无法在x86机器上部署。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker buildx build --platform=linux/amd64 -t answer-with-plugin .</span><br></pre></td></tr></table></figure><p>构建完成后，将容器从没有插件的版本升级到有插件的版本，需要修改<code>docker-compose.yml</code>文件中使用的镜像为新构建出的镜像tag（按上述构建命令，即修改为answer-with-plugin），然后先<code>docker-compose down</code>把原有容器删除并终止，再<code>docker-compose up -d </code>拉起新容器就可以了。</p><p>以防万一，在升级之前一定要备份原有的容器volumes数据和数据库！</p><h2 id="3-Answer站点”声望“说明"><a href="#3-Answer站点”声望“说明" class="headerlink" title="3. Answer站点”声望“说明"></a>3. Answer站点”声望“说明</h2><p>Answer站点用声望值来标明一个用户在站点里面的贡献值或活跃度，注意Answer的核心是一个问答社区，所以声望值的获取是和发送、回答问题、采纳回答息息相关的。</p><p>官方文档中关于<a href="https://answer.apache.org/zh-CN/docs/reputation">声望值</a>的部分没有被汉化，这里我给出我自行翻译后的版本。</p><p>声望可以通过如下方式获得：</p><table><thead><tr><th>条件</th><th>声望</th></tr></thead><tbody><tr><td>他人点赞了您的提问</td><td>+10</td></tr><tr><td>他人点赞了您的回答</td><td>+10</td></tr><tr><td>他人采纳了您的回答</td><td>+15</td></tr><tr><td>您采纳了他人的回答</td><td>+2</td></tr><tr><td>您的修改建议被采纳</td><td>+2</td></tr><tr><td>您给他人的回答点踩</td><td>-1</td></tr><tr><td>您的问题被点踩</td><td>-2</td></tr><tr><td>您的回答被点踩</td><td>-2</td></tr></tbody></table><p>额外规则：</p><ol><li>用户在注册激活后，默认拥有有1声望值；</li><li>用户首次发布回答后，会获得20声望值；</li><li>每天最多可以获取到200声望值，但从“他人采纳了您的回答”中获取的声望值不受每天200上限的限制；</li><li>采纳自己的回答不会获得声望值；</li><li>如果某个行为导致用户的声望值小于1，则之后的任何降低声望值的行为都不会降低该用户的声望值；</li></ol><p>其中“修改建议”是A用户申请对某个问题或者回复进行编辑（即用户可以编辑其他人的回答回复），编辑需要管理员审核，审核通过了，就会给A用户加2点声望值。</p><h2 id="4-可用的HTML-x2F-CSS代码"><a href="#4-可用的HTML-x2F-CSS代码" class="headerlink" title="4. 可用的HTML&#x2F;CSS代码"></a>4. 可用的HTML&#x2F;CSS代码</h2><p>为了加快站点访问速度，你可以使用<a href="https://www.wetools.com/js-compress">https://www.wetools.com/js-compress</a>工具压缩一下js代码再配置到站点里面去。博客为了更好的展示js代码，没有对代码进行压缩。</p><h3 id="4-1-左侧快速链接"><a href="#4-1-左侧快速链接" class="headerlink" title="4.1. 左侧快速链接"></a>4.1. 左侧快速链接</h3><p>官方示例问答社区<a href="https://meta.answer.dev/">meta.answer.dev</a>的左侧有几个快速链接，这部分不能直接在后台配置，需要使用自定义的HTML代码来实现。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/12/43e7ab3de275cabf202eecf89f3ef840.png" alt="image.png"></p><p>参考论坛里面的帖子：<a href="https://meta.answer.dev/questions/D1Jd/about-the-side-quick-link-navigation">https://meta.answer.dev/questions/D1Jd/about-the-side-quick-link-navigation</a></p><p>代码片段如下，注意帖子里面给出的代码片段href后用的还是<code>/users</code>，已经是老版本的代码片段了，1.4.1版本在用户后还多了一个徽章按键，所以要将<code>/user</code>修改成<code>/badges</code>，插入的位置才是正确的。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> htmlstr = <span class="string">`&lt;div class=&quot;py-2 px-3 mt-3 small fw-bold quick-link&quot;&gt;Quick Links&lt;/div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">   &lt;a class=&quot;nav-link&quot; href=&quot;/link1&quot;&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">     link name</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">   &lt;/a&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">   &lt;a class=&quot;nav-link&quot; href=&quot;/link2&quot;&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">     link name</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">   &lt;/a&gt;`</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> navUser = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#sideNav a[href=&quot;/badges&quot;]&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> navQuick = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#sideNav .quick-link&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">if</span> (navUser &amp;&amp; !navQuick) &#123;</span></span><br><span class="line"><span class="language-javascript">      navUser.<span class="title function_">insertAdjacentHTML</span>(<span class="string">&quot;afterend&quot;</span>, htmlstr);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> timer = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> navUser = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#sideNav a[href=&quot;/badges&quot;]&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> navQuick = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#sideNav .quick-link&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">if</span> (navUser &amp;&amp; !navQuick) &#123;</span></span><br><span class="line"><span class="language-javascript">      navUser.<span class="title function_">insertAdjacentHTML</span>(<span class="string">&quot;afterend&quot;</span>, htmlstr);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">     </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// If you don&#x27;t need to keep the selected style, you can remove the following code</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// nav active style start</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> links = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;#sideNav a[href^=&quot;/tags/&quot;]&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    links.<span class="title function_">forEach</span>(<span class="function">(<span class="params">link</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> href = link.<span class="title function_">getAttribute</span>(<span class="string">&quot;href&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> currentPathname = <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">pathname</span>;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">if</span> (href === currentPathname) &#123;</span></span><br><span class="line"><span class="language-javascript">        link.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&quot;active&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        link.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&quot;active&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">  &#125;, <span class="number">500</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// nav active style end</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;beforeunload&quot;</span>, <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="built_in">clearInterval</span>(timer);</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>将这个代码片段放到站点管理-自定义代码中的页脚部分即可（一定要放页脚，不然不会生效）</p><h3 id="4-2-文章TOC栏"><a href="#4-2-文章TOC栏" class="headerlink" title="4.2. 文章TOC栏"></a>4.2. 文章TOC栏</h3><p>因为answer本身是一个问答社区，所以它压根就没有考虑有人会在上面发带标题层级的问题的情况，也就没有原生支持TOC栏。不过借助上述HTML代码的经验，我认为同样可以使用JS脚本来自己搓一个TOC栏出来。在gpt的帮助下，算是完成了这样的功能。</p><p>因为我只是想要一个基础的toc栏，如果想支持多级toc的显示会更加麻烦，所以就只弄了一个支持文章内的H2标题跳转的版本。只有H2单级标题的情况下，可以直接根据原有的card来实现。</p><p>用F12打开开发者终端，用选择器选中answer右侧的关注标签和热门问题卡片，能定位到如下html代码。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/12/2b51b9e3089aa3af1146e7c42d29364e.png" alt="image.png"></p><p>我们要做的就是在<code>&lt;div class=&quot;page-right-side mt-4 mt-xl-0 col&quot;&gt;</code>父容器的已有元素之后，插入一个新的<code>&lt;div class=&quot;card&gt;</code>容器，作为我们的标题大纲栏。根据已有的热门问题的这个card，最终需要创建出来的大纲html代码是如下格式的。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card-header&quot;</span>&gt;</span>本文大纲<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;list-group list-group-flush&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;list-group-item list-group-item-action&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#heading-1&quot;</span>&gt;</span>标题1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;list-group-item list-group-item-action&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#heading-2&quot;</span>&gt;</span>标题2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure><p>你可以将如下代码粘贴到HTML配置的侧边栏中，看看它的最终显示效果。和已有的热门问题卡片是一致的。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/12/f76fd49b14e97055d4bead6acccc57c5.png" alt="image.png"></p><p>知道了样式之后，接下来就是怎么通过js来创建出这个样式并展示在前端了。这部分代码是gpt写的，来回battle了好几个回合，再加上用我自己浅显的前端知识小修小补一下，gpt才写出来一个可用的代码，可算是搞定了。</p><p>代码里面要注意的是，不能直接在整个页面扫H2标题，这样会把回答里面存在的H2标题也给扫描出来，不符合预期。需要扫描的是正文部分，正文是在<code>&lt;article class=&quot;fmt text-break text-wrap mt-4&quot;&gt;&lt;/article&gt;</code>容器中。在js代码的遍历H2标题部分，需要将这个设置为父容器，这样就能避免扫描出回答里面的H2标题了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;article.fmt.text-break.text-wrap.mt-4 h2&#x27;</span>)</span><br></pre></td></tr></table></figure><p>这里把完整的js代码分享给大家。核心思想是借助MutationObserver监听站点页面的变化，然后遍历文章内容中的H2标题，并将其按侧边栏的热门问题的样式创建一个卡片（前文提到的html格式），并插入到站点中。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// DOM 变化回调函数</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> observer = <span class="keyword">new</span> <span class="title class_">MutationObserver</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    timeoutId = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 只有问题内容页面才去扫描TOC</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (!<span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span>.<span class="title function_">includes</span>(<span class="string">&#x27;/questions/&#x27;</span>)) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span>; </span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 如果没有插入TOC卡片，且存在h2标题（通过我们自定义的class名来精准检查是否已经插入了toc）</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (!<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.toc-card&#x27;</span>) &amp;&amp;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;article.fmt.text-break.text-wrap.mt-4 h2&#x27;</span>).<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;[toc] target container exists, begin insert toc card.&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">insertOutlineCard</span>();</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;, <span class="number">1000</span>); <span class="comment">// 这里延时1000ms再去执行，因为原始的侧边栏可能还没有加载完成，插入的位置不对</span></span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 配置 MutationObserver 监听 DOM 变化</span></span></span><br><span class="line"><span class="language-javascript">observer.<span class="title function_">observe</span>(<span class="variable language_">document</span>.<span class="property">body</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">childList</span>: <span class="literal">true</span>,  <span class="comment">// 监听直接子元素变化</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">subtree</span>: <span class="literal">true</span>     <span class="comment">// 监听整个文档树</span></span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">insertOutlineCard</span> = (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 创建卡片</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> card = <span class="title function_">createOutlineCard</span>();</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">if</span> (!card) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;[toc] no h2 found in current page.&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 给卡片添加唯一的 class 或 id，用于后续检查是否已经插入</span></span></span><br><span class="line"><span class="language-javascript">    card.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;toc-card&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 插入卡片</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> targetContainer = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.page-right-side.mt-4.mt-xl-0.col&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    targetContainer.<span class="title function_">appendChild</span>(<span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;br&#x27;</span>)); <span class="comment">// 换行符</span></span></span><br><span class="line"><span class="language-javascript">    targetContainer.<span class="title function_">appendChild</span>(card);</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;[toc] toc card insert success.&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">createOutlineCard</span> = (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 只扫描正文里面的h2标题</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> h2Elements = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;article.fmt.text-break.text-wrap.mt-4 h2&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">if</span> (h2Elements.<span class="property">length</span> == <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> <span class="literal">null</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> card = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    card.<span class="property">className</span> = <span class="string">&#x27;card&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">  </span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> cardHeader = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    cardHeader.<span class="property">className</span> = <span class="string">&#x27;card-header&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    cardHeader.<span class="property">textContent</span> = <span class="string">&#x27;本文大纲&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    card.<span class="title function_">appendChild</span>(cardHeader);</span></span><br><span class="line"><span class="language-javascript">  </span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> listGroup = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    listGroup.<span class="property">className</span> = <span class="string">&#x27;list-group list-group-flush&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    card.<span class="title function_">appendChild</span>(listGroup);</span></span><br><span class="line"><span class="language-javascript">  </span></span><br><span class="line"><span class="language-javascript">    h2Elements.<span class="title function_">forEach</span>(<span class="function"><span class="params">h2</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> id = h2.<span class="property">id</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> text = h2.<span class="property">textContent</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> link = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;a&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        link.<span class="property">className</span> = <span class="string">&#x27;list-group-item list-group-item-action&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">        link.<span class="property">href</span> = <span class="string">`#<span class="subst">$&#123;id&#125;</span>`</span>;</span></span><br><span class="line"><span class="language-javascript">        link.<span class="property">textContent</span> = text;</span></span><br><span class="line"><span class="language-javascript">  </span></span><br><span class="line"><span class="language-javascript">        listGroup.<span class="title function_">appendChild</span>(link);</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">  </span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> card;</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>将这个代码片段放到站点管理-自定义代码中的页脚部分即可（一定要放页脚，不然不会生效）</p><p>最终的标题大纲效果如下，黑夜和白天模式都能正常支持，点击跳转也是正常的。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/12/bbabbe8a1cde225e5c89574e6bbe7f4d.png" alt="image.png"></p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/12/c8a11d6a444fa36161d5b381a4fdaa30.png" alt="image.png"></p><h3 id="4-3-底栏新增其他文字或链接"><a href="#4-3-底栏新增其他文字或链接" class="headerlink" title="4.3. 底栏新增其他文字或链接"></a>4.3. 底栏新增其他文字或链接</h3><p>answer没有提供直接自定义底部文字的选项，所以也需要js脚本对底栏进行代码注入。下面是一个示例，可以在底部注入一个带链接的文字。其他样式的文字大同小异，可以让GPT帮你写出来。只需要修改创建的元素类型就可以了。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 找到目标容器</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> container = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.py-3.container&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">if</span> (container) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 创建新的 &lt;p&gt; 元素</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> newParagraph = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;p&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        newParagraph.<span class="property">className</span> = <span class="string">&#x27;text-center mb-0 small text-secondary&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 创建超链接元素</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> link = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;a&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        link.<span class="property">href</span> = <span class="string">&#x27;https://example.com&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">        link.<span class="property">textContent</span> = <span class="string">&#x27;点击这里访问示例站点&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">        link.<span class="property">target</span> = <span class="string">&#x27;_blank&#x27;</span>; <span class="comment">// 在新标签页打开链接</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 将超链接加入到 &lt;p&gt; 元素中</span></span></span><br><span class="line"><span class="language-javascript">        newParagraph.<span class="title function_">appendChild</span>(link);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 在容器内部最后插入新段落</span></span></span><br><span class="line"><span class="language-javascript">        container.<span class="title function_">appendChild</span>(newParagraph);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果如下</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/12/9dcfa6d48771dd1e1fb999d564e53f05.png" alt="image.png"></p><h2 id="5-The-end"><a href="#5-The-end" class="headerlink" title="5. The end"></a>5. The end</h2><p>写这个文的主要目的还是分享一下部署的经验和我自己整出来的这个TOC栏的代码片段，感觉还是很有用的。如果帮到了你，可以在评论区吱一声，给慕雪来点鼓励，谢谢！</p><p>目前Answer其实已经算是非常好部署的一个论坛了，文档也很齐全，虽然部分文档还是英文的。</p><p>原本我想折腾flarum的，结果使用docker部署的flarum死活无法正常配置smtp。检查了好几遍，smtp的配置没填错，相同的smtp配置Answer能用，但是flarum不行，不知道是docker容器有问题还是我安装的有问题。后来觉得浪费了太多时间了，还是直接回避了这个问题，直接换了一个论坛，转到Answer上了。</p><p>如果关于本文有任何问题，欢迎在评论区一同讨论。</p>]]></content>
    
    
    <summary type="html">Docker安装Answer以及配置html代码片段</summary>
    
    
    
    <category term="编程学习" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="Docker真好玩" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/Docker%E7%9C%9F%E5%A5%BD%E7%8E%A9/"/>
    
    
    <category term="Docker" scheme="https://blog.musnow.top/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>【Mac】分享一个mac下自动提交hexo的脚本</title>
    <link href="https://blog.musnow.top/posts/4252209616/"/>
    <id>https://blog.musnow.top/posts/4252209616/</id>
    <published>2024-11-15T13:15:00.000Z</published>
    <updated>2024-11-14T23:44:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>先前在windows阵营的时候，我写了一个python的脚本，编译成了exe，来自动执行git三板斧的命令，push我的hexo博客修改到远端仓库，由vercel和netlify的cicd自动执行hexo部署操作。</p><p>在mac这边，由于终端本身是一个zsh，也有bash，所以我们可以直接编写一个bash脚本来处理这些事。</p><blockquote><p>win那边虽然也有bat脚本，但当时我的测试中发现bat脚本没有办法执行<code>hexo g</code>的操作，会在弹出终端之后立马停止执行，不清楚为何。</p></blockquote><p>在这里分享一下这个脚本，功能非常简单，就是本地先执行<code>hexo cl &amp;&amp; hexo g</code>的操作，再判断是否有新的变动，如果有，则提交到远端。</p><p>这里执行<code>hexo g</code>是因为我的博客使用了固定URL的插件，需要本地生成一个固定的URL的ID到MD文件的front-matter里面，再push到远端。如果直接push到远端，那么同一个MD文件在vercel或netlify可能会被生成出不同的固定ID，到时候博文链接就不一样了，不符合我们博客的使用预期。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">dir</span>=<span class="string">&quot;/Users/yangkeliu/data/hexo/blog&quot;</span></span><br><span class="line"><span class="comment"># 进入目标目录</span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$dir</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;[run] cd <span class="variable">$dir</span>&quot;</span> </span><br><span class="line"><span class="comment"># 生成id</span></span><br><span class="line">hexo cl &amp;&amp; hexo g --d;</span><br><span class="line"><span class="built_in">sleep</span> 1;</span><br><span class="line"><span class="comment"># 提交git仓库</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;[run] begin git push&quot;</span>;</span><br><span class="line"><span class="comment"># 检查是否有内容需要提交</span></span><br><span class="line"><span class="keyword">if</span> [[ -n $(git status --porcelain) ]]; <span class="keyword">then</span></span><br><span class="line">    <span class="comment"># 获取当前日期时间</span></span><br><span class="line">    current_time=$(<span class="built_in">date</span> <span class="string">&quot;+%Y-%m-%d %H:%M:%S&quot;</span>)</span><br><span class="line">    commit_msg=<span class="string">&quot;auto update at <span class="variable">$&#123;current_time&#125;</span>&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;[run] <span class="variable">$current_time</span>&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;[run] <span class="variable">$commit_msg</span>&quot;</span></span><br><span class="line">    git add --all;</span><br><span class="line">    git commit -m <span class="string">&quot;<span class="variable">$commit_msg</span>&quot;</span>;</span><br><span class="line">    git push;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;[run] success push to remote&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;[run] nothing to commit&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;[run] end git push&quot;</span>;</span><br></pre></td></tr></table></figure><p>当没有可提交信息的时候，脚本不会执行git add等操作，只有有提交信息的时候才会自动提交。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/11/757eb68fbbd9e1e3419a021a2e9c02dc.png" alt="image.png"></p><p>关于此脚本，有任何问题，欢迎在评论区提出。</p>]]></content>
    
    
    <summary type="html">分享一个mac下自动提交hexo的脚本</summary>
    
    
    
    <category term="差生文具多" scheme="https://blog.musnow.top/categories/%E5%B7%AE%E7%94%9F%E6%96%87%E5%85%B7%E5%A4%9A/"/>
    
    <category term="电脑使用小贴士" scheme="https://blog.musnow.top/categories/%E5%B7%AE%E7%94%9F%E6%96%87%E5%85%B7%E5%A4%9A/%E7%94%B5%E8%84%91%E4%BD%BF%E7%94%A8%E5%B0%8F%E8%B4%B4%E5%A3%AB/"/>
    
    
    <category term="博客建站" scheme="https://blog.musnow.top/tags/%E5%8D%9A%E5%AE%A2%E5%BB%BA%E7%AB%99/"/>
    
    <category term="Hexo" scheme="https://blog.musnow.top/tags/Hexo/"/>
    
    <category term="macbook" scheme="https://blog.musnow.top/tags/macbook/"/>
    
  </entry>
  
  <entry>
    <title>【Mac】使用AIDente限制mac最大充电电量</title>
    <link href="https://blog.musnow.top/posts/3646407477/"/>
    <id>https://blog.musnow.top/posts/3646407477/</id>
    <published>2024-11-14T13:15:00.000Z</published>
    <updated>2024-11-15T11:13:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>使用AIDente限制mac最大充电电量。</p><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>嗨嗨嗨，作为一个windows的多年钉子户，也算是用上mac了。只可惜买了没过多久就出M4的mac了，M3的mba直接打折1000元，血亏！不过早买早享受，不管这个了，再在乎也退不了差价ಥ_ಥ</p><p>回到本文的主题，如何限制mac的最大充电电量。</p><ul><li>为什么需要限制？</li></ul><p>虽然mac的续航嘎嘎好，<strong>但绝大部分场景我都是插电（当台式）使用</strong>，此时电池会被100%充满，对电池的健康度不太友好。如果你了解过数码产品，应该知道一个概念，电池在20%到80%的区间是对电池的寿命是最友好的。</p><p>mac本身自带了一个充电习惯的系统设置，描述是能自学习时候用习惯，延缓充到大于80%的电量的时间，但实际上它依旧会把电池的电量完全充满，鬼知道它这所谓的“自学习”到底学了个什么。还不如直接系统提供个选项限制电池最大充电到80%，但万恶的苹果肯定不会出这个功能的，不然还推销他们金子一般的售后？</p><p>咳咳，不跑题了，苹果官方没有这个功能，但是有一个开源软件能实现这个机制，这就是本文的主角AIDente。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/11/629b18b0de0ab799b3e865751b68f56f.png" alt="image.png"></p><h2 id="下载AIDente"><a href="#下载AIDente" class="headerlink" title="下载AIDente"></a>下载AIDente</h2><p>在Github下载软件：<a href="https://github.com/AppHouseKitchen/AlDente-Charge-Limiter/releases">https://github.com/AppHouseKitchen/AlDente-Charge-Limiter/releases</a></p><p>直接下载最新版本的dmg安装包就可以了。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/11/cb7e24b3c70bd47cd768a2e23ca2ea3e.png" alt="image.png"></p><p>下载好了之后，双击dmg打开，将软件图标拖动到application里面，就是安装好软件了。这个是mac上安装软件的常用操作，此处不再赘述。</p><p>题外话：这也是mac和win上安装软件差距比较大的一点，绝大部分mac软件都是用这种拖动到application的方式来安装，不会给你多少选项让你自定义安装方式。而windows上基本都会有一个安装的过程。</p><p>这两种软件安装方式说不上孰优孰劣，个人感觉对于不太会使用电脑的小白，mac这种不给任何选项都反而是个好的方式，免得小白把软件的安装路径到处乱放。隔壁windows甚至会出现小白乱丢软件安装路径，导致D盘被某些不做卸载控制的软件“格式化”的离谱情况。</p><h2 id="使用AIDente"><a href="#使用AIDente" class="headerlink" title="使用AIDente"></a>使用AIDente</h2><p>软件的使用比较简单，首先在最开始的引导中，会提示安装一个辅助软件，输入电脑解锁密码确定就可以了。然后会提示你关闭系统自带的电池健康管理功能，开关是在<code>设置-电池-电池健康旁边的i图标-优化电池充电</code>，需要将系统的这个功能关闭。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/11/8bd0056a7e4b7027b3fbd7cf7dd145c9.png" alt="image.png"></p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/11/4c0a9e02ed814942451bcce6b5a5a6dd.png" alt="image.png"></p><p>随后软件会弹出一个选择框，问你主要使用场景是移动还是居家，说白了就是当台式用还是经常要带着走。讲道理，如果你经常需要带mac出门，其实没必要安装这个软件。</p><p>选择居家场景之后，默认会设置电池充电阈值为70%，确定之后，顶部状态栏会出现一个图标。点击它就可以进入AIDente的设置界面，我手动将阈值限制改到了75%</p><p>这里的放电模式就是让mac认为自己不在充电，此时即便插了充电器也不会充电。因为安装软件之前我都mac电量是100%，所以我开启了放电模式将其电量放到75%</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/11/00e944536999431979381e061d9b8d7b.png" alt="image.png"></p><p>电池电量放到75之后，会自动关闭放电模式。此时电池已经不会继续往上充电了，而且会显示当前使用的是电源适配器供电，电池没有在充电，限制成功。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/11/1ca0b6e930ba64420050f81032319356.png" alt="image.png"></p><p>这个软件的充电限制依赖于软件始终启动，代价就是状态栏上始终都会有一个AIDente的图标，对于mac这个刘海而言，状态栏上能放到图标实在是少。</p><p>AIDente软件目前有内购PRO版本，目前的价格是25美元买断（太贵啦）。如果你不想内购，可以下载学习版本。比如我找到的学习版本<code>1.28.5</code>中，AIDente的<code>外观选项-图标样式</code>选项可以选择为“不显示”，此时状态栏的图标就会消失。好诶！</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/11/cbd5b322d0fce29a560f984d7467420a.png" alt="image.png"></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>作为一个从来没有用过mac的windows用户，更换这台macbook air算是我对另外一套PC生态系统的初次涉猎，毕竟只有用过了才知道好不好。别的暂且不提，至少mac续航是嘎嘎强了，这也是mac一直以来的最大优势。</p><p>根据我用<strong>腾讯会议</strong>的<strong>单人会议</strong>测试，我原先的win笔记本（CPU为7840HS，电池70wh，纯核显）只能在腾讯会议开启摄像头+摄像头虚拟背景+屏幕分享+麦克风+WPS码字的场景下坚持168min，而这台m3的mba能坚持325min，将近两倍的续航成绩了，完全不能比的。</p><p>你可能会说腾讯会议168min好像也很够用了，但这只是一个WPS码字的场景，实际会议场景可能涉及到给其他人演示PPT、给其他人播放素材视频、面试的时候共享个人项目的演示、面试的时候手撕算法题等等复杂的操作，届时windows的续航会骤降，如果微软阿三正好在你的后台抽烟准备升级系统的话，那更是自求多福了。</p><blockquote><p>我在一次腾讯会议过程中被我的windows笔记本坑了，<strong>会议进行到一半电脑直接没电关机了</strong>……这便是促使我更换macbook的最直接原因。别问为啥不插电，我这边目前的使用场景就是没有地方充电的，这也是为啥我有这个需求🥲</p></blockquote><p>个人观点，对于程序员而言，除非需要编写mac或者ios的原生应用，否则mac在编程方面对于拥有wsl2的windows而言并没有显著的优势。更别提mac上面金子一样的运行内存会显著限制某些多开场景的表现。</p><p>如果你对笔记本电脑的续航并没有非常苛刻的要求，<strong>个人还是更推荐购买windows笔记本</strong>。intel那边新出的ultra2代笔电cpu的能效比提升也非常大，至少从理论续航测试上已经和mac能碰一碰了，可以看看后续购买用户的使用体验，再考虑是选购win还是mac。</p><p>不过，这都是选购电脑之前要考虑的事情了。至少目前，这台m3的mba对我的使用和学习场景而言性能都是够用的。我希望这台mac自己能用很多年，终结我的把笔电换来换去的折腾史。</p><p>让我比较意外的一点是，mac上安装了win11 arm的虚拟机后，竟然可以直接安装绝大部分x86的windows软件（我之前一直以为不行），就连我收藏的一些特别冷门的windows软件都能直接在虚拟机里面装上去使用，还可以安装地表最强C&#x2F;C++编译器VS2022，还是很爽的。</p><p>后续也会在寒舍上分享更多mac的使用体验和吐槽，欢迎大家关注，感谢支持。</p>]]></content>
    
    
    <summary type="html">使用AIDente限制mac最大充电电量</summary>
    
    
    
    <category term="差生文具多" scheme="https://blog.musnow.top/categories/%E5%B7%AE%E7%94%9F%E6%96%87%E5%85%B7%E5%A4%9A/"/>
    
    <category term="电脑使用小贴士" scheme="https://blog.musnow.top/categories/%E5%B7%AE%E7%94%9F%E6%96%87%E5%85%B7%E5%A4%9A/%E7%94%B5%E8%84%91%E4%BD%BF%E7%94%A8%E5%B0%8F%E8%B4%B4%E5%A3%AB/"/>
    
    
    <category term="macbook" scheme="https://blog.musnow.top/tags/macbook/"/>
    
  </entry>
  
  <entry>
    <title>【Linux】如何将一个命令要求的输入通过管道传递？</title>
    <link href="https://blog.musnow.top/posts/2620921861/"/>
    <id>https://blog.musnow.top/posts/2620921861/</id>
    <published>2024-11-06T13:46:11.000Z</published>
    <updated>2024-11-10T05:24:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>如何将一个命令要求的输入通过管道传递？</p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>直接来举个例子说明问题吧，假设我有一个test.sh脚本，运行它会出现下面的输出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; sh test.sh</span><br><span class="line">Pls make sure you want to run this scripts [y|n]</span><br></pre></td></tr></table></figure><p>这个脚本希望我们确认当前的操作，输入y表示同意，输入n或者其他字符都表示退出。</p><p>此时如果是人工正常执行，我们输入y就可以继续往后了。但如果我们是使用某些cicd工具（比如jenkins）去自动化执行这个脚本呢？此时就没有办法有用户去做这个输入的操作了。</p><p>但我们又想自动化运行test.sh脚本，咋办？</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>解决方案就是使用linux下的命令行管道<code>|</code>，比如test.sh要求输入y来确认，我们就可以这样写</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> y | sh test.sh</span><br></pre></td></tr></table></figure><p>此时y会被自动当作test.sh脚本的输入，即跳过了要求用户输入来确认的步骤，会直接往后执行。</p><p>这个方式适用于很多命令行执行，不希望有用户输入导致阻塞等待的脚本。</p><p>还有一个常用的命令就是切换linux下的用户，默认情况下使用的命令是<code>sudo -u 用户 执行的命令</code>来以另外一个用户的身份执行某个命令，这个操作会要求我们输入目标用户的密码，此时可以用如下方式来替代，新增的<code>-S</code>选项代表<code>sudo -u</code>将从stdin里面提取用户密码。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> 用户密码 | sudo -u 用户名 -S 需要执行的命令</span><br></pre></td></tr></table></figure><p>可以使用whami命令来测试这个命令的效果，如果执行成功，whami应该显示另外一个用户的名字，而不是当前执行该命令的用户。</p>]]></content>
    
    
    <summary type="html">如何将一个命令要求的输入通过管道传递？</summary>
    
    
    
    <category term="编程学习" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="Linux" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/Linux/"/>
    
    
    <category term="Linux" scheme="https://blog.musnow.top/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>【Python】从peewee切换到tortoise-orm异步orm库</title>
    <link href="https://blog.musnow.top/posts/1547470773/"/>
    <id>https://blog.musnow.top/posts/1547470773/</id>
    <published>2024-10-23T22:58:58.000Z</published>
    <updated>2025-01-06T01:29:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>从peewee切换到tortoise-orm异步orm库的过程记录，主要为tortoise-orm的使用记录。</p><h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><p>慕雪之前编写的很多kook平台的机器人都是基于python的异步框架khl.py的，关于khl.py可以去wiki网站<a href="https://khl-py.eu.org/">khl-py.eu.org</a>上了解一下，作为一个对接kook平台的sdk，khl.py易用性还不错，上手也很容易。</p><p>最开始，我的机器人都是直接使用json文件作为“数据库”的，可以和python的dict直接对接，效果其实还不错，但数据到了一定量级之后，json文件写入硬盘的时候（因为json无法实现实时保存）经常会出现异常情况，比如断头了或者断尾了，此时数据就损坏了。</p><p>于是我开始切换成真正的数据库MySQL。最开始用的是pymysql， 这个库是一个很基础的mysql链接库，需要手写sql进行操作。后来发现这样弄太麻烦了，于是切换成了orm库peewee。orm库的作用就是将数据库的表以数据结构的形式展现在编程语言中，我们使用预先封装好的函数和这些数据结构进行操作，由orm库将这些操作转成对应的sql，再去操作数据库。</p><p>使用peewee之后是方便了非常多，但还有一个问题，khl.py是异步的库，而peewee不是。在先前，我的所有操作都是查询、插入、更新这些简单的操作，每次都是只涉及一张表的，问题还不算很大。但在我的商店机器人中，购买商品的时候就涉及到了多个数据库，此时就需要引入事务了。而peewee无法在异步上下文中依照预期处理事务。</p><p>比如商店机器人的购买操作涉及到发起购买、扣钱、给出奖励、插入购买记录四个操作。其中有两个操作涉及到了数据库。在之前经常会出现扣了钱之后，机器人无法自动给出奖励的情况（奖励是给用户上一个kook的角色）。此时就变成了用户钱扣了但是没拿到货了，很是尴尬。</p><blockquote><p>这里扣的“钱”是机器人记录的虚拟金币，不是真的钱。</p></blockquote><p>虽然我可以将这四个步骤的顺序改成购买、给出奖励、扣钱、插入购买记录，但是这样也可能会有问题，万一扣钱失败了，那不就等于白送人家了？而且还不容易被用户发现自己钱没扣。所以，最好的方式还是给这种情况上一个事务，保证用户的钱扣了，东西也能给到用户，最终正常插入购买记录。</p><p>在同步的上下文中，这个流程如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">收到请求</span><br><span class="line">事务开启</span><br><span class="line">扣钱</span><br><span class="line">给出奖励</span><br><span class="line">插入购买记录</span><br><span class="line">事务结束</span><br><span class="line">发送购买成功消息给用户</span><br></pre></td></tr></table></figure><p>但是在异步上下文中，这个流程会有变化，假设A和B是两个异步上下文（协程）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">A 收到用户丁的请求</span><br><span class="line">A 事务开启</span><br><span class="line">A 用户丁：扣钱</span><br><span class="line">B 异步切换：另外一个用户甲扣除了200金币</span><br><span class="line">A 用户丁：给出奖励</span><br><span class="line">B 异步切换：另外一个用户乙获得了300金币</span><br><span class="line">A 用户丁：插入购买记录</span><br><span class="line">A 事务结束</span><br></pre></td></tr></table></figure><p>此时我们A提交的事务，虽然我们想达成的目标是让其只和A异步上下文做过的事情有关系， 但在异步切换了之后，<strong>如果A操作的这个事务被回滚，B做的操作也会被回滚</strong>，这就不符合我们的预期了。因为A和B异步上下文做的操作之间没有任何关系（独立操作），事务回滚其他协程的操作，不符合数据一致性。</p><blockquote><p>如果用协程不好理解，可以直接用进程来解释。假设有两个进程都在和数据库操作，进程N开启了事务进行操作，进程M没有开启事务。此时进程N出现了问题，事务需要回滚，如果进程N开启的事务<strong>回滚了进程M对数据库的操作</strong>，那肯定是不符合我们预期的。</p></blockquote><p>所以，我需要将不支持异步上下文的orm库peewee更改为原生支持异步上下文的tortoise-orm，才能在异步场景中正常处理事务，避免出现上文所述情况，保证数据一致性。</p><h2 id="安装tortiose-orm"><a href="#安装tortiose-orm" class="headerlink" title="安装tortiose-orm"></a>安装tortiose-orm</h2><p>安装方式很简单，用pip安装就行了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install tortoise-orm</span><br></pre></td></tr></table></figure><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><h3 id="创建数据库和表"><a href="#创建数据库和表" class="headerlink" title="创建数据库和表"></a>创建数据库和表</h3><p>以mysql和sqlite3为例，tortoise-orm使用的是数据库连接字符串来连接目标数据库的。所以可以初始化如下。这里的config是从一个json配置文件中读取出来的，连接字符串的每个部分可以通过config的key看出来是什么内容。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 数据库连接配置</span></span><br><span class="line">db_config = &#123;</span><br><span class="line">    <span class="string">&#x27;connections&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;default&#x27;</span>: </span><br><span class="line">        <span class="string">f&quot;mysql://<span class="subst">&#123;config[<span class="string">&#x27;sql&#x27;</span>][<span class="string">&#x27;user&#x27;</span>]&#125;</span>:<span class="subst">&#123;config[<span class="string">&#x27;sql&#x27;</span>][<span class="string">&#x27;password&#x27;</span>]&#125;</span>@<span class="subst">&#123;config[<span class="string">&#x27;sql&#x27;</span>][<span class="string">&#x27;host&#x27;</span>]&#125;</span>:<span class="subst">&#123;config[<span class="string">&#x27;sql&#x27;</span>][<span class="string">&#x27;port&#x27;</span>]&#125;</span>/<span class="subst">&#123;config[<span class="string">&#x27;sql&#x27;</span>][<span class="string">&#x27;database&#x27;</span>]&#125;</span>&quot;</span></span><br><span class="line">        <span class="keyword">if</span> config[<span class="string">&#x27;sql&#x27;</span>][<span class="string">&#x27;type&#x27;</span>] == <span class="string">&#x27;mysql&#x27;</span> </span><br><span class="line">        <span class="keyword">else</span> <span class="string">f&quot;sqlite://<span class="subst">&#123;config[<span class="string">&#x27;sql&#x27;</span>][<span class="string">&#x27;database&#x27;</span>]&#125;</span>.db&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&#x27;apps&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;models&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;models&#x27;</span>: [<span class="string">&#x27;__main__&#x27;</span>],</span><br><span class="line">            <span class="string">&#x27;default_connection&#x27;</span>: <span class="string">&#x27;default&#x27;</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，数据库连接配置中的<code>&#39;models&#39;: [&#39;__main__&#39;]</code>指定了数据库定义文件的模组位置，需要修改为你定义了你的表结构的文件名字。比如你的表对应的类结构是在<code>utils/data.py</code>里面配置的，这里也需要对应修改models字段，在列表中添加<code>&#39;utils.data&#39;</code>，否则会出现如下异常错误。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tortoise.exceptions.ConfigurationError: default_connection <span class="keyword">for</span> the model &lt;<span class="keyword">class</span> <span class="string">&#x27;utils.data.Types.RollLog&#x27;</span>&gt; cannot be <span class="literal">None</span></span><br></pre></td></tr></table></figure><p>配制好了这个config之后，使用如下方式创建数据库和表。注意，调用下面这个函数之前，要保证表的类已经被注册了，否则自然是无法创建的。</p><p>因为tortoise-orm是一个异步的库，所以所有操作都需要在async函数下用await执行。tortoise-orm中有一个<code>run_async</code>函数，可以直接在同步上下文中运行async函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> tortoise <span class="keyword">import</span> Tortoise, run_async</span><br><span class="line"><span class="comment"># 对其他表类进行声明</span></span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line"><span class="comment"># 声明结束后调用下面的函数</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">tortoise_init_db</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;初始化数据库&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">await</span> Tortoise.init(</span><br><span class="line">        db_url=db_config[<span class="string">&#x27;connections&#x27;</span>][<span class="string">&#x27;default&#x27;</span>],  <span class="comment"># 数据库连接URL</span></span><br><span class="line">        modules=&#123;<span class="string">&#x27;models&#x27;</span>: db_config[<span class="string">&#x27;apps&#x27;</span>][<span class="string">&#x27;models&#x27;</span>][<span class="string">&#x27;models&#x27;</span>]&#125;  <span class="comment"># 模型模块</span></span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">await</span> Tortoise.generate_schemas() <span class="comment"># 建表</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行</span></span><br><span class="line">run_async(tortoise_init_db())</span><br></pre></td></tr></table></figure><p>表的注册方式如下，需要继承model类，然后通过fields来定义每一个字段。类中需要有一个子类Meta，标注这个表的表名和唯一键约束，这样就ok了。具体的字段类型可以通过代码补全在fields的成员中看一下，和数据库的字段类型基本都是对的上的，问题不大。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> tortoise <span class="keyword">import</span> fields</span><br><span class="line"><span class="keyword">from</span> tortoise.models <span class="keyword">import</span> Model</span><br><span class="line"><span class="keyword">from</span> tortoise <span class="keyword">import</span> Tortoise</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserLog</span>(<span class="title class_ inherited__">Model</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;用户信息存放&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">id</span> = fields.IntField(pk=<span class="literal">True</span>)</span><br><span class="line">    guild_id = fields.CharField(max_length=<span class="number">24</span>, null=<span class="literal">False</span>)</span><br><span class="line">    user_id = fields.CharField(max_length=<span class="number">12</span>, null=<span class="literal">False</span>)</span><br><span class="line">    coin_num = fields.IntField(default=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        table = <span class="string">&quot;userlog&quot;</span></span><br><span class="line">        unique_together = ((<span class="string">&quot;guild_id&quot;</span>, <span class="string">&quot;user_id&quot;</span>),)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">str</span>(self.__dict__)</span><br></pre></td></tr></table></figure><p>备注：做CRUD操作的时候，orm库一般都会自动为我们提交事务，插入数据到数据库中，不需要手动commit了。</p><h3 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h3><p>使用get函数，传入对应参数，即可获取到数据。不存在时会抛出<code>DoesNotExist</code>异常。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user_log = <span class="keyword">await</span> UserLog.get(guild_id=guild_id, user_id=user_id)</span><br></pre></td></tr></table></figure><p>如果不想让他抛出异常，可以使用<code>get_or_none</code>函数来替代，找不到数据的时候会返回None。</p><h3 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h3><p>插入数据的方式如下，使用create函数即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user_log = <span class="keyword">await</span> UserLog.create(guild_id=guild_id, user_id=user_id, coin_num=coin_num)</span><br></pre></td></tr></table></figure><p>还可以使用<code>get_or_create</code>函数，当数据不存在的时候创建，数据存在的时候获取。这样就避免了我们手动查询一下数据是否存在再去插入或者获取的麻烦。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">user_log,status = <span class="keyword">await</span> UserLog.get_or_create(</span><br><span class="line">guild_id=<span class="string">&quot;3566823018281801&quot;</span>,</span><br><span class="line">user_id=<span class="string">&quot;1000017244&quot;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>这个函数有两个返回值，第一个返回值是一个UserLog对象，第二个返回值是一个bool值，代表是否执行了create操作。如果数据库中已有该数据，则返回为False；不存在该数据，会插入新数据并返回True。</p><h3 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h3><p>更新数据的方式和peewee类似，都是使用对象的save函数，只是tortoise-orm的save函数需要用await执行而已。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">user_log = <span class="keyword">await</span> UserLog.get(guild_id=guild_id, user_id=user_id)</span><br><span class="line">user_log.coin_num = new_coin_num</span><br><span class="line"><span class="keyword">await</span> user_log.save()  <span class="comment"># 保存修改</span></span><br></pre></td></tr></table></figure><p>如上方式是更新单个数据，如果更新多个数据，可以使用如下方式。filter中传入的是过滤字段，即sql中where的部分；update传入的是需要更新的数据。最终返回值是更新了多少条记录。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ret = <span class="keyword">await</span> UserLog.<span class="built_in">filter</span>(guild_id=guild_id).update(coin_num=<span class="number">100</span>)</span><br></pre></td></tr></table></figure><h3 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h3><p>删除数据使用的是delete函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">user_log = <span class="keyword">await</span> UserLog.get(guild_id=guild_id, user_id=user_id)</span><br><span class="line"><span class="keyword">await</span> user_log.delete()</span><br></pre></td></tr></table></figure><h3 id="手动处理事务"><a href="#手动处理事务" class="headerlink" title="手动处理事务"></a>手动处理事务</h3><p>前文提到了异步上下文中的事务，使用方式如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> tortoise.transactions <span class="keyword">import</span> in_transaction</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">manual_transaction_func</span>():</span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> in_transaction() <span class="keyword">as</span> connection:</span><br><span class="line">        user_log = <span class="keyword">await</span> UserLog.create(guild_id=<span class="string">&quot;123&quot;</span>, user_id=<span class="string">&quot;789&quot;</span>, coin_num=<span class="number">50</span>, using_db=connection)</span><br><span class="line">        user_log.coin_num = <span class="number">200</span></span><br><span class="line">        <span class="keyword">await</span> user_log.save(using_db=connection)</span><br></pre></td></tr></table></figure><p>在async with结构体中的所有数据库操作都会被自动提交或者回滚。</p><h3 id="执行sql"><a href="#执行sql" class="headerlink" title="执行sql"></a>执行sql</h3><p>tortoise-orm也支持取出数据库连接，直接执行sql语句。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">conn = Tortoise.get_connection(<span class="string">&quot;default&quot;</span>)</span><br><span class="line"><span class="keyword">await</span> conn.execute_script(<span class="string">f&quot;&quot;&quot;执行多条sql&quot;&quot;&quot;</span>)</span><br><span class="line"><span class="keyword">await</span> conn.execute_query(<span class="string">&quot;执行单条sql&quot;</span>)</span><br></pre></td></tr></table></figure><p>如果有需要，可以用这种方式来执行sql。</p><h2 id="和peewee的差别"><a href="#和peewee的差别" class="headerlink" title="和peewee的差别"></a>和peewee的差别</h2><p>这两个orm库在CRUD这方面的差距主要为函数方面，peewee在插入的时候是直接通过类名的构造函数创建出一个对象，然后使用save方式插入到数据库中。而tortoise-orm提供了get、create、update等方法来直接插入或者更新数据。不过peewee创建对象的方式在tortoise-orm中也支持。</p><p>另外，在查询的时候，peewee的名称是select，tortoise-orm的名字是filter。</p><p>其他方面的差距就不大了，遇到其他巨大差异的时候再来此处记录。</p><p>这两个库最大的差距还是tortoise-orm支持异步场景下的事务，这个挺重要的，上文的场景已经提到过为什么我需要一个异步的事务支持了。</p><p>还需要注意的是，tortoise-orm库支持了异步await的save操作之后，就更容易出现由于协程并发导致的数据不一致的问题。此时可以用如下方式打开tortoise-orm的日志，进行问题定位。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置日志格式和级别</span></span><br><span class="line">logging.basicConfig(level=logging.DEBUG)</span><br><span class="line"><span class="comment"># 设置 tortoise 和 SQLAlchemy 的日志级别</span></span><br><span class="line">logging.getLogger(<span class="string">&quot;tortoise&quot;</span>).setLevel(logging.DEBUG)</span><br><span class="line">logging.getLogger(<span class="string">&quot;db_client&quot;</span>).setLevel(logging.DEBUG)</span><br></pre></td></tr></table></figure><p>解决异步数据冲突的问题，可以在save的时候提供<code>update_fields</code>参数（一个str的列表），手动指定需要更新的数据列，减少当前save操作和其他协程中的save操作出现的字段冲突，如果两个save函数调用操作的不是相同的字段，那么冲突就会大幅减少，sql执行效率也会增加。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">await</span> obj.save(update_fields=[<span class="string">&#x27;列1&#x27;</span>,<span class="string">&#x27;列2&#x27;</span>])</span><br></pre></td></tr></table></figure><p>举个简单的例子，直接调用save函数，orm会执行全列更新，即将当前对象的所有字段都写入update语句中。比如下面这个update语句（开启debug日志后可以看到）</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/10/054fbef7d84d0cc6b6f63a32db6942e7.png" alt="image.png"></p><p>但我们指定了需要更新的列的时候，orm就可以直接通过主键来更新对应列，此时sql执行效率就更高了。如下所示，我指定了更新<code>coin_num</code>字段，此时直接通过主键更新单一列，执行效率肯定是更高的，和其他save操作的冲突也会更小。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/10/a0bc548d9e03de576177546fcb93f094.png" alt="image.png"></p><h2 id="The-end"><a href="#The-end" class="headerlink" title="The end"></a>The end</h2><p>对tortoise-orm的基本介绍到这里就结束啦，好久没写博客了（主要是不知道写啥）。避免大家以为我“挂了”，水一篇文章吧（手动狗头）。搞得好像真的有人看我的博客一样。</p>]]></content>
    
    
    <summary type="html">从peewee切换到tortoise-orm异步orm库的过程记录</summary>
    
    
    
    <category term="编程学习" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="Python" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/Python/"/>
    
    
    <category term="Python" scheme="https://blog.musnow.top/tags/Python/"/>
    
    <category term="Kook" scheme="https://blog.musnow.top/tags/Kook/"/>
    
    <category term="mysql" scheme="https://blog.musnow.top/tags/mysql/"/>
    
    <category term="sqlite3" scheme="https://blog.musnow.top/tags/sqlite3/"/>
    
  </entry>
  
  <entry>
    <title>【Hexo】通过hexo-hide-posts插件隐藏文章</title>
    <link href="https://blog.musnow.top/posts/368684172/"/>
    <id>https://blog.musnow.top/posts/368684172/</id>
    <published>2024-09-21T02:24:23.000Z</published>
    <updated>2025-01-20T09:15:40.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>有的时候，一些文章我们可能没有撰写完成，或者说严重过时了，考虑将其删除，但却又不确定是否要删除。此时就可以使用<code>hexo-hide-posts</code>插件来屏蔽这个文章。</p><p>被屏蔽的文章在归档、tag、首页、文章列表、sitemap中都不会出现，也不会被搜索引擎索引（前提是搜索引擎遵守no-index约定）。但如果你知道该文章的URL，则依旧能访问这篇文章。<strong>文章不会展示到文章列表中，但文章本身还是存在的</strong>。</p><p>插件github页面：<a href="https://github.com/prinsss/hexo-hide-posts">https://github.com/prinsss/hexo-hide-posts</a>；</p><h2 id="安装和配置"><a href="#安装和配置" class="headerlink" title="安装和配置"></a>安装和配置</h2><p>在hexo站点配置目录下，用如下命令安装该插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-hide-posts --save</span><br></pre></td></tr></table></figure><p>安装完毕后，在hexo的配置文件<code>_config.yml</code>中进行初始化配置，注意不是主题的配置文件。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">hide_posts:</span></span><br><span class="line">  <span class="comment"># 是否启用 hexo-hide-posts</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 隐藏文章的 front-matter 标识，也可以改成其他你喜欢的名字</span></span><br><span class="line">  <span class="attr">filter:</span> <span class="string">hidden</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 为隐藏的文章添加 noindex meta 标签，阻止搜索引擎收录</span></span><br><span class="line">  <span class="attr">noindex:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 设置白名单，白名单中的 generator 可以访问隐藏文章</span></span><br><span class="line">  <span class="comment"># 常见的 generators 有：index, tag, category, archive, sitemap, feed, etc.</span></span><br><span class="line">  <span class="comment"># allowlist_generators: []</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 设置黑名单，黑名单中的 generator 不可以访问隐藏文章</span></span><br><span class="line">  <span class="comment"># 如果同时设置了黑名单和白名单，白名单的优先级更高</span></span><br><span class="line">  <span class="comment"># blocklist_generators: [&#x27;*&#x27;]</span></span><br></pre></td></tr></table></figure><p>添加了这个配置后，在需要隐藏的文章的font-matter里面添加<code>hidden: true</code>就可以启用该功能。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: &#x27;Hidden Post&#x27;</span><br><span class="line">date: &#x27;2021/03/05 21:45:14&#x27;</span><br><span class="line"><span class="section">hidden: true</span></span><br><span class="line"><span class="section">---</span></span><br><span class="line"></span><br><span class="line">content...</span><br></pre></td></tr></table></figure><p>在hexo配置目录下可以使用<code>hexo hidden:list</code>命令列出所有被隐藏的文章。</p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>本站的C++哈希博客我始终没有抽出时间去完成撰写，因为哈希相关的数据概念我已经很熟悉了，也没有相关去重新学习和记录。为了避免这篇写了一半的文章对后来的读者造成困扰，将其隐藏。</p><p>修改之前，搜索框里面能搜到这篇文章</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/09/b45357059239c8950f27ef13d94552d2.png" alt="image.png"></p><p>添加了隐藏之后，这篇哈希的文章就找不到了（该文章发布日期是2022年9月20日）在归档和分类目录中看不到该文。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/09/1facd6cd610e3521c12cf43cb9355593.png" alt="image.png"></p><p>在sitemap.xml里面也搜索不到这篇文章的链接。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/09/c85ab9ad3e8b582550895844a8cbe2b9.png" alt="image.png"></p><p>这样配置就成功啦！</p>]]></content>
    
    
    <summary type="html">hexo博客通过hexo-hide-posts插件隐藏文章</summary>
    
    
    
    <category term="差生文具多" scheme="https://blog.musnow.top/categories/%E5%B7%AE%E7%94%9F%E6%96%87%E5%85%B7%E5%A4%9A/"/>
    
    <category term="博客建站" scheme="https://blog.musnow.top/categories/%E5%B7%AE%E7%94%9F%E6%96%87%E5%85%B7%E5%A4%9A/%E5%8D%9A%E5%AE%A2%E5%BB%BA%E7%AB%99/"/>
    
    
    <category term="博客建站" scheme="https://blog.musnow.top/tags/%E5%8D%9A%E5%AE%A2%E5%BB%BA%E7%AB%99/"/>
    
    <category term="Hexo" scheme="https://blog.musnow.top/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>【思源】思源笔记代码片段收集</title>
    <link href="https://blog.musnow.top/posts/612440692/"/>
    <id>https://blog.musnow.top/posts/612440692/</id>
    <published>2024-09-12T11:03:37.000Z</published>
    <updated>2025-01-19T00:52:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>在论坛上收集的有效的思源代码片段，思源笔记版本v3.1.3。</p><p>在思源笔记<code>设置-外观-代码片段</code>中添加CSS或者JS代码片段并启用即可。</p><h2 id="1-CSS-表格宽度自适应"><a href="#1-CSS-表格宽度自适应" class="headerlink" title="1. CSS.表格宽度自适应"></a>1. CSS.表格宽度自适应</h2><p>使用如下代码块可以让表格自适应宽度（自动换行） </p><p>来源: <a href="https://ld246.com/article/1726116689636/comment/1726126776087#comments">https://ld246.com/article/1726116689636/comment/1726126776087#comments</a>；</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 表格宽度自适应 */</span></span><br><span class="line"><span class="selector-class">.b3-typography</span> <span class="selector-tag">table</span>, <span class="selector-class">.protyle-wysiwyg</span> <span class="selector-tag">table</span> &#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">display</span>: table;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>添加前，表格超长后需要滚动才能看到后续内容</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/09/2169a3e87f8300792804cbc39588f11a.png" alt="image.png"></p><p>添加后，宽度自适应，无需滚动</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/09/9b39e59e95015fb7b581b320ca430f14.png" alt="image.png"></p><h2 id="2-CSS-代码块MAC美化"><a href="#2-CSS-代码块MAC美化" class="headerlink" title="2. CSS.代码块MAC美化"></a>2. CSS.代码块MAC美化</h2><p>默认情况下思源的代码块和其他块的差距没有那么明显，这里给出CSS片段，可以在不安装代码块美化插件的情况下直接让你的代码块变成MAC样式。</p><p>来源：<a href="https://ld246.com/article/1715315635131">https://ld246.com/article/1715315635131</a>；</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line">pre <span class="selector-tag">code</span><span class="selector-class">.hljs</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">overflow-x</span>: auto;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">1em</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">code</span><span class="selector-class">.hljs</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">3px</span> <span class="number">5px</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.hljs-comment</span>,</span><br><span class="line"><span class="selector-class">.hljs-quote</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#969896</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.hljs-deletion</span>,</span><br><span class="line"><span class="selector-class">.hljs-name</span>,</span><br><span class="line"><span class="selector-class">.hljs-regexp</span>,</span><br><span class="line"><span class="selector-class">.hljs-selector-class</span>,</span><br><span class="line"><span class="selector-class">.hljs-selector-id</span>,</span><br><span class="line"><span class="selector-class">.hljs-tag</span>,</span><br><span class="line"><span class="selector-class">.hljs-template-variable</span>,</span><br><span class="line"><span class="selector-class">.hljs-variable</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#d54e53</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.hljs-built_in</span>,</span><br><span class="line"><span class="selector-class">.hljs-link</span>,</span><br><span class="line"><span class="selector-class">.hljs-literal</span>,</span><br><span class="line"><span class="selector-class">.hljs-meta</span>,</span><br><span class="line"><span class="selector-class">.hljs-number</span>,</span><br><span class="line"><span class="selector-class">.hljs-params</span>,</span><br><span class="line"><span class="selector-class">.hljs-type</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#e78c45</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.hljs-attribute</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#e7c547</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.hljs-addition</span>,</span><br><span class="line"><span class="selector-class">.hljs-bullet</span>,</span><br><span class="line"><span class="selector-class">.hljs-string</span>,</span><br><span class="line"><span class="selector-class">.hljs-symbol</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#b9ca4a</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.hljs-section</span>,</span><br><span class="line"><span class="selector-class">.hljs-title</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#7aa6da</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.hljs-keyword</span>,</span><br><span class="line"><span class="selector-class">.hljs-selector-tag</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#c397d8</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.hljs</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#282828</span>; <span class="comment">/* 如果是3.1.5需要把这个改成 #000 */</span></span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#eaeaea</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.hljs-emphasis</span> &#123;</span><br><span class="line">    <span class="attribute">font-style</span>: italic</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.hljs-strong</span> &#123;</span><br><span class="line">    <span class="attribute">font-weight</span>: <span class="number">700</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 代码块背景设置 */</span></span><br><span class="line"><span class="selector-class">.b3-typography</span> <span class="selector-class">.code-block</span><span class="selector-pseudo">:not</span>(pre), <span class="selector-class">.protyle-wysiwyg</span> <span class="selector-class">.code-block</span><span class="selector-pseudo">:not</span>(pre) &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">2em</span> <span class="number">1em</span> <span class="number">1.6em</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">1em</span> <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#282828</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.code-block</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#fa625c</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">23px</span> <span class="number">0</span> <span class="number">#fdbc40</span>, <span class="number">45px</span> <span class="number">0</span> <span class="number">#35cd4b</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="built_in">var</span>(--b3-border-radius-round);</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">6px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.b3-typography</span> <span class="selector-class">.code-block</span><span class="selector-pseudo">:not</span>(pre) <span class="selector-class">.protyle-action</span> <span class="selector-class">.protyle-action__language</span>, <span class="selector-class">.protyle-wysiwyg</span> <span class="selector-class">.code-block</span><span class="selector-pseudo">:not</span>(pre) <span class="selector-class">.protyle-action</span> <span class="selector-class">.protyle-action__language</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">85%</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff8ed</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">align-self</span>: center;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">75px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.code-block</span> <span class="selector-class">.protyle-action</span> <span class="selector-class">.protyle-action__copy</span>, <span class="selector-class">.code-block</span> <span class="selector-class">.protyle-action</span> <span class="selector-class">.protyle-action__menu</span> &#123;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">var</span>(--S-list-background);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里改用官方的默认黑色主题midnight来测试，修改前，代码块和其他部分区分度纯靠颜色，而且字体离代码块边缘太近了。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/09/6ef82fdbac1db7b705a676ae1db1e1b1.png" alt="image.png"></p><p>修改后，顿时好看多了。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/09/f3ce2aea89979e6f6031be99bf3f5f64.png" alt="image.png"></p><h2 id="3-CSS-JS-多级列表子弹线"><a href="#3-CSS-JS-多级列表子弹线" class="headerlink" title="3. CSS+JS.多级列表子弹线"></a>3. CSS+JS.多级列表子弹线</h2><p>来源: <a href="https://ld246.com/article/1693238082034">https://ld246.com/article/1693238082034</a>;</p><p>css片段</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* REF https://github.com/svchord/Rem-Craft */</span></span><br><span class="line"><span class="selector-class">.protyle-wysiwyg</span> <span class="selector-attr">[data-node-id]</span><span class="selector-class">.li</span><span class="selector-pseudo">:has</span>(<span class="selector-class">.block-focus</span>)&gt;<span class="selector-class">.protyle-action</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:<span class="built_in">rgb</span>(<span class="number">70</span>, <span class="number">110</span>, <span class="number">220</span>);;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.protyle-wysiwyg</span> <span class="selector-attr">[data-node-id]</span><span class="selector-class">.li</span><span class="selector-pseudo">:has</span>(<span class="selector-class">.block-focus</span>)&gt;<span class="selector-class">.protyle-action</span> svg&#123;</span><br><span class="line">    <span class="attribute">margin</span>:<span class="number">0</span>;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">16px</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">16px</span>;</span><br><span class="line">    <span class="attribute">padding</span>:<span class="number">0px</span> <span class="number">0px</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.protyle-wysiwyg</span> <span class="selector-attr">[data-node-id]</span><span class="selector-class">.li</span><span class="selector-pseudo">:has</span>(<span class="selector-class">.block-focus</span>)&gt;<span class="selector-class">.list</span><span class="selector-pseudo">:has</span>(<span class="selector-class">.block-focus</span>)&gt;<span class="selector-class">.li</span><span class="selector-pseudo">::after</span>&#123;</span><br><span class="line">    <span class="attribute">content</span>:<span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="attribute">display</span>:block;</span><br><span class="line">    <span class="attribute">position</span>:absolute;</span><br><span class="line">    <span class="attribute">pointer-events</span>:none;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">34px</span>;</span><br><span class="line">    <span class="attribute">left</span>:-<span class="number">18px</span>;</span><br><span class="line">    <span class="attribute">top</span>:-<span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">border-style</span>:solid;</span><br><span class="line">    <span class="attribute">border-color</span>:<span class="built_in">rgb</span>(<span class="number">70</span>, <span class="number">110</span>, <span class="number">220</span>);;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.protyle-wysiwyg</span> <span class="selector-attr">[data-node-id]</span><span class="selector-class">.li</span><span class="selector-pseudo">:has</span>(<span class="selector-class">.block-focus</span>)&gt;<span class="selector-class">.list</span><span class="selector-pseudo">:has</span>(<span class="selector-class">.block-focus</span>)&gt;<span class="selector-class">.li</span><span class="selector-pseudo">:not</span>(<span class="selector-pseudo">:has</span>(<span class="selector-class">.block-focus</span>))<span class="selector-pseudo">::after</span>&#123;</span><br><span class="line">    <span class="attribute">bottom</span>:-<span class="number">2px</span>;</span><br><span class="line">    <span class="attribute">border-width</span>:<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">2px</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.protyle-wysiwyg</span> <span class="selector-attr">[data-node-id]</span><span class="selector-class">.li</span><span class="selector-pseudo">:has</span>(<span class="selector-class">.block-focus</span>)&gt;<span class="selector-class">.list</span><span class="selector-pseudo">:has</span>(<span class="selector-class">.block-focus</span>)&gt;<span class="selector-class">.li</span><span class="selector-pseudo">:has</span>(<span class="selector-class">.block-focus</span>)<span class="selector-pseudo">::after</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">38px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>:<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">8px</span>;</span><br><span class="line">    <span class="attribute">border-width</span>:<span class="number">0</span> <span class="number">0</span> <span class="number">2px</span> <span class="number">2px</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.protyle-wysiwyg</span> <span class="selector-attr">[data-node-id]</span><span class="selector-class">.li</span><span class="selector-pseudo">:has</span>(<span class="selector-class">.block-focus</span>)&gt;<span class="selector-class">.list</span><span class="selector-pseudo">:has</span>(<span class="selector-class">.block-focus</span>)&gt;<span class="selector-class">.li</span><span class="selector-pseudo">:has</span>(<span class="selector-class">.block-focus</span>)~<span class="selector-class">.li</span><span class="selector-pseudo">:not</span>(<span class="selector-pseudo">:has</span>(<span class="selector-class">.block-focus</span>))<span class="selector-pseudo">::after</span>&#123;</span><br><span class="line">    <span class="attribute">border-color</span>:<span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.protyle-wysiwyg</span> <span class="selector-attr">[data-node-id]</span><span class="selector-class">.li</span><span class="selector-pseudo">:has</span>(<span class="selector-class">.block-focus</span>)&gt;<span class="selector-class">.list</span><span class="selector-pseudo">:has</span>(<span class="selector-class">.block-focus</span>)&gt;<span class="selector-class">.li</span><span class="selector-attr">[data-subtype=o]</span><span class="selector-pseudo">::after</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">24px</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.protyle-wysiwyg</span> <span class="selector-attr">[data-node-id]</span><span class="selector-class">.li</span><span class="selector-pseudo">:has</span>(<span class="selector-class">.block-focus</span>)&gt;<span class="selector-class">.list</span><span class="selector-pseudo">:has</span>(<span class="selector-class">.block-focus</span>)&gt;<span class="selector-class">.li</span><span class="selector-attr">[data-subtype=t]</span><span class="selector-pseudo">::after</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">28px</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.protyle-wysiwyg</span> <span class="selector-attr">[data-node-id]</span><span class="selector-class">.li</span><span class="selector-pseudo">:has</span>(<span class="selector-class">.block-focus</span>)&gt;<span class="selector-attr">[data-node-id]</span><span class="selector-pseudo">::after</span>&#123;</span><br><span class="line">    <span class="attribute">content</span>:<span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="attribute">display</span>:block;</span><br><span class="line">    <span class="attribute">position</span>:absolute;</span><br><span class="line">    <span class="attribute">pointer-events</span>:none;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">34px</span>;</span><br><span class="line">    <span class="attribute">left</span>:-<span class="number">18px</span>;</span><br><span class="line">    <span class="attribute">top</span>:-<span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">border-style</span>:solid;</span><br><span class="line">    <span class="attribute">border-color</span>:<span class="built_in">rgb</span>(<span class="number">70</span>, <span class="number">110</span>, <span class="number">220</span>);</span><br><span class="line">    <span class="attribute">top</span>:<span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="built_in">calc</span>(<span class="number">100%</span> + <span class="number">4px</span>);</span><br><span class="line">    <span class="attribute">border-width</span>:<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">2px</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.protyle-wysiwyg</span> <span class="selector-attr">[data-node-id]</span><span class="selector-class">.li</span><span class="selector-pseudo">:has</span>(<span class="selector-class">.block-focus</span>)&gt;<span class="selector-attr">[data-node-id]</span><span class="selector-pseudo">:has</span>(+<span class="selector-class">.list</span>)<span class="selector-pseudo">::after</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>:auto;</span><br><span class="line">    <span class="attribute">bottom</span>:<span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.protyle-wysiwyg</span> <span class="selector-attr">[data-node-id]</span><span class="selector-class">.li</span><span class="selector-pseudo">:has</span>(<span class="selector-class">.block-focus</span>)&gt;<span class="selector-attr">[data-node-id]</span><span class="selector-attr">[data-type=NodeHeading]</span><span class="selector-pseudo">::after</span>&#123;</span><br><span class="line">    <span class="attribute">top</span>:<span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">185%</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.protyle-wysiwyg</span> <span class="selector-attr">[data-node-id]</span><span class="selector-class">.li</span><span class="selector-pseudo">:has</span>(<span class="selector-class">.block-focus</span>)&gt;<span class="selector-attr">[data-node-id]</span><span class="selector-class">.list</span><span class="selector-pseudo">:has</span>(<span class="selector-class">.block-focus</span>)<span class="selector-pseudo">::after</span>,<span class="selector-class">.protyle-wysiwyg</span> <span class="selector-attr">[data-node-id]</span><span class="selector-class">.li</span><span class="selector-pseudo">:has</span>(<span class="selector-class">.block-focus</span>)&gt;<span class="selector-attr">[data-node-id]</span><span class="selector-class">.list</span><span class="selector-pseudo">:has</span>(<span class="selector-class">.block-focus</span>)~<span class="selector-attr">[data-node-id]</span><span class="selector-pseudo">::after</span>,<span class="selector-class">.protyle-wysiwyg</span> <span class="selector-attr">[data-node-id]</span><span class="selector-class">.li</span><span class="selector-pseudo">:has</span>(<span class="selector-class">.block-focus</span>)&gt;<span class="selector-attr">[data-node-id]</span><span class="selector-class">.bq</span><span class="selector-pseudo">:has</span>(<span class="selector-class">.block-focus</span>)<span class="selector-pseudo">::after</span>,<span class="selector-class">.protyle-wysiwyg</span> <span class="selector-attr">[data-node-id]</span><span class="selector-class">.li</span><span class="selector-pseudo">:has</span>(<span class="selector-class">.block-focus</span>)&gt;<span class="selector-attr">[data-node-id]</span><span class="selector-class">.bq</span><span class="selector-pseudo">:has</span>(<span class="selector-class">.block-focus</span>)~<span class="selector-attr">[data-node-id]</span><span class="selector-pseudo">::after</span>,<span class="selector-class">.protyle-wysiwyg</span> <span class="selector-attr">[data-node-id]</span><span class="selector-class">.li</span><span class="selector-pseudo">:has</span>(<span class="selector-class">.block-focus</span>)&gt;<span class="selector-attr">[data-node-id]</span><span class="selector-class">.sb</span><span class="selector-pseudo">:has</span>(<span class="selector-class">.block-focus</span>)<span class="selector-pseudo">::after</span>,<span class="selector-class">.protyle-wysiwyg</span> <span class="selector-attr">[data-node-id]</span><span class="selector-class">.li</span><span class="selector-pseudo">:has</span>(<span class="selector-class">.block-focus</span>)&gt;<span class="selector-attr">[data-node-id]</span><span class="selector-class">.sb</span><span class="selector-pseudo">:has</span>(<span class="selector-class">.block-focus</span>)~<span class="selector-attr">[data-node-id]</span><span class="selector-pseudo">::after</span>&#123;</span><br><span class="line">    <span class="attribute">border-color</span>:<span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.protyle-wysiwyg</span> <span class="selector-attr">[data-node-id]</span><span class="selector-class">.li</span><span class="selector-pseudo">:has</span>(<span class="selector-class">.block-focus</span>)<span class="selector-attr">[fold=<span class="string">&quot;1&quot;</span>]</span>&gt;<span class="selector-attr">[data-node-id]</span><span class="selector-pseudo">::after</span>,<span class="selector-class">.protyle-wysiwyg</span> <span class="selector-attr">[data-node-id]</span><span class="selector-class">.li</span><span class="selector-pseudo">:has</span>(<span class="selector-class">.block-focus</span>)<span class="selector-pseudo">:has</span>(&gt;<span class="selector-class">.block-focus</span>)&gt;<span class="selector-attr">[data-node-id]</span><span class="selector-pseudo">::after</span>&#123;</span><br><span class="line">    <span class="attribute">border-color</span>:<span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.protyle-wysiwyg</span> <span class="selector-attr">[data-node-id]</span><span class="selector-class">.li</span><span class="selector-pseudo">:has</span>(<span class="selector-class">.block-focus</span>)<span class="selector-attr">[data-subtype=o]</span><span class="selector-pseudo">:has</span>(<span class="selector-class">.block-focus</span>)&gt;<span class="selector-class">.list</span><span class="selector-pseudo">:has</span>(<span class="selector-class">.block-focus</span>)&gt;<span class="selector-class">.li</span><span class="selector-pseudo">::after</span>&#123;</span><br><span class="line">    <span class="attribute">top</span>:-<span class="number">10px</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.protyle-wysiwyg</span> <span class="selector-attr">[data-node-id]</span><span class="selector-class">.li</span><span class="selector-pseudo">:has</span>(<span class="selector-class">.block-focus</span>)<span class="selector-attr">[data-subtype=o]</span><span class="selector-pseudo">:has</span>(<span class="selector-class">.block-focus</span>)&gt;<span class="selector-class">.list</span><span class="selector-pseudo">:has</span>(<span class="selector-class">.block-focus</span>)&gt;<span class="selector-class">.li</span><span class="selector-pseudo">:has</span>(<span class="selector-class">.block-focus</span>)<span class="selector-pseudo">::after</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">28px</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.protyle-wysiwyg</span> <span class="selector-attr">[data-node-id]</span><span class="selector-class">.li</span><span class="selector-pseudo">:has</span>(<span class="selector-class">.block-focus</span>)<span class="selector-attr">[data-subtype=t]</span><span class="selector-pseudo">:has</span>(<span class="selector-class">.block-focus</span>)&gt;<span class="selector-class">.protyle-action</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:<span class="built_in">rgb</span>(<span class="number">70</span>, <span class="number">110</span>, <span class="number">220</span>); <span class="comment">/* 子弹线颜色修改这里 */</span> </span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.protyle-wysiwyg</span> <span class="selector-attr">[data-node-id]</span><span class="selector-class">.li</span><span class="selector-pseudo">:has</span>(<span class="selector-class">.block-focus</span>)<span class="selector-attr">[data-subtype=t]</span><span class="selector-pseudo">:has</span>(<span class="selector-class">.block-focus</span>)&gt;<span class="selector-class">.protyle-action</span> svg&#123;</span><br><span class="line">    <span class="attribute">margin</span>:<span class="number">0</span>;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">14px</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">14px</span>;</span><br><span class="line">    <span class="attribute">padding</span>:<span class="number">0px</span> <span class="number">0px</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.protyle-wysiwyg</span> <span class="selector-attr">[data-node-id]</span><span class="selector-class">.li</span><span class="selector-pseudo">:has</span>(<span class="selector-class">.block-focus</span>)<span class="selector-attr">[data-subtype=t]</span><span class="selector-pseudo">:has</span>(<span class="selector-class">.block-focus</span>)&gt;<span class="selector-class">.list</span><span class="selector-pseudo">:has</span>(<span class="selector-class">.block-focus</span>)&gt;<span class="selector-class">.li</span><span class="selector-pseudo">::after</span>&#123;</span><br><span class="line">    <span class="attribute">top</span>:-<span class="number">14px</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.protyle-wysiwyg</span> <span class="selector-attr">[data-node-id]</span><span class="selector-class">.li</span><span class="selector-pseudo">:has</span>(<span class="selector-class">.block-focus</span>)<span class="selector-attr">[data-subtype=t]</span><span class="selector-pseudo">:has</span>(<span class="selector-class">.block-focus</span>)&gt;<span class="selector-class">.list</span><span class="selector-pseudo">:has</span>(<span class="selector-class">.block-focus</span>)&gt;<span class="selector-class">.li</span><span class="selector-pseudo">:has</span>(<span class="selector-class">.block-focus</span>)<span class="selector-pseudo">::after</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">32px</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.protyle-wysiwyg</span> <span class="selector-attr">[data-node-id]</span><span class="selector-class">.li</span><span class="selector-pseudo">:has</span>(<span class="selector-class">.block-focus</span>)<span class="selector-attr">[data-subtype=t]</span><span class="selector-pseudo">:has</span>(<span class="selector-class">.block-focus</span>)<span class="selector-class">.protyle-task--done</span>&gt;<span class="selector-class">.list</span><span class="selector-pseudo">:has</span>(<span class="selector-class">.block-focus</span>)&gt;<span class="selector-class">.li</span><span class="selector-pseudo">::after</span>&#123;</span><br><span class="line">    <span class="attribute">border-color</span>:<span class="built_in">rgba</span>(<span class="number">139</span>, <span class="number">139</span>, <span class="number">139</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>js片段</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 缓存编辑器块并处理聚焦状态的函数定义</span></span><br><span class="line"><span class="keyword">let</span> cachedEditorBlocks = []; <span class="comment">// 缓存所有编辑器块</span></span><br><span class="line"><span class="keyword">let</span> focusedBlock = <span class="literal">null</span>; <span class="comment">// 缓存当前聚焦的块</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化缓存</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">initEditorBlocksCache</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> editors = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.protyle-wysiwyg&#x27;</span>);</span><br><span class="line">    editors.<span class="title function_">forEach</span>(<span class="function"><span class="params">editor</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!editor.<span class="property">classList</span>.<span class="title function_">contains</span>(<span class="string">&#x27;NodeAttributeView&#x27;</span>)) &#123;</span><br><span class="line">            cachedEditorBlocks.<span class="title function_">push</span>(...editor.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;[data-node-id]&#x27;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新聚焦状态并维护缓存</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">handleBlockFocus</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> target;</span><br><span class="line">    <span class="keyword">if</span> (e.<span class="property">type</span> === <span class="string">&#x27;mouseup&#x27;</span>) &#123;</span><br><span class="line">        <span class="comment">// 鼠标事件，查找最近的具有data-node-id属性的元素</span></span><br><span class="line">        target = e.<span class="property">target</span>.<span class="title function_">closest</span>(<span class="string">&#x27;[data-node-id]&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e.<span class="property">type</span> === <span class="string">&#x27;keyup&#x27;</span>) &#123;</span><br><span class="line">        <span class="comment">// 键盘事件，查找当前焦点所在的具有data-node-id属性的元素</span></span><br><span class="line">        <span class="keyword">const</span> activeElement = <span class="variable language_">document</span>.<span class="property">activeElement</span>;</span><br><span class="line">        <span class="keyword">if</span> (activeElement.<span class="property">classList</span>.<span class="title function_">contains</span>(<span class="string">&#x27;protyle-wysiwyg&#x27;</span>)) &#123;</span><br><span class="line">            target = <span class="variable language_">window</span>.<span class="title function_">getSelection</span>()?.<span class="property">focusNode</span>?.<span class="property">parentElement</span>;</span><br><span class="line">            <span class="keyword">while</span> (target &amp;&amp; !target.<span class="property">dataset</span>.<span class="property">nodeId</span>) &#123;</span><br><span class="line">                target = target.<span class="property">parentElement</span>;</span><br><span class="line">                <span class="keyword">if</span> (!target) <span class="keyword">break</span>; <span class="comment">// 避免空指针异常</span></span><br><span class="line">                <span class="keyword">if</span> (target.<span class="property">classList</span>.<span class="title function_">contains</span>(<span class="string">&#x27;NodeAttributeView&#x27;</span>)) &#123;</span><br><span class="line">                    target = <span class="literal">null</span>; <span class="comment">// 如果找到NodeAttributeView，则不处理该元素</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!target || target === focusedBlock) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (focusedBlock) &#123;</span><br><span class="line">        focusedBlock.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&#x27;block-focus&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    focusedBlock = target;</span><br><span class="line">    focusedBlock.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;block-focus&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据需要调用相关功能，例如：</span></span><br><span class="line">    <span class="comment">// setSelector(focusedBlock);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化编辑器块缓存</span></span><br><span class="line"><span class="title function_">initEditorBlocksCache</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 绑定事件监听器</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mouseup&#x27;</span>, handleBlockFocus, <span class="literal">true</span>);</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;keyup&#x27;</span>, handleBlockFocus, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 立即调用的异步函数表达式，执行handleBlockFocus并输出日志</span></span><br><span class="line">(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="comment">// 这里我们调用handleBlockFocus函数，但由于它不返回Promise，所以不需要await</span></span><br><span class="line">    <span class="title function_">handleBlockFocus</span>(&#123; <span class="attr">type</span>: <span class="string">&#x27;dummy&#x27;</span> &#125;); <span class="comment">// 模拟事件调用</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Bullet line init success.&#x27;</span>);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>添加以后，在点击多级列表的时候，会出现蓝色子弹线</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/09/41ae6bdf77a6165699c9d7ffb13e5de8.png" alt="image.png"></p><h2 id="4-CSS-给标签添加井号"><a href="#4-CSS-给标签添加井号" class="headerlink" title="4. CSS.给标签添加井号"></a>4. CSS.给标签添加井号</h2><p>默认的文内标签和文章标题标签都没有井号，看起来多少有点奇怪（特别是文内标签），可以用如下代码块来处理一下</p><p>来源：<a href="https://ld246.com/article/1725865228744">https://ld246.com/article/1725865228744</a></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 标题 标签 */</span></span><br><span class="line"><span class="selector-class">.b3-chip--secondary</span>, <span class="selector-class">.b3-chip--primary</span>, <span class="selector-class">.b3-chip--info</span>, <span class="selector-class">.b3-chip--success</span>, <span class="selector-class">.b3-chip--warning</span>, </span><br><span class="line"><span class="selector-class">.b3-chip--warning</span>, <span class="selector-class">.b3-chip--error</span>, <span class="selector-class">.b3-chip--pink</span> &#123;</span><br><span class="line">    <span class="attribute">mix-blend-mode</span>: normal <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.b3-chip--secondary</span><span class="selector-pseudo">::before</span>, <span class="selector-class">.b3-chip--primary</span><span class="selector-pseudo">::before</span>, <span class="selector-class">.b3-chip--info</span><span class="selector-pseudo">::before</span>, <span class="selector-class">.b3-chip--success</span><span class="selector-pseudo">::before</span>, <span class="selector-class">.b3-chip--warning</span><span class="selector-pseudo">::before</span>, <span class="selector-class">.b3-chip--warning</span><span class="selector-pseudo">::before</span>, <span class="selector-class">.b3-chip--error</span><span class="selector-pseudo">::before</span>, <span class="selector-class">.b3-chip--pink</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&quot;#&quot;</span> <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">5px</span>;  <span class="comment">/* # 号距离文字的距离 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.protyle-background</span> <span class="selector-class">.b3-chip--secondary</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span> <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">background-color</span>:  <span class="number">#d6ff0070</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.protyle-background</span> <span class="selector-class">.b3-chip--primary</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span> <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#0053f9c4</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.protyle-background</span> <span class="selector-class">.b3-chip--info</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">var</span>(--b3-card-info-color) <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#28405c</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.protyle-background</span> <span class="selector-class">.b3-chip--success</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">var</span>(--b3-card-success-color) <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#425347</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.protyle-background</span> <span class="selector-class">.b3-chip--warning</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">var</span>(--b3-card-warning-color) <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#554636</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.protyle-background</span> <span class="selector-class">.b3-chip--error</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">var</span>(--b3-card-error-color) <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#442724</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.protyle-background</span> <span class="selector-class">.b3-chip--pink</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">var</span>(--b3-theme-on-secondary) <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#ea4aaa96</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 行内标签 */</span></span><br><span class="line"><span class="selector-class">.protyle-wysiwyg</span> <span class="selector-attr">[data-node-id]</span> <span class="selector-tag">span</span><span class="selector-attr">[data-type~=tag]</span> &#123;</span><br><span class="line">    <span class="attr">--tag-color</span>: <span class="number">#97B9DA</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">80%</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">1em</span>;</span><br><span class="line">    <span class="attribute">padding</span>: .<span class="number">1em</span> .<span class="number">5em</span> .<span class="number">15em</span>;</span><br><span class="line">    <span class="attribute">border</span>: none;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> .<span class="number">065em</span> inset <span class="built_in">var</span>(--tag-color);</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#28405c</span> <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">var</span>(--tag-color) ;</span><br><span class="line">    <span class="attribute">box-decoration-break</span>: clone;</span><br><span class="line">    -webkit-<span class="attribute">box-decoration-break</span>: clone;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.protyle-wysiwyg</span> <span class="selector-attr">[data-node-id]</span> <span class="selector-tag">span</span><span class="selector-attr">[data-type~=tag]</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&quot;#&quot;</span> <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">5px</span>;  <span class="comment">/* # 号距离文字的距离 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改前，行内标签那是完全看不出来</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/09/7804f4178591a505ec9d4072043e356e.png" alt="image.png"></p><p>修改后，行内标签正常多了</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/09/35c2f43414ed7ec4846d0068c0c5af62.png" alt="image.png"></p><p>下图是标题标签修改后的效果。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/09/b595c9f6d1eb296d379880b5c4feb3e5.png" alt="image.png"></p><p>这一点我觉得是思源本身默认主题的前端设置就有问题，就算没有井号，行内标签也不能是毫无辨识度的背景色，那样在使用的时候体验真的不行。</p><p>备注：行内标签需要在思源<code>设置-编辑器</code>最底部开启该选项才可使用。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/09/9731aba0c45a1073cf2263035e6dafcf.png" alt="image.png"></p><h2 id="5-CSS-分割线加粗"><a href="#5-CSS-分割线加粗" class="headerlink" title="5. CSS.分割线加粗"></a>5. CSS.分割线加粗</h2><p>这一个真的非常需要，默认暗色主题的分割线实在是看不出来！！</p><p>来源：<a href="https://ld246.com/article/1700551933609">https://ld246.com/article/1700551933609</a>;</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 更改分割线样式 CSS片段 */</span></span><br><span class="line"><span class="selector-class">.hr</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: none;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.hr</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">2px</span>; <span class="comment">/* 粗细 */</span></span><br><span class="line">  <span class="attribute">background-color</span>: white; <span class="comment">/* 颜色 */</span></span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-<span class="number">50%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改前</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/09/e68998e941f1653f8f91cbcf313df870.png" alt="image.png"></p><p>修改后</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/09/de310946863d053de10b25dc2523ddbd.png" alt="image.png"></p><p>部分主题对分割线的样式进行了重置，无需使用该代码片段。</p><h2 id="6-CSS-自定义荧光笔颜色"><a href="#6-CSS-自定义荧光笔颜色" class="headerlink" title="6. CSS.自定义荧光笔颜色"></a>6. CSS.自定义荧光笔颜色</h2><p>如题，自定义荧光笔标记的颜色。</p><p>这里的颜色是RGB的十六进制码，随便百度一个RGB颜色网站就能选你想要的颜色和对应的十六进制码了。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 自定义标记颜色 CSS片段 */</span></span><br><span class="line"><span class="selector-pseudo">:root</span>&#123;</span><br><span class="line"><span class="attr">--b3-protyle-inline-mark-background</span>: <span class="number">#F9FC093B</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>来源：<a href="https://ld246.com/article/1700551933609#%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A0%87%E8%AE%B0%E9%A2%9C%E8%89%B2-CSS%E7%89%87%E6%AE%B5">https://ld246.com/article/1700551933609#%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A0%87%E8%AE%B0%E9%A2%9C%E8%89%B2-CSS%E7%89%87%E6%AE%B5</a></p><h2 id="7-CSS-外观菜单字体变粗"><a href="#7-CSS-外观菜单字体变粗" class="headerlink" title="7. CSS.外观菜单字体变粗"></a>7. CSS.外观菜单字体变粗</h2><p>默认情况下思源的外观菜单（就是选字体颜色的哪一个）看不清，可以处理一下</p><p>来源：<a href="https://ld246.com/article/1702095793605/comment/1702105185880?r=a2930610542#comments">https://ld246.com/article/1702095793605/comment/1702105185880?r=a2930610542#comments</a></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.protyle-util</span> <span class="selector-class">.color__square</span><span class="selector-attr">[data-type=<span class="string">&quot;color&quot;</span>]</span>&#123;<span class="attribute">font-weight</span>:bold&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/09/2c3dbeaf4edf05a817c3546409e48ae0.png" alt="image.png"></p><p>不过，这种类markdown的编辑器，个人始终不建议修改文字的颜色和大小（特别是修改大小）。因为markdown本身生出来就是想让你别考虑排版的，有些人写的博客里面大大小小的字都有，原本作者是想突出一些重点，但是看上去是真不舒服，反而劣化了读者体验。</p><p>编辑markdown应该通过文字加粗、引用块、斜体、行内代码块来实现不同文字的强调或弱化，而不是用文字大小或者文字颜色来处理！这一观点嵌入到了我编辑markdown的基本思路中，所以本站的文章你是很难看到有什么特殊的字体颜色的（除了少数特别特别严重的说明我会用<font color=Red>红色</font>来标注）。</p><p>以上为个人想法，不适用于所有人，欢迎讨论。</p><h2 id="8-JS-自定义默认代码语言和代码块语言选择置顶项"><a href="#8-JS-自定义默认代码语言和代码块语言选择置顶项" class="headerlink" title="8. JS.自定义默认代码语言和代码块语言选择置顶项"></a>8. JS.自定义默认代码语言和代码块语言选择置顶项</h2><p>默认情况下，思源笔记的代码块会采用上一次用过的语言。但我编写笔记的很多时候，会在语言和这个语言于Linux控制台输出之间不断切换。而Linux的控制台输出如果也使用Linux命令行的bash语言，就会得到一大堆没有作用的无效高亮。</p><p>所以在论坛中找到了这个js片段，可以自定义代码块的默认语言，以及把自己最常用的语言置顶。</p><p>来源：<a href="https://ld246.com/article/1723089690687">https://ld246.com/article/1723089690687</a>;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 功能：代码块最近使用的语言置顶</span></span><br><span class="line">(<span class="keyword">async</span> ()=&gt;&#123;</span><br><span class="line">    <span class="comment">// 配置默认的代码语言，注意如果设置了这个参数，则会覆盖上一次使用的语言。始终默认用这个语言，为空不设置</span></span><br><span class="line">    <span class="keyword">const</span> defaultCodeLang = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 配置最近代码语言最大显示个数</span></span><br><span class="line">    <span class="keyword">const</span> recentlyCodeLangLength = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 配置置顶的代码语言，这个配置里的语言始终置顶，比如 [&quot;js&quot;, &quot;java&quot;, &quot;php&quot;]</span></span><br><span class="line">    <span class="keyword">let</span> topCodeLang = [];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 配置持久化文件的存储路径</span></span><br><span class="line">    <span class="keyword">const</span> storagePath = <span class="string">&quot;/data/storage/recently_code_lang.json&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/////////////////// 以下数据不涉及配置项，如无必要请勿修改 /////////////////////////////</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取最近使用的语言</span></span><br><span class="line">    <span class="keyword">let</span> recentlyCodeLang = <span class="keyword">await</span> <span class="title function_">getFile</span>(storagePath);</span><br><span class="line">    <span class="comment">// 置顶语言倒序</span></span><br><span class="line">    topCodeLang.<span class="title function_">reverse</span>();</span><br><span class="line">    <span class="comment">// 布局完成时执行</span></span><br><span class="line">    <span class="keyword">let</span> codeTimer = <span class="literal">null</span>;</span><br><span class="line">    <span class="title function_">whenElementExist</span>(<span class="string">&quot;.layout__center&quot;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">element</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">const</span> layoutCenter = element;</span><br><span class="line">        <span class="keyword">const</span> observer = <span class="title function_">observeDomChange</span>(layoutCenter, <span class="function">(<span class="params">mutation</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// 监听弹窗代码列表</span></span><br><span class="line">            <span class="keyword">if</span>(mutation.<span class="property">target</span>.<span class="property">classList</span>.<span class="title function_">contains</span>(<span class="string">&quot;protyle-util&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">const</span> codeList = mutation.<span class="property">target</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.b3-list--background&quot;</span>);</span><br><span class="line">                <span class="keyword">if</span>(codeList)&#123;</span><br><span class="line">                    <span class="keyword">const</span> firstChild = codeList.<span class="property">firstElementChild</span>;</span><br><span class="line">                    <span class="title function_">sortLangList</span>([...recentlyCodeLang, ...topCodeLang], codeList, firstChild);</span><br><span class="line">                    <span class="comment">// console.log(codeList, &#x27;codeList&#x27;);</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 监听代码被选择</span></span><br><span class="line">            <span class="keyword">if</span>(mutation.<span class="property">target</span>.<span class="property">classList</span>.<span class="title function_">contains</span>(<span class="string">&quot;code-block&quot;</span>) || mutation.<span class="property">target</span>.<span class="property">classList</span>.<span class="title function_">contains</span>(<span class="string">&quot;hljs&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">if</span>(codeTimer) <span class="built_in">clearTimeout</span>(codeTimer);</span><br><span class="line">                codeTimer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">const</span> codeBlock = mutation.<span class="property">target</span>.<span class="title function_">closest</span>(<span class="string">&quot;.code-block&quot;</span>);</span><br><span class="line">                    <span class="keyword">const</span> langText = codeBlock?.<span class="title function_">querySelector</span>(<span class="string">&quot;.protyle-action__language&quot;</span>)?.<span class="property">textContent</span>;</span><br><span class="line">                    <span class="comment">// 添加语言</span></span><br><span class="line">                    <span class="title function_">addLanguage</span>(langText);</span><br><span class="line">                    <span class="comment">// 设置默认语言</span></span><br><span class="line">                    <span class="title function_">setDefaultLang</span>();</span><br><span class="line">                    <span class="comment">// console.log(mutation.target.querySelector(&quot;.protyle-action__language&quot;)?.textContent, &#x27;selected&#x27;);</span></span><br><span class="line">                &#125;, <span class="number">40</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 为了体验一致性，第一次使用时加载一次上次使用的语言</span></span><br><span class="line">        <span class="title function_">addLanguage</span>(<span class="title function_">getLastLang</span>());</span><br><span class="line">        <span class="comment">// 设置默认语言</span></span><br><span class="line">        <span class="title function_">setDefaultLang</span>();</span><br><span class="line">        <span class="comment">// 调试时使用</span></span><br><span class="line">        <span class="comment">// window.obsv=observer</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 排序语言，主要把置顶的语言移动上去</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">sortLangList</span>(<span class="params">topCodeLang, listContainer, clearItem</span>) &#123;</span><br><span class="line">        topCodeLang.<span class="title function_">forEach</span>(<span class="function"><span class="params">lang</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// 查找对应的.b3-list-item元素</span></span><br><span class="line">            <span class="keyword">const</span> item = <span class="title class_">Array</span>.<span class="title function_">from</span>(listContainer.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.b3-list-item&#x27;</span>)).<span class="title function_">find</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">textContent</span>.<span class="title function_">trim</span>() === lang);</span><br><span class="line">            <span class="keyword">if</span> (item) &#123;</span><br><span class="line">                <span class="comment">// 将找到的元素移动到 &quot;清空&quot; 元素之后</span></span><br><span class="line">                listContainer.<span class="title function_">insertBefore</span>(item, clearItem.<span class="property">nextSibling</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 如果不存在则创建一个新的元素</span></span><br><span class="line">                <span class="keyword">const</span> newElement = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">                newElement.<span class="property">className</span> = <span class="string">&#x27;b3-list-item&#x27;</span>;</span><br><span class="line">                newElement.<span class="property">textContent</span> = lang;</span><br><span class="line">                listContainer.<span class="title function_">insertBefore</span>(newElement, clearItem.<span class="property">nextSibling</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 移动焦点到第一个子元素</span></span><br><span class="line">        listContainer.<span class="title function_">querySelector</span>(<span class="string">&quot;.b3-list-item--focus&quot;</span>).<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&quot;b3-list-item--focus&quot;</span>);</span><br><span class="line">        listContainer.<span class="property">children</span>[<span class="number">1</span>].<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&quot;b3-list-item--focus&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加语言，长度始终保持在recentlyCodeLangLength之内</span></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">addLanguage</span>(<span class="params">language</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!language) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 传入的language参数仅供参考，真正获取最后一次使用的语言得从思源存储中或数据库查询中获取，</span></span><br><span class="line">        <span class="comment">// 这样可以防止块元素被意外触发，添加非最后一次使用的语言，导致混乱</span></span><br><span class="line">        <span class="comment">// 这样无论哪个代码块被触发都以getLastLang为准</span></span><br><span class="line">        language = <span class="title function_">getLastLang</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!language) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果最后一个元素已经是上次使用的语言，则不再重复添加</span></span><br><span class="line">        <span class="keyword">if</span>(recentlyCodeLang[recentlyCodeLang.<span class="property">length</span>-<span class="number">1</span>] === language) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 检查数组中是否已经有相同的元素</span></span><br><span class="line">        <span class="keyword">const</span> index = recentlyCodeLang.<span class="title function_">indexOf</span>(language);</span><br><span class="line">        <span class="keyword">if</span> (index !== -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">// 如果存在，则移除这个元素</span></span><br><span class="line">            recentlyCodeLang.<span class="title function_">splice</span>(index, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加新语言到数组</span></span><br><span class="line">        recentlyCodeLang.<span class="title function_">push</span>(language);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 检查数组长度，如果超过最大长度，则删除最前面的元素</span></span><br><span class="line">        <span class="keyword">while</span> (recentlyCodeLang.<span class="property">length</span> &gt; recentlyCodeLangLength) &#123;</span><br><span class="line">            recentlyCodeLang.<span class="title function_">shift</span>(); <span class="comment">// 删除数组的第一个元素</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 存储数据</span></span><br><span class="line">        <span class="title function_">putFile</span>(storagePath, recentlyCodeLang);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置设置默认语言</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">setDefaultLang</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(defaultCodeLang) <span class="variable language_">window</span>.<span class="property">siyuan</span>.<span class="property">storage</span>[<span class="string">&quot;local-codelang&quot;</span>] = defaultCodeLang;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取上次使用的语言</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">getLastLang</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 从思源存储获取</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">window</span>.<span class="property">siyuan</span>.<span class="property">storage</span>[<span class="string">&quot;local-codelang&quot;</span>];</span><br><span class="line">        <span class="comment">// 从数据库获取，暂未用到</span></span><br><span class="line">        <span class="comment">// return await getLastLangFromDb();</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从数据库获取最近使用的语言，暂未用到</span></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getLastLangFromDb</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> sql = <span class="string">`SELECT markdown FROM blocks WHERE type = &#x27;c&#x27;  ORDER  by updated DESC limit 1`</span>;</span><br><span class="line">        <span class="keyword">const</span> result = <span class="keyword">await</span> <span class="title function_">fetchSyncPost</span>(<span class="string">&#x27;/api/query/sql&#x27;</span>, &#123;<span class="string">&quot;stmt&quot;</span>: sql&#125;);</span><br><span class="line">        <span class="keyword">if</span>(result.<span class="property">data</span>[<span class="number">0</span>]?.<span class="property">markdown</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> result.<span class="property">data</span>[<span class="number">0</span>].<span class="property">markdown</span>.<span class="title function_">split</span>(<span class="string">&quot;\n&quot;</span>)[<span class="number">0</span>].<span class="title function_">replace</span>(<span class="string">&#x27;```&#x27;</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取最近使用的语言持久数据</span></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getFile</span>(<span class="params">storagePath</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!storagePath) <span class="keyword">return</span> [];</span><br><span class="line">        <span class="keyword">const</span> data = <span class="keyword">await</span> <span class="title function_">fetchSyncPost</span>(<span class="string">&#x27;/api/file/getFile&#x27;</span>, &#123;<span class="string">&quot;path&quot;</span>:<span class="string">`<span class="subst">$&#123;storagePath&#125;</span>`</span>&#125;);</span><br><span class="line">        <span class="keyword">if</span>(data.<span class="property">code</span> &amp;&amp; data.<span class="property">code</span> !== <span class="number">0</span>) <span class="keyword">return</span> [];</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 存入数据到文件</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">putFile</span>(<span class="params">storagePath, data</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> formData = <span class="keyword">new</span> <span class="title class_">FormData</span>();</span><br><span class="line">        formData.<span class="title function_">append</span>(<span class="string">&quot;path&quot;</span>, storagePath);</span><br><span class="line">        formData.<span class="title function_">append</span>(<span class="string">&quot;file&quot;</span>, <span class="keyword">new</span> <span class="title class_">Blob</span>([<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data)]));</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">fetch</span>(<span class="string">&quot;/api/file/putFile&quot;</span>, &#123;</span><br><span class="line">            <span class="attr">method</span>: <span class="string">&quot;POST&quot;</span>,</span><br><span class="line">            <span class="attr">body</span>: formData,</span><br><span class="line">        &#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (response.<span class="property">ok</span>) &#123;</span><br><span class="line">                <span class="comment">//console.log(&quot;File saved successfully&quot;);</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;Failed to save file&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">error</span>(error);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 请求api</span></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fetchSyncPost</span> (url, data) &#123;</span><br><span class="line">        <span class="keyword">const</span> init = &#123;</span><br><span class="line">            <span class="attr">method</span>: <span class="string">&quot;POST&quot;</span>,</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">if</span> (data) &#123;</span><br><span class="line">            <span class="keyword">if</span> (data <span class="keyword">instanceof</span> <span class="title class_">FormData</span>) &#123;</span><br><span class="line">                init.<span class="property">body</span> = data;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                init.<span class="property">body</span> = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">fetch</span>(url, init);</span><br><span class="line">            <span class="keyword">const</span> res2 = <span class="keyword">await</span> res.<span class="title function_">json</span>();</span><br><span class="line">            <span class="keyword">return</span> res2;</span><br><span class="line">        &#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(e)</span><br><span class="line">            <span class="keyword">return</span> [];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 监控dom变化</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">observeDomChange</span>(<span class="params">targetNode, callback</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> config = &#123; <span class="attr">childList</span>: <span class="literal">true</span>, <span class="attr">subtree</span>: <span class="literal">true</span> &#125;;</span><br><span class="line">        <span class="keyword">const</span> observer = <span class="keyword">new</span> <span class="title class_">MutationObserver</span>(<span class="function">(<span class="params">mutationsList</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">const</span> mutation <span class="keyword">of</span> mutationsList) &#123;</span><br><span class="line">                <span class="keyword">if</span> (mutation.<span class="property">type</span> === <span class="string">&#x27;childList&#x27;</span>) &#123;</span><br><span class="line">                    <span class="title function_">callback</span>(mutation);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        observer.<span class="title function_">observe</span>(targetNode, config);</span><br><span class="line">        <span class="comment">// 返回observer，用于停止观察</span></span><br><span class="line">        <span class="comment">// observer.disconnect();</span></span><br><span class="line">        <span class="keyword">return</span> observer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 等待元素渲染完成后执行</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">whenElementExist</span>(<span class="params">selector</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> <span class="title function_">checkForElement</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">                <span class="keyword">let</span> element = <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">typeof</span> selector === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">                    element = <span class="title function_">selector</span>();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    element = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(selector);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (element) &#123;</span><br><span class="line">                    <span class="title function_">resolve</span>(element);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="title function_">requestAnimationFrame</span>(checkForElement);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="title function_">checkForElement</span>();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>如下图所示，默认情况下，代码块会是plaintext。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 配置默认的代码语言，注意如果设置了这个参数，则会覆盖上一次使用的语言。始终默认用这个语言，为空不设置</span></span><br><span class="line"><span class="keyword">const</span> defaultCodeLang = <span class="string">&quot;plaintext&quot;</span>;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/09/8008447f4cda669469139956d91fa31e.png" alt="image.png"></p><p>这里我设置了几个置顶的代码语言，也成功被置顶了，方便选择。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 配置置顶的代码语言，这个配置里的语言始终置顶，比如 [&quot;js&quot;, &quot;java&quot;, &quot;php&quot;]</span></span><br><span class="line"><span class="keyword">let</span> topCodeLang = [<span class="string">&quot;cpp&quot;</span>,<span class="string">&quot;bash&quot;</span>,<span class="string">&quot;python&quot;</span>,<span class="string">&quot;json&quot;</span>,<span class="string">&quot;xml&quot;</span>];</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/09/fe7ab06922aa71fbdd989e86f3987f79.png" alt="image.png"></p><p>这个插件会在思源工作空间的<code>/data/storage/recently_code_lang.json</code>进行最近使用代码块语言的次数记录。如果你想重置数据记录，删除这个json文件即可。</p><h2 id="9-CSS-配置emoji"><a href="#9-CSS-配置emoji" class="headerlink" title="9. CSS.配置emoji"></a>9. CSS.配置emoji</h2><p>在win10的电脑上可能会出现大量emoji缺失和不规整的问题，建议使用twemoji来替换思源笔记里面的emoji。替换emoji不一定需要安装插件，用下面的css也能实现。</p><blockquote><p><a href="https://github.com/twitter/twemoji">twitter&#x2F;twemoji</a>是twitter在github开源的免费emoji，采用MIT协议。</p></blockquote><p>这里的url路径是思源工作空间下的data中的路径，即工作空间data中的plugins文件夹，把下载的ttf文件放到这个路径下就可以了。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* [0] */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@font-face</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">&#x27;Twitter Emoji&#x27;</span>;</span><br><span class="line">    <span class="attribute">font-style</span>: normal;</span><br><span class="line">    <span class="attribute">font-weight</span>: <span class="number">400</span>;</span><br><span class="line">    <span class="attribute">font-display</span>: swap;</span><br><span class="line">    <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">&quot;/plugins/Twemoji.Mozilla.ttf&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-pseudo">:root</span> &#123;</span><br><span class="line">    <span class="attr">--b3-font-family-emoji</span>: <span class="string">&#x27;Twitter Emoji&#x27;</span>, sans-serif <span class="meta">!important</span>;</span><br><span class="line">    <span class="attr">--b3-font-family-code</span>: <span class="string">&quot;JetBrainsMono-Regular&quot;</span>, mononoki, Consolas, <span class="string">&quot;Liberation Mono&quot;</span>, Menlo, Courier, monospace, <span class="string">&#x27;Twitter Emoji&#x27;</span>, <span class="string">&quot;Apple Color Emoji&quot;</span>, <span class="string">&quot;Segoe UI Emoji&quot;</span>, <span class="string">&quot;Twitter Emoji&quot;</span>, <span class="string">&quot;Segoe UI Symbol&quot;</span>, <span class="string">&quot;Android Emoji&quot;</span>, <span class="string">&quot;EmojiSymbols&quot;</span> <span class="meta">!important</span>;</span><br><span class="line">    <span class="attr">--b3-font-family</span>: <span class="string">&quot;Helvetica Neue&quot;</span>, <span class="string">&quot;Luxi Sans&quot;</span>, <span class="string">&quot;DejaVu Sans&quot;</span>, <span class="string">&quot;Hiragino Sans GB&quot;</span>, <span class="string">&quot;Microsoft Yahei&quot;</span>, sans-serif, <span class="string">&#x27;Twitter Emoji&#x27;</span>, <span class="string">&quot;Apple Color Emoji&quot;</span>, <span class="string">&quot;Segoe UI Emoji&quot;</span>, <span class="string">&quot;Twitter Emoji&quot;</span>, <span class="string">&quot;Segoe UI Symbol&quot;</span>, <span class="string">&quot;Android Emoji&quot;</span>, <span class="string">&quot;EmojiSymbols&quot;</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>您可以在本站下载该tff文件：<a href="/img/data/Twemoji.Mozilla.ttf">下载地址</a>。</p><h2 id="10-CSS-标题改色"><a href="#10-CSS-标题改色" class="headerlink" title="10. CSS.标题改色"></a>10. CSS.标题改色</h2><p>修改各个等级标题的颜色，让标题的层级更加突出。</p><p>来源：<a href="https://ld246.com/article/1726590722601/comment/1726592372747#comments">https://ld246.com/article/1726590722601/comment/1726592372747#comments</a></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.protyle-wysiwyg</span> <span class="selector-class">.h1</span> &#123; <span class="attribute">color</span>: <span class="number">#d40045</span>; &#125;</span><br><span class="line"><span class="selector-class">.protyle-wysiwyg</span> <span class="selector-class">.h2</span> &#123; <span class="attribute">color</span>: <span class="number">#ff7f00</span>; &#125;</span><br><span class="line"><span class="selector-class">.protyle-wysiwyg</span> <span class="selector-class">.h3</span> &#123; <span class="attribute">color</span>: <span class="number">#66b82b</span>; &#125;</span><br><span class="line"><span class="selector-class">.protyle-wysiwyg</span> <span class="selector-class">.h4</span> &#123; <span class="attribute">color</span>: <span class="number">#093f86</span>; &#125;</span><br><span class="line"><span class="selector-class">.protyle-wysiwyg</span> <span class="selector-class">.h5</span> &#123; <span class="attribute">color</span>: <span class="number">#340c81</span>; &#125;</span><br></pre></td></tr></table></figure><h2 id="11-CSS-字体渲染优化"><a href="#11-CSS-字体渲染优化" class="headerlink" title="11. CSS.字体渲染优化"></a>11. CSS.字体渲染优化</h2><p>windows默认的字体渲染有一些问题，使用下面的CSS能一定程度上优化字体的渲染。修改font-family修改为你喜欢的中文字体即可。</p><p>来源：<a href="https://ld246.com/article/1712480500457">https://ld246.com/article/1712480500457</a></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">**<span class="selector-pseudo">:not</span>(<span class="selector-class">.katex</span>)<span class="selector-pseudo">:not</span>(<span class="selector-class">.overlaydiv</span>)<span class="selector-pseudo">:not</span>(<span class="selector-attr">[class*=<span class="string">&quot;icon&quot;</span>]</span>)<span class="selector-pseudo">:not</span>(<span class="selector-attr">[class*=<span class="string">&quot;button&quot;</span>]</span>)&#123;</span><br><span class="line"> <span class="comment">/*使字体渲染不会应用于部分特殊字符符号和图标以及按钮等网页元素*/</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">&quot;黑体&quot;</span> <span class="meta">!important</span>; <span class="comment">/*字体设置,中文字体安装对应字体后可选：苹方黑体、微软雅黑、pingfang sc regular、PingFang SC Heavy、.萍方-简、思源黑体 CN*/</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">text-shadow</span>: <span class="number">0.01em</span> <span class="number">0.01em</span> <span class="number">0.01em</span> <span class="number">#999999</span> ;  <span class="comment">/*更改字体阴影及颜色,可修改数值实现不同的效果*/</span></span><br><span class="line">    -webkit-text-stroke-<span class="attribute">width</span>: <span class="number">0.50px</span>; <span class="comment">/*更改字体描边粗细*/</span></span><br><span class="line">    -webkit-<span class="attribute">font-smoothing</span>: antialiased;</span><br><span class="line">    <span class="attribute">text-rendering</span>: optimizeLegibility;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/*使字体渲染不会应用于公式和图片制卡*/</span></span><br><span class="line"><span class="selector-tag">span</span><span class="selector-pseudo">:not</span>(<span class="selector-attr">[class=<span class="string">&quot;katex&quot;</span>]</span>) <span class="selector-pseudo">:not</span>(<span class="selector-attr">[class=<span class="string">&quot;overlaydiv&quot;</span>]</span>)&#123;</span><br><span class="line">    <span class="attribute">text-shadow</span>: <span class="number">0.01em</span> <span class="number">0.01em</span> <span class="number">0.01em</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>) <span class="meta">!important</span>;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*使字体渲染不会应用于PDF浏览*/</span></span><br><span class="line"><span class="selector-class">.textLayer</span> <span class="selector-tag">span</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attribute">text-shadow</span>: <span class="number">0.01em</span> <span class="number">0.01em</span> <span class="number">0.01em</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>) <span class="meta">!important</span>;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/*使字体渲染不会应用于加粗字体*/</span></span><br><span class="line"><span class="selector-class">.b3-typography</span> <span class="selector-tag">strong</span>, <span class="selector-class">.b3-typography</span> <span class="selector-tag">span</span><span class="selector-attr">[data-type~=strong]</span>, <span class="selector-class">.protyle-wysiwyg</span> <span class="selector-tag">strong</span>, <span class="selector-class">.protyle-wysiwyg</span> <span class="selector-tag">span</span><span class="selector-attr">[data-type~=strong]</span> &#123;</span><br><span class="line">    <span class="attribute">text-shadow</span>: <span class="number">0.01em</span> <span class="number">0.01em</span> <span class="number">0.01em</span> <span class="number">#999999</span> <span class="meta">!important</span>;  </span><br><span class="line">    -webkit-text-stroke-<span class="attribute">width</span>: <span class="number">0px</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>评论区还有另外一个代码片段。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">:not</span>(<span class="selector-class">.katex</span>)<span class="selector-pseudo">:not</span>(<span class="selector-class">.overlaydiv</span>)<span class="selector-pseudo">:not</span>(<span class="selector-attr">[class*=<span class="string">&quot;icon&quot;</span>]</span>)<span class="selector-pseudo">:not</span>(<span class="selector-attr">[class*=<span class="string">&quot;button&quot;</span>]</span>)&#123;</span><br><span class="line"> <span class="comment">/*使字体渲染不会应用于部分特殊字符符号和图标以及按钮等网页元素*/</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">&quot;仓耳云黑 W04&quot;</span> <span class="meta">!important</span>; <span class="comment">/*字体设置,中文字体安装对应字体后可选：苹方黑体、微软雅黑、pingfang sc regular、PingFang SC Heavy、.萍方-简、思源黑体 CN*/</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">text-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">0.36px</span> <span class="number">#7C7C7CDD</span> ;  <span class="comment">/*更改字体阴影及颜色,可修改数值实现不同的效果*/</span></span><br><span class="line">    -webkit-text-stroke-<span class="attribute">width</span>: <span class="number">0.08px</span>; <span class="comment">/*更改字体描边粗细*/</span></span><br><span class="line">    -webkit-<span class="attribute">font-smoothing</span>: antialiased;</span><br><span class="line">    <span class="attribute">text-rendering</span>: optimizeLegibility;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/*使字体渲染不会应用于公式和图片制卡*/</span></span><br><span class="line"><span class="selector-tag">span</span><span class="selector-pseudo">:not</span>(<span class="selector-attr">[class=<span class="string">&quot;katex&quot;</span>]</span>) <span class="selector-pseudo">:not</span>(<span class="selector-attr">[class=<span class="string">&quot;overlaydiv&quot;</span>]</span>)&#123;</span><br><span class="line">    <span class="attribute">text-shadow</span>: <span class="number">0.01em</span> <span class="number">0.01em</span> <span class="number">0.01em</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>) <span class="meta">!important</span>;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/*使字体渲染不会应用于加粗字体*/</span></span><br><span class="line"><span class="selector-class">.b3-typography</span> <span class="selector-tag">strong</span>, <span class="selector-class">.b3-typography</span> <span class="selector-tag">span</span><span class="selector-attr">[data-type~=strong]</span>, <span class="selector-class">.protyle-wysiwyg</span> <span class="selector-tag">strong</span>, <span class="selector-class">.protyle-wysiwyg</span> <span class="selector-tag">span</span><span class="selector-attr">[data-type~=strong]</span> &#123;</span><br><span class="line">    <span class="attribute">text-shadow</span>: <span class="number">0.01em</span> <span class="number">0.01em</span> <span class="number">0.01em</span> <span class="number">#999999</span> <span class="meta">!important</span>;  </span><br><span class="line">    -webkit-text-stroke-<span class="attribute">width</span>: <span class="number">0px</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在3.1.5上实测会出现严重重影，不确定是不是参数差异导致的。暂时不推荐使用。</p><h2 id="12-JS顶栏倒计时"><a href="#12-JS顶栏倒计时" class="headerlink" title="12. JS顶栏倒计时"></a>12. JS顶栏倒计时</h2><p>在思源的顶栏显示一个目标日期的倒计时</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/09/1bf7231da6c2902c6a64519567759cc2.png" alt="image.png"></p><p>来源：<a href="https://ld246.com/article/1726411686880">https://ld246.com/article/1726411686880</a>；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 顶栏倒计时，JS片段 https://ld246.com/article/1726411686880</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置文本内容和目标日期</span></span><br><span class="line"><span class="keyword">const</span> countdownMessage = <span class="string">&quot;距离 2025 年高考剩余 $&#123;daysLeft&#125; 天&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> targetDateString = <span class="string">&#x27;2025-6-7&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// -------------------- 下面的内容不要修改 --------------------</span></span><br><span class="line"><span class="keyword">const</span> targetDate = <span class="keyword">new</span> <span class="title class_">Date</span>(targetDateString);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">startCountdown</span>(<span class="params">targetDate</span>) &#123;</span><br><span class="line">  <span class="comment">// 计算剩余天数的函数</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">calculateDaysLeft</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> currentDate = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">    <span class="keyword">let</span> differenceInTime = targetDate.<span class="title function_">getTime</span>() - currentDate.<span class="title function_">getTime</span>();</span><br><span class="line">    <span class="keyword">let</span> daysLeft = <span class="title class_">Math</span>.<span class="title function_">ceil</span>(differenceInTime / (<span class="number">1000</span> * <span class="number">3600</span> * <span class="number">24</span>)); <span class="comment">// 将时间差转换为天数</span></span><br><span class="line">    <span class="keyword">return</span> daysLeft;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 更新倒计时显示</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">updateCountdown</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> daysLeft = <span class="title function_">calculateDaysLeft</span>();</span><br><span class="line">    <span class="keyword">let</span> countdownElement = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;countdown_days_display&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (countdownElement) &#123;</span><br><span class="line">      countdownElement.<span class="property">innerText</span> = countdownMessage.<span class="title function_">replace</span>(<span class="string">&#x27;$&#123;daysLeft&#125;&#x27;</span>, daysLeft);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;找不到 countdown_days_display 元素&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 首次插入倒计时显示元素到 #toolbar &gt; #drag 元素旁边</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">insertCountdownElement</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> toolbarDrag = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#toolbar &gt; #drag&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (toolbarDrag) &#123;</span><br><span class="line">      toolbarDrag.<span class="title function_">insertAdjacentHTML</span>(</span><br><span class="line">        <span class="string">&quot;afterend&quot;</span>,</span><br><span class="line">        <span class="string">`&lt;div id=&quot;countdown_days_display&quot; style=&quot;font-size: 12px; color: var(--b3-toolbar-color); margin-right: 14px; user-select:none;&quot;&gt;&lt;/div&gt;`</span></span><br><span class="line">      );</span><br><span class="line">      <span class="title function_">updateCountdown</span>(); <span class="comment">// 插入后立即更新显示</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;找不到 #toolbar &gt; #drag 元素&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 每隔1分钟检测倒计时元素是否存在</span></span><br><span class="line">  <span class="keyword">let</span> checkInterval = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> countdownElement = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;countdown_days_display&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果倒计时元素不存在，则重新插入</span></span><br><span class="line">    <span class="keyword">if</span> (!countdownElement) &#123;</span><br><span class="line">      <span class="title function_">insertCountdownElement</span>();</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;倒计时元素不存在，重新插入&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;倒计时元素已存在，停止检测&quot;</span>);</span><br><span class="line">      <span class="built_in">clearInterval</span>(checkInterval);  <span class="comment">// 如果找到了元素，停止检测</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, <span class="number">60</span> * <span class="number">1000</span>); <span class="comment">// 每1分钟检测一次</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 立即插入倒计时显示元素，并在1分钟后开始定时更新</span></span><br><span class="line">  <span class="title function_">insertCountdownElement</span>(); <span class="comment">// 立即插入元素</span></span><br><span class="line">  <span class="built_in">setInterval</span>(updateCountdown, <span class="number">60</span> * <span class="number">1000</span>); <span class="comment">// 每60秒更新一次（1分钟）</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动倒计时功能</span></span><br><span class="line"><span class="title function_">startCountdown</span>(targetDate);</span><br></pre></td></tr></table></figure><h2 id="13-CSS-代码块折叠后依旧显示备注"><a href="#13-CSS-代码块折叠后依旧显示备注" class="headerlink" title="13. CSS.代码块折叠后依旧显示备注"></a>13. CSS.代码块折叠后依旧显示备注</h2><p>默认情况下代码块折叠了之后，右上角的小m图标会消失，无法显示备注。使用如下代码块可以让代码块被折叠了之后依旧能显示右上角的小m图标。</p><p>来源：<a href="https://ld246.com/article/1724828789124">https://ld246.com/article/1724828789124</a></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.protyle-wysiwyg</span> <span class="selector-attr">[data-node-id]</span><span class="selector-attr">[fold=<span class="string">&quot;1&quot;</span>]</span><span class="selector-pseudo">:not</span>(<span class="selector-class">.li</span>)<span class="selector-pseudo">:not</span>(<span class="selector-attr">[data-type=NodeHeading]</span>)&#123;</span><br><span class="line">    <span class="attribute">opacity</span>:<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.protyle-wysiwyg</span> <span class="selector-attr">[data-node-id]</span><span class="selector-attr">[fold=<span class="string">&quot;1&quot;</span>]</span><span class="selector-pseudo">:not</span>(<span class="selector-class">.li</span>)<span class="selector-pseudo">:not</span>(<span class="selector-attr">[data-type=NodeHeading]</span>) <span class="selector-class">.protyle-attr</span> &#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="14-CSS-图片居中"><a href="#14-CSS-图片居中" class="headerlink" title="14. CSS.图片居中"></a>14. CSS.图片居中</h2><p>默认情况下思源图片不是居中的。对于我来说我用不上图文混排的功能，基本上只会插入一张图片，所以直接让图片默认居中吧。</p><p>来源：<a href="https://ld246.com/article/1700551933609">https://ld246.com/article/1700551933609</a></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 图片居中 CSS片段 */</span></span><br><span class="line"><span class="selector-class">.p</span><span class="selector-pseudo">:has</span>(<span class="selector-tag">span</span><span class="selector-class">.img</span>) &#123; </span><br><span class="line"><span class="attribute">text-align</span>:center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="15-CSS-文件后缀图标"><a href="#15-CSS-文件后缀图标" class="headerlink" title="15. CSS.文件后缀图标"></a>15. CSS.文件后缀图标</h2><p>思源内有部分文件后缀是没有图标的，所以需要手动配置一下。图标文件的url以思源工作空间下conf目录为根目录。使用该代码片段，需要同时修改所有后缀名，并指向正确的图标文件路径。</p><p>来源：<a href="https://ld246.com/article/1725863880770/comment/1725878511726#comments">https://ld246.com/article/1725863880770/comment/1725878511726#comments</a></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Java 文件 */</span></span><br><span class="line"><span class="selector-id">#sidebar</span> <span class="selector-attr">[data-type=<span class="string">&quot;sidebar-outline&quot;</span>]</span> <span class="selector-attr">[data-node-id]</span> <span class="selector-tag">span</span><span class="selector-attr">[data-type~=a]</span><span class="selector-attr">[data-href$=<span class="string">&quot;.java&quot;</span>]</span><span class="selector-pseudo">::before</span>,</span><br><span class="line"><span class="selector-class">.sy__outline</span> <span class="selector-attr">[data-node-id]</span> <span class="selector-tag">span</span><span class="selector-attr">[data-type~=a]</span><span class="selector-attr">[data-href$=<span class="string">&quot;.java&quot;</span>]</span><span class="selector-pseudo">::before</span>,</span><br><span class="line"><span class="selector-class">.protyle-wysiwyg</span> <span class="selector-attr">[data-node-id]</span> <span class="selector-tag">span</span><span class="selector-attr">[data-type~=a]</span><span class="selector-attr">[data-href$=<span class="string">&quot;.java&quot;</span>]</span><span class="selector-pseudo">::before</span>,</span><br><span class="line"><span class="selector-id">#sidebar</span> <span class="selector-attr">[data-type=<span class="string">&quot;sidebar-outline&quot;</span>]</span> <span class="selector-attr">[data-node-id]</span> <span class="selector-tag">span</span><span class="selector-attr">[data-type~=url]</span><span class="selector-attr">[data-href$=<span class="string">&quot;.java&quot;</span>]</span><span class="selector-pseudo">::before</span>,</span><br><span class="line"><span class="selector-class">.sy__outline</span> <span class="selector-attr">[data-node-id]</span> <span class="selector-tag">span</span><span class="selector-attr">[data-type~=url]</span><span class="selector-attr">[data-href$=<span class="string">&quot;.java&quot;</span>]</span><span class="selector-pseudo">::before</span>,</span><br><span class="line"><span class="selector-class">.protyle-wysiwyg</span> <span class="selector-attr">[data-node-id]</span> <span class="selector-tag">span</span><span class="selector-attr">[data-type~=url]</span><span class="selector-attr">[data-href$=<span class="string">&quot;.java&quot;</span>]</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">/appearance/myicon/java.svg</span>) <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.protyle-wysiwyg</span> <span class="selector-tag">a</span><span class="selector-attr">[href$=<span class="string">&quot;.java&quot;</span>]</span><span class="selector-pseudo">::before</span>,</span><br><span class="line"><span class="selector-class">.b3-typography</span> <span class="selector-tag">a</span><span class="selector-attr">[href$=<span class="string">&quot;.java&quot;</span>]</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">/appearance/myicon/java.svg</span>) <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="16-JS-日记按钮顶栏注册"><a href="#16-JS-日记按钮顶栏注册" class="headerlink" title="16. JS.日记按钮顶栏注册"></a>16. JS.日记按钮顶栏注册</h2><p>3.1.3版本（其实很早之前就改版了）默认情况下日记按钮需要点击左上角工作空间才会在下拉菜单里面弹出，虽然它支持<code>ALT+5</code>快捷键，但是对于我个人来说更习惯于用按钮的方式来呼出日记，所以就找了找是否有把日记按钮注册到顶栏的代码片段。</p><p>来源：<a href="https://ld246.com/article/1674026309504">https://ld246.com/article/1674026309504</a>；</p><p>使用方式就是添加如下js代码块，并把你需要注册到顶栏的按钮设置为true，不需要的按钮设置为false即可。添加了这个js代码块后就能在顶栏点击日记按钮了。</p><p>第一次点击的时候会让你选择一个笔记本，选择了之后，后续点击就会直接在刚刚选择过的笔记本里面创建日记文件了。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/09/d70b8b7ce27d12b983816e8633615c3f.png" alt="image.png"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * addBarButton.js</span></span><br><span class="line"><span class="comment"> * v0.5（代码片段模式） 本次更新：加入代码片段按钮；</span></span><br><span class="line"><span class="comment"> * 为顶栏增加数据历史、日记、闪卡按钮，点击后创建对应功能快捷键按下事件</span></span><br><span class="line"><span class="comment"> * 挂件模式支持点击日记列出笔记本。 https://ld246.com/article/1674026309504</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置是否添加对应按钮</span></span><br><span class="line"><span class="keyword">let</span> g_addDailyNote = <span class="literal">true</span>;  <span class="comment">// 日记</span></span><br><span class="line"><span class="keyword">let</span> g_addFlashCard = <span class="literal">true</span>;  <span class="comment">// 闪卡</span></span><br><span class="line"><span class="keyword">let</span> g_addSetting = <span class="literal">true</span>;    <span class="comment">// 设置</span></span><br><span class="line"><span class="keyword">let</span> g_addHistory = <span class="literal">true</span>;    <span class="comment">// 数据历史</span></span><br><span class="line"><span class="keyword">let</span> g_addRecentDocs = <span class="literal">true</span>; <span class="comment">// 最近打开的文档// <span class="doctag">TODO:</span> ipad上没用？</span></span><br><span class="line"><span class="keyword">let</span> g_addSnippets = <span class="literal">true</span>;   <span class="comment">// 代码片段</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// ===================== 这下面的内容都不要修改 =====================</span></span><br><span class="line"><span class="keyword">let</span> g_addSnippetInterval = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 插入按钮</span></span><br><span class="line"><span class="comment">// 插入日历笔记本选择挂件 </span></span><br><span class="line"><span class="comment">// 参考: https://ld246.com/article/1662969146166  原作者: BryceAndJuly</span></span><br><span class="line"><span class="comment">// 参考: https://github.com/svchord/Rem-Craft 原作者: Seven Chor</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">addDailyNote</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> barSync = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;barSync&quot;</span>);</span><br><span class="line">  barSync.<span class="title function_">insertAdjacentHTML</span>(</span><br><span class="line">    <span class="string">&quot;afterEnd&quot;</span>,</span><br><span class="line">    <span class="string">&#x27;&lt;div id=&quot;barDailyNote_simulate&quot; class=&quot;toolbar__item ariaLabel&quot; aria-label=&quot;日记/DailyNote&quot; &gt;&lt;/div&gt;&#x27;</span></span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">let</span> dailyNoteBtn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;barDailyNote_simulate&quot;</span>);</span><br><span class="line">  dailyNoteBtn.<span class="property">innerHTML</span> = <span class="string">`&lt;svg&gt;&lt;use xlink:href=&quot;#iconCalendar&quot;&gt;&lt;/use&gt;&lt;/svg&gt;`</span>;</span><br><span class="line"></span><br><span class="line">  dailyNoteBtn.<span class="title function_">addEventListener</span>(</span><br><span class="line">    <span class="string">&quot;click&quot;</span>,</span><br><span class="line">    <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">      <span class="title function_">dispatchKeyEvent</span>(<span class="string">&quot;dailyNote&quot;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="literal">false</span></span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">addFlashCard</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> barSync = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;barSync&quot;</span>);</span><br><span class="line">  barSync.<span class="title function_">insertAdjacentHTML</span>(</span><br><span class="line">    <span class="string">&quot;afterEnd&quot;</span>,</span><br><span class="line">    <span class="string">&#x27;&lt;div id=&quot;barFlashCard_simulate&quot; class=&quot;toolbar__item ariaLabel&quot; aria-label=&quot;闪卡/FlashCards&quot; &gt;&lt;/div&gt;&#x27;</span></span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">let</span> flashCardBtn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;barFlashCard_simulate&quot;</span>);</span><br><span class="line">  flashCardBtn.<span class="property">innerHTML</span> = <span class="string">`&lt;svg&gt;&lt;use xlink:href=&quot;#iconRiffCard&quot;&gt;&lt;/use&gt;&lt;/svg&gt;`</span>;</span><br><span class="line"></span><br><span class="line">  flashCardBtn.<span class="title function_">addEventListener</span>(</span><br><span class="line">    <span class="string">&quot;click&quot;</span>,</span><br><span class="line">    <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">      <span class="title function_">dispatchKeyEvent</span>(<span class="string">&quot;riffCard&quot;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="literal">false</span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">addSetting</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> barMode = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;barMode&quot;</span>);</span><br><span class="line">  barMode.<span class="title function_">insertAdjacentHTML</span>(</span><br><span class="line">    <span class="string">&quot;afterend&quot;</span>,</span><br><span class="line">    <span class="string">&#x27;&lt;div id=&quot;barSetting_simulate&quot; class=&quot;toolbar__item ariaLabel&quot; aria-label=&quot;设置/Settings&quot; &gt;&lt;/div&gt;&#x27;</span></span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">let</span> settingBtn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;barSetting_simulate&quot;</span>);</span><br><span class="line">  settingBtn.<span class="property">innerHTML</span> = <span class="string">`&lt;svg&gt;&lt;use xlink:href=&quot;#iconSettings&quot;&gt;&lt;/use&gt;&lt;/svg&gt;`</span>;</span><br><span class="line"></span><br><span class="line">  settingBtn.<span class="title function_">addEventListener</span>(</span><br><span class="line">    <span class="string">&quot;click&quot;</span>,</span><br><span class="line">    <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">      <span class="title function_">dispatchKeyEvent</span>(<span class="string">&quot;config&quot;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="literal">false</span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">addHistory</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> barSync = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;barSync&quot;</span>);</span><br><span class="line">  barSync.<span class="title function_">insertAdjacentHTML</span>(</span><br><span class="line">    <span class="string">&quot;afterend&quot;</span>,</span><br><span class="line">    <span class="string">&#x27;&lt;div id=&quot;barHistory_simulate&quot; class=&quot;toolbar__item ariaLabel&quot; aria-label=&quot;数据历史/History&quot; &gt;&lt;/div&gt;&#x27;</span></span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">let</span> historyBtn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;barHistory_simulate&quot;</span>);</span><br><span class="line">  historyBtn.<span class="property">innerHTML</span> = <span class="string">`&lt;svg&gt;&lt;use xlink:href=&quot;#iconHistory&quot;&gt;&lt;/use&gt;&lt;/svg&gt;`</span>;</span><br><span class="line"></span><br><span class="line">  historyBtn.<span class="title function_">addEventListener</span>(</span><br><span class="line">    <span class="string">&quot;click&quot;</span>,</span><br><span class="line">    <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">      <span class="title function_">dispatchKeyEvent</span>(<span class="string">&quot;dataHistory&quot;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="literal">false</span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">addRecentDocs</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> barSync = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;barSync&quot;</span>);</span><br><span class="line">  barSync.<span class="title function_">insertAdjacentHTML</span>(</span><br><span class="line">    <span class="string">&quot;afterend&quot;</span>,</span><br><span class="line">    <span class="string">&#x27;&lt;div id=&quot;barRecentDocs_simulate&quot; class=&quot;toolbar__item ariaLabel&quot; aria-label=&quot;最近文档/RecentDocs&quot; &gt;&lt;/div&gt;&#x27;</span></span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">let</span> historyBtn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;barRecentDocs_simulate&quot;</span>);</span><br><span class="line">  historyBtn.<span class="property">innerHTML</span> = <span class="string">`&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; width=&quot;32&quot; height=&quot;32&quot; viewBox=&quot;0 0 24 24&quot; fill=&quot;none&quot; stroke=&quot;currentColor&quot; stroke-width=&quot;2&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot; style=&quot;fill:none;&quot;&gt;&lt;path d=&quot;M16 22h2c.5 0 1-.2 1.4-.6.4-.4.6-.9.6-1.4V7.5L14.5 2H6c-.5 0-1 .2-1.4.6C4.2 3 4 3.5 4 4v3&quot;/&gt;&lt;polyline points=&quot;14 2 14 8 20 8&quot;/&gt;&lt;circle cx=&quot;8&quot; cy=&quot;16&quot; r=&quot;6&quot;/&gt;&lt;path d=&quot;M9.5 17.5 8 16.25V14&quot;/&gt;&lt;/svg&gt;`</span>;</span><br><span class="line"></span><br><span class="line">  historyBtn.<span class="title function_">addEventListener</span>(</span><br><span class="line">    <span class="string">&quot;click&quot;</span>,</span><br><span class="line">    <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">      <span class="title function_">dispatchKeyEvent</span>(<span class="string">&quot;recentDocs&quot;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="literal">false</span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">addSnippetSetting</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> barMode = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;barMode&quot;</span>);</span><br><span class="line">  barMode.<span class="title function_">insertAdjacentHTML</span>(</span><br><span class="line">    <span class="string">&quot;afterend&quot;</span>,</span><br><span class="line">    <span class="string">&#x27;&lt;div id=&quot;barSnippet_simulate&quot; class=&quot;toolbar__item ariaLabel&quot; aria-label=&quot;代码片段&quot; &gt;&lt;/div&gt;&#x27;</span></span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">let</span> settingBtn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;barSnippet_simulate&quot;</span>);</span><br><span class="line">  settingBtn.<span class="property">innerHTML</span> = <span class="string">`&lt;svg&gt;&lt;use xlink:href=&quot;#iconSettings&quot;&gt;&lt;/use&gt;&lt;/svg&gt;`</span>;</span><br><span class="line"></span><br><span class="line">  settingBtn.<span class="title function_">addEventListener</span>(</span><br><span class="line">    <span class="string">&quot;click&quot;</span>,</span><br><span class="line">    <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">      <span class="title function_">dispatchKeyEvent</span>(<span class="string">&quot;config&quot;</span>);</span><br><span class="line">      <span class="built_in">clearInterval</span>(g_addSnippetInterval);</span><br><span class="line">      g_addSnippetInterval = <span class="built_in">setInterval</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">           <span class="keyword">const</span> appBtn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">`[data-key=&quot;dialog-setting&quot;] [data-name=&quot;appearance&quot;]`</span>);</span><br><span class="line">           <span class="keyword">if</span> (appBtn) appBtn.<span class="title function_">click</span>();</span><br><span class="line">           <span class="keyword">const</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">`button#codeSnippet`</span>);</span><br><span class="line">           <span class="keyword">if</span> (btn) &#123;btn.<span class="title function_">click</span>();<span class="built_in">clearInterval</span>(g_addSnippetInterval);&#125;  </span><br><span class="line">      &#125;, <span class="number">50</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="literal">false</span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hideDailyNodePanel</span>(<span class="params">e</span>) &#123;</span><br><span class="line">  dailyNotePanel.<span class="property">style</span>.<span class="property">visibility</span> = <span class="string">&quot;hidden&quot;</span>;</span><br><span class="line">  <span class="variable language_">window</span>.<span class="title function_">removeEventListener</span>(<span class="string">&quot;click&quot;</span>, hideDailyNodePanel, <span class="literal">false</span>);</span><br><span class="line">  e.<span class="title function_">stopPropagation</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">dispatchKeyEvent</span>(<span class="params">functionName</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> keyInit = <span class="title function_">parseHotKeyStr</span>(<span class="variable language_">window</span>.<span class="property">top</span>.<span class="property">siyuan</span>.<span class="property">config</span>.<span class="property">keymap</span>.<span class="property">general</span>[functionName].<span class="property">custom</span>);</span><br><span class="line">  keyInit[<span class="string">&quot;bubbles&quot;</span>] = <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">let</span> keydownEvent = <span class="keyword">new</span> <span class="title class_">KeyboardEvent</span>(<span class="string">&#x27;keydown&#x27;</span>, keyInit);</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;body&quot;</span>)[<span class="number">0</span>].<span class="title function_">dispatchEvent</span>(keydownEvent);</span><br><span class="line">  <span class="keyword">let</span> keyUpEvent = <span class="keyword">new</span> <span class="title class_">KeyboardEvent</span>(<span class="string">&#x27;keyup&#x27;</span>, keyInit);</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;body&quot;</span>)[<span class="number">0</span>].<span class="title function_">dispatchEvent</span>(keyUpEvent);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; hotkeyStr 思源hotkey格式 Refer: https://github.com/siyuan-note/siyuan/blob/d0f011b1a5b12e5546421f8bd442606bf0b5ad86/app/src/protyle/util/hotKey.ts#L4</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> KeyboardEventInit Refer: https://developer.mozilla.org/zh-CN/docs/Web/API/KeyboardEvent/KeyboardEvent</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">parseHotKeyStr</span>(<span class="params">hotkeyStr</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> result = &#123;</span><br><span class="line">    <span class="attr">ctrlKey</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">altKey</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">metaKey</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">shiftKey</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">key</span>: <span class="string">&#x27;A&#x27;</span>,</span><br><span class="line">    <span class="attr">keyCode</span>: <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (hotkeyStr == <span class="string">&quot;&quot;</span> || hotkeyStr == <span class="literal">undefined</span> || hotkeyStr == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;解析快捷键设置失败&quot;</span>, hotkeyStr);</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;解析快捷键设置失败&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> onlyKey = hotkeyStr;</span><br><span class="line">  <span class="keyword">if</span> (hotkeyStr.<span class="title function_">indexOf</span>(<span class="string">&quot;⌘&quot;</span>) != -<span class="number">1</span>) &#123;</span><br><span class="line">    result.<span class="property">ctrlKey</span> = <span class="literal">true</span>;</span><br><span class="line">    onlyKey = onlyKey.<span class="title function_">replace</span>(<span class="string">&quot;⌘&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (hotkeyStr.<span class="title function_">indexOf</span>(<span class="string">&quot;⌥&quot;</span>) != -<span class="number">1</span>) &#123;</span><br><span class="line">    result.<span class="property">altKey</span> = <span class="literal">true</span>;</span><br><span class="line">    onlyKey = onlyKey.<span class="title function_">replace</span>(<span class="string">&quot;⌥&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (hotkeyStr.<span class="title function_">indexOf</span>(<span class="string">&quot;⇧&quot;</span>) != -<span class="number">1</span>) &#123;</span><br><span class="line">    result.<span class="property">shiftKey</span> = <span class="literal">true</span>;</span><br><span class="line">    onlyKey = onlyKey.<span class="title function_">replace</span>(<span class="string">&quot;⇧&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 未处理 windows btn （MetaKey） </span></span><br><span class="line">  result.<span class="property">key</span> = onlyKey;</span><br><span class="line">  <span class="comment">// 在https://github.com/siyuan-note/siyuan/commit/70acd57c4b4701b973a8ca93fadf6c003b24c789#diff-558f9f531a326d2fd53151e3fc250ac4bd545452ba782b0c7c18765a37a4e2cc</span></span><br><span class="line">  <span class="comment">// 更改中，思源改为使用keyCode判断快捷键按下事件，这里进行了对应的转换</span></span><br><span class="line">  <span class="comment">// 另请参考该提交中涉及的文件</span></span><br><span class="line">  result.<span class="property">keyCode</span> = keyCodeList[result.<span class="property">key</span>];</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">assert</span>(result.<span class="property">keyCode</span> != <span class="literal">undefined</span>, <span class="string">`keyCode转换错误,key为<span class="subst">$&#123;result.key&#125;</span>`</span>);</span><br><span class="line">  <span class="keyword">switch</span> (result.<span class="property">key</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;→&quot;</span>: &#123;</span><br><span class="line">      result.<span class="property">key</span> = <span class="string">&quot;ArrowRight&quot;</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;←&quot;</span>: &#123;</span><br><span class="line">      result.<span class="property">key</span> = <span class="string">&quot;ArrowLeft&quot;</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;↑&quot;</span>: &#123;</span><br><span class="line">      result.<span class="property">key</span> = <span class="string">&quot;ArrowUp&quot;</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;↓&quot;</span>: &#123;</span><br><span class="line">      result.<span class="property">key</span> = <span class="string">&quot;ArrowDown&quot;</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;⌦&quot;</span>: &#123;</span><br><span class="line">      result.<span class="property">key</span> = <span class="string">&quot;Delete&quot;</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;⌫&quot;</span>: &#123;</span><br><span class="line">      result.<span class="property">key</span> = <span class="string">&quot;Backspace&quot;</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;↩&quot;</span>: &#123;</span><br><span class="line">      result.<span class="property">key</span> = <span class="string">&quot;Enter&quot;</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (g_addFlashCard) <span class="title function_">addFlashCard</span>();</span><br><span class="line"><span class="keyword">if</span> (g_addDailyNote) <span class="title function_">addDailyNote</span>();</span><br><span class="line"><span class="keyword">if</span> (g_addHistory) <span class="title function_">addHistory</span>();</span><br><span class="line"><span class="keyword">if</span> (g_addSetting) <span class="title function_">addSetting</span>();</span><br><span class="line"><span class="keyword">if</span> (g_addRecentDocs) <span class="title function_">addRecentDocs</span>();</span><br><span class="line"><span class="keyword">if</span> (g_addSnippets) <span class="title function_">addSnippetSetting</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> keyCodeList = &#123;</span><br><span class="line">  <span class="string">&quot;⌫&quot;</span>: <span class="number">8</span>,</span><br><span class="line">  <span class="string">&quot;⇥&quot;</span>: <span class="number">9</span>,</span><br><span class="line">  <span class="string">&quot;↩&quot;</span>: <span class="number">13</span>,</span><br><span class="line">  <span class="string">&quot;⇧&quot;</span>: <span class="number">16</span>,</span><br><span class="line">  <span class="string">&quot;⌘&quot;</span>: <span class="number">91</span>,</span><br><span class="line">  <span class="string">&quot;⌥&quot;</span>: <span class="number">18</span>,</span><br><span class="line">  <span class="string">&quot;Pause&quot;</span>: <span class="number">19</span>,</span><br><span class="line">  <span class="string">&quot;CapsLock&quot;</span>: <span class="number">20</span>,</span><br><span class="line">  <span class="string">&quot;Escape&quot;</span>: <span class="number">27</span>,</span><br><span class="line">  <span class="string">&quot; &quot;</span>: <span class="number">32</span>,</span><br><span class="line">  <span class="string">&quot;PageUp&quot;</span>: <span class="number">33</span>,</span><br><span class="line">  <span class="string">&quot;PageDown&quot;</span>: <span class="number">34</span>,</span><br><span class="line">  <span class="string">&quot;End&quot;</span>: <span class="number">35</span>,</span><br><span class="line">  <span class="string">&quot;Home&quot;</span>: <span class="number">36</span>,</span><br><span class="line">  <span class="string">&quot;←&quot;</span>: <span class="number">37</span>,</span><br><span class="line">  <span class="string">&quot;↑&quot;</span>: <span class="number">38</span>,</span><br><span class="line">  <span class="string">&quot;→&quot;</span>: <span class="number">39</span>,</span><br><span class="line">  <span class="string">&quot;↓&quot;</span>: <span class="number">40</span>,</span><br><span class="line">  <span class="string">&quot;PrintScreen&quot;</span>: <span class="number">44</span>,</span><br><span class="line">  <span class="string">&quot;Insert&quot;</span>: <span class="number">45</span>,</span><br><span class="line">  <span class="string">&quot;⌦&quot;</span>: <span class="number">46</span>,</span><br><span class="line">  <span class="string">&quot;0&quot;</span>: <span class="number">48</span>,</span><br><span class="line">  <span class="string">&quot;1&quot;</span>: <span class="number">49</span>,</span><br><span class="line">  <span class="string">&quot;2&quot;</span>: <span class="number">50</span>,</span><br><span class="line">  <span class="string">&quot;3&quot;</span>: <span class="number">51</span>,</span><br><span class="line">  <span class="string">&quot;4&quot;</span>: <span class="number">52</span>,</span><br><span class="line">  <span class="string">&quot;5&quot;</span>: <span class="number">53</span>,</span><br><span class="line">  <span class="string">&quot;6&quot;</span>: <span class="number">54</span>,</span><br><span class="line">  <span class="string">&quot;7&quot;</span>: <span class="number">55</span>,</span><br><span class="line">  <span class="string">&quot;8&quot;</span>: <span class="number">56</span>,</span><br><span class="line">  <span class="string">&quot;9&quot;</span>: <span class="number">57</span>,</span><br><span class="line">  <span class="string">&quot;A&quot;</span>: <span class="number">65</span>,</span><br><span class="line">  <span class="string">&quot;B&quot;</span>: <span class="number">66</span>,</span><br><span class="line">  <span class="string">&quot;C&quot;</span>: <span class="number">67</span>,</span><br><span class="line">  <span class="string">&quot;D&quot;</span>: <span class="number">68</span>,</span><br><span class="line">  <span class="string">&quot;E&quot;</span>: <span class="number">69</span>,</span><br><span class="line">  <span class="string">&quot;F&quot;</span>: <span class="number">70</span>,</span><br><span class="line">  <span class="string">&quot;G&quot;</span>: <span class="number">71</span>,</span><br><span class="line">  <span class="string">&quot;H&quot;</span>: <span class="number">72</span>,</span><br><span class="line">  <span class="string">&quot;I&quot;</span>: <span class="number">73</span>,</span><br><span class="line">  <span class="string">&quot;J&quot;</span>: <span class="number">74</span>,</span><br><span class="line">  <span class="string">&quot;K&quot;</span>: <span class="number">75</span>,</span><br><span class="line">  <span class="string">&quot;L&quot;</span>: <span class="number">76</span>,</span><br><span class="line">  <span class="string">&quot;M&quot;</span>: <span class="number">77</span>,</span><br><span class="line">  <span class="string">&quot;N&quot;</span>: <span class="number">78</span>,</span><br><span class="line">  <span class="string">&quot;O&quot;</span>: <span class="number">79</span>,</span><br><span class="line">  <span class="string">&quot;P&quot;</span>: <span class="number">80</span>,</span><br><span class="line">  <span class="string">&quot;Q&quot;</span>: <span class="number">81</span>,</span><br><span class="line">  <span class="string">&quot;R&quot;</span>: <span class="number">82</span>,</span><br><span class="line">  <span class="string">&quot;S&quot;</span>: <span class="number">83</span>,</span><br><span class="line">  <span class="string">&quot;T&quot;</span>: <span class="number">84</span>,</span><br><span class="line">  <span class="string">&quot;U&quot;</span>: <span class="number">85</span>,</span><br><span class="line">  <span class="string">&quot;V&quot;</span>: <span class="number">86</span>,</span><br><span class="line">  <span class="string">&quot;W&quot;</span>: <span class="number">87</span>,</span><br><span class="line">  <span class="string">&quot;X&quot;</span>: <span class="number">88</span>,</span><br><span class="line">  <span class="string">&quot;Y&quot;</span>: <span class="number">89</span>,</span><br><span class="line">  <span class="string">&quot;Z&quot;</span>: <span class="number">90</span>,</span><br><span class="line">  <span class="string">&quot;ContextMenu&quot;</span>: <span class="number">93</span>,</span><br><span class="line">  <span class="string">&quot;MyComputer&quot;</span>: <span class="number">182</span>,</span><br><span class="line">  <span class="string">&quot;MyCalculator&quot;</span>: <span class="number">183</span>,</span><br><span class="line">  <span class="string">&quot;;&quot;</span>: <span class="number">186</span>,</span><br><span class="line">  <span class="string">&quot;=&quot;</span>: <span class="number">187</span>,</span><br><span class="line">  <span class="string">&quot;,&quot;</span>: <span class="number">188</span>,</span><br><span class="line">  <span class="string">&quot;-&quot;</span>: <span class="number">189</span>,</span><br><span class="line">  <span class="string">&quot;.&quot;</span>: <span class="number">190</span>,</span><br><span class="line">  <span class="string">&quot;/&quot;</span>: <span class="number">191</span>,</span><br><span class="line">  <span class="string">&quot;`&quot;</span>: <span class="number">192</span>,</span><br><span class="line">  <span class="string">&quot;[&quot;</span>: <span class="number">219</span>,</span><br><span class="line">  <span class="string">&quot;\\&quot;</span>: <span class="number">220</span>,</span><br><span class="line">  <span class="string">&quot;]&quot;</span>: <span class="number">221</span>,</span><br><span class="line">  <span class="string">&quot;&#x27;&quot;</span>: <span class="number">222</span>,</span><br><span class="line">  <span class="string">&quot;*&quot;</span>: <span class="number">106</span>,</span><br><span class="line">  <span class="string">&quot;+&quot;</span>: <span class="number">107</span>,</span><br><span class="line">  <span class="string">&quot;-&quot;</span>: <span class="number">109</span>,</span><br><span class="line">  <span class="string">&quot;.&quot;</span>: <span class="number">110</span>,</span><br><span class="line">  <span class="string">&quot;/&quot;</span>: <span class="number">111</span>,</span><br><span class="line">  <span class="string">&quot;F1&quot;</span>: <span class="number">112</span>,</span><br><span class="line">  <span class="string">&quot;F2&quot;</span>: <span class="number">113</span>,</span><br><span class="line">  <span class="string">&quot;F3&quot;</span>: <span class="number">114</span>,</span><br><span class="line">  <span class="string">&quot;F4&quot;</span>: <span class="number">115</span>,</span><br><span class="line">  <span class="string">&quot;F5&quot;</span>: <span class="number">116</span>,</span><br><span class="line">  <span class="string">&quot;F6&quot;</span>: <span class="number">117</span>,</span><br><span class="line">  <span class="string">&quot;F7&quot;</span>: <span class="number">118</span>,</span><br><span class="line">  <span class="string">&quot;F8&quot;</span>: <span class="number">119</span>,</span><br><span class="line">  <span class="string">&quot;F9&quot;</span>: <span class="number">120</span>,</span><br><span class="line">  <span class="string">&quot;F10&quot;</span>: <span class="number">121</span>,</span><br><span class="line">  <span class="string">&quot;F11&quot;</span>: <span class="number">122</span>,</span><br><span class="line">  <span class="string">&quot;F12&quot;</span>: <span class="number">123</span>,</span><br><span class="line">  <span class="string">&quot;NumLock&quot;</span>: <span class="number">144</span>,</span><br><span class="line">  <span class="string">&quot;ScrollLock&quot;</span>: <span class="number">145</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="17-JS-自动折叠过长代码块"><a href="#17-JS-自动折叠过长代码块" class="headerlink" title="17.  JS.自动折叠过长代码块"></a>17.  JS.自动折叠过长代码块</h2><p>这个代码块的效果类似本站和csdn，会将过长的代码块自动折叠。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// see https://ld246.com/article/1727621671852</span></span><br><span class="line">(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// 当代码块内容高度超出多少像素是折叠，注意：这里的高度是指.hljs元素的高度，默认是300px</span></span><br><span class="line">    <span class="keyword">const</span> codeMaxHeight = <span class="number">300</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 展开元素样式，可在这里修改</span></span><br><span class="line">    <span class="title function_">addStyle</span>(<span class="string">`</span></span><br><span class="line"><span class="string">        .code-block .code-down &#123;</span></span><br><span class="line"><span class="string">            width: 100%;</span></span><br><span class="line"><span class="string">            text-align: center;</span></span><br><span class="line"><span class="string">            position: absolute;</span></span><br><span class="line"><span class="string">            bottom: 0px;</span></span><br><span class="line"><span class="string">            left: 0;</span></span><br><span class="line"><span class="string">            padding: 70px 0px 10px;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        .code-block .code-down-btn &#123;</span></span><br><span class="line"><span class="string">            padding: 3px 14px 1px;</span></span><br><span class="line"><span class="string">            background: rgba(0, 0, 0, 0.5);</span></span><br><span class="line"><span class="string">            border-radius: 5px;</span></span><br><span class="line"><span class="string">            cursor: pointer;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        .code-block .code-down-arrow&#123;</span></span><br><span class="line"><span class="string">            width: 13px;</span></span><br><span class="line"><span class="string">            height: 13px;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        [data-theme-mode=&quot;light&quot;] &#123;</span></span><br><span class="line"><span class="string">            .code-block .code-down &#123;</span></span><br><span class="line"><span class="string">                background-image: linear-gradient(to bottom, rgba(0, 0, 0, 0), rgba(0, 0, 0, 0.6));</span></span><br><span class="line"><span class="string">                border-radius: 5px !important; </span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">            .code-block .code-down-btn &#123;</span></span><br><span class="line"><span class="string">                background-color: rgba(255, 255, 255, 0.6);</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        [data-theme-mode=&quot;dark&quot;] &#123;</span></span><br><span class="line"><span class="string">            .code-block .code-down &#123;</span></span><br><span class="line"><span class="string">                background-image: linear-gradient(to bottom, rgba(255, 255, 255, 0), rgba(255, 255, 255, 0.5) 70%, rgba(255, 255, 255, 1));</span></span><br><span class="line"><span class="string">                border-radius: 5px !important;</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">            .code-block .code-down-btn &#123;</span></span><br><span class="line"><span class="string">                background-color: rgba(0, 0, 0, 0.5);</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        /* 代码块限制最大高度 CSS片段 */</span></span><br><span class="line"><span class="string">        div:not(#preview) &gt; .protyle-wysiwyg .code-block .hljs &#123;</span></span><br><span class="line"><span class="string">            max-height: <span class="subst">$&#123;codeMaxHeight || <span class="number">300</span>&#125;</span>px;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    `</span>);</span><br><span class="line">    <span class="title function_">whenElementExist</span>(<span class="title function_">isMobile</span>()?<span class="string">&#x27;body&#x27;</span>:<span class="string">&#x27;.layout__center&#x27;</span>).<span class="title function_">then</span>(<span class="keyword">async</span> el =&gt; &#123;</span><br><span class="line"><span class="comment">// 监听代码块内容被提交</span></span><br><span class="line">        <span class="comment">//listenCodeUpdate();</span></span><br><span class="line">        <span class="comment">// 加载时执行</span></span><br><span class="line"><span class="keyword">let</span> protyle;</span><br><span class="line"><span class="keyword">await</span> <span class="title function_">whenElementExist</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">protyle = el.<span class="title function_">querySelector</span>(<span class="string">&#x27;.protyle&#x27;</span>);</span><br><span class="line"><span class="keyword">return</span> protyle &amp;&amp; protyle?.<span class="property">dataset</span>?.<span class="property">loading</span> === <span class="string">&#x27;finished&#x27;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="title function_">addCodeExtends</span>(protyle.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.code-block:not(:has(.code-down))&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//滚动时执行</span></span><br><span class="line">protyle.<span class="title function_">querySelector</span>(<span class="string">&quot;.protyle-content&quot;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;scroll&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="title function_">addCodeExtends</span>(protyle.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.code-block:not(:has(.code-down))&#x27;</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听protyle加载事件</span></span><br><span class="line">        <span class="title function_">observeProtyleAddition</span>(el, <span class="function"><span class="params">protyles</span> =&gt;</span> &#123;</span><br><span class="line">            protyles.<span class="title function_">forEach</span>(<span class="keyword">async</span> protyle =&gt; &#123;</span><br><span class="line"><span class="keyword">if</span>(!protyle.<span class="property">classList</span>.<span class="title function_">contains</span>(<span class="string">&#x27;protyle&#x27;</span>)) &#123;</span><br><span class="line">protyle = protyle.<span class="title function_">closest</span>(<span class="string">&#x27;.protyle&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 加载时执行</span></span><br><span class="line"><span class="title function_">addCodeExtends</span>(protyle.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.code-block:not(:has(.code-down))&#x27;</span>));</span><br><span class="line"><span class="comment">// 滚动时执行</span></span><br><span class="line">protyle.<span class="title function_">querySelector</span>(<span class="string">&quot;.protyle-content&quot;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;scroll&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="title function_">addCodeExtends</span>(protyle.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.code-block:not(:has(.code-down))&#x27;</span>));</span><br><span class="line">&#125;);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> runing = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">addCodeExtends</span>(<span class="params">codeBlocks</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(codeBlocks.<span class="property">length</span> === <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span>(runing) <span class="keyword">return</span>; </span><br><span class="line">runing = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;runing = <span class="literal">false</span>;&#125;, <span class="number">300</span>);</span><br><span class="line">codeBlocks.<span class="title function_">forEach</span>(<span class="keyword">async</span> codeBlock =&gt; &#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_">isCursorInCodeBlock</span>(codeBlock)) &#123;</span><br><span class="line">codeBlock.<span class="title function_">querySelector</span>(<span class="string">&#x27;.hljs&#x27;</span>).<span class="property">style</span>.<span class="property">maxHeight</span> = <span class="string">&#x27;100%&#x27;</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">            <span class="keyword">if</span>(codeBlock.<span class="title function_">querySelector</span>(<span class="string">&#x27;.code-down&#x27;</span>)) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">const</span> hljs = <span class="keyword">await</span> <span class="title function_">whenElementExist</span>(<span class="function">() =&gt;</span> codeBlock.<span class="title function_">querySelector</span>(<span class="string">&#x27;.hljs&#x27;</span>));</span><br><span class="line"><span class="keyword">if</span>(hljs &amp;&amp; hljs.<span class="property">scrollHeight</span> &gt; codeMaxHeight) &#123;</span><br><span class="line"><span class="keyword">const</span> expand = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">                <span class="comment">//see https://github.com/88250/lute/issues/206</span></span><br><span class="line">expand.<span class="property">className</span> = <span class="string">&#x27;code-down protyle-custom&#x27;</span>;</span><br><span class="line"><span class="comment">//expand.contentEditable = false;</span></span><br><span class="line">expand.<span class="property">innerHTML</span> = <span class="string">`&lt;span class=&quot;code-down-btn&quot;&gt;&lt;svg class=&quot;code-down-arrow&quot;&gt;&lt;use xlink:href=&quot;#iconDown&quot;&gt;&lt;/use&gt;&lt;/svg&gt;&lt;/span&gt;`</span>;</span><br><span class="line">codeBlock.<span class="title function_">appendChild</span>(expand);</span><br><span class="line">                expand.<span class="title function_">closest</span>(<span class="string">&#x27;.code-block&#x27;</span>).<span class="title function_">querySelector</span>(<span class="string">&#x27;.hljs&#x27;</span>).<span class="property">style</span>.<span class="property">maxHeight</span> = codeMaxHeight+<span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">expand.<span class="title function_">querySelector</span>(<span class="string">&#x27;.code-down-btn&#x27;</span>).<span class="property">onclick</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">expand.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span>;</span><br><span class="line">expand.<span class="title function_">closest</span>(<span class="string">&#x27;.code-block&#x27;</span>).<span class="title function_">querySelector</span>(<span class="string">&#x27;.hljs&#x27;</span>).<span class="property">style</span>.<span class="property">maxHeight</span> = <span class="string">&#x27;100%&#x27;</span>;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> isFetchOverridden = <span class="literal">false</span>; <span class="comment">// 标志变量，用于判断 fetch 是否已经被覆盖</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">listenCodeUpdate</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!isFetchOverridden) &#123;</span><br><span class="line">            <span class="keyword">const</span> originalFetch = <span class="variable language_">window</span>.<span class="property">fetch</span>;</span><br><span class="line">            <span class="variable language_">window</span>.<span class="property">fetch</span> = <span class="keyword">async</span> <span class="keyword">function</span> (<span class="params">url, ...args</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (url.<span class="title function_">endsWith</span>(<span class="string">&#x27;/api/transactions&#x27;</span>)) &#123;</span><br><span class="line"><span class="keyword">if</span>(args.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                            <span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">in</span> args)&#123;</span><br><span class="line">                                <span class="keyword">if</span>(args[i].<span class="property">body</span>.<span class="title function_">indexOf</span>(<span class="string">`&lt;div class=\\&quot;code-down\\&quot;`</span>) !== -<span class="number">1</span>) &#123;</span><br><span class="line">                                    <span class="keyword">let</span> body = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(args[i].<span class="property">body</span>);</span><br><span class="line">                                    <span class="keyword">if</span>(!body.<span class="property">transactions</span>) <span class="keyword">continue</span>;</span><br><span class="line">                                    <span class="keyword">for</span>(<span class="keyword">let</span> j <span class="keyword">in</span> body.<span class="property">transactions</span>)&#123;</span><br><span class="line">                                        <span class="keyword">if</span>(!body.<span class="property">transactions</span>[j] || !body.<span class="property">transactions</span>[j].<span class="property">doOperations</span>) <span class="keyword">continue</span>;</span><br><span class="line">                                        <span class="keyword">for</span>(<span class="keyword">let</span> k <span class="keyword">in</span> body.<span class="property">transactions</span>[j].<span class="property">doOperations</span>)&#123;</span><br><span class="line">                                            <span class="keyword">if</span>(!body.<span class="property">transactions</span>[j].<span class="property">doOperations</span>[k] || !body.<span class="property">transactions</span>[j].<span class="property">doOperations</span>[k].<span class="property">data</span>) <span class="keyword">continue</span>;</span><br><span class="line">                                            body.<span class="property">transactions</span>[j].<span class="property">doOperations</span>[k].<span class="property">data</span> = body.<span class="property">transactions</span>[j].<span class="property">doOperations</span>[k].<span class="property">data</span>.<span class="title function_">replace</span>(<span class="regexp">/&amp;lt;div class=&quot;code-down&quot;.*?&amp;lt;\/div&amp;gt;\n?/ig</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">                                            body.<span class="property">transactions</span>[j].<span class="property">doOperations</span>[k].<span class="property">data</span> = body.<span class="property">transactions</span>[j].<span class="property">doOperations</span>[k].<span class="property">data</span>.<span class="title function_">replace</span>(<span class="regexp">/&lt;div class=&quot;code-down&quot;[^&gt;]*?&gt;.*?&lt;\/div&gt;\n?/ig</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">                                        &#125;</span><br><span class="line">                                    &#125;</span><br><span class="line">                                    body = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(body);</span><br><span class="line">args[i].<span class="property">body</span> = body;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">&#125;</span><br><span class="line">                    &#125;</span><br><span class="line"><span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">originalFetch</span>(url, ...args);</span><br><span class="line">                    <span class="keyword">return</span> response;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> error;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            isFetchOverridden = <span class="literal">true</span>; <span class="comment">// 设置标志变量，表示 fetch 已经被覆盖</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">addStyle</span>(<span class="params">cssRules</span>) &#123;</span><br><span class="line">        <span class="comment">// 创建一个新的style元素</span></span><br><span class="line">        <span class="keyword">const</span> styleElement = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;style&#x27;</span>);</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 将CSS规则添加到style元素中</span></span><br><span class="line">        styleElement.<span class="property">innerHTML</span> = cssRules;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 将style元素插入到文档的head中</span></span><br><span class="line">        <span class="variable language_">document</span>.<span class="property">head</span>.<span class="title function_">appendChild</span>(styleElement);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">observeProtyleAddition</span>(<span class="params">el, callback</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> config = &#123; <span class="attr">attributes</span>: <span class="literal">false</span>, <span class="attr">childList</span>: <span class="literal">true</span>, <span class="attr">subtree</span>: <span class="literal">true</span> &#125;;</span><br><span class="line">        <span class="keyword">const</span> observer = <span class="keyword">new</span> <span class="title class_">MutationObserver</span>(<span class="function">(<span class="params">mutationsList, observer</span>) =&gt;</span> &#123;</span><br><span class="line">            mutationsList.<span class="title function_">forEach</span>(<span class="function"><span class="params">mutation</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (mutation.<span class="property">type</span> === <span class="string">&#x27;childList&#x27;</span>) &#123;</span><br><span class="line">                    <span class="comment">// 查找新增加的 NodeCodeBlock 元素</span></span><br><span class="line">                    <span class="keyword">const</span> protyles = <span class="title class_">Array</span>.<span class="title function_">from</span>(mutation.<span class="property">addedNodes</span>).<span class="title function_">filter</span>(<span class="function"><span class="params">node</span> =&gt;</span></span><br><span class="line">                        node.<span class="property">nodeType</span> === <span class="title class_">Node</span>.<span class="property">ELEMENT_NODE</span> &amp;&amp;</span><br><span class="line">                        (node.<span class="property">classList</span>.<span class="title function_">contains</span>(<span class="string">&#x27;protyle&#x27;</span>) || node.<span class="property">classList</span>.<span class="title function_">contains</span>(<span class="string">&#x27;protyle-content&#x27;</span>))</span><br><span class="line">                    );</span><br><span class="line">    </span><br><span class="line">                    <span class="comment">// 如果找到了这样的元素，则调用回调函数</span></span><br><span class="line">                    <span class="keyword">if</span> (protyles.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="title function_">callback</span>(protyles);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 开始观察 body 下的所有变化</span></span><br><span class="line">        observer.<span class="title function_">observe</span>(el, config);</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 当不再需要观察时可调用断开来停止观察</span></span><br><span class="line">        <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            observer.<span class="title function_">disconnect</span>();</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">isCursorInCodeBlock</span>(<span class="params">codeBlock</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(!codeBlock) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">let</span> cursorEl = <span class="title function_">getCursorElement</span>();</span><br><span class="line"><span class="keyword">if</span>(!cursorEl) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">cursorEl = cursorEl.<span class="title function_">closest</span>(<span class="string">&#x27;.code-block&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>(!cursorEl) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">return</span> cursorEl === codeBlock;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getCursorElement</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> selection = <span class="variable language_">window</span>.<span class="title function_">getSelection</span>();</span><br><span class="line">    <span class="keyword">if</span> (selection.<span class="property">rangeCount</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> range = selection.<span class="title function_">getRangeAt</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">// 获取选择范围的起始位置所在的节点</span></span><br><span class="line">        <span class="keyword">const</span> startContainer = range.<span class="property">startContainer</span>;</span><br><span class="line">        <span class="comment">// 如果起始位置是文本节点，返回其父元素节点</span></span><br><span class="line">        <span class="keyword">const</span> cursorElement = startContainer.<span class="property">nodeType</span> === <span class="title class_">Node</span>.<span class="property">TEXT_NODE</span></span><br><span class="line">            ? startContainer.<span class="property">parentElement</span></span><br><span class="line">            : startContainer;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> cursorElement;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">isMobile</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> !!<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;sidebar&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 等待元素渲染完成后执行</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">whenElementExist</span>(<span class="params">selector</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> <span class="title function_">checkForElement</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">                <span class="keyword">let</span> element = <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">typeof</span> selector === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">                    element = <span class="title function_">selector</span>();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    element = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(selector);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (element) &#123;</span><br><span class="line">                    <span class="title function_">resolve</span>(element);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="title function_">requestAnimationFrame</span>(checkForElement);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="title function_">checkForElement</span>();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>效果还是不错的。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/11/6b1a5b33aeff8f6157a4e6f0362a7b7b.png" alt="image.png"></p><p>我在原始代码块的基础上修改了一下css样式，让这里的黑色渐变更浅一点，然后加上了底部的圆角，和代码块上方保持一致。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-attr">[data-theme-mode=<span class="string">&quot;light&quot;</span>]</span> &#123;</span><br><span class="line">    <span class="selector-class">.code-block</span> <span class="selector-class">.code-down</span> &#123;</span><br><span class="line">        <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(to bottom, <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.6</span>));</span><br><span class="line">        <span class="attribute">border-radius</span>: <span class="number">5px</span> <span class="meta">!important</span>; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.code-block</span> <span class="selector-class">.code-down-btn</span> &#123;</span><br><span class="line">        <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.6</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/11/8e04d73e8b48cd8bfbb387751c24ce05.png" alt="image.png"></p><h2 id="18-CSS-不同层级标题添加颜色"><a href="#18-CSS-不同层级标题添加颜色" class="headerlink" title="18. CSS.不同层级标题添加颜色"></a>18. CSS.不同层级标题添加颜色</h2><p>不同层级标题设置字体颜色，更加突出层级</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="selector-class">.protyle-wysiwyg</span> <span class="selector-class">.h1</span> &#123; <span class="attribute">color</span>: <span class="number">#d40045</span>; &#125;</span><br><span class="line"> <span class="selector-class">.protyle-wysiwyg</span> <span class="selector-class">.h2</span> &#123; <span class="attribute">color</span>: <span class="number">#ff7f00</span>; &#125;</span><br><span class="line"> <span class="selector-class">.protyle-wysiwyg</span> <span class="selector-class">.h3</span> &#123; <span class="attribute">color</span>: <span class="number">#66b82b</span>; &#125;</span><br><span class="line"> <span class="selector-class">.protyle-wysiwyg</span> <span class="selector-class">.h4</span> &#123; <span class="attribute">color</span>: <span class="number">#093f86</span>; &#125;</span><br><span class="line"> <span class="selector-class">.protyle-wysiwyg</span> <span class="selector-class">.h5</span> &#123; <span class="attribute">color</span>: <span class="number">#340c81</span>; &#125;</span><br><span class="line"><span class="comment">/* https://ld246.com/article/1728445085281 */</span></span><br></pre></td></tr></table></figure><h2 id="19-CSS-一级标题下划线"><a href="#19-CSS-一级标题下划线" class="headerlink" title="19. CSS.一级标题下划线"></a>19. CSS.一级标题下划线</h2><p>给一级标题的底部添加一个下划线，突出重要性</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> <span class="selector-class">.b3-typography</span> <span class="selector-class">.h1</span>, <span class="selector-class">.b3-typography</span> <span class="selector-tag">h1</span>, <span class="selector-class">.protyle-wysiwyg</span> <span class="selector-class">.h1</span>, <span class="selector-class">.protyle-wysiwyg</span> <span class="selector-tag">h1</span> &#123;</span><br><span class="line">     <span class="comment">/* 这里的边框粗细可以修改2px这个值 */</span></span><br><span class="line">     <span class="attribute">border-bottom</span>: <span class="number">2px</span> solid <span class="built_in">var</span>(--b3-theme-on-background);</span><br><span class="line">     <span class="attribute">border-radius</span>: <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* https://ld246.com/article/1728445085281 */</span></span><br></pre></td></tr></table></figure><h2 id="待更新"><a href="#待更新" class="headerlink" title="待更新"></a>待更新</h2><p>等待后续更新本文……</p>]]></content>
    
    
    <summary type="html">在论坛上收集的有效的思源代码片段</summary>
    
    
    
    <category term="差生文具多" scheme="https://blog.musnow.top/categories/%E5%B7%AE%E7%94%9F%E6%96%87%E5%85%B7%E5%A4%9A/"/>
    
    <category term="编程工具" scheme="https://blog.musnow.top/categories/%E5%B7%AE%E7%94%9F%E6%96%87%E5%85%B7%E5%A4%9A/%E7%BC%96%E7%A8%8B%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="思源笔记" scheme="https://blog.musnow.top/tags/%E6%80%9D%E6%BA%90%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
</feed>
