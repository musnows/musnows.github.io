<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>慕雪的寒舍</title>
  
  <subtitle>雪下了一夜</subtitle>
  <link href="https://blog.musnow.top/atom.xml" rel="self"/>
  
  <link href="https://blog.musnow.top/"/>
  <updated>2024-08-18T07:44:11.000Z</updated>
  <id>https://blog.musnow.top/</id>
  
  <author>
    <name>慕雪年华</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【leetcode】44.通配符匹配</title>
    <link href="https://blog.musnow.top/posts/1431516729/"/>
    <id>https://blog.musnow.top/posts/1431516729/</id>
    <published>2024-08-18T07:22:47.000Z</published>
    <updated>2024-08-18T07:44:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>本题和<strong>leetcode10.正则表达式</strong>类似，本站也有关于第10题的题解。相比于第十题，本地的情况少一些，更加简单。</p><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><blockquote><p><a href="https://leetcode.cn/problems/wildcard-matching/">https://leetcode.cn/problems/wildcard-matching/</a></p></blockquote><p>给你一个输入字符串 (s) 和一个字符模式 (p) ，请你实现一个支持 <code>&#39;?&#39;</code> 和 <code>&#39;*&#39;</code> 匹配规则的通配符匹配：</p><ul><li><code>&#39;?&#39;</code> 可以匹配任何单个字符。</li><li><code>&#39;*&#39;</code> 可以匹配任意字符序列（包括空字符序列）。</li></ul><p>判定匹配成功的充要条件是：字符模式必须能够 完全匹配 输入字符串（而不是部分匹配）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">示例 1：</span><br><span class="line">输入：s = &quot;aa&quot;, p = &quot;a&quot;</span><br><span class="line">输出：false</span><br><span class="line">解释：&quot;a&quot; 无法匹配 &quot;aa&quot; 整个字符串。</span><br><span class="line"></span><br><span class="line">示例 2：</span><br><span class="line">输入：s = &quot;aa&quot;, p = &quot;*&quot;</span><br><span class="line">输出：true</span><br><span class="line">解释：&#x27;*&#x27; 可以匹配任意字符串。</span><br><span class="line"></span><br><span class="line">示例 3：</span><br><span class="line">输入：s = &quot;cb&quot;, p = &quot;?a&quot;</span><br><span class="line">输出：false</span><br><span class="line">解释：&#x27;?&#x27; 可以匹配 &#x27;c&#x27;, 但第二个 &#x27;a&#x27; 无法匹配 &#x27;b&#x27;。</span><br></pre></td></tr></table></figure><p>提示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0 &lt;= s.length, p.length &lt;= 2000</span><br><span class="line">s 仅由小写英文字母组成</span><br><span class="line">p 仅由小写英文字母、&#x27;?&#x27; 或 &#x27;*&#x27; 组成</span><br></pre></td></tr></table></figure><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>本题的星号独立存在，不再像第十题一样是和前一个匹配符绑定的了。所以最终的情况就少了一些。下面的题解是基于第十题之上进行的修改。</p><p>本题可以用动态规划的思路，先定义dp数组，用的是非常常见的定义方式，在很多动态规划的题目中都是用这个方式定义的：</p><ul><li><code>dp[i][j]</code> 为s中i之前，p中j之前（不包括i、j）的字符串能否匹配成功；</li><li>换句话说： <code>dp[i][j]</code>为s中前i个和p中前j个字符能否匹配成功；</li></ul><p>根据这个定义，需要将dp数组构建如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// dp[i][j]代表s中i之前（不包括i）和p中j之前（不包括j）的是否能匹配</span></span><br><span class="line">vector&lt;vector&lt;<span class="type">bool</span>&gt;&gt; <span class="built_in">dp</span>(s.<span class="built_in">size</span>() + <span class="number">1</span>,</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="type">bool</span>&gt;(p.<span class="built_in">size</span>() + <span class="number">1</span>, <span class="literal">false</span>));</span><br></pre></td></tr></table></figure><p>随后是定义递归方程，分为三种情况：</p><ul><li><code>p[j-1]</code>是字母。</li></ul><p>这种情况的递归方程比较简单，我们判断<code>s[i-1] == p[j-1]</code>就能知道当前是否能继续往后匹配了。规划方程如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>] &amp;&amp; s[i - <span class="number">1</span>] == p[j - <span class="number">1</span>];</span><br></pre></td></tr></table></figure><p>其中<code>dp[i - 1][j - 1]</code>代表的是s中前i-1个字符和p中前j-1个字符是否能成功匹配，是“上一次”计算的结果。</p><ul><li><code>p[j-1]</code>是<code>&#39;?&#39;</code>。</li></ul><p>这种情况其实和是字母没区别，因为<code>&#39;?&#39;</code>可以当作任意一个字母来判断。规划方程如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>] &amp;&amp; p[j - <span class="number">1</span>] == <span class="string">&#x27;?&#x27;</span>;</span><br></pre></td></tr></table></figure><ul><li><code>p[j-1]</code>是<code>&#39;*&#39;</code>。</li></ul><p>此时就需要分类讨论了，分为两种情况</p><ul><li>星号匹配0个字符；</li><li>星号匹配1个字符；</li></ul><p>理论上来说还会有匹配2个及以上字符的情况，但是我们这里不需要讨论这种情况，因为我们dp数组在单次循环中，s和p里面的字符都是只会增长1个的，<strong>只是引入了1个新的字符</strong>，那里有匹配俩个及以上字符的情况呢？</p><ul><li>当我们匹配0个字符的时候，就相当于是把星号<code>p[j-1]</code>从p字符串中删除，此时能否匹配就取决于<code>dp[i][j-1]</code>是否为真了。</li><li>当我们匹配1个字符的时候，就相当于使用星号匹配了<code>s[i-1]</code>，此时能否继续匹配就取决于<code>dp[i-1][j]</code>是否为真了。</li></ul><p>思考匹配和不匹配时需要沿用哪一个dp结果，可以走这个思路：我们不使用当前的星号进行匹配的时候，相当于从p里面删除当前<code>p[j-1]</code>星号，所以结果是<code>dp[i][j-1]</code>（j前一位，i不变）；如果我们使用当前星号进行匹配，就相当于从s中删除<code>s[i-1]</code>，所以结果是<code>dp[i-1][j]</code>（i前一位，j不变）；</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p>最终的完整代码如下所示</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isMatch</span><span class="params">(string s, string p)</span> </span>&#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">bool</span>&gt;&gt; <span class="built_in">dp</span>(s.<span class="built_in">size</span>() + <span class="number">1</span>,</span><br><span class="line">                                <span class="built_in">vector</span>&lt;<span class="type">bool</span>&gt;(p.<span class="built_in">size</span>() + <span class="number">1</span>, <span class="literal">false</span>));</span><br><span class="line">        <span class="comment">// 初始化</span></span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">// 初试化</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">size_t</span> j = <span class="number">1</span>; j &lt; dp[<span class="number">0</span>].<span class="built_in">size</span>(); j++) &#123;</span><br><span class="line">            <span class="comment">// 如果是*则可以匹配，只要有不是*的就没办法匹配</span></span><br><span class="line">            dp[<span class="number">0</span>][j] = p[j - <span class="number">1</span>] == <span class="string">&#x27;*&#x27;</span> &amp;&amp; dp[<span class="number">0</span>][j - <span class="number">1</span>];</span><br><span class="line">            <span class="comment">// cout &lt;&lt; j &lt;&lt; &quot; &quot; &lt;&lt; dp[0][j] &lt;&lt; endl;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 本题和leetcode10有些区别。主要在于*的处理。</span></span><br><span class="line">        <span class="comment">// 1.字符串是?可以匹配一个</span></span><br><span class="line">        <span class="comment">// 2.字符串是字母，直接比较</span></span><br><span class="line">        <span class="comment">// 3.字符串是*，不需要和前一个配对，直接进行比较</span></span><br><span class="line">        <span class="comment">//      1）匹配0个，则相当于当前字符不存在，沿用dp[i][j-1]</span></span><br><span class="line">        <span class="comment">//      2）匹配1个，相当于?，直接进行匹配，沿用dp[i-1][j]</span></span><br><span class="line">        <span class="comment">//      3）匹配2个以上，不存在这种情况。</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">1</span>; i &lt; dp.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">size_t</span> j = <span class="number">1</span>; j &lt; dp[i].<span class="built_in">size</span>(); j++) &#123;</span><br><span class="line">                <span class="comment">// 情况1，p[j-1] == &#x27;*&#x27;</span></span><br><span class="line">                <span class="keyword">if</span> (p[j - <span class="number">1</span>] == <span class="string">&#x27;*&#x27;</span>) &#123;</span><br><span class="line">                    <span class="comment">// 1. &#x27;*&#x27;只匹配0个字符（相当于删除*）</span></span><br><span class="line">                    <span class="type">bool</span> result1 = dp[i][j - <span class="number">1</span>];</span><br><span class="line">                    <span class="comment">// 2. &#x27;*&#x27;匹配1个字符。</span></span><br><span class="line">                    <span class="type">bool</span> result2 = dp[i - <span class="number">1</span>][j];</span><br><span class="line">                    <span class="comment">// 3. &#x27;*&#x27;匹配2个和以上的字符</span></span><br><span class="line">                    <span class="comment">//    这种情况不用考虑！因为每次dp循环s只新增了一个字符，那里来的两个字符以上的匹配？</span></span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 最终dp只要有一个情况为true就行</span></span><br><span class="line">                    dp[i][j] = result1 || result2;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 情况2，p[j-1] == &#x27;?&#x27; 或者是个字母</span></span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// 1. 是一个字母，直接判断二者是否相等</span></span><br><span class="line">                    <span class="type">bool</span> result1 = dp[i - <span class="number">1</span>][j - <span class="number">1</span>] &amp;&amp; s[i - <span class="number">1</span>] == p[j - <span class="number">1</span>];</span><br><span class="line">                    <span class="comment">// 2. 是一个&#x27;.&#x27;，那和二者相等也是没区别的</span></span><br><span class="line">                    <span class="type">bool</span> result2 = dp[i - <span class="number">1</span>][j - <span class="number">1</span>] &amp;&amp; p[j - <span class="number">1</span>] == <span class="string">&#x27;?&#x27;</span>;</span><br><span class="line">                    dp[i][j] = result1 || result2;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dp[s.<span class="built_in">size</span>()][p.<span class="built_in">size</span>()];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/08/f5997fc1e3ec06d3972dbd3f74883463.png" alt="image.png"></p><p>这里顺带给出降重成一维数组之后的代码，合并了部分状态的判断。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isMatch</span><span class="params">(string s, string p)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 降重</span></span><br><span class="line">        <span class="function">vector&lt;<span class="type">bool</span>&gt; <span class="title">dp</span><span class="params">(p.size() + <span class="number">1</span>, <span class="literal">false</span>)</span></span>;</span><br><span class="line">        <span class="comment">// 初始化</span></span><br><span class="line">        dp[<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">// 初试化</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">size_t</span> j = <span class="number">1</span>; j &lt; dp.<span class="built_in">size</span>(); j++) &#123;</span><br><span class="line">            <span class="comment">// 如果是*则可以匹配，只要有不是*的就没办法匹配</span></span><br><span class="line">            dp[j] = p[j - <span class="number">1</span>] == <span class="string">&#x27;*&#x27;</span> &amp;&amp; dp[j - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 本题和leetcode10有些区别。主要在于*的处理。</span></span><br><span class="line">        <span class="comment">// 1.字符串是?可以匹配一个</span></span><br><span class="line">        <span class="comment">// 2.字符串是字母，直接比较</span></span><br><span class="line">        <span class="comment">// 3.字符串是*，不需要和前一个配对，直接进行比较</span></span><br><span class="line">        <span class="comment">//      1）匹配0个，则相当于当前字符不存在，沿用dp[j-1]</span></span><br><span class="line">        <span class="comment">//      2）匹配1个，相当于?，直接进行匹配，沿用dp[j]</span></span><br><span class="line">        <span class="comment">//      3）匹配2个以上，不存在这种情况。</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">1</span>; i &lt;= s.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="comment">// 用于保存上一轮 dp 的状态</span></span><br><span class="line">            <span class="type">bool</span> prev = dp[<span class="number">0</span>];</span><br><span class="line">            dp[<span class="number">0</span>] = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= p.<span class="built_in">size</span>(); j++) &#123;</span><br><span class="line">                <span class="type">bool</span> temp = dp[j]; <span class="comment">// 保存当前 dp[j]，用于下一次迭代</span></span><br><span class="line">                <span class="keyword">if</span> (p[j - <span class="number">1</span>] == <span class="string">&#x27;*&#x27;</span>) &#123;</span><br><span class="line">                    dp[j] = dp[j - <span class="number">1</span>] || dp[j]; <span class="comment">// 匹配 0 个或 1 个字符</span></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    dp[j] = prev &amp;&amp; (p[j - <span class="number">1</span>] == <span class="string">&#x27;?&#x27;</span> || s[i - <span class="number">1</span>] == p[j - <span class="number">1</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">                prev = temp; <span class="comment">// 更新 prev</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dp[p.<span class="built_in">size</span>()];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/08/0c77dfda4551b4dd17d7aed4377fd4e5.png" alt="image.png"></p>]]></content>
    
    
    <summary type="html">leetcode刷题笔记-44.通配符匹配</summary>
    
    
    
    <category term="编程学习" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="把题目都给刷干净" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/%E6%8A%8A%E9%A2%98%E7%9B%AE%E9%83%BD%E7%BB%99%E5%88%B7%E5%B9%B2%E5%87%80/"/>
    
    
    <category term="OJ刷题" scheme="https://blog.musnow.top/tags/OJ%E5%88%B7%E9%A2%98/"/>
    
    <category term="leetcode" scheme="https://blog.musnow.top/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>【leetcode】10.正则表达式匹配</title>
    <link href="https://blog.musnow.top/posts/266952207/"/>
    <id>https://blog.musnow.top/posts/266952207/</id>
    <published>2024-08-18T01:49:42.000Z</published>
    <updated>2024-08-18T07:26:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>leetcode刷题笔记-10.正则表达式匹配。</p><p>2024年秋招<strong>柠檬微趣C++开发</strong>和<strong>B站测开</strong>笔试都出现了这道题。</p><p>本题和<strong>leetcode 44.通配符匹配</strong>类似，做完本题后，您可以继续做44题。本站也有关于44题的题解。</p><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><blockquote><p><a href="https://leetcode.cn/problems/regular-expression-matching/description/">https://leetcode.cn/problems/regular-expression-matching/description/</a></p></blockquote><p>给你一个字符串 s 和一个字符规律 p，请你来实现一个支持 <code>&#39;.&#39;</code> 和 <code>&#39;*&#39;</code> 的正则表达式匹配。</p><ul><li><code>&#39;.&#39;</code> 匹配任意单个字符;</li><li><code>&#39;*&#39;</code> 匹配零个或多个前面的那一个元素;</li></ul><p>所谓匹配，是要涵盖 整个 字符串 s 的，而不是部分字符串。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">示例 1：</span><br><span class="line">输入：s = &quot;aa&quot;, p = &quot;a&quot;</span><br><span class="line">输出：false</span><br><span class="line">解释：&quot;a&quot; 无法匹配 &quot;aa&quot; 整个字符串。</span><br><span class="line"></span><br><span class="line">示例 2:</span><br><span class="line">输入：s = &quot;aa&quot;, p = &quot;a*&quot;</span><br><span class="line">输出：true</span><br><span class="line">解释：因为 &#x27;*&#x27; 代表可以匹配零个或多个前面的那一个元素, 在这里前面的元素就是 &#x27;a&#x27;。因此，字符串 &quot;aa&quot; 可被视为 &#x27;a&#x27; 重复了一次。</span><br><span class="line"></span><br><span class="line">示例 3：</span><br><span class="line">输入：s = &quot;ab&quot;, p = &quot;.*&quot;</span><br><span class="line">输出：true</span><br><span class="line">解释：&quot;.*&quot; 表示可匹配零个或多个（&#x27;*&#x27;）任意字符（&#x27;.&#x27;）。</span><br></pre></td></tr></table></figure><p>提示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1 &lt;= s.length &lt;= 20</span><br><span class="line">1 &lt;= p.length &lt;= 20</span><br><span class="line">s 只包含从 a-z 的小写字母。</span><br><span class="line">p 只包含从 a-z 的小写字母，以及字符 . 和 *。</span><br><span class="line">保证每次出现字符 * 时，前面都匹配到有效的字符</span><br></pre></td></tr></table></figure><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><h2 id="对题目的解释"><a href="#对题目的解释" class="headerlink" title="对题目的解释"></a>对题目的解释</h2><p>这道题的描述很烂很烂，主要是关于<code>&#39;*&#39;</code>的描述，说的是“匹配零个或多个前面的那一个元素”。这个描述应该改成“<code>&#39;*&#39;</code>匹配零个前面那一个元素，或多个前面的那一个元素”。</p><p>举个例子，当我们有一个匹配字符串<code>p = &quot;ab*&quot;</code>的时候，最后一个<code>*</code>需要和前面的b绑定使用，即<code>&quot;b*&quot;</code>，含义是匹配0个b或者无数个b。而如果匹配字符串是<code>&quot;.*&quot;</code>，比如题目里面的示例三，那就是等于有0个<code>&#39;.&#39;</code>或者无数个<code>&#39;.&#39;</code>，相当于可以匹配0个或者无数个随机字符（<code>&#39;.&#39;</code>本身可以匹配任何单个字符，合起来就是随机字符匹配了），所以示例三里面才能匹配上ab。</p><p>在题目的提示里面也说到了，保证每次出现<code>*</code>的时候都能匹配到有效的字符，即不可能会出现<code>*</code>之前没有其他字母的情况，也不应该出现两个<code>**</code>连着的情况。</p><p>现在我们了解了题目这个令人琢磨不透的描述了，可以来写代码了。</p><h2 id="思路说明"><a href="#思路说明" class="headerlink" title="思路说明"></a>思路说明</h2><p>本题可以用动态规划的思路，先定义dp数组，用的是非常常见的定义方式，在很多动态规划的题目中都是用这个方式定义的：</p><ul><li><code>dp[i][j]</code> 为s中i之前，p中j之前（不包括i、j）的字符串能否匹配成功；</li><li>换句话说： <code>dp[i][j]</code>为s中前i个和p中前j个字符能否匹配成功；</li></ul><p>根据这个定义，需要将dp数组构建如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// dp[i][j]代表s中i之前（不包括i）和p中j之前（不包括j）的是否能匹配</span></span><br><span class="line">vector&lt;vector&lt;<span class="type">bool</span>&gt;&gt; <span class="built_in">dp</span>(s.<span class="built_in">size</span>() + <span class="number">1</span>,</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="type">bool</span>&gt;(p.<span class="built_in">size</span>() + <span class="number">1</span>, <span class="literal">false</span>));</span><br></pre></td></tr></table></figure><p>随后是定义递归方程，分为三种情况：</p><ul><li><code>p[j-1]</code>是字母。</li></ul><p>这种情况的递归方程比较简单，我们判断<code>s[i-1] == p[j-1]</code>就能知道当前是否能继续往后匹配了。规划方程如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>] &amp;&amp; s[i - <span class="number">1</span>] == p[j - <span class="number">1</span>];</span><br></pre></td></tr></table></figure><p>其中<code>dp[i - 1][j - 1]</code>代表的是s中前i-1个字符和p中前j-1个字符是否能成功匹配，是“上一次”计算的结果。</p><ul><li><code>p[j-1]</code>是<code>&#39;.&#39;</code>。</li></ul><p>这种情况其实和是字母没区别，因为<code>&#39;.&#39;</code>可以当作任意一个字母来判断。规划方程如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>] &amp;&amp; p[j - <span class="number">1</span>] == <span class="string">&#x27;.&#x27;</span>;</span><br></pre></td></tr></table></figure><ul><li><code>p[j-1]</code>是<code>&#39;*&#39;</code>。</li></ul><p>此时就需要分类讨论了，分为两种情况</p><ul><li>星号和前一个字符配对，一起匹配0个字符；</li><li>星号和前一个字符配对，一起匹配1个字符；</li></ul><p>理论上来说还会有匹配2个及以上字符的情况，但是我们这里不需要讨论这种情况，因为我们dp数组在单次循环中，s和p里面的字符都是只会增长1个的，<strong>只是引入了1个新的字符</strong>，那里有匹配俩个及以上字符的情况呢？</p><p>当我们匹配0个字符的时候，就相当于是把<code>p[j-1]</code>和<code>p[j-2]</code>从p字符串中删除，此时能否匹配就取决于<code>dp[i][j-2]</code>是否为真了。</p><p>当我们匹配1个字符的时候，就需要将<code>p[j-2]</code>和<code>*</code>组成的配对串和s进行比较，分为两种子情况：</p><ul><li>当<code>p[j-2]</code>是字符的时候，判断<code>p[j-2]</code>和<code>s[i-1]</code>是否相同，是则沿用<code>dp[i - 1][j]</code>的结果；</li><li>当<code>p[j-2]</code>是<code>&#39;.&#39;</code>的时候，不需要判断（用<code>&#39;.&#39;</code>去匹配<code>s[i-1]</code>），沿用<code>dp[i - 1][j]</code>的结果；</li></ul><p>这里沿用<code>dp[i-1][j]</code>的原因是，我们当前判断的是匹配串<code>p[j-2]*</code>能否继续于与<code>s[i-1]</code>进行匹配，<code>dp[i-1][j]</code>表示<code>s[0:i-1]</code> 可以与 <code>p[0:j]</code> 匹配（即当前字符匹配完成）。而<code>dp[i-1][j-1]</code>的含义是匹配完毕上一个字符就停下了，和当前需要使用<code>p[j-2]*</code>的情况不符合。</p><p>最终<code>p[j-1] == &#39;*&#39;</code>合并起来是三种情况，规划方程如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. &#x27;x*&#x27;只匹配0个字符（相当于删除x）</span></span><br><span class="line"><span class="type">bool</span> result1 = dp[i][j - <span class="number">2</span>];</span><br><span class="line"><span class="comment">// 2.&#x27;x*&#x27;匹配1个字符，此时需要判断s[i-1]和p[j-2]是否相同。</span></span><br><span class="line"><span class="comment">//    这里判断p[j-2]是判断*前面的那一个字符。</span></span><br><span class="line"><span class="comment">//    注意p[j-2]是&#x27;.&#x27;的时候和s[i-1]==p[j-2]等价。</span></span><br><span class="line"><span class="type">bool</span> result2 = dp[i - <span class="number">1</span>][j] &amp;&amp; s[i - <span class="number">1</span>] == p[j - <span class="number">2</span>];</span><br><span class="line"><span class="comment">// 3. &#x27;x*&#x27;匹配一个字符，且p[j-2]是&#x27;.&#x27;，和情况二等价</span></span><br><span class="line"><span class="type">bool</span> result3 = dp[i - <span class="number">1</span>][j] &amp;&amp; p[j - <span class="number">2</span>] == <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line"><span class="comment">// 4. &#x27;x*&#x27;匹配2个和以上的字符</span></span><br><span class="line"><span class="comment">//    这种情况不用考虑！因为每次dp循环s只新增了一个字符，那里来的两个字符以上的匹配？</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 最终dp只要有一个情况为true就行</span></span><br><span class="line">dp[i][j] = result1 || result2 || result3;</span><br></pre></td></tr></table></figure><p>规划方程有了，下面要做的是初始化了。首先显而易见的是<code>dp[0][0] = true</code>，因为s和p都为空串的时候肯定能匹配成功。</p><p>然后就是第一行<code>dp[0]</code>的初始化了，假设我们的输入是<code>s=&quot;&quot;,p=&quot;a*&quot;</code>，这种情况下是能让p成功匹配s的，所以需要对第一行进行初始化。初始化沿用的是<code>p[j-1] == &#39;*&#39;</code>的思路，具体代码如下，说明详见注释。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化，dp[0][0]代表s和p两个都是空，可以匹配。</span></span><br><span class="line">dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line"><span class="comment">// 继续初始化第一行，只有出现了x*(x是任意字符)的时候才可以匹配空字符串s；</span></span><br><span class="line"><span class="comment">// 这个时候我们相当于使用*的匹配0个前一个字符的功能。</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">size_t</span> j = <span class="number">2</span>; j &lt; dp[<span class="number">0</span>].<span class="built_in">size</span>(); j += <span class="number">2</span>) &#123;</span><br><span class="line"><span class="comment">// 比如&#x27;b*&#x27;我们就认为是匹配0个b，相当于匹配空串。</span></span><br><span class="line"><span class="comment">// 此时dp就依赖于dp[0][j-2]是否为true了，即抛弃了&#x27;b*&#x27;中的b还能不能匹配的上。</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 注意dp数组的定义是i和j之前的元素是否能匹配，不包括i和j自己！</span></span><br><span class="line"><span class="comment">// 所以当前我们判断的是p[j-1]，而dp[0][j-2]对应的就是p中下标j-3和j-3之前的字符能否匹配。</span></span><br><span class="line"><span class="comment">// 而&#x27;b*&#x27;数组为两个元素，当p[j-1]等于*时（j-1=1，j=2）；</span></span><br><span class="line"><span class="comment">// j-3是负数，即我们希望判断-1和-1之前的字符串p是否能和s匹配；</span></span><br><span class="line"><span class="comment">// 这个含义就是空字符串p，所以可以和s匹配的上，此时为true。</span></span><br><span class="line">dp[<span class="number">0</span>][j] = dp[<span class="number">0</span>][j - <span class="number">2</span>] &amp;&amp; p[j - <span class="number">1</span>] == <span class="string">&#x27;*&#x27;</span>;</span><br><span class="line"><span class="comment">// 一定要根据dp数组的定义来思考这个问题：</span></span><br><span class="line"><span class="comment">// 假设j-3=0，这时候的含义就变成了判断下标0和0之前的字符是否能匹配，字符串p不是空串，无法和s匹配上。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h1><p>完整代码如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isMatch</span><span class="params">(string s, string p)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// dp[i][j]代表s中i之前（不包括i）和p中j之前（不包括j）的是否能匹配</span></span><br><span class="line">        vector&lt;vector&lt;<span class="type">bool</span>&gt;&gt; <span class="built_in">dp</span>(s.<span class="built_in">size</span>() + <span class="number">1</span>,</span><br><span class="line">                                <span class="built_in">vector</span>&lt;<span class="type">bool</span>&gt;(p.<span class="built_in">size</span>() + <span class="number">1</span>, <span class="literal">false</span>));</span><br><span class="line">        <span class="comment">// 初始化，dp[0][0]代表s和p两个都是空，可以匹配。</span></span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">// 继续初始化第一行，只有出现了x*(x是任意字符)的时候才可以匹配空字符串s；</span></span><br><span class="line">        <span class="comment">// 这个时候我们相当于使用*的匹配0个前一个字符的功能。</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">size_t</span> j = <span class="number">2</span>; j &lt; dp[<span class="number">0</span>].<span class="built_in">size</span>(); j += <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="comment">// 比如&#x27;b*&#x27;我们就认为是匹配0个b，相当于匹配空串。</span></span><br><span class="line">            <span class="comment">// 此时dp就依赖于dp[0][j-2]是否为true了，即抛弃了&#x27;b*&#x27;中的b还能不能匹配的上。</span></span><br><span class="line">            <span class="comment">//</span></span><br><span class="line">            <span class="comment">// 注意dp数组的定义是i和j之前的元素是否能匹配，不包括i和j自己！</span></span><br><span class="line">            <span class="comment">// 所以当前我们判断的是p[j-1]，而dp[0][j-2]对应的就是p中下标j-3和j-3之前的字符能否匹配。</span></span><br><span class="line">            <span class="comment">// 而&#x27;b*&#x27;数组为两个元素，当p[j-1]等于*时（j-1=1，j=2）；</span></span><br><span class="line">            <span class="comment">// j-3是负数，即我们希望判断-1和-1之前的字符串p是否能和s匹配；</span></span><br><span class="line">            <span class="comment">// 这个含义就是空字符串p，所以可以和s匹配的上，此时为true。</span></span><br><span class="line">            dp[<span class="number">0</span>][j] = dp[<span class="number">0</span>][j - <span class="number">2</span>] &amp;&amp; p[j - <span class="number">1</span>] == <span class="string">&#x27;*&#x27;</span>;</span><br><span class="line">            <span class="comment">// 一定要根据dp数组的定义来思考这个问题：</span></span><br><span class="line">            <span class="comment">// 假设j-3=0，这时候的含义就变成了判断下标0和0之前的字符是否能匹配，字符串p不是空串，无法和s匹配上。</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// i从1开始遍历（相当于从s的下标0开始处理）</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">1</span>; i &lt; dp.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">size_t</span> j = <span class="number">1</span>; j &lt; dp[i].<span class="built_in">size</span>(); j++) &#123;</span><br><span class="line">                <span class="comment">// 情况1，p[j-1] == &#x27;*&#x27;</span></span><br><span class="line">                <span class="keyword">if</span> (p[j - <span class="number">1</span>] == <span class="string">&#x27;*&#x27;</span>) &#123;</span><br><span class="line">                    <span class="comment">// 1. &#x27;x*&#x27;只匹配0个字符（相当于删除x）</span></span><br><span class="line">                    <span class="type">bool</span> result1 = dp[i][j - <span class="number">2</span>];</span><br><span class="line">                    <span class="comment">// 2.&#x27;x*&#x27;匹配1个字符，此时需要判断s[i-1]和p[j-2]是否相同。</span></span><br><span class="line">                    <span class="comment">//    这里判断p[j-2]是判断*前面的那一个字符。</span></span><br><span class="line">                    <span class="comment">//    注意p[j-2]是&#x27;.&#x27;的时候和s[i-1]==p[j-2]等价。</span></span><br><span class="line">                    <span class="type">bool</span> result2 = dp[i - <span class="number">1</span>][j] &amp;&amp; s[i - <span class="number">1</span>] == p[j - <span class="number">2</span>];</span><br><span class="line">                    <span class="comment">// 3. &#x27;x*&#x27;匹配一个字符，且p[j-2]是&#x27;.&#x27;，和情况二等价</span></span><br><span class="line">                    <span class="type">bool</span> result3 = dp[i - <span class="number">1</span>][j] &amp;&amp; p[j - <span class="number">2</span>] == <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">                    <span class="comment">// 4. &#x27;x*&#x27;匹配2个和以上的字符</span></span><br><span class="line">                    <span class="comment">//    这种情况不用考虑！因为每次dp循环s只新增了一个字符，那里来的两个字符以上的匹配？</span></span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 最终dp只要有一个情况为true就行</span></span><br><span class="line">                    dp[i][j] = result1 || result2 || result3;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 情况2，p[j-1] == &#x27;.&#x27; 或者是个字母</span></span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// 1. 是一个字母，直接判断二者是否相等</span></span><br><span class="line">                    <span class="type">bool</span> result1 = dp[i - <span class="number">1</span>][j - <span class="number">1</span>] &amp;&amp; s[i - <span class="number">1</span>] == p[j - <span class="number">1</span>];</span><br><span class="line">                    <span class="comment">// 2. 是一个&#x27;.&#x27;，那和二者相等也是没区别的</span></span><br><span class="line">                    <span class="type">bool</span> result2 = dp[i - <span class="number">1</span>][j - <span class="number">1</span>] &amp;&amp; p[j - <span class="number">1</span>] == <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">                    dp[i][j] = result1 || result2;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 返回右下角的值得到是否完成匹配</span></span><br><span class="line">        <span class="keyword">return</span> dp[s.<span class="built_in">size</span>()][p.<span class="built_in">size</span>()];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/08/9979a5a4b900f15d3ba2084bccb02c22.png" alt="image.png"></p>]]></content>
    
    
    <summary type="html">leetcode刷题笔记-10.正则表达式匹配</summary>
    
    
    
    <category term="编程学习" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="把题目都给刷干净" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/%E6%8A%8A%E9%A2%98%E7%9B%AE%E9%83%BD%E7%BB%99%E5%88%B7%E5%B9%B2%E5%87%80/"/>
    
    
    <category term="OJ刷题" scheme="https://blog.musnow.top/tags/OJ%E5%88%B7%E9%A2%98/"/>
    
    <category term="leetcode" scheme="https://blog.musnow.top/tags/leetcode/"/>
    
    <category term="动态规划" scheme="https://blog.musnow.top/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>【算法】单调栈</title>
    <link href="https://blog.musnow.top/posts/1452956128/"/>
    <id>https://blog.musnow.top/posts/1452956128/</id>
    <published>2024-08-14T22:40:27.000Z</published>
    <updated>2024-08-16T02:53:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>leetcode刷题笔记，单调栈系列。</p><h1 id="739-每日温度"><a href="#739-每日温度" class="headerlink" title="739.每日温度"></a>739.每日温度</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><blockquote><p><a href="https://leetcode.cn/problems/daily-temperatures/">https://leetcode.cn/problems/daily-temperatures/</a></p></blockquote><p>给定一个整数数组 temperatures ，表示每天的温度，返回一个数组 answer ，其中 <code>answer[i]</code> 是指对于第 i 天，下一个更高温度出现在几天后。如果气温在这之后都不会升高，请在该位置用 0 来代替。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">示例 1:</span><br><span class="line">输入: temperatures = [73,74,75,71,69,72,76,73]</span><br><span class="line">输出: [1,1,4,2,1,1,0,0]</span><br><span class="line"></span><br><span class="line">示例 2:</span><br><span class="line">输入: temperatures = [30,40,50,60]</span><br><span class="line">输出: [1,1,1,0]</span><br><span class="line"></span><br><span class="line">示例 3:</span><br><span class="line">输入: temperatures = [30,60,90]</span><br><span class="line">输出: [1,1,0]</span><br></pre></td></tr></table></figure><p>提示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1 &lt;= temperatures.length &lt;= 105</span><br><span class="line">30 &lt;= temperatures[i] &lt;= 100</span><br></pre></td></tr></table></figure><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>这是单调栈系列的入门题目，可以让我们很好的了解单调栈的特性。</p><p>首先，题目要求的是返回一个结果集（我一般定义为<code>retV</code>），结果集中的每一位是当前温度下一个比他大的温度在“几天后”，也就是在数组中相隔的举例。比如下标1的下一个比他大的温度是下标3，那么就是2天后，也可以用<code>3-1</code>这种下标相减的方式直接计算出来。</p><p>为了能直接更新出这个距离，我们需要一个栈，这个栈维护的是元素下标，概念是对应的元素在栈内是<strong>单调递增</strong>的（从栈顶到栈底）。</p><blockquote><p>如果单调栈直接维护数组中的元素的话，我们就没有办法直接算出两个下标直接的距离得出相差的天数，那样就没有什么意义了。我们维护下标，相当于同时维护了一个“距离”和元素本身的值（毕竟下标可以从原数组中取出值来）。</p></blockquote><p>当我们遍历i的时候，i之前的元素已经按栈顶到栈底<strong>升序</strong>的方式放入栈内了，我们取栈顶得到的一定是i之前的某一个元素的下标，当<code>temperatures[i]</code>比栈顶下标对应的元素<code>temperatures[st.top()]</code>的元素<strong>更大</strong>，说明i是<strong>栈顶元素之后第一个比他大的元素</strong>。此时就可以通过<code>i-st.top()</code>得出距离，写入到<code>retV[st.top()]</code>结果集中。</p><p>注意，这个判断操作是一个循环，因为我们当前的元素<code>temperatures[i]</code>可能会匹配很多之前元素的条件。比如数组<code>2 1 3</code>中，3就是比2和1都大的元素，此时2和1都需要把<code>下一个比自己大的元素</code>更新为3。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 只要栈内有元素，就需要继续弹出，不断判断是否比栈顶元素大</span></span><br><span class="line"><span class="keyword">while</span> (!st.<span class="built_in">empty</span>() &amp;&amp;</span><br><span class="line">   temperatures[i] &gt; temperatures[st.<span class="built_in">top</span>()])</span><br><span class="line">&#123;&#125;</span><br></pre></td></tr></table></figure><p>如果当<code>temperatures[i]</code>比栈顶下标对应的元素<code>temperatures[st.top()]</code>更小，此时只需要将i下标入栈，相当于维护了单调栈从<strong>栈顶到栈底单调递增</strong>的特性，继续后续的比较。</p><p>另外，题目要求如果某一天之后没有比他温度更高的，则在结果集中写为0。这个可以直接用vector的构造函数来把整个数组初始化为0。如果某一天之后没有比他温度更高的，在循环中就不会被赋值，保留了构造函数初始化的0，也符合题目的预期结果。</p><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dailyTemperatures</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; temperatures)</span> </span>&#123;</span><br><span class="line">        stack&lt;<span class="type">int</span>&gt; st; <span class="comment">// 单调栈</span></span><br><span class="line">        <span class="comment">// 这里初试化为全0，默认每个元素右边都么有比自己大的，这样结尾的元素不需要单独处理</span></span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">retV</span><span class="params">(temperatures.size(), <span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="comment">// 思路如下，遍历的时候，将下标入栈</span></span><br><span class="line">        <span class="comment">// 1.当前元素大于栈顶元素（用下标访问得到元素大小），出栈顶元素</span></span><br><span class="line">        <span class="comment">//   并使用当前元素下标-栈顶元素下标得到距离，写入结果集</span></span><br><span class="line">        <span class="comment">// 2.当前元素小于等于栈顶元素，将下标入栈</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// 这样能保障栈顶到栈底是递增的，也就能找到右边第一个比当前元素大的元素</span></span><br><span class="line">        <span class="comment">// 第一个元素直接入栈</span></span><br><span class="line">        st.<span class="built_in">push</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">// 从第二个元素开始遍历</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; temperatures.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="comment">// 大于</span></span><br><span class="line">            <span class="keyword">if</span> (temperatures[i] &gt; temperatures[st.<span class="built_in">top</span>()]) &#123;</span><br><span class="line">                <span class="comment">// 只要栈内有元素，就需要继续弹出，不断判断是否比栈顶元素大</span></span><br><span class="line">                <span class="keyword">while</span> (!st.<span class="built_in">empty</span>() &amp;&amp;</span><br><span class="line">                       temperatures[i] &gt; temperatures[st.<span class="built_in">top</span>()]) &#123;</span><br><span class="line">                    <span class="type">int</span> topIndex = st.<span class="built_in">top</span>();</span><br><span class="line">                    st.<span class="built_in">pop</span>();</span><br><span class="line">                    retV[topIndex] = i - topIndex; <span class="comment">// 赋值距离</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 栈为空，或者当前元素小于栈顶元素，可以入栈</span></span><br><span class="line">                <span class="keyword">if</span> (st.<span class="built_in">empty</span>() || temperatures[i] &lt;= temperatures[st.<span class="built_in">top</span>()]) &#123;</span><br><span class="line">                    <span class="comment">// cout &lt;&lt; &quot;push &quot; &lt;&lt; i &lt;&lt; endl;</span></span><br><span class="line">                    st.<span class="built_in">push</span>(i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="comment">// 小于等于</span></span><br><span class="line">            &#123;</span><br><span class="line">                st.<span class="built_in">push</span>(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 到这里遍历结束了，但是栈里面还有元素</span></span><br><span class="line">        <span class="comment">// 此时栈里面的元素右边都不会有比自己更大的元素了，因为从栈顶到栈底是递增的</span></span><br><span class="line">        <span class="comment">// 而我们在初始化vector的时候已经初始化为全0了，也就不需要对这种情况单独处理</span></span><br><span class="line">        <span class="keyword">return</span> retV;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/08/a5d1f984d343cdb8a906d013d7361516.png" alt="image.png"></p><h1 id="496-下一个更大元素-I"><a href="#496-下一个更大元素-I" class="headerlink" title="496. 下一个更大元素 I"></a>496. 下一个更大元素 I</h1><h2 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h2><blockquote><p><a href="https://leetcode.cn/problems/next-greater-element-i/description/">https://leetcode.cn/problems/next-greater-element-i/description/</a></p></blockquote><p>nums1 中数字 x 的 下一个更大元素 是指 x 在 nums2 中对应位置 右侧 的 第一个 比 x 大的元素。</p><p>给你两个 没有重复元素 的数组 nums1 和 nums2 ，下标从 0 开始计数，其中nums1 是 nums2 的子集。</p><p>对于每个 <code>0 &lt;= i &lt; nums1.length</code> ，找出满足 <code>nums1[i] == nums2[j]</code> 的下标 j ，并且在 nums2 确定 <code>nums2[j]</code> 的 下一个更大元素 。如果不存在下一个更大元素，那么本次查询的答案是 -1 。</p><p>返回一个长度为 <code>nums1.length</code> 的数组 ans 作为答案，满足 <code>ans[i]</code> 是如上所述的 下一个更大元素 。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">示例 1：</span><br><span class="line">输入：nums1 = [4,1,2], nums2 = [1,3,4,2].</span><br><span class="line">输出：[-1,3,-1]</span><br><span class="line">解释：nums1 中每个值的下一个更大元素如下所述：</span><br><span class="line">- 4 ，用加粗斜体标识，nums2 = [1,3,4,2]。不存在下一个更大元素，所以答案是 -1 。</span><br><span class="line">- 1 ，用加粗斜体标识，nums2 = [1,3,4,2]。下一个更大元素是 3 。</span><br><span class="line">- 2 ，用加粗斜体标识，nums2 = [1,3,4,2]。不存在下一个更大元素，所以答案是 -1 。</span><br><span class="line">- </span><br><span class="line">示例 2：</span><br><span class="line">输入：nums1 = [2,4], nums2 = [1,2,3,4].</span><br><span class="line">输出：[3,-1]</span><br><span class="line">解释：nums1 中每个值的下一个更大元素如下所述：</span><br><span class="line">- 2 ，用加粗斜体标识，nums2 = [1,2,3,4]。下一个更大元素是 3 。</span><br><span class="line">- 4 ，用加粗斜体标识，nums2 = [1,2,3,4]。不存在下一个更大元素，所以答案是 -1 。</span><br></pre></td></tr></table></figure><p>提示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1 &lt;= nums1.length &lt;= nums2.length &lt;= 1000</span><br><span class="line">0 &lt;= nums1[i], nums2[i] &lt;= 104</span><br><span class="line">nums1和nums2中所有整数 互不相同</span><br><span class="line">nums1 中的所有整数同样出现在 nums2 中</span><br></pre></td></tr></table></figure><p>进阶：你可以设计一个时间复杂度为 <code>O(nums1.length + nums2.length)</code> 的解决方案吗？</p><h2 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h2><p>这道题其实和739没有什么区别，但是我们得理清楚题目要求的是什么，以及nums1和nums2的含义。</p><p>nums1是nums2的子集，代表nums1的元素都可以在nums2中找到。</p><blockquote><p>nums1 中数字 x 的 下一个更大元素 是指 x 在 nums2 中对应位置 右侧 的 第一个 比 x 大的元素。</p></blockquote><p>这个描述的意思是，我们需要返回一个基于nums1的数组，数组中的每一个元素，是<code>nums1[i]</code>在nums2中对应的下一个比他大的元素。注意不再是下标距离了，而是下一个比他大的元素本身。</p><p>说白了就是，这道题让我们基于nums2找每一个元素下一个比他大的元素是谁。但是最终的结果集只需要包含nums1中存在的元素就可以了。</p><p>这样思路就简单了，我们可以用一个map来维护nums1中出现的元素和他们在nums1中对应的下标。方便在最终的结果集里面设置。然后直接和739题目一样遍历nums2就可以了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用map来映射1中的元素和1中的下标，方便设置结果</span></span><br><span class="line">unordered_map&lt;<span class="type">int</span>, <span class="type">size_t</span>&gt; index1Map;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; nums1.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">    index1Map[nums1[i]] = i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你甚至可以先直接按739的方式把所有nums2元素的下一个比他更大的元素找出来存放到map里面，然后再遍历nums1把对应元素的下一个比他大的元素设置进结果集里面。这样本题和739想必就不存在逻辑代码的大的改变了。</p><h2 id="完整代码-1"><a href="#完整代码-1" class="headerlink" title="完整代码"></a>完整代码</h2><p>核心思路和739题目那是一样一样的。只不过在while循环中，我们需要判断当前栈顶元素是否出现在nums1中了，出现过才需要设置到结果集里面。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">nextGreaterElement</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums1, vector&lt;<span class="type">int</span>&gt;&amp; nums2)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 题目说1和2数组都没有重复元素，意思是单个数组中没有重复的。</span></span><br><span class="line">        <span class="comment">// 注意，题目要求的是1中的元素，在2里面对应的下一个更大元素是谁</span></span><br><span class="line">        <span class="comment">// 本质上是让我们求2中的某一个元素的下一个更大元素是谁，这里的“某一个元素”被nums1固定了。</span></span><br><span class="line">        <span class="comment">// 所以结果的数量是nums1。</span></span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">retV</span><span class="params">(nums1.size(), <span class="number">-1</span>)</span></span>;</span><br><span class="line">        <span class="comment">// 使用map来映射1中的元素和1中的下标，方便设置结果</span></span><br><span class="line">        unordered_map&lt;<span class="type">int</span>, <span class="type">size_t</span>&gt; index1Map;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; nums1.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            index1Map[nums1[i]] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// nums1只是一个给出的要找下一个更大元素的集合，真的要找的东西都在2里面，得遍历2。</span></span><br><span class="line">        stack&lt;<span class="type">int</span>&gt; st; <span class="comment">// 同样是从栈顶到栈底单调递增的栈，存放2中的下标。</span></span><br><span class="line">        st.<span class="built_in">push</span>(<span class="number">0</span>); <span class="comment">// 第一个元素直接入栈</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">1</span>; i &lt; nums2.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="comment">// 因为求的是下一个比当前元素大的，所以小于等于的都直接入栈</span></span><br><span class="line">            <span class="keyword">if</span> (nums2[i] &lt;= nums2[st.<span class="built_in">top</span>()]) &#123;</span><br><span class="line">                st.<span class="built_in">push</span>(i);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// while循环一直判断是否比当前元素小</span></span><br><span class="line">                <span class="keyword">while</span> (!st.<span class="built_in">empty</span>() &amp;&amp; nums2[i] &gt; nums2[st.<span class="built_in">top</span>()]) &#123;</span><br><span class="line">                    <span class="comment">// 判断这个栈顶元素是否被nums1选中需要处理</span></span><br><span class="line">                    <span class="keyword">auto</span> ret = index1Map.<span class="built_in">find</span>(nums2[st.<span class="built_in">top</span>()]);</span><br><span class="line">                    <span class="keyword">if</span> (ret != index1Map.<span class="built_in">end</span>()) &#123;</span><br><span class="line">                        <span class="comment">// 取下标</span></span><br><span class="line">                        <span class="type">size_t</span> indexIn1 = ret-&gt;second;</span><br><span class="line">                        <span class="comment">// 设置下一个更大的元素是谁（不是设置距离了）</span></span><br><span class="line">                        retV[indexIn1] = nums2[i];</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 不管有没有被选中都须出栈</span></span><br><span class="line">                    st.<span class="built_in">pop</span>();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 当前元素入栈</span></span><br><span class="line">                st.<span class="built_in">push</span>(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> retV;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/08/fcebd4980d1482b36709b52b18536877.png" alt="image.png"></p><p>这里顺带贴出上文提到过的把2中所有元素下一个比他大的元素弄出来再遍历nums1的方法</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">nextGreaterElement</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums1, vector&lt;<span class="type">int</span>&gt;&amp; nums2)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 使用map来映射2中的元素下一个比他大的元素。</span></span><br><span class="line">        unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; biggerMap;</span><br><span class="line">        <span class="comment">// nums1只是一个给出的要找下一个更大元素的集合，真的要找的东西都在2里面，得遍历2。</span></span><br><span class="line">        stack&lt;<span class="type">int</span>&gt; st; <span class="comment">// 同样是从栈顶到栈底单调递增的栈，存放2中的下标。</span></span><br><span class="line">        st.<span class="built_in">push</span>(<span class="number">0</span>); <span class="comment">// 第一个元素直接入栈</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">1</span>; i &lt; nums2.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="comment">// 因为求的是下一个比当前元素大的，所以小于等于的都直接入栈</span></span><br><span class="line">            <span class="keyword">if</span> (nums2[i] &lt;= nums2[st.<span class="built_in">top</span>()]) &#123;</span><br><span class="line">                st.<span class="built_in">push</span>(i);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// while循环一直判断是否比当前元素小</span></span><br><span class="line">                <span class="keyword">while</span> (!st.<span class="built_in">empty</span>() &amp;&amp; nums2[i] &gt; nums2[st.<span class="built_in">top</span>()]) &#123;</span><br><span class="line">                    biggerMap[nums2[st.<span class="built_in">top</span>()]] = nums2[i];</span><br><span class="line">                    st.<span class="built_in">pop</span>();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 当前元素入栈</span></span><br><span class="line">                st.<span class="built_in">push</span>(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 题目说1和2数组都没有重复元素，意思是单个数组中没有重复的，但是两个数组之间会有。</span></span><br><span class="line">        <span class="comment">// 注意，题目要求的是1中的元素，在2里面对应的下一个更大元素是谁</span></span><br><span class="line">        <span class="comment">// 本质上是让我们求2中的某一个元素的下一个更大元素是谁，这里的“某一个元素”被nums1固定了。</span></span><br><span class="line">        <span class="comment">// 所以结果的数量是nums1。</span></span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">retV</span><span class="params">(nums1.size(), <span class="number">-1</span>)</span></span>;</span><br><span class="line">        <span class="comment">// 重新遍历nums1，找map中该元素下一个比他大的元素是啥，设置进结果集里面</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; nums1.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="comment">// 注意，有些元素不存在下一个比他更大的，此时不能直接[]取，会取出来int默认值0；</span></span><br><span class="line">            <span class="keyword">if</span> (biggerMap.<span class="built_in">count</span>(nums1[i]) != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="type">int</span> nextBigger = biggerMap[nums1[i]];</span><br><span class="line">                retV[i] = nextBigger;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> retV;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>效果都是一样的，也符合题目对时间复杂度的进阶要求</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/08/b02f3098b0fd395810200197b0804fe3.png" alt="image.png"></p><h1 id="503-下一个更大元素-II"><a href="#503-下一个更大元素-II" class="headerlink" title="503. 下一个更大元素 II"></a>503. 下一个更大元素 II</h1><h2 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h2><blockquote><p><a href="https://leetcode.cn/problems/next-greater-element-ii/description/">https://leetcode.cn/problems/next-greater-element-ii/description/</a></p></blockquote><p>给定一个循环数组 nums （ <code>nums[nums.length - 1]</code> 的下一个元素是 <code>nums[0]</code> ），返回 nums 中每个元素的 下一个更大元素 。</p><p>数字 x 的 下一个更大的元素 是按数组遍历顺序，这个数字之后的第一个比它更大的数，这意味着你应该循环地搜索它的下一个更大的数。如果不存在，则输出 -1 。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">示例 1:</span><br><span class="line">输入: nums = [1,2,1]</span><br><span class="line">输出: [2,-1,2]</span><br><span class="line">解释: 第一个 1 的下一个更大的数是 2；</span><br><span class="line">数字 2 找不到下一个更大的数； </span><br><span class="line">第二个 1 的下一个最大的数需要循环搜索，结果也是 2。</span><br><span class="line"></span><br><span class="line">示例 2:</span><br><span class="line">输入: nums = [1,2,3,4,3]</span><br><span class="line">输出: [2,3,4,-1,4]</span><br></pre></td></tr></table></figure><p>提示:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1 &lt;= nums.length &lt;= 104</span><br><span class="line">-109 &lt;= nums[i] &lt;= 109</span><br></pre></td></tr></table></figure><h2 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h2><p>这道题咋一看引入了循环数组，有点难，但实际上因为题目没有说让我们计算距离，可以直接把原本的数组弄成两份合并成一个大数组，然后用739题目的方式把这个大数组遍历完毕，就能得到每一个数的下一个更大的元素是什么了。</p><p>可以用如下的方式，构建一个目标数组，把原数组两次插入进去即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">nums1</span><span class="params">(nums.begin(), nums.end())</span></span>;</span><br><span class="line">nums1.<span class="built_in">insert</span>(nums1.<span class="built_in">end</span>(), nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br></pre></td></tr></table></figure><p>但是这样做会有一个额外的<code>O(N)</code>的时间复杂度消耗，虽然最终我们的时间复杂度是定格在了<code>O(2N)</code>量级，但我们还是可以想办法把这个多出来的时间复杂度和空间复杂度给优化一下的。</p><p>解决方式如下，我们直接把for循环的遍历区间乘2，然后每一次模一下数组的长度来得到实际的下标，这样就模拟出了遍历两次nums数组了！</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">1</span>; k &lt; nums.<span class="built_in">size</span>() * <span class="number">2</span>; k++) &#123;</span><br><span class="line"><span class="type">int</span> i = k % nums.<span class="built_in">size</span>(); <span class="comment">// 实际的下标</span></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后续的操作步骤和739题一模一样，此处不做讲解。</p><h2 id="完整代码-2"><a href="#完整代码-2" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">nextGreaterElements</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 这到题和739完全一样，只不过是循环数组；</span></span><br><span class="line">        <span class="comment">// 因为结果不需要我们写距离，而是记录元素，那么问题就很好解决了；</span></span><br><span class="line">        <span class="comment">// 我们可以把原本数组拼接一次，然后直接进行判断，再把判断结果resize为原数组大小即可。</span></span><br><span class="line">        <span class="comment">// vector&lt;int&gt; nums1(nums.begin(), nums.end());</span></span><br><span class="line">        <span class="comment">// nums1.insert(nums1.end(), nums.begin(), nums.end());</span></span><br><span class="line">        <span class="comment">// 但是这样会有额外的扩容拼接的消耗，我们还不如直接用for循环模拟两次遍历nums；</span></span><br><span class="line">        stack&lt;<span class="type">int</span>&gt; st;</span><br><span class="line">        st.<span class="built_in">push</span>(<span class="number">0</span>); <span class="comment">// 下标</span></span><br><span class="line">        <span class="comment">// 结果集</span></span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">retV</span><span class="params">(nums.size(), <span class="number">-1</span>)</span></span>;</span><br><span class="line">        <span class="comment">// 从1开始遍历</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">1</span>; k &lt; nums.<span class="built_in">size</span>() * <span class="number">2</span>; k++) &#123;</span><br><span class="line">            <span class="type">int</span> i = k % nums.<span class="built_in">size</span>(); <span class="comment">// 实际的下标</span></span><br><span class="line">            <span class="keyword">if</span> (nums[i] &lt;= nums[st.<span class="built_in">top</span>()]) &#123;</span><br><span class="line">                st.<span class="built_in">push</span>(i);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">while</span> (!st.<span class="built_in">empty</span>() &amp;&amp; nums[i] &gt; nums[st.<span class="built_in">top</span>()]) &#123;</span><br><span class="line">                    retV[st.<span class="built_in">top</span>()] = nums[i];</span><br><span class="line">                    st.<span class="built_in">pop</span>();</span><br><span class="line">                &#125;</span><br><span class="line">                st.<span class="built_in">push</span>(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> retV;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/08/2b96f8dc4f270a6491e7636a82b9dab2.png" alt="image.png"></p><h1 id="42-接雨水"><a href="#42-接雨水" class="headerlink" title="42. 接雨水"></a>42. 接雨水</h1><h2 id="题目-3"><a href="#题目-3" class="headerlink" title="题目"></a>题目</h2><blockquote><p><a href="https://leetcode.cn/problems/trapping-rain-water/">https://leetcode.cn/problems/trapping-rain-water/</a></p></blockquote><p>给定 n 个非负整数表示每个宽度为 1 的柱子的高度图，计算按此排列的柱子，下雨之后能接多少雨水。</p><p> <img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/08/10ec85fb0e96f594b69d8f2b8110abe6.png" alt="image.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">示例 1：</span><br><span class="line">输入：height = [0,1,0,2,1,0,1,3,2,1,2,1]</span><br><span class="line">输出：6</span><br><span class="line">解释：上面是由数组 [0,1,0,2,1,0,1,3,2,1,2,1] 表示的高度图，在这种情况下，可以接 6 个单位的雨水（蓝色部分表示雨水）。 </span><br><span class="line"></span><br><span class="line">示例 2：</span><br><span class="line">输入：height = [4,2,0,3,2,5]</span><br><span class="line">输出：9</span><br></pre></td></tr></table></figure><p>提示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">n == height.length</span><br><span class="line">1 &lt;= n &lt;= 2 * 104</span><br><span class="line">0 &lt;= height[i] &lt;= 105</span><br></pre></td></tr></table></figure><h2 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h2><p>这道题可是火热的很，面试笔试常考题，也是单调栈的经典题目。虽然它可以用双指针或暴力方式实现，但是暴力和双指针方法个人感觉比单调栈的思路还难理解，因为会有很多边界情况，真让面试上手写了估计会压力山大汗流浃背啥都写不出来。不如把单调栈的思路背熟了直接上去就是啪啪一顿敲。</p><p>首先还是要记住739题目这个单调栈的入门题目。来分析一下接雨水需要记录什么数据。根据图片，我们知道，接雨水需要记录一个左边界、右边界、以及凹槽的高度，这样才能用长乘宽计算出雨水的面积。</p><p>比如下面这个图中，雨水的面积是中间这一块蓝色区域。要计算这个凹槽的面积，我们需要得到左边和右边两个柱子的高度，还需要知道中间凹槽底部有多高。</p><ul><li>高度依据木桶原理，2和3中取最小的2，还需要减去底部的高度1，得到最终的高度为1；</li><li>宽度使用3的下标减去2的下标，再减去1（因为我们只需要中间部分），得到宽度是1；</li></ul><p>最终的结果是<code>1*1=1</code>，雨水的面积是1。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/08/4d8bf7417d00a9fd9bac76fac147c47f.png" alt="image.png"></p><p>这是比较普遍的情况，但是还有没那么普遍的情况，比如示例一中图片中间如同俄罗斯方块的这个部分，它要怎么计算出面积呢？</p><p> <img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/08/10ec85fb0e96f594b69d8f2b8110abe6.png" alt="image.png"></p><p>别急，我们先来分解一下接雨水的三种情况，然后你就知道上面这个俄罗斯方块的面积是怎么算出来的了。</p><hr><p>和739题目一样，接雨水需要一个从栈顶到栈底单调递增的栈，存放的是下标。因为我们需要通过下标相减得出凹槽的宽度，高度可以直接通过下标访问原数组得到。</p><p>每次判断的时候有三种情况：</p><ul><li>当前遍历的元素<strong>小于</strong>栈顶元素，入栈；</li><li>当前遍历的元素<strong>大于</strong>栈顶元素，开始比较和计算凹槽的面积；<ul><li>取栈顶元素作为凹槽底部高度，并弹出栈顶元素；</li><li>栈的第二个元素作为凹槽左侧边界，<strong>该元素不能弹出</strong>；</li><li>凹槽的高度：<code>min(左侧边界,当前元素为右侧边界) - 凹槽底部高度</code>；</li><li>凹槽的宽度：<code>当前下标 - 左边界下标 - 1</code>；</li><li>通过高度和宽度相乘计算出雨水面积，加到结果中；</li><li>这里需要注意，刚开始的时候栈里面只有一个元素，所以我们在取了栈顶元素之后还需要<strong>判断栈里面是否有其他元素才能继续取左侧边界</strong>。可能会出现有一个高度柱没有左边界构成不了凹槽的情况（题目的示例一就是这种情况，左侧和坐标边界是不算数的，装不了雨水）；</li><li>这是一个循环<code>while (!st.empty() &amp;&amp; height[i] &gt; height[st.top()])</code>，一直到当前元素不大于栈顶元素或栈为空了才退出循环，和739题目是一样的。</li></ul></li><li>当前遍历的元素<strong>等于</strong>栈顶元素，将栈顶元素弹出后将当前元素下标入栈；</li></ul><p>当前元素大于栈顶元素的情况已经写清楚了，来看看为啥当前元素等于栈顶元素的时候需要将栈顶元素弹出再入当前元素的下标。</p><p>见下图，当我们遍历到第二个高度为4的柱子的时候，栈顶元素就是第一个高度为4的柱子，此时这两个柱子之间是没有凹槽的，装不了雨水，后续我们要计算凹槽宽度的时候，也应该拿第二个高度为4的柱子来计算，通过下标计算宽度<code>3-1-1=1</code>，如果用第一个高度为4的柱子计算，宽度就会多一位，计算出来的体积就不对了。</p><p>所以，当我们遍历到下标1的时候，栈顶元素和当前遍历元素相同，需要把栈顶的下标0弹出，入新的下标1，才能让后续计算得到正确的结果。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/08/a3646429ad600ad3a750d1901405b52b.png" alt="image.png"></p><p>另外再根据思路解释一下为什么取出左边界后不能将这个元素出栈吧。见示例一的图，我给他标出了下标。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/08/cb803c3c21e81d9ec58c07ff7b6bb04a.png" alt="image.png"></p><p>当我们遍历到下标6的时候，当前元素的高度大于栈顶元素，需要开始计算体积了，此时操作如下</p><ul><li>取栈顶元素（下标5）作为凹槽底部，高度为0，下标5出栈；</li><li>取栈顶元素（下标4）作为凹槽左侧，高度为1；</li><li>高度：<code>min(height[4],height[6]) - height[5] = 1</code>;</li><li>宽度：<code>6 - 4 - 1 = 1</code>；</li><li>面积：<code>1 * 1 = 1</code>；</li></ul><p>此时一次计算就完成了，算是这这个俄罗斯方块的凸出来的那一部分。注意我们取出来的凹槽左侧高度（下标4）这个元素还是当前单调栈的栈顶，<strong>这个元素是不能出栈的</strong>，来看看下一次循环中的遍历会做什么吧！</p><p>首先是进入了“当前元素大于栈顶元素”这个if条件里面的while循环，此时当前元素已经不大于栈顶元素了（和栈顶元素相同），会终止这个循环，并将当前元素（下标6）入栈。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (!st.<span class="built_in">empty</span>() &amp;&amp; height[i] &gt; height[st.<span class="built_in">top</span>()])</span><br></pre></td></tr></table></figure><p>下一次遍历，下标7的高度是3，大于栈顶元素，再次命中“当前元素大于栈顶元素”的if条件，进入循环内：</p><ul><li>取栈顶元素（下标6）作为凹槽底部，高度为1，下标6出栈；</li><li>取栈顶元素（下标4）作为凹槽左侧，高度为1；</li><li>高度：<code>min(height[4],height[7]) - height[6] = 0</code>;</li><li>宽度：<code>7 - 4 - 1 = 2</code>；</li><li>面积：<code>0 * 2 = 0</code>；</li></ul><p>实际上这几个元素是构成不了一个凹槽的，因为底部和左边界的高度一致，计算出来的结果和预期相同，面积是0。然后继续if里面的while循环：</p><ul><li>取栈顶元素（下标4）作为凹槽底部，高度为1，下标4出栈；</li><li>取栈顶元素（下标3）作为凹槽左侧，高度为2；</li><li>高度：<code>min(height[3],height[7]) - height[4] = 1</code>;</li><li>宽度：<code>7 - 3 - 1 = 3</code>；</li><li>面积：<code>3 * 1 = 3</code>；</li></ul><p>此时就能看出来为什么下标4不能出栈了。如果在while循环中将其出栈，到这里的循环就会错误的将下标3（高度为2）作为凹槽底部的高度，结果就大错特错啦！</p><p>执行到这里，我们就算出来了俄罗斯方块长的这<code>3 * 1</code>的雨水面积，整个俄罗斯方块就搞定啦。</p><h2 id="完整代码-3"><a href="#完整代码-3" class="headerlink" title="完整代码"></a>完整代码</h2><p>完整代码如下，里面部分注释用英文是因为我写OJ的时候喜欢切成ENG语言避免不小心按shift导致输入法换来换去，所以就干脆用三脚猫英语写注释了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">trap</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; height)</span> </span>&#123;</span><br><span class="line">        stack&lt;<span class="type">int</span>&gt; st;</span><br><span class="line">        <span class="comment">// 栈里面存下标，栈顶到栈底单调递增</span></span><br><span class="line">        st.<span class="built_in">push</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">1</span>; i &lt; height.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">auto</span>&amp; cur = height[i];</span><br><span class="line">            <span class="comment">// 1.direct push to stack</span></span><br><span class="line">            <span class="keyword">if</span> (cur &lt; height[st.<span class="built_in">top</span>()]) &#123;</span><br><span class="line">                st.<span class="built_in">push</span>(i);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 2.replace index of top</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (cur == height[st.<span class="built_in">top</span>()]) &#123;</span><br><span class="line">                st.<span class="built_in">pop</span>();</span><br><span class="line">                st.<span class="built_in">push</span>(i);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 3.clac space of rain</span></span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">while</span> (!st.<span class="built_in">empty</span>() &amp;&amp; cur &gt; height[st.<span class="built_in">top</span>()]) &#123;</span><br><span class="line">                    <span class="type">int</span> bottomIndex = st.<span class="built_in">top</span>();</span><br><span class="line">                    st.<span class="built_in">pop</span>();</span><br><span class="line">                    <span class="comment">// 注意刚开始的时候可能只有一个元素</span></span><br><span class="line">                    <span class="keyword">if</span> (!st.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">                        <span class="type">int</span> leftIndex = st.<span class="built_in">top</span>();</span><br><span class="line">                        <span class="comment">// 错误！左边的元素不能被pop掉，因为它可能是下一个凹槽要用的底部值！</span></span><br><span class="line">                        <span class="comment">// st.pop();</span></span><br><span class="line">                        <span class="comment">// 计算凹槽高度和宽度</span></span><br><span class="line">                        <span class="type">int</span> h =</span><br><span class="line">                            <span class="built_in">min</span>(height[leftIndex], cur) - height[bottomIndex];</span><br><span class="line">                        <span class="type">int</span> w = i - leftIndex - <span class="number">1</span>;</span><br><span class="line">                        <span class="comment">// 雨水体积</span></span><br><span class="line">                        sum += h * w;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                st.<span class="built_in">push</span>(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/08/fcaca67d9ee036a0122f5e883f0c7034.png" alt="image.png"></p>]]></content>
    
    
    <summary type="html">leetcode刷题笔记，单调栈系列。</summary>
    
    
    
    <category term="编程学习" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="把题目都给刷干净" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/%E6%8A%8A%E9%A2%98%E7%9B%AE%E9%83%BD%E7%BB%99%E5%88%B7%E5%B9%B2%E5%87%80/"/>
    
    
    <category term="OJ刷题" scheme="https://blog.musnow.top/tags/OJ%E5%88%B7%E9%A2%98/"/>
    
    <category term="leetcode" scheme="https://blog.musnow.top/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>【win】windows开启特定端口防火墙</title>
    <link href="https://blog.musnow.top/posts/2580738879/"/>
    <id>https://blog.musnow.top/posts/2580738879/</id>
    <published>2024-08-09T14:52:44.000Z</published>
    <updated>2024-08-14T13:52:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>使用vmware的NAT模式的时候，如果想让局域网内的其他主机能访问你的虚拟机端口，需要做两个操作</p><ul><li>在vmware的虚拟网络编辑器中，开启宿主机端口到虚拟机端口的端口映射，这部分在安装虚拟机的教程里面有，本文不赘述；</li><li>在windows的防火墙里面，设置端口的出站和入站规则。注意，不建议直接关闭防火墙；</li></ul><p>如何确定是防火墙的问题？如果你在另外一台主机上，能ping通当前主机，但是没有办法访问你映射到宿主机的端口时，那就是被windows的防火墙拦住了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh: connect to host 192.168.0.115 port 22: Connection timed out</span><br></pre></td></tr></table></figure><p>顺带一提，你可以在windows下用<code>ipconfig</code>命令查看当前主机的IP地址，在Linux系统中是使用<code>ifconfig</code>命令查看IP地址。</p><p>进入windows11的设置搜索防火墙，打开防火墙与网络防护。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/08/6f4d6b8793ed89d96009dad0f257eb2e.png" alt="image.png"></p><p>一些教程会让你直接在这个页面关掉防火墙，不建议哦，我们只需要开启要用的端口就行了，关掉防火墙那就是100%裸奔了。不过家庭局域网一般也没有那么容易被入侵，问题也不算很大。但还是不建议完全关闭防火墙。</p><p>直接点高级设置</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/08/6c59d8431ebd757086f0732bc47f107a.png" alt="image.png"></p><p>在控制面板中有入站和出战规则，我们两个规则都需要添加一下，这里以入站规则为例（设置界面一模一样），点击入站规则，点击新建规则</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/08/e656910197f193ccc3ba7ac91bef26da.png" alt="image.png"></p><p>选择按端口号新建规则，协议按你需要的选，比如我需要SSH，选择TCP，设置为22<br>端口。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/08/0cb22059fa94330a5e51d49bea74080f.png" alt="image.png"></p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/08/3a8ea9e81db457270a403a1edf076d46.png" alt="image.png"></p><p>选择允许连接</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/08/3e5b42fb3852f5e0e75cec3efb260569.png" alt="image.png"></p><p>这里会有网络类型，全勾上，因为windows下的网络类型就是一个薛定谔，哪怕是家庭局域网他可能也会认为是公用网络。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/08/50dc98e53903ccce5e5bba73b6b7dcea.png" alt="image.png"></p><p>然后写个名称，点击确定就可以了。这样就配置好了。然后你还需要用相同的方式配置出站规则。</p><p>配置好了之后，在另外一台电脑上用这个windows主机的ip来ssh试试，能登录上就是OK了。</p>]]></content>
    
    
    <summary type="html">windows开启特定端口防火墙，实现虚拟机NAT端口可被局域网访问。</summary>
    
    
    
    <category term="差生文具多" scheme="https://blog.musnow.top/categories/%E5%B7%AE%E7%94%9F%E6%96%87%E5%85%B7%E5%A4%9A/"/>
    
    <category term="电脑使用小贴士" scheme="https://blog.musnow.top/categories/%E5%B7%AE%E7%94%9F%E6%96%87%E5%85%B7%E5%A4%9A/%E7%94%B5%E8%84%91%E4%BD%BF%E7%94%A8%E5%B0%8F%E8%B4%B4%E5%A3%AB/"/>
    
    
    <category term="windows" scheme="https://blog.musnow.top/tags/windows/"/>
    
    <category term="虚拟机" scheme="https://blog.musnow.top/tags/%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>【Docker】Linux系统以及威联通QNAP部署思源笔记的通用教程</title>
    <link href="https://blog.musnow.top/posts/3021867507/"/>
    <id>https://blog.musnow.top/posts/3021867507/</id>
    <published>2024-07-31T13:20:15.000Z</published>
    <updated>2024-08-17T22:37:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文测试的是旧版本<code>v2.11.4</code>的部署方式，实测当前（2024.08.15）最新的<code>v3.1.3</code>版本也可以用相同的方式部署。本文的部署方式共写了三种，非qnap的linux系统也可以参考本文部署思源笔记。</p><p>阅读本文之前，先明确两个名词：</p><ul><li>“宿主机”指的是部署docker服务的主机，本文所述是qnap的nas本体；</li><li>“容器内”是思源docker容器内部的路径或端口；</li></ul><p>这是部署docker服务时最常遇到的两个描述，写在这里避免大家对基本概念不了解而导致的误操作。另外，<strong>强烈建议您在学习了docker容器化的基本配置逻辑和docker的基本技术概念之后</strong>，再去使用docker。这会对您理解和配置所有docker容器服务都会有很大的帮助！您可以阅读本站的<a href="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/docker%E5%AD%A6%E4%B9%A0/">编程学习&#x2F;docker学习</a>专栏，有任何问题都可评论区提出。</p><p>思源的论坛中隔三岔五就会有人因为不理解docker的配置几何导致出现种种问题，其中因为宿主机路径映射失败导致所有笔记文件丢失还不做备份的也不在少数！</p><h2 id="1-部署容器"><a href="#1-部署容器" class="headerlink" title="1. 部署容器"></a>1. 部署容器</h2><h3 id="1-1-在威联通container-station3上部署"><a href="#1-1-在威联通container-station3上部署" class="headerlink" title="1.1. 在威联通container-station3上部署"></a>1.1. 在威联通container-station3上部署</h3><p>这个版本是我从2024年年初一直用到现在的版本，没遇到过任何问题，个人感觉没有必要升级。如果你想部署其他版本，可以修改冒号右侧的版本号。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">b3log/siyuan:v2.11.4</span><br></pre></td></tr></table></figure><p>拉取镜像后，创建容器。这里我使用的是最新的<code>container station 3</code>。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/07/89bb0a64866dbde8c8deec9d14194457.png" alt="image"></p><p>先配置容器的端口，主机端口设置为一个未被使用的端口即可，重启策略改成始终重启。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/07/521b03293faba1531c3c187e2ad72ae7.png" alt="image"></p><p>添加存储映射，在nas上新建一个文件夹来存放思源笔记的数据。冒号左侧是你的qnap上的共享文件夹路径，必须新建一个文件夹作为宿主机路径进行映射。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/Public/docker/data/synote/data:/home/siyuan/sy</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/07/279d5efab3a78315d75e336d30286874.png" alt="image"></p><p>然后是修改启动命令，在命令中选择覆盖，然后键入如下内容。如果你的docker需要外网访问，则一定要把accessAuthCode密码设置的复杂一些！</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--workspace=/home/siyuan/sy --lang=zh_CN --accessAuthCode=你的密码</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/07/b525a2b5f58d471c8fe4f57519207539.png" alt="image"></p><p>然后创建容器就可以了。</p><p>创建完毕容器一定要去检查日志，看工作空间有没有问题。如下所示，日志的路径中提到了<code>/home/siyuan/sy</code>，即代表当前使用的就是我们设置好的路径，那就是没有问题的。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/07/f8ea69957b82b5254b0f40f9d5120c4a.png" alt="image"></p><p>包括检查本地的映射路径中是否有对应的文件，<strong>如果没有下面的这些文件，一定要去确认你的docker路径映射有没有问题</strong>！</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/07/d27e4dba576464a31db0b92cc41ec9cd.png" alt="image"></p><p>最终访问本地IP:端口，显示下面的内容，就是部署成功了。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/07/0f1e778960259df896104336d53445d2.png" alt="image"></p><h3 id="1-2-使用docker-cli命令部署"><a href="#1-2-使用docker-cli命令部署" class="headerlink" title="1.2. 使用docker-cli命令部署"></a>1.2. 使用docker-cli命令部署</h3><p>使用docker命令部署参考如下设置，最新版本3.1.0也是一样的命令，我已经测试过了，修改镜像的tag就可以了。其中你可以修改的是<code>-v</code>选项冒号左侧的宿主机目录，以及<code>-p</code>选项后冒号左侧的宿主机端口号。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run -d \</span><br><span class="line">    --name siyuan \</span><br><span class="line">    -v 你需要绑定的宿主机目录:/home/siyuan/sy \</span><br><span class="line">    -p 你需要绑定的宿主机端口:6806 \</span><br><span class="line">    --restart=always \</span><br><span class="line">    b3log/siyuan:v2.11.4 \</span><br><span class="line">    --workspace=/home/siyuan/sy \</span><br><span class="line">    --lang=zh_CN \</span><br><span class="line">    --accessAuthCode=123456</span><br></pre></td></tr></table></figure><p>部署完毕后，一定要检查你绑定的宿主机目录下是否有文件！没有文件是有问题的！比如我使用<code>-v /home/wsl/synote/data:/home/siyuan/sy</code>命令创建了思源容器，此时<code>ls -l</code>查看宿主机该路径下会有如下文件，这才是正常情况。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">❯ ls -l /home/wsl/synote/data</span><br><span class="line">total 12K</span><br><span class="line">drwxr-xr-x  3 wsl wsl 4.0K May 25 18:23 conf</span><br><span class="line">drwxr-xr-x 11 wsl wsl 4.0K May 25 18:23 data</span><br><span class="line">drwxr-xr-x  4 wsl wsl 4.0K May 25 18:21 temp</span><br></pre></td></tr></table></figure><h3 id="1-3-使用docker-compose部署"><a href="#1-3-使用docker-compose部署" class="headerlink" title="1.3. 使用docker-compose部署"></a>1.3. 使用docker-compose部署</h3><p>在威联通container-station-3中支持docker-compose，就是界面中的<code>应用程序</code>这一栏。真的得吐槽一下qnap的国内翻译组，一股机翻的味道，你还不如不翻译，直接用stack或者docker-compose还更好让人理解一些，最开始我都不知道应用程序是嘛玩意，还以为container-station从2变成3后不支持docker-compose了。</p><p>这里给出qnap可以使用的<code>docker-compose.yml</code>，其实也是所有Linux通用的。</p><p>该yml文件的注意事项在注释里面提到了。其中volumes的配置一定要注意，我们在container-station-3里面可以选择我们的文件夹，但是这些我们创建的共享文件夹的绝对路径都是在<code>/share</code>下的，比如我的共享文件夹名称为Public，那么最终需要在docker-compose里面写的绝对路径就是<code>/share/Public</code>。如果你不注意这一点，直接从<code>/Public</code>开始写，就会发现无论如何配置，思源容器都无法启动，会提示权限不够。说白了还是宿主机目录映射错位置了。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">siyuan_compose:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">b3log/siyuan:v2.11.4</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">siyuan-compose</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">PGID:</span> <span class="number">1000</span></span><br><span class="line">      <span class="attr">PUID:</span> <span class="number">1000</span></span><br><span class="line">      <span class="attr">TZ:</span> <span class="string">&quot;Asia/Shanghai&quot;</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="comment"># 本地端口改冒号左边的。</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;20000:6806&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">  <span class="comment"># 本地映射路径改冒号左边的。</span></span><br><span class="line">      <span class="comment"># 注意qnap的docker-compose采用绝对路径，需要在前面加上/share才是共享文件夹！</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/share/Public/docker/data/synote/data:/home/siyuan/sy</span> </span><br><span class="line">    <span class="comment"># 登录密码改最后一个accessAuthCode命令等号之后的，其他的别改。</span></span><br><span class="line">    <span class="attr">command:</span> [<span class="string">&quot;--workspace=/home/siyuan/sy&quot;</span>,<span class="string">&quot;--lang=zh_CN&quot;</span>,<span class="string">&quot;--accessAuthCode=123456&quot;</span>]</span><br><span class="line">    <span class="attr">stdin_open:</span> <span class="literal">true</span>  <span class="comment">## 相当于 -i</span></span><br><span class="line">    <span class="attr">tty:</span> <span class="literal">true</span>         <span class="comment">## 相当于 -t</span></span><br></pre></td></tr></table></figure><p>写进去后点击创建，即可创建思源容器。</p><p>请进入容器日志检查是否成功启动，以及进入本地映射的目录检查是否有文件！一定要检查一定要检查，不要等你到时候容器出问题了发现本地目录没有文件！</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/07/4ed6cee1bb9a4dc7df7ef80fb39c18f3.png" alt="image.png"></p><p>比如日志中不应该出现报错，工作空间路径和我们配置的一致，以及<code>/share/Public/docker/data/synote/data</code>路径下应该出现conf、data、temp等文件夹。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/07/93d2bffd767f9c2e1c6e47a6b981024b.png" alt="image.png"></p><p>如果是其他Linux主机，将上述内容修改成你的配置之后，在你的linux主机上将上述内容写入一个<code>docker-compose.yml</code>文件，然后使用如下方式启动思源容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker-compose up -d</span><br></pre></td></tr></table></figure><p>如果提示<code>docker-compose</code>命令不存在，可以试试<code>docker compose</code>命令，如果还是提示不存在，则需要去安装<code>docker-compose</code>，本站有<a href="https://blog.musnow.top/posts/2069190154">相关博客</a>。</p><h2 id="2-如何设置镜像源？"><a href="#2-如何设置镜像源？" class="headerlink" title="2. 如何设置镜像源？"></a>2. 如何设置镜像源？</h2><blockquote><p>PS: 因为一些原因，各大服务商提供的公开docker镜像源都下架了，您可以尝试自建镜像源或百度一下目前仍然可用的免费公开镜像源。注意，目前可用的公开镜像源大多是互联网用户主动提供的，可能会存在安全风险！</p></blockquote><h3 id="2-1-contianer-station3如何添加镜像源？"><a href="#2-1-contianer-station3如何添加镜像源？" class="headerlink" title="2.1. contianer station3如何添加镜像源？"></a>2.1. contianer station3如何添加镜像源？</h3><p>默认情况下dockerhub的连通性并不是很好，可能没有办法pull镜像，所以需要设置docker的镜像源。</p><p>设置方法如下。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/07/83f0747dbeb13c915db424c412de804a.png" alt="image"></p><p>点击添加存储库，提供商选择其他，然后URL是填镜像源的名称。</p><p>推荐使用南京大学的镜像<code>https://docker.nju.edu.cn</code>，速度不错。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/07/21dc1ade931119c537a4021eb8046be3.png" alt="image"></p><p>填好了之后点击测试链接，成功就OK了，点击应用。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/07/20b6b14c405a28ed8d0dc1bdbb0f8081.png" alt="image"></p><p>设置了之后，在映像中就可以使用这个镜像源来pull容器了。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/07/bfa2ea010625c07c0586fdbd7397f4e7.png" alt="image"></p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/07/317689490c33f04ff4dcb8f548bd1247.png" alt="image"></p><p>不过没有办法通过镜像源来搜容器，自带的搜索只能使用dockerhub来pull镜像。每次需要镜像的时候，都得去找容器的镜像名字是什么，还是有点不方便。</p><h3 id="2-2-docker命令行如何添加镜像源？"><a href="#2-2-docker命令行如何添加镜像源？" class="headerlink" title="2.2. docker命令行如何添加镜像源？"></a>2.2. docker命令行如何添加镜像源？</h3><p>docker的命令行需要修改系统的配置来设置镜像源，对应的文件是<code>/etc/docker/daemon.json</code>。修改这个文件之前，建议先备份一份（如果原本有这个文件的话）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">cp</span> /etc/docker/daemon.json ./docker-daemon.json.bak</span><br></pre></td></tr></table></figure><p>然后使用nano或vim编辑器修改这个文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/docker/daemon.json</span><br></pre></td></tr></table></figure><p>往文件中复制粘贴如下内容</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"> <span class="attr">&quot;registry-mirrors&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;https://docker.nju.edu.cn&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>随后重启docker服务就可以了，如果无法重启docker服务，也可以直接重启整个主机。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><h2 id="3-部署思源后可能遇到的问题"><a href="#3-部署思源后可能遇到的问题" class="headerlink" title="3. 部署思源后可能遇到的问题"></a>3. 部署思源后可能遇到的问题</h2><h3 id="3-1-工作空间不一致问题"><a href="#3-1-工作空间不一致问题" class="headerlink" title="3.1. 工作空间不一致问题"></a>3.1. 工作空间不一致问题</h3><p>在下面的这个命令中，我们将使用<code>-v</code>命令映射的<strong>容器内的目录</strong>（冒号右侧）和<code>--workspace</code>的选项都设置为了<code>/home/siyuan/sy</code>。在部署的时候<strong>一定要确认二者的设置是一致的</strong>，否则思源会因为找不到容器内的目录，而采用默认的工作空间。<strong>相当于路径映射失败</strong>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">    --name siyuan \</span><br><span class="line">    -v 你需要绑定的宿主机目录:/home/siyuan/sy \</span><br><span class="line">    -p 你需要绑定的宿主机端口:6806 \</span><br><span class="line">    --restart=always \</span><br><span class="line">    b3log/siyuan:v2.11.4 \</span><br><span class="line">    --workspace=/home/siyuan/sy \</span><br><span class="line">    --lang=zh_CN \</span><br><span class="line">    --accessAuthCode=123456</span><br></pre></td></tr></table></figure><p>对于不太了解docker机制的用户而言，此时删除了该容器，<strong>你的数据就很难找回来了</strong>！！这也是为什么前文一直强调，创建了容器后，要去检查自己的本地路径中是否有对应的文件。</p><p>比如你使用了如下映射，那么在创建容器后，<strong>一定、一定、一定</strong>要去宿主机本地的<code>/home/mu/synote</code>路径下检查是否多出了思源创建的文件！！！！验证方法很简单，你可以给思源单独创建一个新的文件夹，当思源容器启动后，这个文件夹里面多出了repo、data、temp等目录，那么就是映射成功了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-v /home/mu/synote:/home/siyuan/sy</span><br></pre></td></tr></table></figure><p>如果没有出现新的目录，那就需要去检查思源容器日志，看看工作空间是否正常，以及宿主机目录是否有权限问题导致容器内无法访问。</p><h3 id="3-2-权限问题"><a href="#3-2-权限问题" class="headerlink" title="3.2. 权限问题"></a>3.2. 权限问题</h3><p>思源容器是使用1000用户来创建和访问文件的，所以如果你映射的宿主机路径无法被1000用户或用户组访问，此时日志中就会出现<code>Permission Deny</code>字眼，代表思源<strong>缺少权限</strong>，没有办法在你映射的工作空间中创建和访问文件。</p><p>你可以通过<code>docker logs</code>命令查看容器的日志。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs 思源容器名字</span><br></pre></td></tr></table></figure><p>下面是一个思源的日志，来源于<a href="https://ld246.com/article/1721820989275/comment/1721822535073#comments">社区帖子</a>。在这个日志中出现了<code>[lstat /root/document/fllsynote: permission denied]</code>的输出，代表当前思源没有办法访问<code>/root/document/fllsynote</code>这个路径，因为它是一个root用户的路径，权限组不是1000，无法被思源容器的1000用户组访问。</p><p>然后日志中的第二行输出的意思是，思源发现你提供的工作路径<code>/root/document/fllsynote</code>压根没有办法访问，不是个路径（因为思源没有权限访问），所以它会去使用默认的工作路径<code>/home/siyuan/SiYuan</code>。这个时候问题就来了，如果你没有去检查容器日志和本地文件，你会发现思源是正常启动且可以使用的，但它把你的笔记都写入了容器内部，如果后续你的docker出现问题或者你想升级思源镜像版本的时候，把当前容器删除了，<strong>数据就丢了</strong>！</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fllsiyuan | W 2024/07/24 19:23:09 file.go:210: determines whether [/root/document/fllsynote] is a directory failed: [lstat /root/document/fllsynote: permission denied]</span><br><span class="line">fllsiyuan | W 2024/07/24 19:23:09 working.go:258: use the default workspace [/home/siyuan/SiYuan] since the specified workspace [/root/document/fllsynote] is not a dir</span><br></pre></td></tr></table></figure><p>考虑到真的有很多很多很多人压根没有备份的习惯（即便思源提供了非常方便的导出DATA备份方式），本文再三强调了检查本地映射路径是否有文件的重要性。</p><p>解决这个权限问题的办法有几种：</p><ol><li>不要使用root用户来操作docker命令，而是使用一个子用户+sudo的方式操作docker命令，因为子用户创建出来的文件夹权限是ok的。</li><li><strong>手动使用chown和chgrp命令将创建出来的宿主机文件夹用户组改成1000</strong>（推荐）。</li><li>对于qnap来说，第一个注册的非admin用户就是1000用户，你可以用第一个注册的用户来配置这里的docker容器，并设置映射到qnap的文件夹目录的可读可写权限。理论上也只有第一个注册的用户是默认的管理员，能使用container-station；</li></ol><p>针对第二点做个说明，chown命令是修改文件夹的所属用户，chgrp命令是修改文件夹的所属组。<code>-R</code>选项代表同时修改这个文件夹内部的子文件夹权限。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">chown</span> -R 1000 文件夹</span><br><span class="line">sudo <span class="built_in">chgrp</span> -R 1000 文件夹</span><br></pre></td></tr></table></figure><p>比如我使用了<code>-v /root/siyuan:/home/siyuan/sy</code>进行映射，此时我映射的宿主机目录是在root用户下，大概率是没有办法被容器内直接访问的。此时思源日志中就会出现<code>Permission Deny</code>错误</p><p>这样操作了之后，这个文件夹就可以被容器内访问了，不过你还是需要去检查日志或该文件夹判断是否成功。</p><p>还是那句话，创建了容器后，一定要去检查自己的本地路径中是否有对应的文件！</p><h2 id="4-写在最后"><a href="#4-写在最后" class="headerlink" title="4. 写在最后"></a>4. 写在最后</h2><p>不管你采用什么方式部署的容器，请一定要确认你映射的本地路径中有对应的文件！数据无价哦！</p><p>‍</p>]]></content>
    
    
    <summary type="html">Linux系统及威联通QNAP使用container-station-3或docker命令行部署思源笔记的通用教程。</summary>
    
    
    
    <category term="编程学习" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="Docker真好玩" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/Docker%E7%9C%9F%E5%A5%BD%E7%8E%A9/"/>
    
    
    <category term="Docker" scheme="https://blog.musnow.top/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>【Docker】以思源笔记为例，谈谈什么是端到端加密</title>
    <link href="https://blog.musnow.top/posts/1936212186/"/>
    <id>https://blog.musnow.top/posts/1936212186/</id>
    <published>2024-07-27T23:31:24.000Z</published>
    <updated>2024-07-28T06:17:55.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文首发于 <a href="https://blog.musnow.top/">❄️慕雪的寒舍</a>。</p></blockquote><p>链滴（思源笔记社区）里面有不少老哥似乎不太了解思源使用的端到端加密功能，以及云同步功能背后的机制。本文将以思源笔记为例，谈谈什么是端到端加密，以及思源的同步功能中用到了什么计算机网络相关的技术。</p><h2 id="1-思源笔记如何进行跨设备同步？"><a href="#1-思源笔记如何进行跨设备同步？" class="headerlink" title="1. 思源笔记如何进行跨设备同步？"></a>1. 思源笔记如何进行跨设备同步？</h2><p>下面这张图比较直观的展示了思源笔记客户端是如何进行云端同步的。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/07/16e335bfa9f613a7449e038713b6823a.png" alt="image.png"></p><p>这里假设设备A是第一个使用思源笔记的客户端，设备B是需要从设备A同步数据的客户端。举个栗子：设备A是一台电脑，用户在上面编辑笔记，且希望在自己的手机（设备B）上能访问、阅读自己的笔记。是非常常见的笔记软件使用场景。</p><p>为了让大家有个更清晰的认识，我们一步一步谈起，力求让不是程序员的朋友也能简单了解一下这个同步机制是怎么运作的。</p><h2 id="2-AES加密"><a href="#2-AES加密" class="headerlink" title="2. AES加密"></a>2. AES加密</h2><p>在描述思源采用的加密算法之前，先和大家明确一下加密、解密的概念：</p><ul><li>加密：通过一系列操作，将能被直接阅读的数据，加密成不可阅读的数据；</li><li>解密：通过一系列操作，从不可阅读的加密数据中，解密还原出原本的可读数据；</li><li>加密后的数据被称为密文，能被直接阅读的数据被称为明文。</li></ul><p>你可以百度一个<a href="https://www.toolhelper.cn/SymmetricEncryption/AES">在线AES加密网站</a>来试试加密和解密，如下图所示，我使用了一个随机的密钥对“你好”进行加密，得到的结果是<code>Oru2UtIlrV+qpmKudjZAxQ==</code>这串不知道是什么鬼的密文数据。这便是加密的作用。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/07/e7440b424500b543ea6bacc57078e4a3.png" alt="image.png"></p><p>解密就是通过相同的密钥，将<code>Oru2UtIlrV+qpmKudjZAxQ==</code>这个鬼东西还原出“你好”的过程。</p><hr><p>思源笔记在启用云端同步之前，都会配置一个密钥。这个密钥是用于AES加密的，AES是目前广泛使用的一个加密算法，他是用于替代现在已不再可靠的DES加密算法的。</p><p>在AES加密算法没有被攻破之前，想解密被AES加密后的内容，只有一种方式，那便是暴力<strong>穷举</strong>加密时使用的密钥。</p><p>在《网络安全基础：应用与标准（白国强 译）》的AES章节中，会有下面这一张图，是穷举密钥需要用的时间。当使用128位（16字节，也就是长度为16的字符串）的密钥作为AES加密的输入时，就已经需要<code>10^17</code>年这个量级才能完成解密的，已经远远大于了这个数据有意义的时间了。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/07/d88919ff7f5f69a2b7b708e3e5b91623.png" alt="image.png"></p><p>你想想，你今天偷到了一个机密资料，结果发现解密这个机密资料需要的时间，比地球他老人家的年龄都大，甚至比宇宙大爆炸到现在的时间都长，哪还有解密的必要？等暴力破解出来，这个资料早就没有参考价值了。这便是当下密码学算法希望达成的一个目标，即算法<strong>理论上</strong>能被暴力穷举破解出密钥，但穷举的耗时和成本（运算解密程序需要算力、电费、人力维护等等）会让做这件事毫无意义。</p><blockquote><p>关于这一点，在<a href="https://www.sdnlab.com/21145.html">暴力解决一切？破解AES也是妄想！</a>一文中有更详细的解释，本文不再拓展。</p></blockquote><h2 id="3-HTTPS和TLS-Verify"><a href="#3-HTTPS和TLS-Verify" class="headerlink" title="3. HTTPS和TLS Verify"></a>3. HTTPS和TLS Verify</h2><p>可能有老哥就想问了，既然AES加密算法那么牛逼，为啥只有思源笔记在云同步功能里面加上了这个东西，其他软件会使用AES加密吗？</p><p>当然也会了！现在互联网通信中最重要的也是最最常用的协议之一：HTTPS，背后就用到了TLS和AES加密。现在几乎所有APP、网站，背后都多少会用到HTTPS或者TLS来保障数据传输时的机密性。</p><p>当你访问一个HTTPS的网站时，以<code>https://www.baidu.com/</code>为例，TLS握手协议能保障你现在访问的服务器肯定是百度官方的服务器，而不是某个坏蛋设置的假冒服务器。TLS握手协议完成后，你的浏览器就会和百度的服务器协定一个共享密钥，并使用AES对称加密进行数据通信。最后在网络中流动的实际数据，比如你查询的一个关键词的结果，也已经是加密后的内容了。</p><p>这整个过程都是浏览器或者应用软件自行处理的，并不需要用户做额外的配置。</p><blockquote><p>HTTPS中会使用到的一个东西叫做SSL&#x2F;TLS证书，这是由<strong>可信CA</strong>颁发的用于验证服务器身份和进行密钥交换的必要组件，HTTPS可以避免中间人攻击正是靠证书实现的。如果你使用过nginx，或宝塔这类服务器管理面板，里面配置HTTPS部分一定会有一个证书的配置项。由于这部分的知识比较深奥，涉及环节较多，不太好对小白解释，本文跳过此知识点。</p></blockquote><p>细心的朋友可能会发现，在思源的云端配置中，也是有TLS Verify这个选项的，它的作用就是和提供S3&#x2F;WEBDAV服务的目标服务器进行身份验证。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/07/558c4af5861174d3b18345a9ed04b164.png" alt="image.png"></p><p>TLS Verify在这里和Endpoint使用的HTTPS协议是绑定的。如果你使用了一个HTTP的Endpoint，即便开启TLS Verify也是没有意义的，因为HTTP协议是不包含TLS握手环节的。不过，现在很多服务器都会<strong>强制将HTTP的协议流量重定向到HTTPS</strong>。除非你本地不支持HTTPS和TLS协议，否则最终都会走HTTPS协议进行数据通信。</p><p>也就是说，如果你使用了一个HTTPS协议的Endpoint，也开启了TLS Verify，最终思源笔记和S3存储商之间的数据传输，其实是经过了<strong>两层加密</strong>的，一层是思源笔记本身配置的数据库加密密钥，另外一层是本地和S3&#x2F;WEBDAV服务器通信时使用的HTTPS协议。</p><p>如果某一个服务器使用的是自签名的证书来进行HTTPS传输，此时TLS Verify肯定会失败，因为服务器使用的证书并不是可信CA颁布的，当前主机认为这个证书不值得信任，在TLS握手的证书验证环节中会失败，从而拒绝连接。此时您可以把TLS Verify选项关闭，使用HTTP协议或者不可信的HTTPS协议继续传输数据，但我<strong>不建议这么做</strong>。虽然思源笔记本身数据就会有一层加密，但最终你和服务器之间的通信<strong>可能会被中间人窃取</strong>，从而获取到你使用的S3协议用户密钥等等信息，即便对方没有办法解密你的笔记内容，但是他人可以使用你的S3用户密钥去访问你使用的S3服务，从而获取到你的其他未加密信息。</p><p>不过，如果您是在局域网内使用nas上自建的minio、webdav服务，此时就不需要考虑HTTPS了，可以直接使用HTTP。除非您的局域网内有可以联网的设备被入侵了，才有可能被中间人攻击。当然，如果您的nas使用了ddns之类的方式暴露在公网上了，那就和上文所述的情况一致，得考虑中间人攻击问题了。</p><h2 id="4-同步到云端，从云端同步"><a href="#4-同步到云端，从云端同步" class="headerlink" title="4. 同步到云端，从云端同步"></a>4. 同步到云端，从云端同步</h2><p>现在我们已经知道了AES加密和HTTPS协议是怎么保障我们数据通信的机密性了，下面给大家阐述一下思源从设备A将数据同步到设备B会做的全流程操作。</p><ol><li>用户在<strong>设备A</strong>按下同步按钮，思源开始处理本地数据库数据，和云端已有数据进行对比，找出云端不存在的数据。</li><li>设备A的思源将这部分只有本地存在的数据使用配置好的<strong>数据库密钥K</strong>进行加密，并通过配置的S3&#x2F;WEBDAV协议上传至云端。这个过程中会涉及上文所述的HTTPS和TLS，但都是思源笔记客户端依照协议特性自动完成了所有操作，和用户配置的密钥K没有什么关系。</li><li>数据上传完毕，思源会校验云端数据是否和本地一致，以确认同步是否成功。</li><li>云端S3&#x2F;WEBDAV存储服务商存储的是已经加密过的用户笔记数据。</li><li>用户在<strong>设备B</strong>按下同步按钮，思源开始处理本地数据库数据，和云端已有数据进行对比，发现云端数据更新，存在云端有而本地没有的数据，并将这部分本地不存在的数据找出来。</li><li>设备B的思源从云端下载数据，并使用<strong>数据库密钥K</strong>对数据进行解密，还原出笔记内容。</li><li>下载完毕后，再次检查本地和云端数据快照，确认同步完成。</li></ol><p>其实思源笔记不能实时多设备同步的原因从这个流程就能看得出来。</p><ul><li>假设用户在设备A上写了新文档甲和新文档乙，按下同步按钮，设备A执行上传操作；</li><li>用户又在设备B按同步按钮，设备B执行下载操作；</li><li>此时就出现了两台设备都在访问云端仓库，而云端仓库中的数据还在不断的被A更新；</li><li>这就出现问题了！到时候B下载的数据要么是缺胳膊断腿的，要么是因为损坏无法被正常解密的无效数据，比如文档甲只下了一半的加密内容下来；</li><li>假设用户没有发现这个问题，有一天设备A上的某某文件丢失或者被误删了，用户打算从设备B上把数据全量同步到云，此时就会把设备B上可能存在损坏的文档甲和乙同步到云，从而导致文档甲和乙的数据丢失！</li></ul><p>所以，思源笔记使用的同步流程，就决定了它不能实现完全实时的同步，也不能在多台设备上同时操作同步。如果没记错的话，思源在同步之前会去锁定云端目录，保证同一时间只有同一个设备在上传&#x2F;下载云端数据，来避免另外一台设备触发同步操作而导致的数据一致性问题。</p><h2 id="The-end"><a href="#The-end" class="headerlink" title="The end"></a>The end</h2><p>那flowus、语雀是怎么实现在线编辑、实时同步和多用户协作编辑的呢？这就涉及到编程中多线程里面会涉及到的一个锁机制：乐观锁。</p><blockquote><p>不过这部分内容对于非程序员来说恐怕比HTTPS证书是怎么保证数据不被中间人窃取解释起来还要费劲，就不提啦！</p></blockquote><p>看完本文，不知道你对思源笔记的端到端加密同步功能是否有了一个更清晰的认识呢？如果文章有什么描述你没有看懂，或者大佬发现我的表述有误，都可以在评论区提出来。感谢大家的阅读！</p>]]></content>
    
    
    <summary type="html">以思源笔记为例，谈谈什么是端到端加密</summary>
    
    
    
    <category term="编程学习" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="Docker真好玩" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/Docker%E7%9C%9F%E5%A5%BD%E7%8E%A9/"/>
    
    
    <category term="计算机网络" scheme="https://blog.musnow.top/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    <category term="http" scheme="https://blog.musnow.top/tags/http/"/>
    
    <category term="Docker" scheme="https://blog.musnow.top/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>【C语言】字符串 | 回顾C语言005</title>
    <link href="https://blog.musnow.top/posts/321211845/"/>
    <id>https://blog.musnow.top/posts/321211845/</id>
    <published>2024-07-27T22:07:48.000Z</published>
    <updated>2024-07-27T22:08:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>字符串，就是一长串的字符类型，每一个位上都是一个单独的char字符，连起来组合成了字符串。</p><p>你在各个客户端&#x2F;网页里面看到的文字，在编程语言中都可以认为是一个<strong>字符串</strong>。</p><p>在C语言中，字符串对应的是<code>const char*</code>和<code>char*</code>类型；其本质上是一个<strong>char字符数组</strong>。</p><h1 id="1-常量字符串"><a href="#1-常量字符串" class="headerlink" title="1.常量字符串"></a>1.常量字符串</h1><p>常量字符串的类型是<code>const char*</code>，我们直接使用的<code>&quot;字符串&quot;</code>，就是常量字符串。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">char</span>* str = <span class="string">&quot;hello world&quot;</span>; <span class="comment">// 常量字符串</span></span><br></pre></td></tr></table></figure><p>常量字符串<strong>不能被修改</strong>，但可以像数组一样通过下标和指针的方式访问字符串的单个字符</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">char</span>* str = <span class="string">&quot;hello world&quot;</span>; <span class="comment">// 常量字符串</span></span><br><span class="line"><span class="type">char</span> c1 = str[<span class="number">0</span>];  <span class="comment">// 访问字符h</span></span><br><span class="line"><span class="type">char</span> c2 = (*str+<span class="number">4</span>); <span class="comment">// 访问字符o</span></span><br></pre></td></tr></table></figure><p>而没有const修饰的<code>char*</code>类型，是不能直接接受常量字符串赋值的</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span>* str = <span class="string">&quot;hello world&quot;</span>; <span class="comment">// 无法接受常量字符串，这行代码有误</span></span><br></pre></td></tr></table></figure><p>虽然这行代码在VS2019中没有报错，在Linux下的g++也仅仅是报了warning警告，但其本质是<strong>有问题</strong>的！</p><p>下面的文字就是Linux下g++编译时的警告，翻译过来是禁止将<strong>常量字符串</strong>转换为<code>char *</code>类型。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ g++ test.cpp -o test</span><br><span class="line">test.cpp: In function ‘int main()’:</span><br><span class="line">test.cpp:137:17: warning: ISO C++ forbids converting a string constant to ‘char*’ [-Wwrite-strings]</span><br><span class="line">     char *str = &quot;hello world\n&quot;; // 无法接受常量字符串</span><br><span class="line">                 ^~~~~~~~~~~~~~~</span><br></pre></td></tr></table></figure><h1 id="2-普通字符串"><a href="#2-普通字符串" class="headerlink" title="2.普通字符串"></a>2.普通字符串</h1><p>前面提到，字符串就是一个字符的数组。但我们想定义一个字符串<strong>数组</strong>，也不能用<code>char*</code>，而需要用另外一种方式。</p><p>下面这种在变量名后带<code>[]</code>的写法，就是定义<strong>数组</strong>的语法，在前文已经介绍过了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> str[] = <span class="string">&quot;hello world&quot;</span>; <span class="comment">// 普通字符串的基本定义方式</span></span><br></pre></td></tr></table></figure><p>上方是声明时赋值的写法，编译器在识别到这一行代码后，会自动帮我们创建字符串对应大小的空间，并让str指向这片空间的起始地址。</p><p>需要注意的是，只有初始化的时候能这么写。后续如果想修改这个字符串，需要使用strcpy函数，而不能用&#x3D;直接赋值。strcpy函数会在后文介绍。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> str[] = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">str = <span class="string">&quot;hello&quot;</span>; <span class="comment">//错误，不能通过=直接修改</span></span><br><span class="line"><span class="built_in">strcpy</span>(str,<span class="string">&quot;hello&quot;</span>); <span class="comment">// 正确修改方式</span></span><br></pre></td></tr></table></figure><blockquote><p>这里的str变量本质上是<code>char*</code>类型，是一个字符指针。所有数组变量都是对应类型的指针。</p></blockquote><p>如果想在声明时不赋初值，可以用下面的办法来定义一个字符串。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> str1[<span class="number">15</span>];  <span class="comment">// 定义一个长度为15的字符串数组</span></span><br><span class="line">str1[<span class="number">0</span>] = <span class="string">&#x27;h&#x27;</span>;  <span class="comment">// 通过下标访问的方式赋值</span></span><br><span class="line">str1[<span class="number">1</span>] = <span class="string">&#x27;e&#x27;</span>;</span><br><span class="line">str1[<span class="number">2</span>] = <span class="string">&#x27;l&#x27;</span>;</span><br><span class="line">str1[<span class="number">3</span>] = <span class="string">&#x27;l&#x27;</span>;</span><br><span class="line">str1[<span class="number">4</span>] = <span class="string">&#x27;o&#x27;</span>;</span><br><span class="line">str1[<span class="number">5</span>] = <span class="string">&#x27;\0&#x27;</span>; <span class="comment">// 最后需要加上字符串的结束标志</span></span><br><span class="line"><span class="built_in">printf</span>(str1);  <span class="comment">// 打印字符串</span></span><br></pre></td></tr></table></figure><p>运行结果如下，成功打印出hello字符串。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/07/8e7656db84608af3560cd242027d9527.png"></p><h2 id="2-1-字符串结束标志-0"><a href="#2-1-字符串结束标志-0" class="headerlink" title="2.1 字符串结束标志\0"></a>2.1 字符串结束标志\0</h2><p>请注意，所有字符串数组最后都会带上一个隐藏的<code>&#39;\0&#39;</code>作为字符串的结束标志，该结束标志也需要占用一个字节的空间。</p><p>如果缺少了这个结束标志，那么程序就无法确定字符串什么时候结束，字符串就不完整了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> str4[] = <span class="string">&quot;hello world&quot;</span>; <span class="comment">// 该字符串末尾会自动带上一个\0</span></span><br><span class="line">str4[<span class="number">11</span>] = <span class="string">&#x27;a&#x27;</span>; <span class="comment">// 尝试删掉最末尾的\0，看看会发生什么？</span></span><br><span class="line"><span class="built_in">printf</span>(str4);  <span class="comment">// 打印字符串</span></span><br></pre></td></tr></table></figure><p>可以看到，原本应该打印完毕 <code>hello worlda</code>就停止的程序，却继续往后打印了非常“经典”的乱码字符<code>烫烫</code>🤣。这也是初学者经常遇到的错误之一。这就是缺少<code>\0</code>结束标志的后果。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/07/9884e40a6ed20e33ceeec7c3bdb35f9e.png"></p><p>可能又有初学者在这里会犯第二个错误：越界访问。</p><blockquote><p>在数组章节中，我们已经介绍过越界访问的概念。访问了不属于用户的数组空间就是越界访问。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> str4[] = <span class="string">&quot;hello world&quot;</span>; <span class="comment">// 该字符串末尾会自动带上一个\0</span></span><br><span class="line">str4[<span class="number">11</span>] = <span class="string">&#x27;a&#x27;</span>; <span class="comment">// 尝试删掉最末尾的\0</span></span><br><span class="line">str4[<span class="number">12</span>] = <span class="string">&#x27;\0&#x27;</span>;<span class="comment">// 既然删掉了，我给他加上一个不就行了？</span></span><br><span class="line"><span class="built_in">printf</span>(str4);  <span class="comment">// 打印字符串</span></span><br></pre></td></tr></table></figure><p>但实际上，我们的str4字符串，在定义的时候赋值了<code>&quot;hello world&quot;</code>，这个字符串的长度是12。分别是可见的<code>hello world</code>一共11个字符（空格也算入字符中），和末尾隐藏的<code>\0</code>字符。</p><p>编译器会自动为我们开长度12的char数组，即等价于<code>char str4[12] = &quot;hello world&quot;;</code></p><p>数组<code>[]</code>里面的数字是通过<strong>下标</strong>访问的，<strong>下标是从0开始的</strong>，数组中的第一位的下标是0。所以，<code>str4[11]</code>访问的实际上是第十二个位置的<code>\0</code>，而<code>str4[12]</code>访问的数组的第十三个位置，该位置的空间实际上并不属于我们，此时的访问就是<strong>越界访问</strong>了！</p><p>在windows下，这份代码会因为错误提前退出；在linux下，运行会报段错误；</p><p>下图中就是windows下异常退出的情况，可以看到进程退出代码是<strong>负数</strong>，而且最后一行的<code>printf</code>也并没有打印出结果，这是因为代码在下图第24行中的<code>str4[12] = &#39;\0&#39;;</code>就已经因为越界访问提前异常退出程序了。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/07/5bd424adf0fb711d2c68b0635ecf8e9f.png"></p><p>正常程序中，如果运行正常，程序终止后的退出代码应该是0；非零值都代表运行出错！</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/07/3d5bd309b5cc469a4508df0c026f8f05.png"></p><h2 id="2-2-strcpy函数"><a href="#2-2-strcpy函数" class="headerlink" title="2.2 strcpy函数"></a>2.2 strcpy函数</h2><p>除了一个一个通过下标访问的方式来赋值外，还可以用库函数strcpy，<a href="https://legacy.cplusplus.com/reference/cstring/strcpy/?kw=strcpy">点我查看文档</a></p><p>strcpy函数的使用比较简单，只有两个参数，分别是源字符串和目标字符串。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">char</span> * <span class="title">strcpy</span> <span class="params">( <span class="type">char</span> * destination, <span class="type">const</span> <span class="type">char</span> * source )</span></span>;</span><br></pre></td></tr></table></figure><p>该函数有几点说明:</p><ul><li>拷贝的时候，会把源字符串末尾的<code>\0</code>也拷贝过去；</li><li>目标字符串所能容纳的长度必须大于源字符串（长度要包括<code>\0</code>），否则会有越界访问；</li><li>返回值是目标字符串的指针，即返回<code>destination</code>；</li></ul><p>在当前场景中，我们可以用下面的方式使用strcpy，只要保证我们自己设定的字符数组空间大于源字符串即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> str5[<span class="number">15</span>]; <span class="comment">// 定义一个长度为15的字符串数组</span></span><br><span class="line"><span class="built_in">strcpy</span>(str5,<span class="string">&quot;hello world&quot;</span>); <span class="comment">// 使用strcpy函数，拷贝数据过去</span></span><br></pre></td></tr></table></figure><h2 id="2-3-为什么会打印乱码字符？"><a href="#2-3-为什么会打印乱码字符？" class="headerlink" title="2.3 为什么会打印乱码字符？"></a>2.3 为什么会打印乱码字符？</h2><p>前文中的这份代码，我们将原有的<code>&#39;\0&#39;</code>截止字符替换掉后，因为没有结束标志，printf函数就会一直往后打印，于是就出现了一些常见越界访问和未定义空间才会出现的生僻汉字。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/07/9884e40a6ed20e33ceeec7c3bdb35f9e.png"></p><blockquote><p>你可能会疑惑，理论上后续的空间是没有人使用的空间，那为什么会打印出这些不知道哪里冒出来的字符呢？那最后又为什么停止了？</p></blockquote><p>其实这个问题的答案很简单：在一个程序中，所有<strong>未使用的内存空间</strong>，内部都存放的是<strong>随机值</strong>。这些随机值组合起来，和GBK&#x2F;UTF-8这类<strong>文字编码</strong>的部分编码对应，就会打印出这些生僻字，也就是网络上俗称的“乱码字符”。</p><blockquote><p>所谓“文字编码”，就是将语言里面的文字转为机器可识别的二进制的一个转换表。ASCII码就是一个文字编码表，但其内部只包含了英语字母和部分符号的转换，于是就会有各类的文字编码，将各国语言以规定的格式转换成机器可以识别的二进制。比较常用的文字编码是UTF-8；</p></blockquote><p>至于为什么会停止？回到ASCII码表上，查表可知，<code>&#39;\0&#39;</code>字符对应的<strong>十进制是0</strong>。</p><p>也就是说，只要我们原本定义的字符串，后续的内存空间中出现了一个<strong>随机值为0</strong>的位置，那么printf打印到这里就会把他当作截止标志，停止打印了。</p><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>对字符串的介绍到这里就over了。总结一下，字符串中最需要关注的两个问题：</p><ul><li>字符串（字符数组）的空间长度，注意不要越界访问；</li><li>末尾的这个<code>&#39;\0&#39;</code>一定不能漏，否则没有结束标志了。</li></ul><p>在OJ刷题中，经常会有拼接字符串相关的题目，如果字符串结束标志控制不到位，就容易把自己弄进一个很难找到的混乱BUG中。说多了都是泪，后续等你开始OJ刷题了，就知道慕雪所言何物了。</p>]]></content>
    
    
    <summary type="html">C语言的字符串</summary>
    
    
    
    <category term="编程学习" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="C语言" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/C%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="C语言" scheme="https://blog.musnow.top/tags/C%E8%AF%AD%E8%A8%80/"/>
    
    <category term="回顾C和Cpp" scheme="https://blog.musnow.top/tags/%E5%9B%9E%E9%A1%BEC%E5%92%8CCpp/"/>
    
  </entry>
  
  <entry>
    <title>【C语言】何为数组？| 回顾C语言004</title>
    <link href="https://blog.musnow.top/posts/3142768460/"/>
    <id>https://blog.musnow.top/posts/3142768460/</id>
    <published>2024-07-27T21:59:59.000Z</published>
    <updated>2024-08-17T23:00:38.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-何为数组？"><a href="#1-何为数组？" class="headerlink" title="1.何为数组？"></a>1.何为数组？</h1><p>数，代表数据；组，代表小组、集合。</p><p>数组，就是<strong>一堆数据的集合</strong>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="comment">// 一个数据</span></span><br><span class="line">&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125; <span class="comment">// 一个数组（数据的集合）</span></span><br></pre></td></tr></table></figure><p>上面的<code>&#123;1,2,3,4&#125;</code>，就是一个<code>int</code>类型的数组。</p><h1 id="2-数组定义语法"><a href="#2-数组定义语法" class="headerlink" title="2.数组定义语法"></a>2.数组定义语法</h1><p>数组的声明语法如下，在变量名后带上中括号<code>[]</code>，即代表这是一个数组。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">类型名 数组名[数组长度]; // 声明一个对应类型的数组</span><br></pre></td></tr></table></figure><p>下面是几个数组声明的例子</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> arr1[<span class="number">10</span>];    <span class="comment">// 声明一个能存放10个int类型的整形数组</span></span><br><span class="line"><span class="type">char</span> arr2[<span class="number">20</span>];   <span class="comment">// 声明一个能存放20个char类型的字符数组</span></span><br><span class="line"><span class="type">double</span> arr3[<span class="number">30</span>]; <span class="comment">// 声明一个能存放30个double类型的浮点数数组</span></span><br></pre></td></tr></table></figure><p>除了上方的方式，在声明数组的时候，我们还可以不带中括号中的数字，让操作系统根据我们的赋值来自动初始化对应长度的空间；</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 编译器会自动创建一个能存放4个int类型的数组，等价于int arr4[4]</span></span><br><span class="line"><span class="type">int</span> arr4[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line"><span class="comment">// 编译器会自动创建一个能存放6个char类型的数组，等价于char arr5[6]</span></span><br><span class="line"><span class="type">char</span> arr5[] = <span class="string">&quot;hello&quot;</span>; <span class="comment">// 这里末尾还有一个隐藏的\0，会在字符串章节详解</span></span><br><span class="line"><span class="comment">// 编译器会自动创建一个能存放3个float类型的数组，等价于float arr6[6]</span></span><br><span class="line"><span class="type">float</span> arr6[] = &#123;<span class="number">1.2</span>,<span class="number">3.4</span>,<span class="number">5.4</span>&#125;;</span><br></pre></td></tr></table></figure><p>另外，我们还能带上中括号中的长度数字，再赋值一部分，或完全赋值；</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> arr7[<span class="number">10</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;  <span class="comment">// 只初始化5个数字</span></span><br></pre></td></tr></table></figure><p>需要注意的是，这里相当于只初始化了前5个值，此时后5个空间是未初始化的，存放的是<strong>随机值</strong>（也有编译器会优化为存放0，比如VS2019就会将后续未赋值的空间初始化为0）</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/07/1b1b150568107d941b16289b01d3eea4.png"></p><h1 id="3-数组的访问"><a href="#3-数组的访问" class="headerlink" title="3.数组的访问"></a>3.数组的访问</h1><p>有了数组后，我们应该如何访问数组中的成员呢？</p><h2 id="3-1-数组下标"><a href="#3-1-数组下标" class="headerlink" title="3.1 数组下标"></a>3.1 数组下标</h2><p>答案是通过<strong>数组下标</strong>的方式来访问。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">类型名 数组名[数组长度]; // 声明数组</span><br><span class="line">数组名[数组下标]; // 下标访问数组成员</span><br></pre></td></tr></table></figure><p>所谓数组下标，其实就是对应数据在数组中的位置。下标从<strong>零</strong>开始，最大值是<strong>数组长度-1</strong>；</p><p>长度为5的数组，下标范围是0到4；长度为10的数组，下标范围是0到9；</p><p>比如下面的数组，假设我们想访问第7位的数据，就需要用下标6访问；想访问第十位的数据，就要用下标9来访问；</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> arr8[<span class="number">10</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;;</span><br><span class="line"><span class="type">int</span> a1 = arr8[<span class="number">5</span>]; <span class="comment">// 访问第六位的数据</span></span><br><span class="line"><span class="type">int</span> a2 = arr8[<span class="number">9</span>]; <span class="comment">// 访问第十位的数据</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/07/933d5328a4a42dfa9831b49d8e52e466.png"></p><p>而下标10就已经是<strong>越界访问</strong>了，因为下标10对应的是<strong>第十一位</strong>，而这份空间并不属于我们开辟的这个数组。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> arr8[<span class="number">10</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;;</span><br><span class="line"><span class="type">int</span> a3 = arr8[<span class="number">10</span>]; <span class="comment">// 错误！下标10对应第十一位，越界了！</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/07/2a82e33d3a5fe9b202830e8002af4794.png"></p><h2 id="3-2-越界访问"><a href="#3-2-越界访问" class="headerlink" title="3.2 越界访问"></a>3.2 越界访问</h2><p>所谓<strong>越界访问</strong>，就是访问了数组中不属于用户自己的空间。是一种BUG。</p><p>比如用户定义了一个长度为5的数组，却尝试访问第10个元素，就会出现越界访问。<strong>这是新手常犯的错误之一，下标控制也是C语言中比较麻烦的一环，大家需要注意</strong>。</p><p>不同编译器对越界访问的检查也是不确定的，部分编译器能做到检测到越界访问后发出警告，比如VS2019。有些程序在运行到越界访问地方之时，会发生<strong>段错误</strong>（段错误即访问未定义和不属于用户自己的值）</p><h2 id="3-3-通过指针访问数组"><a href="#3-3-通过指针访问数组" class="headerlink" title="3.3 通过指针访问数组"></a>3.3 通过指针访问数组</h2><p>所有<strong>数组</strong>变量的本质，其实都是对应数据类型的<strong>一级指针</strong>；</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// arr9就是一个int*的一级指针</span></span><br><span class="line"><span class="type">int</span> arr9[<span class="number">10</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;;</span><br></pre></td></tr></table></figure><p>既然是指针，我们就可以通过指针的解引用方式来访问数组中的元素。实际上的<code>[]</code>下标访问，也会被编译器自动转成下面的指针访问形式来访问数组中的元素。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a = (*arr9); <span class="comment">// 等价于 arr9[0]</span></span><br><span class="line"><span class="type">int</span> b = (*(arr9+<span class="number">1</span>)); <span class="comment">// 等价于 arr9[1]</span></span><br><span class="line"><span class="comment">// 以此类推...</span></span><br><span class="line"><span class="type">int</span> c = (*(arr9+<span class="number">9</span>)); <span class="comment">// 等价于 arr9[9]</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/07/a74949671b38c7b9588f6bf221b544c2.png"></p><h1 id="4-多维数组"><a href="#4-多维数组" class="headerlink" title="4.多维数组"></a>4.多维数组</h1><p>数组本质上是指针，指针分为一级和二级，数组也有一维和多维</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> arr10[<span class="number">10</span>]; <span class="comment">// 一维数组</span></span><br><span class="line"><span class="type">int</span> arr11[<span class="number">10</span>][<span class="number">10</span>]; <span class="comment">// 二维数组，一个10x10的矩阵</span></span><br><span class="line"><span class="type">int</span> arr12[<span class="number">10</span>][<span class="number">10</span>][<span class="number">10</span>]; <span class="comment">// 三维数组</span></span><br><span class="line"><span class="comment">// 依此类推...</span></span><br></pre></td></tr></table></figure><p>多维数组的访问方式，和一维数组是相同的，比如如下代码访问的就是数组中第二行第三列的数据</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> k1 = arr11[<span class="number">1</span>][<span class="number">2</span>]; <span class="comment">// 下标访问，第二行第三列</span></span><br></pre></td></tr></table></figure><p>如果想用指针来访问多维数组，需要注意<strong>操作符的优先级</strong>问题，作为初学者，我们先用括号来括起来以避免优先级问题。这里可能有点绕，后续指针章节会讲解指针的寻址方式，到时候大家就能理解下面这行代码的深层含义了。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> k2 = *(*(arr11+<span class="number">1</span>)+<span class="number">2</span>); <span class="comment">// 指针访问，第二行第三列</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/07/5c48901f79fa3ad576f14cc59ca268de.png"></p>]]></content>
    
    
    <summary type="html">认识一下C语言的数组</summary>
    
    
    
    <category term="编程学习" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="C语言" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/C%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="C语言" scheme="https://blog.musnow.top/tags/C%E8%AF%AD%E8%A8%80/"/>
    
    <category term="回顾C和Cpp" scheme="https://blog.musnow.top/tags/%E5%9B%9E%E9%A1%BEC%E5%92%8CCpp/"/>
    
  </entry>
  
  <entry>
    <title>【C语言】变量和数据类型 | 回顾C语言003</title>
    <link href="https://blog.musnow.top/posts/4094051573/"/>
    <id>https://blog.musnow.top/posts/4094051573/</id>
    <published>2024-07-27T21:53:34.000Z</published>
    <updated>2024-08-17T23:00:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>前面我们已经见识过一个简单的完整C语言程序了，下面让我们来认识一下如何在C语言中定义变量，以及C语言中存在哪些数据类型吧！</p><p>前置知识：计算机中都是用二进制0和1来存放数据的。我们把一个二进制位称作一个比特或比特位，<code>1字节=8比特</code>；</p><h1 id="1-定义变量"><a href="#1-定义变量" class="headerlink" title="1.定义变量"></a>1.定义变量</h1><p>基本语法如下，和我们日常语言认知中的赋值是一样的思维逻辑。只不过在编程语言中，我们定义一个变量需要告诉编译器它是什么数据类型的。这也是C&#x2F;C++作为强类型语言的特性之一（变量的数据类型固定，不可以修改数据类型）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">数据类型 变量名1 = 初始值; // 声明并赋值（声明并定义）</span><br><span class="line">数据类型 变量名2; // 只声明，不赋值（声明和定义分离）</span><br><span class="line">变量名2 = 参数值; // 给变量2赋值</span><br></pre></td></tr></table></figure><p>下面给出对应的示例</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">10</span>;  <span class="comment">// 声明并赋值</span></span><br><span class="line"><span class="type">int</span> b;  <span class="comment">// 只声明，不赋值</span></span><br><span class="line">b = <span class="number">20</span>; <span class="comment">// 给变量赋值</span></span><br></pre></td></tr></table></figure><h1 id="2-数据类型"><a href="#2-数据类型" class="headerlink" title="2.数据类型"></a>2.数据类型</h1><p>C语言支持的数据类型如下</p><h2 id="2-1-整形"><a href="#2-1-整形" class="headerlink" title="2.1 整形"></a>2.1 整形</h2><table><thead><tr><th>类型</th><th>存储大小</th><th>值范围</th></tr></thead><tbody><tr><td>char</td><td>1 字节</td><td>-128 到 127 <strong>或</strong> 0 到 255</td></tr><tr><td>unsigned char</td><td>1 字节</td><td>0 到 255</td></tr><tr><td>signed char</td><td>1 字节</td><td>-128 到 127</td></tr><tr><td>int</td><td>2 或 4 字节</td><td>-32,768 到 32,767 <strong>或</strong> -2,147,483,648 到 2,147,483,647</td></tr><tr><td>unsigned int</td><td>2 或 4 字节</td><td>0 到 65,535 <strong>或</strong> 0 到 4,294,967,295</td></tr><tr><td>short</td><td>2 字节</td><td>-32,768 到 32,767</td></tr><tr><td>unsigned short</td><td>2 字节</td><td>0 到 65,535</td></tr><tr><td>long</td><td>4 或 8 字节</td><td>-2,147,483,648 到 2,147,483,647 <strong>或</strong> -9,223,372,036,854,775,808 到 +9,223,372,036,854,775,807</td></tr><tr><td>unsigned long</td><td>4 或 8 字节</td><td>0 到 4,294,967,295 <strong>或</strong> 0 到 +18,446,744,073,709,551,616</td></tr><tr><td>long long</td><td>8 字节</td><td>-9,223,372,036,854,775,808 到 +9,223,372,036,854,775,807</td></tr><tr><td>unsigned long long</td><td>8 字节</td><td>0 到 +18,446,744,073,709,551,616</td></tr></tbody></table><p>上面的所有数据类型，都是整形家族的成员。</p><p><code>long</code>和<code>long long</code>本质上是<code>long int</code>和<code>long long int</code>，写的时候可以省略<code>int</code>。</p><p>在很多项目&#x2F;库函数源码中，你还会看到下面两种整数类型。他们都是基础类型的一个别名。</p><table><thead><tr><th>类型</th><th>实际对应的类型</th><th>操作系统</th></tr></thead><tbody><tr><td>szie_t</td><td>unsigned int</td><td>windows 11</td></tr><tr><td>szie_t</td><td>long unsigned int</td><td>Linux (CentOS8)</td></tr><tr><td>sszie_t</td><td>windows不支持</td><td>windows 11</td></tr><tr><td>sszie_t</td><td>long</td><td>Linux (CentOS8)</td></tr></tbody></table><h3 id="2-1-1-char也是整形"><a href="#2-1-1-char也是整形" class="headerlink" title="2.1.1 char也是整形"></a>2.1.1 char也是整形</h3><p>char字符类型也是整形家族的一员，其底层和整形int的存放方式是一模一样的，只不过其只占用了1个字节。</p><p>在printf函数中，我们也可以用<code>%d</code>来打印char类型，最终输出的结果是char对应的数字。</p><blockquote><p>在计算机底层中，会使用ASCII码表来进行数字和char字符之间的转换，将该表粘贴如下</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/07/a15bb7f7a8b6b6003421589a527b5d8d.jpeg"></p></blockquote><p>定义字符的时候，我们需要给字符带上单引号作为标识，不能删除单引号，否则会被识别为变量名；也不能用双引号，双引号代表的是字符串。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> a = <span class="string">&#x27;A&#x27;</span>; <span class="comment">// 字符A需要带上单引号</span></span><br><span class="line"><span class="type">char</span> b;</span><br><span class="line">b = <span class="string">&#x27;B&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="2-1-2-long和int的区别"><a href="#2-1-2-long和int的区别" class="headerlink" title="2.1.2 long和int的区别"></a>2.1.2 long和int的区别</h3><p>这里对int和long做一定说明：在32位操作系统上，<strong>int和long都是4个字节</strong>。</p><p>这时，你可能和初学的我会有一样的疑惑：既然存放大小一样，能存放的长度也一样，那int和long有什么区别？</p><p>这是因为不同操作系统&#x2F;编译器会有不同的默认策略，在一些很古早的操作系统上，可能会出现下面的情况：</p><ul><li>int只有2个字节</li><li>long是4个字节</li></ul><p>long类型的含义，就是告知使用者，不管在什么操作系统上，<strong>其至少能达到和int一样的长度</strong>，或比int更长。这样只要我们需要的数据长度在2~4个字节之间，那就可以使用long来保证该变量一定会用4个字节来存储。<strong>避免不同平台中int的默认策略不同而导致的异常</strong>。</p><blockquote><p>比如我们有一个占用了3字节的整数，在int为4字节的平台上代码能正常运行，但在int只有2字节的平台上，就无法正常运行该代码。用long就能避免这个问题</p></blockquote><p>当然，如果你所编写的项目对内存占用不敏感，也可以无脑用<code>long long</code>。</p><p>在64位操作系统下，<code>int</code>类型是4个字节，<code>long</code>和<code>long long</code>都是8个字节。</p><h3 id="2-1-3-确定长度的int类型"><a href="#2-1-3-确定长度的int类型" class="headerlink" title="2.1.3 确定长度的int类型"></a>2.1.3 确定长度的int类型</h3><p>前文提到了：“只要我们需要的数据长度在2~4个字节之间，那就可以使用long来保证该变量一定会用4个字节来存储。”，但实际上这种需要确定长度来存放整形的时候，还有更合适的做法。</p><p>C语言在<code>ISO C99</code>中引入了定长整形的数据类型名，使用这一批数据类型来代替<code>int/long</code>，能确保我们的数字一定会用指定二进制位数来存放。</p><p>这一批数据类型和上文提到的<code>szie_t/sszie_t</code>一样，都是在不同操作系统环境下对已有的<code>int/long/short</code>的重命名，也就是说，底层会根据当前操作系统的不同，来自己帮我们重名这些带具体位数的整形类型，只要我们用了这个数据类型，那么代码不管在任何操作系统上，只要这个操作系统支持<code>C99</code>标准，就一定能以符合我们预期的数据长度来存放对应的整形数字。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/07/a28e912b72640c8a0fd6b4c9f603d79d.png"></p><p>比如我们在需要4个字节（32位）来存放一个有符号整数数据时，可以用<code>int32_t</code>来替代<code>int/long</code>，这样就能从语言层面彻底确保我们的数字会用32个二进制位来存储。</p><blockquote><p>更多信息可以参考博客：<a href="https://blog.csdn.net/chongbin007/article/details/123766387">C语言 —— int32_t uint32_t 及size_t</a></p></blockquote><h2 id="2-3-浮点型"><a href="#2-3-浮点型" class="headerlink" title="2.3 浮点型"></a>2.3 浮点型</h2><p>所谓浮点型，即C语言中的小数。</p><p>下表中的E代表是科学计数法，E+38 &#x3D; 10<sup>38</sup>，E-38 &#x3D; 10<sup>-38</sup>；</p><table><thead><tr><th>类型</th><th>存储大小</th><th>值范围</th><th>精度</th></tr></thead><tbody><tr><td>float</td><td>4 字节</td><td>1.2E-38 到 3.4E+38</td><td>6 位有效位</td></tr><tr><td>double</td><td>8 字节</td><td>2.3E-308 到 1.7E+308</td><td>15 位有效位</td></tr><tr><td>long double</td><td>16 字节</td><td>3.4E-4932 到 1.1E+4932</td><td>19 位有效位</td></tr></tbody></table><p>在库函数头文件 <code>&lt;float.h&gt;</code> 存放了浮点数的最大值和最小值的宏。这里我们采用<code>%E</code>科学计数法的方式打印出浮点数float类型的最大值和最小值。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;float.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;float 存储最大字节数 : %d \n&quot;</span>, <span class="built_in">sizeof</span>(<span class="type">float</span>));</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;float 最小值: %E\n&quot;</span>, FLT_MIN );</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;float 最大值: %E\n&quot;</span>, FLT_MAX );</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;精度值: %d\n&quot;</span>, FLT_DIG );</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码输出结果如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">float 存储最大字节数 : 4</span><br><span class="line">float 最小值: 1.175494E-38</span><br><span class="line">float 最大值: 3.402823E+38</span><br><span class="line">精度值: 6</span><br></pre></td></tr></table></figure><h2 id="2-4-指针类型"><a href="#2-4-指针类型" class="headerlink" title="2.4 指针类型"></a>2.4 指针类型</h2><p>指针类型是C&#x2F;C++中比较难懂的一环，这里我们暂时只学习基础的指针变量声明。对指针的深入学习会有专门的文档。</p><p>指针的基本格式就是<code>*</code>，只要在原有数据类型后加一个<code>*</code>，就代表是该类型的指针。在原有的变量前面加上取地址符号<code>&amp;</code>，就代表获取该变量的地址（指针）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">int a = 10;</span><br><span class="line">// ptr就是一个int*的指针；&amp;a代表获取a变量的地址，赋值给ptr指针</span><br><span class="line">int* ptr = &amp;a;</span><br></pre></td></tr></table></figure><p>要想使用指针来访问变量a中的数据，我们需要用到解引用，符号也是<code>*</code>；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int b = *ptr; // 通过解引用，获取到ptr指针指向的地址中的值，赋值给b</span><br></pre></td></tr></table></figure><p>执行完毕这个代码后，变量b就获取到了ptr指针指向的地址中的值，即变量a的值。</p><p>指针变量中，星号<code>*</code>的个数代表指针的等级，一个<code>*</code>就代表是一级指针，两个<code>*</code>就代表是二级指针，依此类推。不同等级的指针具体的区别，会在指针章节再谈，本文档只是让大家认识数据类型的。</p><h2 id="2-5-bool类型"><a href="#2-5-bool类型" class="headerlink" title="2.5 bool类型"></a>2.5 bool类型</h2><p>C&#x2F;C++中还有一个特殊的类型，布尔类型，即bool类型。</p><p>这个类型只有两个预定义的值，分别是false和true，聪明的你肯定已经明白它的作用了。主要就是用于函数的返回值，亦或者是用做flag标记变量，来<strong>标定真和假</strong>的。</p><blockquote><p>比如：通过函数判断一个字符串是否为一个数字，是返回true，不是返回false</p></blockquote><p>在C语言中使用这个变量需要引用头文件 <code>stdbool.h</code>，代码示例如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">bool</span> a = <span class="literal">true</span>;  <span class="comment">// 真</span></span><br><span class="line"><span class="type">bool</span> b = <span class="literal">false</span>; <span class="comment">// 假</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该变量大小为1个字节，也能算作整形家族的一员（底层其实就是一个宏，分别对应0和1两个数字）</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/07/3940e18986c71adff1982e27bc7a8281.png"></p><p>头文件<code>stdbool.h</code>非常短，这里顺带将完整的内容粘贴出来。其中出现了define和ifdef这些宏定义语法，在本站后文中都会介绍到。我们只需要关注核心：可以看到，true是0，false是1，二者就是数字罢了。</p><blockquote><p><code>#define 名字 内容</code> 后文出现该<strong>名字</strong>的位置，全都会被替换成<strong>内容</strong>；<br><code>#define true 0</code> 引用头文件后，后文出现的所有true都会在预编译阶段替换成0；</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// stdbool.h</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//      Copyright (c) Microsoft Corporation. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// The C Standard Library &lt;stdbool.h&gt; header.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> _STDBOOL</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _STDBOOL</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __bool_true_false_are_defined 1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __cplusplus</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> bool  _Bool</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> false 0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> true  1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">/* __cplusplus */</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">/* _STDBOOL */</span></span></span><br></pre></td></tr></table></figure><h1 id="3-const关键字"><a href="#3-const关键字" class="headerlink" title="3.const关键字"></a>3.const关键字</h1><p>在继续介绍其他数据类型之前，需要先带大家认识一下<code>const</code>关键字。</p><p>这个关键字的作用是将数据类型添加<strong>常量</strong>属性，被<code>const</code>关键字修饰后的属性，将具有常量属性，即<strong>不可以被修改</strong>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> a = <span class="number">10</span>; <span class="comment">// 常量变量，a不可以被修改</span></span><br></pre></td></tr></table></figure><p>当我们尝试修改这个变量的时候，会报错，无法通过编译。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> a = <span class="number">10</span>; <span class="comment">// 常量变量，a不可以被修改</span></span><br><span class="line">a = <span class="number">10</span>; <span class="comment">// 错误！修改常量会报错</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/07/402b0d61057106d88ce00d167f4fbc24.png"></p><p>后文将介绍数组类型和字符串类型，请继续阅读本专栏。</p>]]></content>
    
    
    <summary type="html">C语言的变量和数据类型</summary>
    
    
    
    <category term="编程学习" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="C语言" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/C%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="C语言" scheme="https://blog.musnow.top/tags/C%E8%AF%AD%E8%A8%80/"/>
    
    <category term="回顾C和Cpp" scheme="https://blog.musnow.top/tags/%E5%9B%9E%E9%A1%BEC%E5%92%8CCpp/"/>
    
  </entry>
  
  <entry>
    <title>【C语言】第一个HelloWorld程序 | 回顾C语言002</title>
    <link href="https://blog.musnow.top/posts/1642707893/"/>
    <id>https://blog.musnow.top/posts/1642707893/</id>
    <published>2024-07-27T21:50:12.000Z</published>
    <updated>2024-08-17T22:58:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>对于大多数编程语言来说，我们第一个编写的程序都是一个打印 <code>hello world</code> 的代码，其本质是让编程语言与系统交互，在控制台中打印字符串。</p><p>让我们来看看C语言中，想要在控制台里面输出内容，应该怎么做吧！</p><h1 id="1-hello-world源码"><a href="#1-hello-world源码" class="headerlink" title="1. hello world源码"></a>1. hello world源码</h1><p>对于大部分编程语言初学者而言，这是最熟悉的代码了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span> </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;hello world\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-第一次运行代码"><a href="#2-第一次运行代码" class="headerlink" title="2. 第一次运行代码"></a>2. 第一次运行代码</h1><p>写到 VS2019 中后，我们使用键盘上的<code>CTRL+S</code>快捷键保存代码，再按 <code>CTRL+F5</code> 就可以运行代码了。</p><blockquote><p>部分笔记本电脑上，F开头的功能键默认按下是调节亮度&#x2F;声音等一些快捷功能，并不是F键本身的功能。这时候你需要使用<code>FN+F功能键</code>才能使用出<code>F功能键</code>原本的功能；比如<code>CTRL+FN+F5</code>来运行代码。</p><p>很多笔记本都可以用<code>FN+ESC</code>来锁定FN键，让<code>F功能键</code>恢复原本功能（不需要按FN），而调节亮度&#x2F;声音等快捷控制方式变回<code>FN+F功能键</code>；如果你的笔记本不是用<code>FN+ESC</code>来锁定FN键，那可以百度一下你这台型号&#x2F;品牌的笔记本如何锁定FN键（应该都有这个功能吧？没有就算了）</p><p>对于编程学习者来说，更建议你锁定FN键，避免每次 <code>CTRL+F5</code> 都得带上FN。</p></blockquote><p>运行代码后，VS2019会执行编译流程，在项目路径生成一个可执行文件，并直接执行这个文件。看到的效果就是一个黑框（windows下的终端）弹出，显示出了我们代码的结果。即<code>&quot;hello world\n&quot;</code>字符串被打印到了终端上。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/07/0aa11cafafbc513d3bfed560f4c9a3df.png"></p><p>除了使用快捷键<code>CTRL+F5</code>运行代码，你还可以在 VS2019 的界面上方，点击<code>调试-开始执行(不调试)</code>，后续的文档中将会解释什么是调试。现在你只需要知道这里也可以执行代码就行了。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/07/60170513fe8ce2c5f543ec7c820c6199.png"></p><h1 id="3-代码逐行解释"><a href="#3-代码逐行解释" class="headerlink" title="3. 代码逐行解释"></a>3. 代码逐行解释</h1><p>下面让我来逐行解释一下这份代码吧！</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span> <span class="comment">// 1.printf库函数需要使用的头文件</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> <span class="comment">// 2.入口函数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;hello world\n&quot;</span>); <span class="comment">// 3.调用printf函数，打印字符串</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// 4.return是返回值并退出函数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先说明一下，C语言中，每一行代码后都需要跟着一个英文的分号<code>;</code>作为这一行代码的结束标记。一定不要忘记这个分号，也一定不要在不对的地方加上这个分号（不然就会出一些很难找的bug）</p><h2 id="3-1-函数的基本格式和main函数"><a href="#3-1-函数的基本格式和main函数" class="headerlink" title="3.1. 函数的基本格式和main函数"></a>3.1. 函数的基本格式和main函数</h2><p>在C&#x2F;C++中，main函数是作为函数的入口，程序是从main函数开始运行的。</p><p>C语言中，函数的基本格式如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">函数返回值 函数名(函数参数类型 函数参数1, 函数参数类型 函数参数2, ...)</span><br><span class="line">&#123;</span><br><span class="line">函数体</span><br><span class="line">return 返回值（需要和函数返回值的类型对应）</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对应的，main函数是C语言中程序的入口，长下面这样。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 函数体</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// 返回值是0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个main函数中：</p><ul><li>函数的返回值是int（整数类型）</li><li><code>main()</code>括号内为空，代表main函数没有参数</li><li>函数体自行编写</li><li><code>return 0;</code>代表main函数的返回值是0</li></ul><p>运行程序的时候，编译器会自动找到你的main函数，开始执行这个代码。这也是为什么我们的main函数可以不写参数。</p><p>而其他函数，都需要我们手动调用。</p><blockquote><p>关于main函数的参数和返回值，还有很多可以聊的。后续的学习中再深入学习吧。</p></blockquote><h2 id="3-2-函数注释"><a href="#3-2-函数注释" class="headerlink" title="3.2. 函数注释"></a>3.2. 函数注释</h2><p>在C&#x2F;C++中，函数注释是以<code>//</code>开头，在这之后的文字都是函数注释，和实际代码没有任何关系。</p><p>所谓注释，就是对函数这部分功能的描述，或函数参数的描述。避免其他人看不懂你代码的意图，亦或者是自己以后回来也看不明白自己写的是啥了。</p><blockquote><p>虽然网上有段子说：“最讨厌不写注释的人，和让我写注释的人”，但实际上，该写的注释还是得写的。段子图一乐就行了。</p></blockquote><p>对于初学者来说，多写注释能让后续你复习代码的时候，明确这部分学习的内容。注释并不需要做到行行都有，但是基本流程还是要写上的。</p><h2 id="3-3-include"><a href="#3-3-include" class="headerlink" title="3.3. #include"></a>3.3. #include</h2><p>在上面的打印代码中，第一行如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br></pre></td></tr></table></figure><p>这里的<code>#include</code>的作用是引用一个头文件，头文件一般以<code>.h</code>结尾，<code>&lt;&gt;</code>中的便是头文件的文件名。</p><blockquote><p>你可以理解为，头文件是另外一个包含C语言代码的文本文件。</p></blockquote><p>当我们引用了这个头文件后，这个头文件的内容会在当前文件<strong>被展开</strong>。</p><p>假设我们将下面的代码写入到<code>Add.h</code>文件</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">Add</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再在<code>test.c</code>文件中写如下代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Add.h&quot;</span> <span class="comment">// 引用我们自己的头文件</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> num = <span class="built_in">Add</span>(<span class="number">1</span>,<span class="number">3</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终，编译器会在<strong>预编译</strong>阶段（这是编译的阶段之一）展开<code>Add.h</code>头文件，整个代码会自动变成如下模样。即<code>#include &quot;Add.h&quot;</code>被替换成了<code>Add.h</code>头文件中的内容。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">Add</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> num = <span class="built_in">Add</span>(<span class="number">1</span>,<span class="number">3</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-1-include中-lt-gt-和””的区别"><a href="#3-3-1-include中-lt-gt-和””的区别" class="headerlink" title="3.3.1. include中&lt;&gt;和””的区别"></a>3.3.1. include中&lt;&gt;和””的区别</h3><p>细心的你应该发现了，<code>#include</code>后面出现了两种不同的符号，分别是<code>&lt;&gt;</code>和<code>&quot;&quot;</code>；区别如下</p><ul><li><code>&lt;&gt;</code> <strong>只能</strong>引用官方的头文件，比如<code>stdio.h</code>就是C语言本身提供的头文件；</li><li><code>&quot;&quot;</code> 引用我们自己写的头文件，比如上文中的<code>Add.h</code>就是我们自己写的一个头文件。</li></ul><p>而<code>&quot;&quot;</code>既可以引用官方的头文件，又可以引用自己写的头文件。它的查找逻辑不同，假设我们有如下的一个文件路径：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">测试代码(文件夹)</span><br><span class="line">- Add.h</span><br><span class="line">- test.c</span><br></pre></td></tr></table></figure><p>依照上面的代码，我们运行代码是从<code>test.c</code>开始的，执行到第一行的<code>#include &quot;Add.h&quot;</code>时，因为我们使用的是<code>&quot;&quot;</code>，所以编译器会执行如下流程：</p><ul><li>从当前<code>test.c</code>文件夹所在的路径，开始找这个<code>Add.h</code>，找到了，就将头文件中的内容展开（本例子中存在<code>Add.h</code>头文件，所以可以正常找到头文件并展开）；</li><li>如果找不到，就会去编程语言的<strong>安装路径</strong>中，找C语言官方提供的头文件；</li><li>如果还找不到，代表这个头文件不存在，报错退出编译流程，编译失败。</li></ul><p>而如果使用<code>&lt;&gt;</code>引用头文件，则<strong>只会</strong>去编程语言的安装路径中找官方提供的头文件。找不到，则编译失败。比如我们用<code>#include &lt;Add.h&gt;</code>来引用上文我们自己写的头文件，就会编译出错。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/07/9728b266086f08c9676e48a3886272ae.png"></p><blockquote><p>现在讲这部分，可能会有些抽象。你可以只记住两者的区别即可，最终头文件的引用这件事，还会在学习Linux的时候再谈，到时候就能给大家演示二者区别的实际例子，更方便理解。</p></blockquote><p>在日常编写代码中，我们应该做好区分，这也是代码规范的一部分：</p><ul><li>C语言内置的头文件，使用<code>&lt;&gt;</code>来引用，告知别人这是内置的头文件；</li><li>自己编写的头文件，使用<code>&quot;&quot;</code>来引用，告知别人这是我们自己写的头文件；</li></ul><p>保持良好的代码规范，是我们学习编程中不可或缺的一部分。</p><h2 id="3-4-printf函数"><a href="#3-4-printf函数" class="headerlink" title="3.4. printf函数"></a>3.4. printf函数</h2><h3 id="3-4-1-善用cplusplus-com文档网站"><a href="#3-4-1-善用cplusplus-com文档网站" class="headerlink" title="3.4.1. 善用cplusplus.com文档网站"></a>3.4.1. 善用cplusplus.com文档网站</h3><p><a href="https://legacy.cplusplus.com/">cplusplus.com</a>这个网站的作用是查找一些C&#x2F;C++库函数的定义和用法，现在就以printf函数为例，带大家来用用这个网站，并学习printf函数的使用。</p><p>进入网站后，在最上方的搜索框查找printf函数</p><p><a href="https://legacy.cplusplus.com/reference/cstdio/printf/?kw=printf">https://legacy.cplusplus.com/reference/cstdio/printf/?kw=printf</a></p><p>cplusplus.com的结果都是全英文的，但不要有畏难情绪，基本的介绍是不难读懂的。实在不行我们可以用翻译软件嘛！</p><p>下图中标注出了该网站搜索到的结果中的基本格式。包含函数的定义、说明、函数参数、返回值，最底部还有函数的使用示例</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/07/9df0a5a57afe4c23073869f29e8e10e0.png"></p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/07/dc8c82ffccd3710bdaaabdc96858392a.png"></p><h3 id="3-4-2-函数声明"><a href="#3-4-2-函数声明" class="headerlink" title="3.4.2. 函数声明"></a>3.4.2. 函数声明</h3><p>printf的函数的声明如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">printf</span> <span class="params">( <span class="type">const</span> <span class="type">char</span> * format, ... )</span></span>;</span><br></pre></td></tr></table></figure><h4 id="3-4-2-1-参数"><a href="#3-4-2-1-参数" class="headerlink" title="3.4.2.1. 参数"></a>3.4.2.1. 参数</h4><p>依照前文提到的函数的基本格式进行解读：</p><ul><li>返回值是int</li><li>函数名是printf</li><li>函数的第一个参数是<code>const char *</code>类型，参数名为format，意义是函数的打印格式</li><li>函数的后续参数用了<code>...</code>，这一点就比较深入了，是C语言中支持的<strong>可变参数列表</strong>（文档很后面才会深入介绍这个）</li></ul><p>printf函数会根据我们设置的第一个参数打印格式，将后续传入的可变参数列表中的参数，以我们传入的打印格式写入到<code>stdout</code>中；</p><blockquote><p><code>stdout</code>是C语言的标准输出流，在默认情况下，就是往控制台中输出。</p></blockquote><h4 id="3-4-2-2-返回值"><a href="#3-4-2-2-返回值" class="headerlink" title="3.4.2.2. 返回值"></a>3.4.2.2. 返回值</h4><p>在网站中，对返回值的介绍如下</p><figure class="highlight plaintext"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">On success, the total number of characters written is returned.</span><br><span class="line"></span><br><span class="line">If a writing error occurs, the error indicator (ferror) is set and a negative number is returned.</span><br><span class="line"></span><br><span class="line">If a multibyte character encoding error occurs while writing wide characters, errno is set to EILSEQ and a negative number is returned.</span><br></pre></td></tr></table></figure><p>翻译过来是这样的：</p><ul><li>函数执行成功，会返回成功打印了多少个字符</li><li>函数执行失败，会返回一个负数（更多的暂时不需要了解）</li></ul><h4 id="3-4-2-3-调用示例"><a href="#3-4-2-3-调用示例" class="headerlink" title="3.4.2.3. 调用示例"></a>3.4.2.3. 调用示例</h4><p>下面是几个printf的调用示例</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,<span class="number">10</span>); <span class="comment">// 打印整形 (int)</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%x&quot;</span>,<span class="number">10</span>); <span class="comment">// 以十六进制打印整形 (int)</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,<span class="number">100000000000000</span>); <span class="comment">// 打印长整形 (long long)</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%a&quot;</span>,<span class="string">&#x27;C&#x27;</span>); <span class="comment">// 打印单个字符 (char)</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;hello world&quot;</span>); <span class="comment">// 直接打印字符串 (char *)</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>,<span class="string">&quot;hello world&quot;</span>); <span class="comment">// 通过%s打印字符串 (char *)</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%f&quot;</span>,<span class="number">3.14</span>); <span class="comment">// 打印浮点数，即分数和小数 (float/double)</span></span><br><span class="line"><span class="type">int</span> ptr = <span class="number">30</span>; <span class="comment">// 定义一个int类型的变量ptr</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p&quot;</span>,&amp;ptr); <span class="comment">// 打印地址（需要打印的是指针，后续会讲解指针类型）</span></span><br></pre></td></tr></table></figure><p>更多的格式化控制方式，可以在<a href="https://legacy.cplusplus.com/reference/cstdio/printf/?kw=printf">cplusplus.com</a>的参数介绍中找到，常用的上面基本都提到了。</p><p>后续会在输入输出操作的时候，更详细地介绍这个函数。</p><h1 id="4-结语"><a href="#4-结语" class="headerlink" title="4. 结语"></a>4. 结语</h1><p>看到这里，想毕你已经对我们刚刚编写的第一个C语言程序，有基本的理解啦！</p>]]></content>
    
    
    <summary type="html">第一个HelloWorld程序</summary>
    
    
    
    <category term="编程学习" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="C语言" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/C%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="C语言" scheme="https://blog.musnow.top/tags/C%E8%AF%AD%E8%A8%80/"/>
    
    <category term="回顾C和Cpp" scheme="https://blog.musnow.top/tags/%E5%9B%9E%E9%A1%BEC%E5%92%8CCpp/"/>
    
  </entry>
  
  <entry>
    <title>【C语言】都2024年了，还适合学C语言吗？| 回顾C语言001</title>
    <link href="https://blog.musnow.top/posts/1114620238/"/>
    <id>https://blog.musnow.top/posts/1114620238/</id>
    <published>2024-07-27T21:46:55.000Z</published>
    <updated>2024-08-17T22:55:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>都2023年了，还适合学C语言吗？</p><h1 id="C语言适合什么？"><a href="#C语言适合什么？" class="headerlink" title="C语言适合什么？"></a>C语言适合什么？</h1><p>不同编程语言都有不同的适用范围，比起其他语言，C语言更加适合比较底层的操作。比如在互联网行业中最广泛使用的服务器操作系统Linux，就是用C语言编写的。</p><ul><li>操作系统；</li><li>驱动软件；</li><li>编译器；</li><li>嵌入式编程（单片机）；</li><li>服务器后端程序（C和C++）；</li><li>基础架构平台；</li><li>用来写其他编程语言（比如Python的解释器就是用C语言实现的）；</li><li>…</li></ul><h1 id="C-x2F-C-的就业环境"><a href="#C-x2F-C-的就业环境" class="headerlink" title="C&#x2F;C++的就业环境"></a>C&#x2F;C++的就业环境</h1><p>但是，2023&#x2F;2024年的今天，作为已经在实习生求职中摸爬滚打的过来人，必须要提前告知编程初学者：当下C&#x2F;C++的岗位<strong>极其稀少</strong>，岗位数量甚至不足Java的50%，很多知名企业只有测开岗位的要求中才出现了C&#x2F;C++字样，而测开知识大多是Java&#x2F;Python方向才会学习的。这一点你可以在各大厂的校招官网中求证，搜索C++相关岗位，数量只有个位数，甚至完全没有C++岗位。目前看也就华为和腾讯对C++选手比较友好。</p><blockquote><p>可能有人会和你说，<strong>企业招聘并不看重语言</strong>。这句话只是<strong>部分正确</strong>。</p></blockquote><p>当下大中厂的HC和应聘者比例极度失衡，是<strong>僧多粥少</strong>的局面；既然人家能找到语言对口的应届生，除非你能做到<strong>特别优秀</strong>（学校比人家好、学历比人家高、C&#x2F;C++学的特别牛），那为何要来录取你一位语言不通的求职者？</p><p>企业追求的是效益，语言对口的应聘者绝对是更有优势的。这样能减少入职培训的时长，让新人更快进入实际项目岗位中打螺丝。所以，如果你决心学习C&#x2F;C++，并对操作系统、高性能后台开发、嵌入式编程感兴趣，那就要做好努力学习和接受更少岗位、更少HC的准备！</p><blockquote><p>至于多修编程语言，个人是<strong>非常不推荐</strong>的！</p></blockquote><p>除非你是学霸，能做到全知全能。否则我还是建议你慎重选择自己的主修语言，彻底深入学习该语言，并依照个人喜好辅修一俩门编程语言的基础语法即可。</p><h1 id="跟着慕雪一起回顾C-x2F-C-吧"><a href="#跟着慕雪一起回顾C-x2F-C-吧" class="headerlink" title="跟着慕雪一起回顾C&#x2F;C++吧"></a>跟着慕雪一起回顾C&#x2F;C++吧</h1><p>新开了一个随缘更新的专栏，为回顾C&#x2F;C++所设，日后有学弟学妹想学习C++方向了，我也可以直接把这个专栏丢给他们。如果你想和慕雪一起从0开始学习C语言，可以关注一下本站的<a href="https://blog.musnow.top/tags/%E5%9B%9E%E9%A1%BEc%E5%92%8Ccpp/">回顾C和Cpp</a>这个Tag。</p><p>在学习C语言之前，请安装VS2019或者VS2022编译器：</p><ul><li><a href="https://blog.musnow.top/posts/2731112594">【VS】如何下载VS2019并初始化C&#x2F;C++环境</a>；</li><li><a href="https://blog.musnow.top/posts/4009185516">【VS】如何解决VS编译器scanf报错问题</a>;</li></ul><p>感谢大家的支持！</p>]]></content>
    
    
    <summary type="html">都2024年了，还适合学C语言吗？</summary>
    
    
    
    <category term="编程学习" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="C语言" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/C%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="C语言" scheme="https://blog.musnow.top/tags/C%E8%AF%AD%E8%A8%80/"/>
    
    <category term="回顾C和Cpp" scheme="https://blog.musnow.top/tags/%E5%9B%9E%E9%A1%BEC%E5%92%8CCpp/"/>
    
  </entry>
  
  <entry>
    <title>【Git】如何在已经提交内容中删除某个目录或文件</title>
    <link href="https://blog.musnow.top/posts/430272532/"/>
    <id>https://blog.musnow.top/posts/430272532/</id>
    <published>2024-07-26T14:55:07.000Z</published>
    <updated>2024-07-27T10:32:27.000Z</updated>
    
    <content type="html"><![CDATA[<p>有的时候，会出现git错误添加了某个目录或者某个文件，现在需要将这个文件从git中删除。</p><p>可以使用如下命令执行。其中<code>-r</code>代表递归删除文件，<code>--cached</code>代表只从git的索引中删除文件，而不会在磁盘上删除文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">rm</span> -r --cached path/to/directory</span><br></pre></td></tr></table></figure><p>调用这个命令后，目标目录和文件就不再被git追踪。如果你不想让这个文件再次被错误的包含，请将文件或者路径写入<code>.gitignore</code>中，并<code>git add .gitignore</code>使修改生效。</p><p>我一般容易出现这个问题的是错误的添加了<code>.vscode</code>和cmake build的路径，需要将其删除。</p><p>注意，修改后想提交到远端可能需要使用<code>-f</code>强制提交，请在提交之前确认您的操作无误！最好是先备份一下原有文件的git仓库。</p><hr><p>另外，如果一个仓库被强制提交了，正好覆盖了另外一个本地仓库中已有的commit，此时应该将这个仓库回滚到该强制提交commit之前的某一个commit，再执行<code>git pull</code>，这样可以避免出现merge操作。</p><p>这样说的可能不太清楚。假设我修改了commit A，并将其强制提交到了远端，将这个新的修改设为A1吧。此时我在另外一台<strong>设备甲</strong>上本地有原本的commit A。如果这时候你直接执行git pull，会出现一个merge操作，因为本地原有的commit A和现在远端新的commit A1是不兼容的。</p><p>需要做的操作是，将这个另外一台设备甲上的本次仓库，调用git log查看历史记录，使用<code>git reset --hard &lt;commit id&gt;</code>的方式回滚到另外一个早于commit A的提交，再执行git pull，此时就不会出现merge操作。</p>]]></content>
    
    
    <summary type="html">git如何删除已经提交的文件或目录。</summary>
    
    
    
    <category term="差生文具多" scheme="https://blog.musnow.top/categories/%E5%B7%AE%E7%94%9F%E6%96%87%E5%85%B7%E5%A4%9A/"/>
    
    <category term="编程工具" scheme="https://blog.musnow.top/categories/%E5%B7%AE%E7%94%9F%E6%96%87%E5%85%B7%E5%A4%9A/%E7%BC%96%E7%A8%8B%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="git" scheme="https://blog.musnow.top/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>【Docker】Docker学习04 | dockerfile的编写</title>
    <link href="https://blog.musnow.top/posts/188682082/"/>
    <id>https://blog.musnow.top/posts/188682082/</id>
    <published>2024-07-21T06:04:27.000Z</published>
    <updated>2024-07-25T12:50:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>适用于hexo-butterfly主题的front-matter模板。</p><p>dockerfile是构建docker镜像的基础，它规定了一系列语法，让我们可以在某个基础镜像之上，添加自己需要的操作，打包出一个自己的镜像。</p><h1 id="1-dockerfile基本语法"><a href="#1-dockerfile基本语法" class="headerlink" title="1. dockerfile基本语法"></a>1. dockerfile基本语法</h1><p>下面是dockerfile的基本语法和其对应的功能，dockerfile中的每一个指令都对应的<strong>镜像的一层</strong>。</p><p>除了这些构建语法外，在dockerfile中使用<code>#</code>开头的行代表注释行。注意，<strong>注释只能单成一行</strong>，不能在已有语句末尾追加。</p><table><thead><tr><th>语法</th><th>说明</th></tr></thead><tbody><tr><td>FROM</td><td>指定基础镜像</td></tr><tr><td>RUN</td><td>在基础镜像上需要执行的命令（构建命令）</td></tr><tr><td>WORKDIR</td><td>其实就是cd的意思，设置镜像的工作目录</td></tr><tr><td>VOLUME</td><td>设置需要挂载文件实现持久化的目录</td></tr><tr><td>EXPOSE</td><td>指定容器对外暴露的端口</td></tr><tr><td>ENV</td><td>设置镜像中的环境变量</td></tr><tr><td>ARG</td><td>设置dockerfile<strong>构建过程中</strong>的环境变量</td></tr><tr><td>ENTRYPOINT</td><td>设置默认的可执行文件</td></tr><tr><td>HEALTHCHECK</td><td>在容器启动的时候进行健康检查</td></tr><tr><td>MAINTAINER</td><td>设置维护者信息（弃用，推荐用LABEL替代）</td></tr><tr><td>LABEL</td><td>给镜像添加元数据（如镜像作者）</td></tr><tr><td>ADD</td><td>添加本地&#x2F;远程的目录或文件</td></tr><tr><td>COPY</td><td>拷贝文件&#x2F;目录</td></tr><tr><td>ONBUILD</td><td>只有FROM基于当前镜像的时候才会执行</td></tr><tr><td>SHELL</td><td>设置镜像默认使用的shell</td></tr><tr><td>STOPSIGNAL</td><td>设置特定的系统信号来让容器退出</td></tr><tr><td>USER</td><td>设置<strong>执行构建命令</strong>的用户和用户组ID</td></tr></tbody></table><p>本文对这些命令的解释只停留于基础，更详细的介绍建议查看<a href="https://docs.docker.com/reference/dockerfile/">dockerfile</a>文档。</p><h1 id="2-dockerfile语法详解"><a href="#2-dockerfile语法详解" class="headerlink" title="2. dockerfile语法详解"></a>2. dockerfile语法详解</h1><h2 id="2-1-FROM"><a href="#2-1-FROM" class="headerlink" title="2.1. FROM"></a>2.1. FROM</h2><p>这个是指定当前需要构建的镜像的<strong>基础镜像</strong>，dockerfile文件中必须要有FROM字段。</p><p>比如我们有一个项目，需要在ubuntu环境上运行，我们就可以指定当前镜像是基于ubuntu镜像的。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> ubuntu:<span class="number">22.04</span></span><br></pre></td></tr></table></figure><p>这时候就出现了一个问题了，这些<strong>基础镜像</strong>是怎么制作出来的？以<a href="https://github.com/CentOS/sig-cloud-instance-images/blob/CentOS-7.6.1810/docker/Dockerfile">CentOS 7.6</a>为例，官方的dockerfile是这么写的。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> scratch</span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"> centos-7-docker.tar.xz /</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">LABEL</span><span class="language-bash"> org.label-schema.schema-version=<span class="string">&quot;1.0&quot;</span> \</span></span><br><span class="line"><span class="language-bash">    org.label-schema.name=<span class="string">&quot;CentOS Base Image&quot;</span> \</span></span><br><span class="line"><span class="language-bash">    org.label-schema.vendor=<span class="string">&quot;CentOS&quot;</span> \</span></span><br><span class="line"><span class="language-bash">    org.label-schema.license=<span class="string">&quot;GPLv2&quot;</span> \</span></span><br><span class="line"><span class="language-bash">    org.label-schema.build-date=<span class="string">&quot;20181204&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;/bin/bash&quot;</span>]</span></span><br></pre></td></tr></table></figure><p>第一行的<code>FROM scratch</code>代表从“空”开始创建镜像，而第二行的ADD代表添加了一个文件。从Github仓库的<a href="https://github.com/CentOS/sig-cloud-instance-images/blob/CentOS-7.6.1810/docker/Dockerfile">文件路径</a>中可以看到，官方使用了一个centos的<code>tar.xz</code>系统包，这个压缩包里面是系统运行的必要二进制文件。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/07/b6ef336c8962fcb547f8b3ae8b94953a.png" alt="image.png"></p><p>把这个<code>centos-7-docker.tar.xz</code>压缩包下载到本地，解压看看，内部其实就是一个centos系统的根路径下的必要内容。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">❯ tree -L 1 /tmp/centos7</span><br><span class="line">/tmp/centos7</span><br><span class="line">├── anaconda-post.log</span><br><span class="line">├── bin -&gt; usr/bin</span><br><span class="line">├── dev</span><br><span class="line">├── etc</span><br><span class="line">├── home</span><br><span class="line">├── lib -&gt; usr/lib</span><br><span class="line">├── lib64 -&gt; usr/lib64</span><br><span class="line">├── media</span><br><span class="line">├── mnt</span><br><span class="line">├── opt</span><br><span class="line">├── proc</span><br><span class="line">├── root</span><br><span class="line">├── run</span><br><span class="line">├── sbin -&gt; usr/sbin</span><br><span class="line">├── srv</span><br><span class="line">├── sys</span><br><span class="line">├── tmp</span><br><span class="line">├── usr</span><br><span class="line">└── var</span><br><span class="line"></span><br><span class="line">18 directories, 1 file</span><br></pre></td></tr></table></figure><p>至此可以明确一个概念，我们需要制作一个镜像，有两种方式：</p><ul><li>一个是基于开源的镜像的基础上二次构建；</li><li>第二种方式就是像centos官方一样，制作系统的二进制文件，从0开始构建镜像。</li></ul><p>如果不是有神马特殊需要，直接使用<strong>第一种方式</strong>，基于已有开源镜像的基础来构建镜像就够了。</p><h2 id="2-2-RUN"><a href="#2-2-RUN" class="headerlink" title="2.2. RUN"></a>2.2. RUN</h2><p>RUN字段指定了在基础镜像上需要执行的命令，通常用于安装环境。这些命令都等同于直接在基础镜像的shell中运行的命令。</p><p>RUN有两种语法格式，一种是直接写命令，另外一种是用exec的格式将命令和选项拼接起来。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="language-bash"> &lt;需要运行的命令&gt;</span></span><br><span class="line"><span class="comment"># 等价于直接运行命令</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> [<span class="string">&quot;apt&quot;</span>,<span class="string">&quot;install&quot;</span>,<span class="string">&quot;vim&quot;</span>] </span></span><br><span class="line"><span class="comment"># 等价于 RUN apt install vim</span></span><br></pre></td></tr></table></figure><p>比如我们创建一个ubuntu的容器，尝试在里面安装一个<code>net-tools</code>软件包，可以如下编写dockerfile。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> ubuntu:<span class="number">22.04</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt intstall -y net-tools</span></span><br></pre></td></tr></table></figure><p>如果你需要执行多个环境配置的命令，使用<code>&amp;&amp;</code>将其连接，而不要写多个RUN命令</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> ubuntu:<span class="number">22.04</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt -y update &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">apt intstall -y net-tools</span></span><br></pre></td></tr></table></figure><h2 id="2-3-MAINTAINER和LABEL"><a href="#2-3-MAINTAINER和LABEL" class="headerlink" title="2.3. MAINTAINER和LABEL"></a>2.3. MAINTAINER和LABEL</h2><p>MAINTAINER和LABEL都是用于给docker镜像打标签的。你可以理解为给他身上挂个名牌，这样其他人就可以从名牌上看到和这个镜像相关的一些信息。</p><p>使用<code>docker inspect ubuntu:22.04</code>命令，可以看到ubuntu镜像上挂着的一些名牌。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;Labels&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;org.opencontainers.image.ref.name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ubuntu&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;org.opencontainers.image.version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;22.04&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>而且我们基于<code>ubuntu:22.04</code>镜像构建的其他镜像，也会包含这个名牌。这可以让使用者在没有看到dockerfile的情况下，了解到你构建的镜像是基于ubuntu的。</p><p>下面的LABEL和MAINTAINER的语法格式，都是<code>key=value</code>的形式。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">LABEL</span><span class="language-bash"> &lt;key&gt;=&lt;value&gt; &lt;key&gt;=&lt;value&gt; &lt;key&gt;=&lt;value&gt; ...</span></span><br><span class="line"><span class="comment"># MAINTAINER 会设置镜像详情中的Author字段</span></span><br><span class="line"><span class="keyword">MAINTAINER</span> &lt;name&gt;</span><br></pre></td></tr></table></figure><p>来简单试试吧</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> ubuntu:<span class="number">22.04</span></span><br><span class="line"><span class="keyword">MAINTAINER</span> musnows</span><br><span class="line"><span class="keyword">LABEL</span><span class="language-bash"> build.in=<span class="string">&quot;vmware-ubuntu&quot;</span></span></span><br></pre></td></tr></table></figure><p>使用这个dockerfile构建的镜像，会有下面的LABEL，且Author字段是<code>MAINTAINER</code>设置的musnows（ubuntu基础镜像中Author字段为空）</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;Author&quot;</span><span class="punctuation">:</span> <span class="string">&quot;musnows&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;Config&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;Labels&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;build.in&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vmware-ubuntu&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;org.opencontainers.image.ref.name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ubuntu&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;org.opencontainers.image.version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;22.04&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>另外，dockerfile的官方文档中提到，下面这个LABEL和MAINTAINER是对应的</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">LABEL</span><span class="language-bash"> org.opencontainers.image.authors=<span class="string">&quot;SvenDowideit@home.org.au&quot;</span></span></span><br></pre></td></tr></table></figure><p>但经过我的测试，这个LABEL不会修改Author字段（只有MAINTAINER会修改Author字段）。你可以根据自己的需要选择使用LABEL还是MAINTAINER。</p><h2 id="2-4-SHELL"><a href="#2-4-SHELL" class="headerlink" title="2.4. SHELL"></a>2.4. SHELL</h2><p>这个命令用于设置镜像默认使用的SHELL。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHELL</span><span class="language-bash"> [<span class="string">&quot;executable&quot;</span>, <span class="string">&quot;parameters&quot;</span>]</span></span><br></pre></td></tr></table></figure><p>在<a href="https://docs.docker.com/reference/dockerfile/#shell">官方文档</a>中，有列出Linux和Windows下默认使用的SHELL是什么。如果它们不符合你的要求，比如你需要使用<code>/bin/bash</code>作为你的shell，则可以自行更换。</p><blockquote><p>The SHELL instruction allows the default shell used for the shell form of commands to be overridden. The default shell on Linux is<code>[&quot;/bin/sh&quot;, &quot;-c&quot;]</code>, and on Windows is <code>[&quot;cmd&quot;, &quot;/S&quot;, &quot;/C&quot;]</code>. The SHELL instruction must be written in JSON form in a Dockerfile.</p></blockquote><h2 id="2-5-WORKDIR"><a href="#2-5-WORKDIR" class="headerlink" title="2.5. WORKDIR"></a>2.5. WORKDIR</h2><p>设置docker构建过程和最终程序运行使用的工作路径。默认的工作路径是<code>/</code>根路径。如果指定的WORKDIR路径不存在，则会被创建。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /path/to/workdir</span></span><br></pre></td></tr></table></figure><p>另外，工作路径采用的是追加的方式，比如下方设置了多个工作路径，那么最终的工作路径是<code>/a/b/c/</code>这个目录。你可以理解为它本质上就是一个CD命令。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /a</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> b</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> c</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">pwd</span></span></span><br></pre></td></tr></table></figure><p>工作路径可以使用环境变量，前提这个环境变量是在dockerfile中被显式设置的</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ENV</span> DIRPATH=/path</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> <span class="variable">$DIRPATH</span>/<span class="variable">$DIRNAME</span></span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">pwd</span></span></span><br></pre></td></tr></table></figure><p>此时pwd命令的输出是<code>/path/$DIRNAME</code>。</p><h2 id="2-6-COPY"><a href="#2-6-COPY" class="headerlink" title="2.6. COPY"></a>2.6. COPY</h2><p>COPY命令有两种方式，如果路径中包含空格，则必须使用第二种形式（将路径使用英文双引号括起来）</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">COPY</span><span class="language-bash"> [OPTIONS] &lt;src&gt; ... &lt;dest&gt;</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> [OPTIONS] [<span class="string">&quot;&lt;src&gt;&quot;</span>, ... <span class="string">&quot;&lt;dest&gt;&quot;</span>]</span></span><br></pre></td></tr></table></figure><p>COPY命令支持使用<code>*</code>来匹配任意字符，<code>?</code>匹配单个字符。如果需要拷贝名称中包含<code>[]</code>的特殊文件，则需要使用Golang转义规则对文件名进行转义。详见<a href="https://docs.docker.com/reference/dockerfile/#copy">官方文档</a>。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将本地文件 app.py 复制到镜像的 /app 目录</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> app.py /app/</span></span><br><span class="line"><span class="comment"># 将整个本地目录 my_app 复制到镜像的 /app 目录</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> my_app/ /app/</span></span><br><span class="line"><span class="comment"># 复制所有以 .py 结尾的文件到镜像的 /app 目录</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> *.py /app/</span></span><br><span class="line"><span class="comment"># 将 src 目录中所有文件复制到 /app 目录</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> src/* /app/</span></span><br></pre></td></tr></table></figure><h3 id="2-6-1-选项说明"><a href="#2-6-1-选项说明" class="headerlink" title="2.6.1. 选项说明"></a>2.6.1. 选项说明</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">--from</span><br><span class="line">--chown</span><br><span class="line">--chmod</span><br><span class="line">--link</span><br><span class="line">--parents</span><br><span class="line">--exclude</span><br></pre></td></tr></table></figure><h4 id="2-6-1-1-–from"><a href="#2-6-1-1-–from" class="headerlink" title="2.6.1.1. –from"></a>2.6.1.1. –from</h4><p><code>--from</code>选项允许COPY从多段构建中拷贝文件，或从其他镜像中拷贝文件。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">COPY</span><span class="language-bash"> [--from=&lt;image|stage|context&gt;] &lt;src&gt; ... &lt;dest&gt;</span></span><br></pre></td></tr></table></figure><p>比如我们可以从nginx镜像中直接拷贝配置文件，对应选项中的image</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">COPY</span><span class="language-bash"> --from=nginx:latest /etc/nginx/nginx.conf /nginx.conf</span></span><br></pre></td></tr></table></figure><p>我们还可以从多段构建中拷贝文件，对应选项中的stage。</p><p>下面是官网中一个多段构建的dockefile，在基础镜像alpine中使用clang编译了<code>hello.c</code>的程序，随后将这个程序的可执行文件移动到一个空的镜像中。这就相当于空镜像里面直接添加了一个可执行文件。不过这只是个例子，经过我的测试，这个镜像并不能正常运行😑。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># syntax=docker/dockerfile:1</span></span><br><span class="line"><span class="keyword">FROM</span> alpine AS build</span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> . .</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apk add clang</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> clang -o /hello hello.c</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> scratch</span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> --from=build /hello /</span></span><br></pre></td></tr></table></figure><p>在docker build命令中，可以指定多个构建的上下文，并在dockerfile中选择其中某个上下文中的文件进行拷贝，对应选项中的context。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 运行 Docker 构建时，指定两个构建上下文</span></span><br><span class="line">docker build -t myapp \</span><br><span class="line">  --build-context source1=. \</span><br><span class="line">  --build-context source2=../other-folder \</span><br><span class="line">  -f Dockerfile .</span><br></pre></td></tr></table></figure><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在 Dockerfile 中，从指定的构建上下文 &quot;source2&quot; 中复制文件</span></span><br><span class="line"><span class="keyword">FROM</span> alpine:latest</span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> --from=source2 /extra-files/ /app/</span></span><br></pre></td></tr></table></figure><h4 id="2-6-1-2-–chown-–chmod"><a href="#2-6-1-2-–chown-–chmod" class="headerlink" title="2.6.1.2. –chown,–chmod"></a>2.6.1.2. –chown,–chmod</h4><p>这两个选项只有在Linux中构建镜像的时候才有效</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">COPY</span><span class="language-bash"> [--<span class="built_in">chown</span>=&lt;user&gt;:&lt;group&gt;] [--<span class="built_in">chmod</span>=&lt;perms&gt; ...] &lt;src&gt; ... &lt;dest&gt;</span></span><br></pre></td></tr></table></figure><p>在COPY的时候，默认是使用0号PGID&#x2F;PUID进行操作的。如果你想避免默认的root权限，可以通过这两个选项进行修改。参数和linux本地的chown&#x2F;chmod命令一致。</p><h4 id="2-6-1-3-–link"><a href="#2-6-1-3-–link" class="headerlink" title="2.6.1.3. –link"></a>2.6.1.3. –link</h4><p>详见<a href="https://docs.docker.com/reference/dockerfile/#copy---link">官方文档</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">COPY [--link[=&lt;boolean&gt;]] &lt;src&gt; ... &lt;dest&gt;</span><br></pre></td></tr></table></figure><p>下面的图片展示了添加<code>--link</code>选项和不添加这个选项时的区别，使用的dockerfile很简单</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> alpine</span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> foo /</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> bar /</span></span><br></pre></td></tr></table></figure><p>使用link的时候，会从一个空镜像里面构建文件，再最终合并到原有镜像上。最终产生的是独立的blob镜像层，而不是<code>diff(快照1,快照2)</code>这种两个镜像层之间的diff文件。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/07/919bea31fa7c37892d94c569cf17382b.png" alt="image.png"></p><h4 id="2-6-1-4-–parents"><a href="#2-6-1-4-–parents" class="headerlink" title="2.6.1.4. –parents"></a>2.6.1.4. –parents</h4><p>在拷贝文件的时候保留父目录。目前尚未在稳定版中推出此功能，需要使用<code>docker/dockerfile:1.7-labs</code>版本。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">COPY</span><span class="language-bash"> [--parents[=&lt;boolean&gt;]] &lt;src&gt; ... &lt;dest&gt;</span></span><br></pre></td></tr></table></figure><p>举个例子，当我们使用如下语句，拷贝a.txt到镜像中时，最终会存在<code>/app/a.txt</code>文件</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">COPY</span><span class="language-bash"> ./b/a.txt /app/</span></span><br></pre></td></tr></table></figure><p>但如果加上了保留父目录的选项，则会保留这个txt文件的父目录b，最终会存在<code>/app/b/a.txt</code>文件</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">COPY</span><span class="language-bash"> --parents ./b/a.txt /app/</span></span><br></pre></td></tr></table></figure><p>在同时拷贝多个文件的时候，这样做就有效果了。如下所示，第一行的copy没有设置保留父目录，此时两个文件中的<code>a.txt</code>最终只在镜像内保留了一个（应该保留的是y的那一个），出现了文件被覆盖的问题。使用了<code>--parents</code>选项就不会有这个问题了。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># syntax=docker/dockerfile:1.7-labs</span></span><br><span class="line"><span class="keyword">FROM</span> scratch</span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> ./x/a.txt ./y/a.txt /no_parents/</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> --parents ./x/a.txt ./y/a.txt /parents/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># /no_parents/a.txt</span></span><br><span class="line"><span class="comment"># /parents/x/a.txt</span></span><br><span class="line"><span class="comment"># /parents/y/a.txt</span></span><br></pre></td></tr></table></figure><h4 id="2-6-1-5-–excule"><a href="#2-6-1-5-–excule" class="headerlink" title="2.6.1.5. –excule"></a>2.6.1.5. –excule</h4><p>允许在拷贝的时候忽略某些路径中的内容。目前尚未在稳定版中推出此功能，需要使用<code>docker/dockerfile:1.7-labs</code>版本。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">COPY</span><span class="language-bash"> [--exclude=&lt;path&gt; ...] &lt;src&gt; ... &lt;dest&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-7-ADD"><a href="#2-7-ADD" class="headerlink" title="2.7. ADD"></a>2.7. ADD</h2><p>ADD命令是更加高级的COPY命令，它有两种形式。如果路径中包含空格，则必须使用第二种形式（将路径使用英文双引号括起来）</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ADD</span><span class="language-bash"> [OPTIONS] &lt;src&gt; ... &lt;dest&gt;</span></span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"> [OPTIONS] [<span class="string">&quot;&lt;src&gt;&quot;</span>, ... <span class="string">&quot;&lt;dest&gt;&quot;</span>]</span></span><br></pre></td></tr></table></figure><p>当源文件是tar压缩文件，压缩方式为gzip、bzip或xz的情况下，ADD命令会自动将压缩包中的内容解压并复制到目标路径中。但是这个解压是不可以关闭的，即如果你不需要解压压缩包，则只能使用COPY命令。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将 archive.tar.gz 解压缩到镜像的 /app 目录</span></span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"> archive.tar.gz /app/</span></span><br><span class="line"><span class="comment"># 从 URL 下载文件并放在镜像的 /app 目录</span></span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"> https://example.com/file.txt /app/</span></span><br></pre></td></tr></table></figure><h3 id="2-7-1-选项说明"><a href="#2-7-1-选项说明" class="headerlink" title="2.7.1. 选项说明"></a>2.7.1. 选项说明</h3><p>下面是可选的OPTIONS</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">--keep-git-dir</span><br><span class="line">--checksum</span><br><span class="line">--chown</span><br><span class="line">--chmod</span><br><span class="line">--link</span><br><span class="line">--exclude</span><br></pre></td></tr></table></figure><h4 id="2-7-1-1-–keep-git-dir"><a href="#2-7-1-1-–keep-git-dir" class="headerlink" title="2.7.1.1. –keep-git-dir"></a>2.7.1.1. –keep-git-dir</h4><p> 默认情况下，如果src是一个git仓库连接，则ADD会忽略<code>.git</code>目录。将下面这个选项设置为true，则会保留<code>.git</code>目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">--keep-git-dir=&lt;boolean&gt; </span><br><span class="line"><span class="comment"># 示例</span></span><br><span class="line">ADD --keep-git-dir=<span class="literal">true</span> https://github.com/moby/buildkit.git<span class="comment">#v0.10.1 /buildkit</span></span><br></pre></td></tr></table></figure><h4 id="2-7-1-2-–checksum"><a href="#2-7-1-2-–checksum" class="headerlink" title="2.7.1.2. –checksum"></a>2.7.1.2. –checksum</h4><p>如果src是一个HTTP的连接（只支持HTTP&#x2F;HTTPS下载的文件），则可以使用checksum设置这个文件的校验和，ADD命令会在下载了文件之后自动进行校验，判断是否下载成功。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ADD</span><span class="language-bash"> [--checksum=&lt;<span class="built_in">hash</span>&gt;] &lt;src&gt; ... &lt;<span class="built_in">dir</span>&gt;</span></span><br><span class="line"><span class="comment"># 示例</span></span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"> --checksum=sha256:24454f830cdb571e2c4ad15481119c43b3cafd48dd869a9b2945d1036d1dc68d https://mirrors.edge.kernel.org/pub/linux/kernel/Historic/linux-0.01.tar.gz /</span></span><br></pre></td></tr></table></figure><h4 id="2-7-1-3-剩余选项"><a href="#2-7-1-3-剩余选项" class="headerlink" title="2.7.1.3. 剩余选项"></a>2.7.1.3. 剩余选项</h4><p>剩下的几个选项，和COPY命令中的选项作用一致，详情可查看上文中对COPY命令的说明。</p><h2 id="2-8-CMD"><a href="#2-8-CMD" class="headerlink" title="2.8. CMD"></a>2.8. CMD</h2><p>CMD命令指定了容器以神马命令启动，同时它也可以是ENTRYPOINT的扩展</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 直接设置这个命令</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> executable param1 parma2</span></span><br><span class="line"><span class="comment"># 等价于上面这样直接设置</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;executable&quot;</span>,<span class="string">&quot;param1&quot;</span>,<span class="string">&quot;param2&quot;</span>]</span></span><br><span class="line"><span class="comment"># 如果设置了ENTREPOINT，可以在后面使用CMD设置额外的命令选项（可以被docker run改变）</span></span><br><span class="line"><span class="comment"># 注意，ENTREPOINT必须采用exec格式才能使用CMD继续追加命令选项！</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;param1&quot;</span>,<span class="string">&quot;param2&quot;</span>]</span></span><br></pre></td></tr></table></figure><p>如果一个容器没有指定ENTREPOINT或者CMD，则必须在docker run的时候指定才能正常运行。如果一个容器<strong>只指定了CMD</strong>，则可以被docker run指定的命令覆盖。</p><h2 id="2-9-ENTRYPOINT"><a href="#2-9-ENTRYPOINT" class="headerlink" title="2.9. ENTRYPOINT"></a>2.9. ENTRYPOINT</h2><p>ENTRYPOINT指定了容器以神马命令启动，同样有exec和shell两种格式。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># exec格式</span></span><br><span class="line"><span class="comment"># 注意，ENTREPOINT必须采用exec格式才能使用CMD继续追加命令选项！</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;executable&quot;</span>, <span class="string">&quot;param1&quot;</span>, <span class="string">&quot;param2&quot;</span>]</span></span><br><span class="line"><span class="comment"># shell格式</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> <span class="built_in">command</span> param1 param2</span></span><br></pre></td></tr></table></figure><p>设置了ENTRYPOINT后，在docker run里面提供的命令就不再是启动命令，而是发送给ENTRYPOINT命令的参数了。</p><p>前文提到了可以在ENTRYPOINT之后进一步设置CMD来启动进程，如下所示，下面这个dockerfile，最终启动进程使用的命令是<code>top -b -c</code>。其中<code>-c</code>选项会被docker run提供的命令覆盖（此时docker run提供的命令是发送给ENTRYPOINT命令的参数，会覆盖CMD）</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> ubuntu</span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;top&quot;</span>, <span class="string">&quot;-b&quot;</span>]</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;-c&quot;</span>]</span></span><br></pre></td></tr></table></figure><p>我们可以写个自己的程序来验证一下这里的命令行参数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc,<span class="type">char</span>*argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Run as: %s &quot;</span>,argv[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i&lt;argc;i++)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s &quot;</span>,argv[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个程序会把我们提供的命令行参数打印出来</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ gcc test.c -o test</span><br><span class="line">$ ./test -c -o</span><br><span class="line">Run as: ./test -c -o </span><br></pre></td></tr></table></figure><p>使用如下dockerfile来进行操作</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># syntax=docker/dockerfile:1</span></span><br><span class="line"><span class="keyword">FROM</span> alpine AS build</span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> . .</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apk add clang</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> clang -o /test test.c</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;/test&quot;</span>,<span class="string">&quot;-entry&quot;</span>]</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;-cmd&quot;</span>]</span></span><br></pre></td></tr></table></figure><p>使用如下命令，可见CMD的参数会追加在原有命令行参数之后，而且会被docker run使用的命令覆盖。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ docker build . -t myub</span><br><span class="line">$ docker run myub</span><br><span class="line">Run as: /test -entry -cmd </span><br><span class="line">$ docker run myub -run -h</span><br><span class="line">Run as: /test -entry -run -h </span><br></pre></td></tr></table></figure><p>根据dockerfile的官方文档，你可以用ENTRYPOINT指定稳定的命令选项，并使用CMD指定一些可用的命令选项</p><blockquote><p>You can use the exec form of ENTRYPOINT to set fairly stable default commands and arguments and then use either form of CMD to set additional defaults that are more likely to be changed.</p></blockquote><h2 id="2-10-ARG和ENV"><a href="#2-10-ARG和ENV" class="headerlink" title="2.10. ARG和ENV"></a>2.10. ARG和ENV</h2><h3 id="2-10-1-介绍"><a href="#2-10-1-介绍" class="headerlink" title="2.10.1. 介绍"></a>2.10.1. 介绍</h3><p>在介绍的表格里面说明了这两个语法的区别</p><ul><li>ARG：设置镜像构建过程中使用的环境变量，只有构建过程中才有效，构建完成的镜像中不包括这个环境变量，可以在<code>docker build</code>中通过<code>--build-arg &lt;varname&gt;=&lt;value&gt;</code>覆盖；</li><li>ENV：构建过程和镜像中都会存在的环境变量，可以在<code>docker run</code>中通过<code>-e &lt;key&gt;=&lt;value&gt;</code>来覆盖；</li></ul><p>同时这两个命令的语法也有细微区别，即ARG可以省略环境变量的默认值（相当于要求build的时候传入）</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ARG</span> &lt;name&gt;[=&lt;default value&gt;]</span><br><span class="line"><span class="keyword">ENV</span> &lt;key&gt;=&lt;value&gt; ...</span><br></pre></td></tr></table></figure><h3 id="2-10-2-ENV测试"><a href="#2-10-2-ENV测试" class="headerlink" title="2.10.2. ENV测试"></a>2.10.2. ENV测试</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> ubuntu:<span class="number">22.04</span></span><br><span class="line"><span class="comment"># env设置的环境变量，在构建过程和实际的容器中都会存在</span></span><br><span class="line"><span class="keyword">ENV</span> MY_VAR=from_dockerfile</span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> <span class="built_in">echo</span> <span class="string">&quot;MY_VAR is <span class="variable">$&#123;MY_VAR&#125;</span>&quot;</span></span></span><br></pre></td></tr></table></figure><p>使用这个dockerfile构建一个镜像，并创建容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker build . -t myub:<span class="built_in">test</span> -f dockefile</span><br><span class="line">docker run --<span class="built_in">rm</span> myub:<span class="built_in">test</span>  <span class="comment"># --rm会在容器运行完毕后自动删除</span></span><br></pre></td></tr></table></figure><p>容器会在终端中输出我们刚刚设置的环境变量。注意这里我们是使用CMD命令来执行的这个echo语句，CMD是在容器创建之后，执行的命令，也就是ENV的设置已经保留到了容器中。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker run --rm myub:test</span><br><span class="line">MY_VAR is from_dockerfile</span><br></pre></td></tr></table></figure><p>使用<code>-it</code>交互式地创建这个容器，直接启动容器的bash终端。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --rm myub:test /bin/bash</span><br></pre></td></tr></table></figure><p>在容器内的终端中使用env命令也可以看到这个环境变量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@7cab70963b65:/# env</span><br><span class="line">MY_VAR=from_dockerfile</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/07/42915bc3579a24611a1c599a5a34111f.png" alt="image.png"></p><p>在docker run命令中用<code>-e</code>选项，可以覆盖这个环境变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --<span class="built_in">rm</span> -e MY_VAR=from_docker_run myub:<span class="built_in">test</span> </span><br></pre></td></tr></table></figure><p>执行效果如下，最终打印的环境变量是我们run命令中配置的了（容器内的环境变量也会被修改）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker run --rm -e MY_VAR=from_docker_run myub:test</span><br><span class="line">MY_VAR is from_docker_run</span><br></pre></td></tr></table></figure><p>修改dockerfile中的CMD为RUN，让echo命令在构建过程中执行</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> ubuntu:<span class="number">22.04</span></span><br><span class="line"><span class="comment"># env设置的环境变量，在构建过程和实际的容器中都会存在</span></span><br><span class="line"><span class="keyword">ENV</span> MY_VAR=from_dockerfile</span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">echo</span> <span class="string">&quot;MY_VAR is <span class="variable">$&#123;MY_VAR&#125;</span>&quot;</span></span></span><br></pre></td></tr></table></figure><p>可以看到，构建过程中，ENV环境变量也生效了，会打印一个<code>[RUN] echo &quot;RUN MY_VAR is from_dockerfile</code>。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/07/178160d2912a0bdb3f056fada0ba1716.png" alt="image.png"></p><p>当然，生效的前提是ENV在RUN之前，如果ENV在RUN之后，那自然是无效了，打印的内容会变成<code>echo &quot;MY_VAR is $&#123;MY_VAR&#125;&quot;</code>这个原始内容。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/07/c3270bc5e9800978ae8f56845f6d1797.png" alt="image.png"></p><p>另外，ENV指定的环境变量必须赋值初始值，否则语法会报错</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> ubuntu:<span class="number">22.04</span></span><br><span class="line"><span class="comment"># env设置的环境变量，在构建过程和实际的容器中都会存在</span></span><br><span class="line"><span class="comment"># 这里省略等于号是不支持的语法，如果不知道环境变量设置什么值，可以先等于空串</span></span><br><span class="line"><span class="keyword">ENV</span> MY_VAR </span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">echo</span> <span class="string">&quot;MY_VAR is <span class="variable">$&#123;MY_VAR&#125;</span>&quot;</span></span></span><br></pre></td></tr></table></figure><p>docker build的时候会提示语法错误，ENV必须要有两个参数（即必须要给定初始值）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">dockerfile:3</span><br><span class="line">--------------------</span><br><span class="line">   1 |     FROM ubuntu:22.04</span><br><span class="line">   2 |     # env设置的环境变量，在构建过程和实际的容器中都会存在</span><br><span class="line">   3 | &gt;&gt;&gt; ENV MY_VAR</span><br><span class="line">   4 |     RUN echo &quot;MY_VAR is $&#123;MY_VAR&#125;&quot;</span><br><span class="line">   5 |     </span><br><span class="line">--------------------</span><br><span class="line">ERROR: failed to solve: ENV must have two arguments</span><br></pre></td></tr></table></figure><h3 id="2-10-3-ARG测试"><a href="#2-10-3-ARG测试" class="headerlink" title="2.10.3. ARG测试"></a>2.10.3. ARG测试</h3><p>将ENV改成ARG，继续测试</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> ubuntu:<span class="number">22.04</span></span><br><span class="line"><span class="comment"># arg设置的环境变量，在构建过程中才会存在</span></span><br><span class="line"><span class="keyword">ARG</span> MY_VAR=from_dockerfile</span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">echo</span> <span class="string">&quot;MY_VAR is <span class="variable">$&#123;MY_VAR&#125;</span>&quot;</span></span></span><br></pre></td></tr></table></figure><p>可见环境变量在构建过程中生效了，打印<code>[RUN] echo &quot;RUN MY_VAR is from_dockerfile</code>。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/07/0a9ed50597d6f6e35f426909a9f03b48.png" alt="image.png"></p><p>在docker build命令中可以覆盖dockerfile中设置的环境变量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build . -t myub --build-arg MY_VAR=from_docker_build</span><br></pre></td></tr></table></figure><p>可以观察到在build命令中设置的环境变量会覆盖dockerfile中的配置，打印的是<code>[RUN] echo &quot;RUN MY_VAR is from_docker_build</code>。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/07/19045a7063d5d2b04c2a2c3f76b95184.png" alt="image.png"></p><p>另外，ARG设置的时候，环境变量之后是可以不带等于号的。此时相当于没有设置这个环境变量。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> ubuntu:<span class="number">22.04</span></span><br><span class="line"><span class="comment"># arg设置的环境变量，在构建过程中才会存在</span></span><br><span class="line"><span class="keyword">ARG</span> MY_VAR</span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">echo</span> <span class="string">&quot;MY_VAR is <span class="variable">$&#123;MY_VAR&#125;</span>&quot;</span></span></span><br></pre></td></tr></table></figure><p>直接使用<code>docker build . -t myob</code>进行构建，打印的内容是<code>RUN echo &quot;MY_VAR is $&#123;MY_VAR&#125;&quot;</code>这个原始值，因为此时MY_VAR环境变量等于没有设置。必须通过build命令传值才会设置MY_VAR环境变量。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/07/d456a37f4282fb622a60249fb4641a12.png" alt="image.png"></p><h2 id="2-11-VOLUME"><a href="#2-11-VOLUME" class="headerlink" title="2.11. VOLUME"></a>2.11. VOLUME</h2><p>在docker volume的解析中已经说明了数据卷的重要性。只要你的容器运行过程中，有需要持久化保存的重要数据，则都建议使用VOLUME在dockerfile中标出。这样即便用户没有主动绑定指定路径的数据卷，docker也会自动创建匿名数据卷来保存这里面的数据，不至于出现数据丢失问题。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># exec格式</span></span><br><span class="line"><span class="keyword">VOLUME</span><span class="language-bash"> [<span class="string">&quot;/data&quot;</span>]</span></span><br><span class="line"><span class="comment"># shell格式，等价于[&quot;/data1&quot;,&quot;/data2&quot;]</span></span><br><span class="line"><span class="keyword">VOLUME</span><span class="language-bash"> /data1 /data2</span></span><br></pre></td></tr></table></figure><p>下面是官网上给出的一些说明。比如在json格式中，必须用双引号括起来目录名，不能使用单引号；volume的挂载是基于宿主机的，所以不能在dockerfile中指定最终挂载的host-dir，必须用户手动使用docker run命令来指定，或者由docker自行创建volume数据卷。</p><blockquote><p>Keep the following things in mind about volumes in the Dockerfile.</p><p>Volumes on Windows-based containers: When using Windows-based containers, the destination of a volume inside the container must be one of:</p><ul><li>a non-existing or empty directory</li><li>a drive other than <code>C:</code></li></ul><p>Changing the volume from within the Dockerfile: If any build steps change the data within the volume after it has been declared, those changes will be discarded.</p><p>JSON formatting: The list is parsed as a JSON array. You must enclose words with double quotes <code>(&quot;)</code> rather than single quotes <code>(&#39;)</code>.</p><p>The host directory is declared at container run-time: The host directory (the mountpoint) is, by its nature, host-dependent. This is to preserve image portability, since a given host directory can’t be guaranteed to be available on all hosts. For this reason, you can’t mount a host directory from within the Dockerfile. The VOLUME instruction does not support specifying a host-dir parameter. You must specify the mountpoint when you create or run the container.</p></blockquote><h2 id="2-12-EXPOSE"><a href="#2-12-EXPOSE" class="headerlink" title="2.12. EXPOSE"></a>2.12. EXPOSE</h2><p>指定容器需要对外提供服务的端口。比如nginx的80和443端口。且可以在dockerfile中设置默认绑定的端口值。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">EXPOSE</span> &lt;port&gt; [&lt;port&gt;/&lt;protocol&gt;...]</span><br></pre></td></tr></table></figure><p>当一个EXPOSE的端口没有被用户设置，也没有默认值时，docker会自动绑定一个未被使用的端口给他。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 暴露3000端口给外部（默认是tcp）</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">3000</span></span><br><span class="line"><span class="comment"># 暴露6000端口给外部，并设置默认绑定宿主机的60000端口</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">6000</span> <span class="number">60000</span>/tcp</span><br><span class="line"><span class="comment"># 暴露10000的udp端口给外部，并设置默认绑定宿主机的12000端口</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">10000</span>/udp <span class="number">12000</span>/udp</span><br></pre></td></tr></table></figure><p>注意，这里的默认绑定端口设置，只有在bridge模式创建容器的时候才会生效。如果用户使用host模式，那么就会采用<strong>原有端口</strong>（比如暴露6000端口，使用host模式就会直接绑定宿主机的6000端口，和默认值无关）绑定在宿主机上。</p><p>在host模式中，容器可以绑定宿主机的任意未使用端口，即便这些端口没有在EXPOSE中被设置。所以，如果你不想容器中的网络进程影响宿主机上的有效端口数量，则建议使用bridge模式来增强隔离性。</p><p>不管EXPOSE是如何设置的，在docker run中都可以被覆盖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 80:80/tcp -p 80:80/udp ...</span><br></pre></td></tr></table></figure><p>另外，EXPOSE只是代表容器“想要”使用这些端口，最终端口的bind操作是由容器内的进程来处理的。当然，使用bridge选项时，docker引擎会帮容器先确认宿主机的端口可用并占用，再由容器内的进程bind容器内的端口，对外提供服务。</p><h2 id="2-13-ONBUILD"><a href="#2-13-ONBUILD" class="headerlink" title="2.13. ONBUILD"></a>2.13. ONBUILD</h2><p>ONBUILD指定的dockerfile语句会在尝试基于当前镜像构建镜像的时候被启用。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ONBUILD</span> &lt;INSTRUCTION&gt;</span><br></pre></td></tr></table></figure><p>来测试一下</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> ubuntu:<span class="number">22.04</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">echo</span> <span class="string">&quot;running build&quot;</span></span></span><br><span class="line"><span class="keyword">ONBUILD</span> <span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">echo</span> <span class="string">&quot;on build&quot;</span></span></span><br></pre></td></tr></table></figure><p>可以看到，构建的时候，只有不带<code>ONBUILD</code>选项的命令才被执行了，而带了ONBUILD的<code>echo &quot;on build&quot;</code>命令没有被执行。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/07/769e9b38abe47a9d1a772a4775bbda6e.png" alt="image.png"></p><p>我们基于这个构建出来的镜像，再写一个dockerfile</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> myub:latest </span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">echo</span> <span class="string">&quot;running build from myub&quot;</span></span></span><br></pre></td></tr></table></figure><p>可以看到，构建过程会先执行父镜像ONBUILD设置的命令，再执行自己dockerfile中的命令，先打印的是<code>echo &quot;on build&quot;</code>，然后才打印<code>echo &quot;running build from myub&quot;</code>。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/07/182ae6b6d386df0988ab3883ab8b9be6.png" alt="image.png"></p><h2 id="2-14-STOPSIGNAL"><a href="#2-14-STOPSIGNAL" class="headerlink" title="2.14. STOPSIGNAL"></a>2.14. STOPSIGNAL</h2><p>STOPSIGNAL设置docker内<strong>运行的进程</strong>在收到什么信号的时候会终止，即docker stop某个容器时，docker会给容器内进程发送的信号。</p><p>这里的signal可以是信号的名称（如<code>SIGKILL</code>）也可以是信号的编号。默认值是<code>SIGTERM</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">STOPSIGNAL signal</span><br></pre></td></tr></table></figure><p>关于信号的编号和名称，可以在linux下使用<code>kill -l</code>命令查看</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ kill -l</span><br><span class="line"> 1) SIGHUP       2) SIGINT       3) SIGQUIT      4) SIGILL       5) SIGTRAP</span><br><span class="line"> 6) SIGABRT      7) SIGBUS       8) SIGFPE       9) SIGKILL     10) SIGUSR1</span><br><span class="line">11) SIGSEGV     12) SIGUSR2     13) SIGPIPE     14) SIGALRM     15) SIGTERM</span><br><span class="line">16) SIGSTKFLT   17) SIGCHLD     18) SIGCONT     19) SIGSTOP     20) SIGTSTP</span><br><span class="line">21) SIGTTIN     22) SIGTTOU     23) SIGURG      24) SIGXCPU     25) SIGXFSZ</span><br><span class="line">26) SIGVTALRM   27) SIGPROF     28) SIGWINCH    29) SIGIO       30) SIGPWR</span><br><span class="line">31) SIGSYS      34) SIGRTMIN    35) SIGRTMIN+1  36) SIGRTMIN+2  37) SIGRTMIN+3</span><br><span class="line">38) SIGRTMIN+4  39) SIGRTMIN+5  40) SIGRTMIN+6  41) SIGRTMIN+7  42) SIGRTMIN+8</span><br><span class="line">43) SIGRTMIN+9  44) SIGRTMIN+10 45) SIGRTMIN+11 46) SIGRTMIN+12 47) SIGRTMIN+13</span><br><span class="line">48) SIGRTMIN+14 49) SIGRTMIN+15 50) SIGRTMAX-14 51) SIGRTMAX-13 52) SIGRTMAX-12</span><br><span class="line">53) SIGRTMAX-11 54) SIGRTMAX-10 55) SIGRTMAX-9  56) SIGRTMAX-8  57) SIGRTMAX-7</span><br><span class="line">58) SIGRTMAX-6  59) SIGRTMAX-5  60) SIGRTMAX-4  61) SIGRTMAX-3  62) SIGRTMAX-2</span><br><span class="line">63) SIGRTMAX-1  64) SIGRTMAX</span><br></pre></td></tr></table></figure><p>在docker run和docker create中可以使用<code>--stop-signal</code>选项覆盖dockerfile中的设置。</p><h2 id="2-15-HEALTHCHECK"><a href="#2-15-HEALTHCHECK" class="headerlink" title="2.15. HEALTHCHECK"></a>2.15. HEALTHCHECK</h2><p><a href="https://docs.docker.com/reference/dockerfile/#healthcheck">https://docs.docker.com/reference/dockerfile/#healthcheck</a></p><p>用于检查容器的健康状态，如果检查失败（可以设置重试次数），则会将容器标记为<strong>不健康</strong>。这可以方便集群化管理，特别是解决某些容器内服务器进程虽然仍在运行，但因为某些原因已经无法提供服务的情况。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 基础语法</span></span><br><span class="line"><span class="keyword">HEALTHCHECK</span><span class="language-bash"> [OPTIONS] CMD <span class="built_in">command</span></span></span><br><span class="line"><span class="comment"># 禁用健康检查，包括从父镜像继承下来的检查</span></span><br><span class="line"><span class="keyword">HEALTHCHECK</span><span class="language-bash"> NONE</span></span><br></pre></td></tr></table></figure><p>下面是一个示例，docker会每5分钟使用curl检查一下<code>http://localhost:8080/</code>是否可以被访问，如果超过3秒还没有反应，则认为它不能被访问。</p><p>当curl返回的状态码不是2xx&#x2F;3xx的时候，则exit 1表示不成功。告知HEALTHCHECK认为容器不健康。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">HEALTHCHECK</span><span class="language-bash"> --interval=5m --<span class="built_in">timeout</span>=3s \</span></span><br><span class="line"><span class="language-bash">  CMD curl -f http://localhost:8080/ || <span class="built_in">exit</span> 1</span></span><br></pre></td></tr></table></figure><p>一次检查可能不太好，我们可以设置重试次数（<strong>默认会重试3次</strong>），下面就使用retries指定了重试两次</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">HEALTHCHECK</span><span class="language-bash"> --interval=5m --<span class="built_in">timeout</span>=3s --retries=2 \</span></span><br><span class="line"><span class="language-bash">  CMD curl -f http://localhost:8080/ || <span class="built_in">exit</span> 1</span></span><br></pre></td></tr></table></figure><h2 id="2-16-USER"><a href="#2-16-USER" class="headerlink" title="2.16. USER"></a>2.16. USER</h2><p>指定用于执行构建命令和最终执行CMD&#x2F;ENTRYPOINT命令使用的用户&#x2F;用户组。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">USER</span> &lt;<span class="keyword">user</span>&gt;[:&lt;group&gt;]</span><br><span class="line"><span class="keyword">USER</span> UID[:GID]</span><br></pre></td></tr></table></figure><blockquote><p>Note that when specifying a group for the user, the user will have only the specified group membership. Any other configured group memberships will be ignored.</p></blockquote><h1 id="3-验证dockerfile命令对镜像层数的影响"><a href="#3-验证dockerfile命令对镜像层数的影响" class="headerlink" title="3. 验证dockerfile命令对镜像层数的影响"></a>3. 验证dockerfile命令对镜像层数的影响</h1><p>前文提到，dockerfile中的一条命令就是一层，如果冗余的命令过多，会让构建出来的dockerfile层级过多。下面通过一个例子来实际验证一下。</p><blockquote><p>参考 <a href="https://developer.aliyun.com/article/981453">Docker 进阶之镜像分层详解</a></p></blockquote><h2 id="3-1-查看基础镜像的层级"><a href="#3-1-查看基础镜像的层级" class="headerlink" title="3.1. 查看基础镜像的层级"></a>3.1. 查看基础镜像的层级</h2><p>测试基于<code>ubuntu:22.04</code>的镜像，首先使用<code>docker inspect</code>命令查看这个镜像的所有层</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect ubuntu:22.04</span><br></pre></td></tr></table></figure><p>得到的结果如下，其中<code>RootFS/Layers</code>是这个镜像的所有层级。可见ubuntu的镜像只有一层。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;Id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;sha256:52882761a72a60649edff9a2478835325d084fb640ea32a975e29e12a012025f&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;RepoTags&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="string">&quot;ubuntu:22.04&quot;</span></span><br><span class="line">        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;RepoDigests&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="string">&quot;ubuntu@sha256:a6d2b38300ce017add71440577d5b0a90460d0e57fd7aec21dd0d1b0761bbfb2&quot;</span></span><br><span class="line">        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Parent&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Comment&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Created&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2024-04-27T13:18:37.512234142Z&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;DockerVersion&quot;</span><span class="punctuation">:</span> <span class="string">&quot;24.0.5&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Author&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Config&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;Hostname&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;Domainname&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;User&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;AttachStdin&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;AttachStdout&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;AttachStderr&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;Tty&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;OpenStdin&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;StdinOnce&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;Env&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&quot;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;Cmd&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;/bin/bash&quot;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;Image&quot;</span><span class="punctuation">:</span> <span class="string">&quot;sha256:2252dc08ad59a3723b856050e7848a7fe152b469dd24cf30b0a910b7c615766c&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;Volumes&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;WorkingDir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;Entrypoint&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;OnBuild&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;Labels&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;org.opencontainers.image.ref.name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ubuntu&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;org.opencontainers.image.version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;22.04&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Architecture&quot;</span><span class="punctuation">:</span> <span class="string">&quot;amd64&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Os&quot;</span><span class="punctuation">:</span> <span class="string">&quot;linux&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Size&quot;</span><span class="punctuation">:</span> <span class="number">77863352</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;GraphDriver&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;Data&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;MergedDir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/var/lib/docker/overlay2/fbc6cfc7d29a6660ebf2a172548649ec0ce6a2578f369a2076b13f6f8a1b375c/merged&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;UpperDir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/var/lib/docker/overlay2/fbc6cfc7d29a6660ebf2a172548649ec0ce6a2578f369a2076b13f6f8a1b375c/diff&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;WorkDir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/var/lib/docker/overlay2/fbc6cfc7d29a6660ebf2a172548649ec0ce6a2578f369a2076b13f6f8a1b375c/work&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;Name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;overlay2&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;RootFS&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;Type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;layers&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;Layers&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;sha256:629ca62fb7c791374ce57626d6b8b62c76378be091a0daf1a60d32700b49add7&quot;</span></span><br><span class="line">            <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Metadata&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;LastTagTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0001-01-01T00:00:00Z&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><p>通过docker history命令可以查看这个镜像的构建过程，虽然这里显示了多行，但实际上有效的行只有ADD了ubuntu的系统二进制文件的那一行，其他行都是对这个镜像的基础设置和元数据设置，并没有给镜像实际添加文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ docker history  ubuntu:22.04</span><br><span class="line">IMAGE          CREATED      CREATED BY                                      SIZE      COMMENT</span><br><span class="line">52882761a72a   9 days ago   /bin/sh -c #(nop)  CMD [&quot;/bin/bash&quot;]            0B        </span><br><span class="line">&lt;missing&gt;      9 days ago   /bin/sh -c #(nop) ADD file:a5d32dc2ab15ff0d7…   77.9MB    </span><br><span class="line">&lt;missing&gt;      9 days ago   /bin/sh -c #(nop)  LABEL org.opencontainers.…   0B        </span><br><span class="line">&lt;missing&gt;      9 days ago   /bin/sh -c #(nop)  LABEL org.opencontainers.…   0B        </span><br><span class="line">&lt;missing&gt;      9 days ago   /bin/sh -c #(nop)  ARG LAUNCHPAD_BUILD_ARCH     0B        </span><br><span class="line">&lt;missing&gt;      9 days ago   /bin/sh -c #(nop)  ARG RELEASE                  0B  </span><br></pre></td></tr></table></figure><h2 id="3-2-构建两个镜像"><a href="#3-2-构建两个镜像" class="headerlink" title="3.2. 构建两个镜像"></a>3.2. 构建两个镜像</h2><p>下面用两个dockerfile来基于ubuntu构建两个新的镜像。两个dockerfile执行的内容都是一致的，只不过第一个dockerfile中将命令都合并了，第二个dockerfile将命令拆分了。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 构建myub:1</span></span><br><span class="line"><span class="keyword">FROM</span> ubuntu:<span class="number">22.04</span></span><br><span class="line"><span class="comment"># 在build-essential中会下载tzdata，会交互式的让用户选择时区</span></span><br><span class="line"><span class="comment"># 所以需要设置apt为非交互模式</span></span><br><span class="line"><span class="keyword">ARG</span> DEBIAN_FRONTEND=noninteractive</span><br><span class="line"><span class="keyword">ENV</span> TZ=Asia/Shanghai</span><br><span class="line"><span class="comment"># 更新和安装软件</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get -y update &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">apt-get -y upgrade &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">apt-get install -y \</span></span><br><span class="line"><span class="language-bash">cmake git vim curl wget \</span></span><br><span class="line"><span class="language-bash">net-tools \</span></span><br><span class="line"><span class="language-bash">openssh-server \</span></span><br><span class="line"><span class="language-bash">build-essential \</span></span><br><span class="line"><span class="language-bash">python3</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/07/63b064c75ef93cd63201a46033c02e5b.png" alt="image.png"></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 构建myub:2</span></span><br><span class="line"><span class="keyword">FROM</span> ubuntu:<span class="number">22.04</span></span><br><span class="line"><span class="comment"># 在build-essential中会下载tzdata，会交互式的让用户选择时区</span></span><br><span class="line"><span class="comment"># 所以需要设置apt为非交互模式</span></span><br><span class="line"><span class="keyword">ARG</span> DEBIAN_FRONTEND=noninteractive</span><br><span class="line"><span class="keyword">ENV</span> TZ=Asia/Shanghai</span><br><span class="line"><span class="comment"># 更新软件源</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get -y update</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get -y upgrade</span></span><br><span class="line"><span class="comment"># 安装一些常用工具</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get install -y \</span></span><br><span class="line"><span class="language-bash">cmake git vim curl wget \</span></span><br><span class="line"><span class="language-bash">net-tools openssh-server</span></span><br><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get install -y build-essential </span></span><br><span class="line"><span class="comment"># 安装python</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get install -y python3</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/07/27c2753f592acd2b16e90f50c406c38d.png" alt="image.png"></p><h2 id="3-3-查看构建的两个镜像包含的层级"><a href="#3-3-查看构建的两个镜像包含的层级" class="headerlink" title="3.3. 查看构建的两个镜像包含的层级"></a>3.3. 查看构建的两个镜像包含的层级</h2><p>分别用<code>docker history</code>查看这两个镜像的层级，根据刚刚<code>docker build</code>命令的输出，以2b9f开头的是第一个镜像（命令都写一起了），以8156开头的是命令被拆分了的docker镜像。</p><p>这里能看到第一个现象，虽然两个镜像一个是被拆分的RUN构建出来的，另外一个并没有被拆分，但最终构建出来的镜像大小并没有明显的区别（其实只是本次测试的情况没有区别，其他情况下，一般合并命令构建出来的镜像会更小）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ docker images</span><br><span class="line">REPOSITORY   TAG       IMAGE ID       CREATED         SIZE</span><br><span class="line">&lt;none&gt;       &lt;none&gt;    8156b17c21a3   2 minutes ago   598MB</span><br><span class="line">&lt;none&gt;       &lt;none&gt;    2b9f30d55cc3   9 minutes ago   596MB</span><br><span class="line">ubuntu       22.04     52882761a72a   9 days ago      77.9MB</span><br></pre></td></tr></table></figure><p>先给这两个镜像打个tag（最好是docker build的时候就用<code>-t</code>选项打tag，我忘记了）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker tag 2b9f30d55cc3 myub:1</span><br><span class="line">docker tag 8156b17c21a3 myub:2</span><br></pre></td></tr></table></figure><p>先来看命令合并的这个，可见它只在原有镜像的基础上，多了RUN命令的这一层。ARG&#x2F;ENV命令虽然会在history中被显示，但并不会增加层级。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ docker history myub:1</span><br><span class="line">IMAGE          CREATED          CREATED BY                                      SIZE      COMMENT</span><br><span class="line">2b9f30d55cc3   10 minutes ago   RUN |1 DEBIAN_FRONTEND=noninteractive /bin/s…   518MB     buildkit.dockerfile.v0</span><br><span class="line">&lt;missing&gt;      10 minutes ago   ENV TZ=Asia/Shanghai                            0B        buildkit.dockerfile.v0</span><br><span class="line">&lt;missing&gt;      10 minutes ago   ARG DEBIAN_FRONTEND=noninteractive              0B        buildkit.dockerfile.v0</span><br><span class="line">&lt;missing&gt;      9 days ago       /bin/sh -c #(nop)  CMD [&quot;/bin/bash&quot;]            0B        </span><br><span class="line">&lt;missing&gt;      9 days ago       /bin/sh -c #(nop) ADD file:a5d32dc2ab15ff0d7…   77.9MB    </span><br><span class="line">&lt;missing&gt;      9 days ago       /bin/sh -c #(nop)  LABEL org.opencontainers.…   0B        </span><br><span class="line">&lt;missing&gt;      9 days ago       /bin/sh -c #(nop)  LABEL org.opencontainers.…   0B        </span><br><span class="line">&lt;missing&gt;      9 days ago       /bin/sh -c #(nop)  ARG LAUNCHPAD_BUILD_ARCH     0B        </span><br><span class="line">&lt;missing&gt;      9 days ago       /bin/sh -c #(nop)  ARG RELEASE                  0B    </span><br></pre></td></tr></table></figure><p>通过docker inspect查看详细信息，在Layers中只能看到两层，即对应一条RUN命令创建出来的镜像层。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;RootFS&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;Type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;layers&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;Layers&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;sha256:629ca62fb7c791374ce57626d6b8b62c76378be091a0daf1a60d32700b49add7&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;sha256:2a381621675d1e9a462aa951211a3cf6938a480fcd82796cb18ef85234696014&quot;</span></span><br><span class="line">            <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>再来看看命令被拆分的镜像，层数就多了起来</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ docker history myub:2</span><br><span class="line">IMAGE          CREATED         CREATED BY                                      SIZE      COMMENT</span><br><span class="line">8156b17c21a3   8 minutes ago   RUN |1 DEBIAN_FRONTEND=noninteractive /bin/s…   10.5kB    buildkit.dockerfile.v0</span><br><span class="line">&lt;missing&gt;      8 minutes ago   RUN |1 DEBIAN_FRONTEND=noninteractive /bin/s…   56.1MB    buildkit.dockerfile.v0</span><br><span class="line">&lt;missing&gt;      8 minutes ago   RUN |1 DEBIAN_FRONTEND=noninteractive /bin/s…   413MB     buildkit.dockerfile.v0</span><br><span class="line">&lt;missing&gt;      9 minutes ago   RUN |1 DEBIAN_FRONTEND=noninteractive /bin/s…   0B        buildkit.dockerfile.v0</span><br><span class="line">&lt;missing&gt;      9 minutes ago   RUN |1 DEBIAN_FRONTEND=noninteractive /bin/s…   50.9MB    buildkit.dockerfile.v0</span><br><span class="line">&lt;missing&gt;      9 minutes ago   ENV TZ=Asia/Shanghai                            0B        buildkit.dockerfile.v0</span><br><span class="line">&lt;missing&gt;      9 minutes ago   ARG DEBIAN_FRONTEND=noninteractive              0B        buildkit.dockerfile.v0</span><br><span class="line">&lt;missing&gt;      9 days ago      /bin/sh -c #(nop)  CMD [&quot;/bin/bash&quot;]            0B        </span><br><span class="line">&lt;missing&gt;      9 days ago      /bin/sh -c #(nop) ADD file:a5d32dc2ab15ff0d7…   77.9MB    </span><br><span class="line">&lt;missing&gt;      9 days ago      /bin/sh -c #(nop)  LABEL org.opencontainers.…   0B        </span><br><span class="line">&lt;missing&gt;      9 days ago      /bin/sh -c #(nop)  LABEL org.opencontainers.…   0B        </span><br><span class="line">&lt;missing&gt;      9 days ago      /bin/sh -c #(nop)  ARG LAUNCHPAD_BUILD_ARCH     0B        </span><br><span class="line">&lt;missing&gt;      9 days ago      /bin/sh -c #(nop)  ARG RELEASE                  0B  </span><br></pre></td></tr></table></figure><p><code>myub:2</code>相比<code>myub:1</code>额外多了4层，也对应的RUN命令的个数</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;RootFS&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;Type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;layers&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;Layers&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;sha256:629ca62fb7c791374ce57626d6b8b62c76378be091a0daf1a60d32700b49add7&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;sha256:2ae784f0abd479326b00d2fbe2ba96a16e46056e386275d6f57988fe2ecf3034&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;sha256:fa903b82d02c9769bc58b795b9c1789a45dca63be57e81c7e15df3de2618bda0&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;sha256:3c2f1f7362025cbbb03b9a5760fc7fd72e940b1b768002ec6e15bc677e2657e4&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;sha256:86d0ee2ab97d64cee7d15598f4374bfe1ff940d89d945bbaf66e947e20068a1e&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;sha256:e72805c5ca21af8edf5f6d539da83e62c083436b1a58d00a394b2bf0b6be4a87&quot;</span></span><br><span class="line">            <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="3-4-分层的影响？"><a href="#3-4-分层的影响？" class="headerlink" title="3.4. 分层的影响？"></a>3.4. 分层的影响？</h2><p>先说结论：根据你的业务需要，选择合适的层数来构建docker镜像。</p><p>docker分层其中之一的目的，就是让构建镜像的时候能更多的<strong>用上缓存</strong>。假设构建容器A和容器B中有相同的操作，<strong>会构建出一个相同的镜像层</strong>，那么这个镜像层<strong>只需要存储一次就行了</strong>，而且下次执行相同的构建操作时，也可以直接使用这个缓存！容器运行的时候，这些镜像的<strong>只读层</strong>同样可以共享，节省了占用的空间。</p><p>所以，<strong>适当</strong>的加多RUN的层数，<strong>且将相同的构建命令放在同一个RUN中</strong>，是可以方便多个容器的构建的。因为单层RUN的缓存能被下一次相同的构建直接用上，构建效率提高！</p><p>同理，在pull拉取远程镜像的时候，如果某一层在本地已有了，也能直接使用本地已有缓存，避免重复拉取。这就好比APP的“增量更新”功能，镜像那么大，如果每一次都得全量下载，网络不好的时候就有的一等了。只拉取有变化的层数，能大大提高效率。</p><p>但是，如果层数太多，新增了太多的小层，那么每一个小层的变化都会使<strong>后续构建的缓存失效</strong>！具体场景也需要具体的考量！</p><h2 id="3-5-分层缓存测试"><a href="#3-5-分层缓存测试" class="headerlink" title="3.5. 分层缓存测试"></a>3.5. 分层缓存测试</h2><h3 id="3-5-1-拉取镜像缓存命中"><a href="#3-5-1-拉取镜像缓存命中" class="headerlink" title="3.5.1. 拉取镜像缓存命中"></a>3.5.1. 拉取镜像缓存命中</h3><p>当我们pull一个redis的6.2版本时，因为之前没有pull过，需要全量下载。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ docker pull redis:6.2                 </span><br><span class="line">6.2: Pulling from library/redis</span><br><span class="line">b0a0cf830b12: Pull complete </span><br><span class="line">57ad18570194: Pull complete </span><br><span class="line">056356a7a403: Pull complete </span><br><span class="line">c3351a5ba2a8: Pull complete </span><br><span class="line">1042efef0b42: Pull complete </span><br><span class="line">9f26115a8134: Pull complete </span><br><span class="line">4f4fb700ef54: Pull complete </span><br><span class="line">68d2d706a2f6: Pull complete </span><br><span class="line">Digest: sha256:d4948d011cc38e94f0aafb8f9a60309bd93034e07d10e0767af534512cf012a9</span><br><span class="line">Status: Downloaded newer image for redis:6.2</span><br><span class="line">docker.io/library/redis:6.2</span><br></pre></td></tr></table></figure><p>但当我们pull一个redis的7.0版本时，就不需要全量下载了，因为有一层和6.2版本是一致的，会显示<code>Already exists</code>，使用了本地缓存。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ docker pull redis:7.0</span><br><span class="line">7.0: Pulling from library/redis</span><br><span class="line">b0a0cf830b12: Already exists </span><br><span class="line">ea9699b63e68: Pull complete </span><br><span class="line">bf380b81aa96: Pull complete </span><br><span class="line">0164b64ea927: Pull complete </span><br><span class="line">e06189a3bd9d: Pull complete </span><br><span class="line">81fd2c0406f8: Pull complete </span><br><span class="line">4f4fb700ef54: Pull complete </span><br><span class="line">e3a29842ec15: Pull complete </span><br><span class="line">Digest: sha256:084f7275d9a3abc11d9f8905c3377e61e1464880af941b1eb68b8605863000e4</span><br><span class="line">Status: Downloaded newer image for redis:7.0</span><br><span class="line">docker.io/library/redis:7.0</span><br></pre></td></tr></table></figure><h3 id="3-5-2-构建缓存命中"><a href="#3-5-2-构建缓存命中" class="headerlink" title="3.5.2. 构建缓存命中"></a>3.5.2. 构建缓存命中</h3><p>先来看看构建缓存给命中的例子，来个dockerfile3，这里我们前几个命令都和上文构建<code>myub:2</code>使用的命令相同，但是最终安装的软件不同。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 构建myub:3</span></span><br><span class="line"><span class="keyword">FROM</span> ubuntu:<span class="number">22.04</span></span><br><span class="line"><span class="comment"># 在build-essential中会下载tzdata，会交互式的让用户选择时区</span></span><br><span class="line"><span class="comment"># 所以需要设置apt为非交互模式</span></span><br><span class="line"><span class="keyword">ARG</span> DEBIAN_FRONTEND=noninteractive</span><br><span class="line"><span class="keyword">ENV</span> TZ=Asia/Shanghai</span><br><span class="line"><span class="comment"># 更新软件源</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get -y update</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get -y upgrade</span></span><br><span class="line"><span class="comment"># 安装一些常用工具</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get install -y \</span></span><br><span class="line"><span class="language-bash">python3 vim git cmake net-tools sqlite3</span></span><br></pre></td></tr></table></figure><p>在build的输出中可以看到，前两层<code>apt-get -y update</code>和<code>apt-get -y upgrade</code>直接命中了本地已有的缓存，会有一个<code>CACHED</code>的输出，代表此时无需再次构建！</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/07/89162d9895887d381a368e97f7926add.png" alt="image.png"></p><p>不过，<code>apt-get update/upgrade</code>这两个命令的结果是会随着ubuntu系统软件源的更新而进一步变化的。如果想获取最新的软件源，在docker build的时候，可以选择不使用本地的docker缓存，来构建最新的镜像。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build --no-cache . -t imageName </span><br></pre></td></tr></table></figure><h3 id="3-5-3-构建缓存失效"><a href="#3-5-3-构建缓存失效" class="headerlink" title="3.5.3. 构建缓存失效"></a>3.5.3. 构建缓存失效</h3><p>再来看看什么时候缓存会失效。首先，如果将这里的<code>apt-get</code>命令合并，那么就无法使用本地的缓存了，还是需要重新拉取ubuntu的软件源，执行构建过程。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 构建myub:4</span></span><br><span class="line"><span class="keyword">FROM</span> ubuntu:<span class="number">22.04</span></span><br><span class="line"><span class="comment"># 在build-essential中会下载tzdata，会交互式的让用户选择时区</span></span><br><span class="line"><span class="comment"># 所以需要设置apt为非交互模式</span></span><br><span class="line"><span class="keyword">ARG</span> DEBIAN_FRONTEND=noninteractive</span><br><span class="line"><span class="keyword">ENV</span> TZ=Asia/Shanghai</span><br><span class="line"><span class="comment"># 更新软件源</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get -y update &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">apt-get -y upgrade &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">apt-get install -y \</span></span><br><span class="line"><span class="language-bash">python3 vim git cmake net-tools sqlite3</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/07/46f8a4287cf5627aa18fc67b179728df.png" alt="image.png"></p><p>而在原本构建<code>myub:2</code>的过程中，我们有很多的小层，这些小层的变化，同样会让这一层和下层的缓存都失效</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 构建myub:5</span></span><br><span class="line"><span class="keyword">FROM</span> ubuntu:<span class="number">22.04</span></span><br><span class="line"><span class="comment"># 在build-essential中会下载tzdata，会交互式的让用户选择时区</span></span><br><span class="line"><span class="comment"># 所以需要设置apt为非交互模式</span></span><br><span class="line"><span class="keyword">ARG</span> DEBIAN_FRONTEND=noninteractive</span><br><span class="line"><span class="keyword">ENV</span> TZ=Asia/Shanghai</span><br><span class="line"><span class="comment"># 更新软件源</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get -y update</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get -y upgrade</span></span><br><span class="line"><span class="comment"># 安装一些常用工具（这个小层和myub:2不同，多安装了sqlite3）</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get install -y \</span></span><br><span class="line"><span class="language-bash">cmake git vim curl wget \</span></span><br><span class="line"><span class="language-bash">net-tools openssh-server sqlite3</span></span><br><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get install -y build-essential </span></span><br><span class="line"><span class="comment"># 安装python</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get install -y python3</span></span><br></pre></td></tr></table></figure><p>可以看到，因为RUN命令中多安装了sqlite3，不光这一层需要重新构建，后面没有变动的两层同样需要重新构建，大大增加了构建耗时。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/07/9243f568cf729a28fd1ae4f6f8f8c4f7.png" alt="image.png"></p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/07/95c6449bd4943ace8de5a4ea2f53a5e4.png" alt="image.png"></p><p>如果我们想新增一个sqlite3包，直接在最后添加一个新的命令，反而可以用上原本的缓存，飞速构建</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 构建myub:6</span></span><br><span class="line"><span class="keyword">FROM</span> ubuntu:<span class="number">22.04</span></span><br><span class="line"><span class="comment"># 在build-essential中会下载tzdata，会交互式的让用户选择时区</span></span><br><span class="line"><span class="comment"># 所以需要设置apt为非交互模式</span></span><br><span class="line"><span class="keyword">ARG</span> DEBIAN_FRONTEND=noninteractive</span><br><span class="line"><span class="keyword">ENV</span> TZ=Asia/Shanghai</span><br><span class="line"><span class="comment"># 更新软件源</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get -y update</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get -y upgrade</span></span><br><span class="line"><span class="comment"># 安装一些常用工具</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get install -y \</span></span><br><span class="line"><span class="language-bash">cmake git vim curl wget \</span></span><br><span class="line"><span class="language-bash">net-tools openssh-server</span></span><br><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get install -y build-essential </span></span><br><span class="line"><span class="comment"># 安装python</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get install -y python3</span></span><br><span class="line"><span class="comment"># 额外安装sqlite3</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get install -y sqlite3</span></span><br></pre></td></tr></table></figure><p>反应到结果上，就是前几层直接命中缓存，只有最后一个安装sqlite3的命令需要进行运行构建。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/07/a40126981c119fc06da0912fc904fd6a.png" alt="image.png"></p><h1 id="4-如何减少docker构建镜像的大小？"><a href="#4-如何减少docker构建镜像的大小？" class="headerlink" title="4.如何减少docker构建镜像的大小？"></a>4.如何减少docker构建镜像的大小？</h1><p>参考：<a href="https://blog.csdn.net/qq_39213171/article/details/107789804">Dockerfile最小化构建镜像：减少层数、清理无用数据、多段构建</a></p>]]></content>
    
    
    <summary type="html">Docker学习第4话，学习编写dockerfile。</summary>
    
    
    
    <category term="编程学习" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="Docker学习" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/Docker%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Docker" scheme="https://blog.musnow.top/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>【Docker】Docker学习03 | Docker的volume</title>
    <link href="https://blog.musnow.top/posts/2851039659/"/>
    <id>https://blog.musnow.top/posts/2851039659/</id>
    <published>2024-07-21T06:03:27.000Z</published>
    <updated>2024-07-25T12:22:38.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-引入"><a href="#1-引入" class="headerlink" title="1. 引入"></a>1. 引入</h1><p>在docker的基本知识讲解中，提到了docker镜像是由一层一层文件系统构成的。这一系列文件系统是一系列的<code>只读层</code>。当我们创建一个容器的时候，Docker会读取镜像（只读），并在镜像的顶部再添加一层<strong>读写层</strong>。</p><p>这种读写层和只读层的组合被称为<code>联合文件系统</code>（Union File System &#x2F; Unoin FS），结构抽象如下表所示，以防图片加载不出来。</p><table><thead><tr><th>层级</th><th>说明</th></tr></thead><tbody><tr><td>Running Container</td><td>正在运行的容器</td></tr><tr><td>Storage Driver</td><td>存储驱动层</td></tr><tr><td>write layer</td><td>读写层</td></tr><tr><td>image layer</td><td>镜像只读层</td></tr><tr><td>HOST</td><td>宿主机</td></tr></tbody></table><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/07/24a33dd11665a155144ee96587f745f4.png" alt="image.png"></p><p>如果正在运行的容器修改了现有的文件，这些文件会被拷贝出底层的只读层，放到最顶部的容器读写层中，读写层中文件的未修改版本仍然存放在镜像的只读层中。</p><table><thead><tr><th>层</th><th>文件</th><th>说明</th></tr></thead><tbody><tr><td>读写层</td><td>app.ini</td><td>当出现写操作的时候，从只读层中拷贝到读写层</td></tr><tr><td>只读层</td><td>app.ini</td><td></td></tr></tbody></table><p>当基于相同的镜像创建第二个容器时，还是会创建一个<strong>没有任何数据修改</strong>的全新容器。在之前的容器中的任何修改<strong>只会保留在原有容器</strong>中，实现了容器和镜像的隔离。</p><p>这种读写层的操作带来了以下的问题：</p><ol><li>当容器不再存在的时候，数据不持久化；</li><li>如果另外一个进程需要使用容器内的数据，难以将其从容器内取出；</li><li>容器的可写层与容器当前运行的宿主机紧密相连，难以将其移动到另外一台主机上；</li><li>写入容器的可写层需要存储驱动<code>Storage Dirver</code>来管理这个文件系统，存储驱动提供了一个使用Linux内核的联合文件系统；与直接将数据写入宿主机的文件系统的方式，这种额外的抽象层降低了性能。</li></ol><p>为了能持久化这些修改过的数据，并且能够很容易实现容器间进行数据的共享，docker提出了volume的概念，同时也提供了多种数据持久化的方式。</p><h1 id="2-docker提供的持久化策略"><a href="#2-docker提供的持久化策略" class="headerlink" title="2. docker提供的持久化策略"></a>2. docker提供的持久化策略</h1><p>docker提供两种文件持久化的策略，分别是volume和mount，其中mount还分为<code>bind mount</code>（将容器内路径和宿主机的文件路径绑定）和<code>tmpfs mount</code>（数据只存在于宿主机的内存中）。</p><p>通过volume和bind mount持久化的文件都可以称之为docker的数据卷。数据卷是在容器默认的联合文件系统之外的文件或目录，它可以在宿主机上直接被访问。即便容器删除，数据卷中的内容也不会丢失。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/07/fdc07e592ab6ecbbe91ffcbdc1db123f.png" alt="image.png"></p><p>tips:</p><ul><li><strong>Volumes</strong> are stored in a part of the host filesystem which is managed by Docker (<code>/var/lib/docker/volumes/</code> on Linux). Non-Docker processes should not modify this part of the filesystem. Volumes are the best way to persist data in Docker.</li><li><strong>Bind mounts</strong> may be stored anywhere on the host system. They may even be important system files or directories. Non-Docker processes on the Docker host or a Docker container can modify them at any time.</li><li><strong>tmpfs mounts</strong> are stored in the host system’s memory only, and are never written to the host system’s filesystem.</li></ul><p>下文将对这三种不同的文件持久化方式进行测试</p><h1 id="3-volumes"><a href="#3-volumes" class="headerlink" title="3. volumes"></a>3. volumes</h1><h2 id="3-1-测试：自动创建的volume"><a href="#3-1-测试：自动创建的volume" class="headerlink" title="3.1. 测试：自动创建的volume"></a>3.1. 测试：自动创建的volume</h2><p>以<code>mysql:5.7</code>镜像为例，下面是一个创建容器的命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">--name=<span class="string">&quot;testMysql&quot;</span> \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=<span class="string">&quot;123456&quot;</span> \</span><br><span class="line">mysql:5.7</span><br></pre></td></tr></table></figure><p>创建容器之前，先看看当前系统上的docker volume有哪些</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ docker volume ls</span><br><span class="line">DRIVER    VOLUME NAME</span><br><span class="line">local     53b8da5cc9f94a856e263d36ae69aea754be90a5a8b5b4848850af6e35503770</span><br><span class="line">local     act-toolcache</span><br></pre></td></tr></table></figure><p>执行了这个命令后，mysql容器被创建且正常运行，再次查看当前系统上的docker volume，可以发现多了一个新的volume。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">DRIVER    VOLUME NAME</span><br><span class="line">local     0cd65f1432c653ec08d7d8c3c50f645b97e0f26d139f1debb0c7fead3dafdfa4</span><br><span class="line">local     53b8da5cc9f94a856e263d36ae69aea754be90a5a8b5b4848850af6e35503770</span><br><span class="line">local     act-toolcache</span><br></pre></td></tr></table></figure><p>进入新创建的这个docker volume在宿主机上的路径，看看这里面有什么东西</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">❯ sudo ls -al /var/lib/docker/volumes/0cd65f1432c653ec08d7d8c3c50f645b97e0f26d139f1debb0c7fead3dafdfa4/_data</span><br><span class="line">total 188484</span><br><span class="line">drwxrwxrwt 5  999 docker     4096 May  6 16:56 .</span><br><span class="line">drwx-----x 3 root root       4096 May  6 16:56 ..</span><br><span class="line">-rw-r----- 1  999 docker       56 May  6 16:56 auto.cnf</span><br><span class="line">-rw------- 1  999 docker     1676 May  6 16:56 ca-key.pem</span><br><span class="line">-rw-r--r-- 1  999 docker     1112 May  6 16:56 ca.pem</span><br><span class="line">-rw-r--r-- 1  999 docker     1112 May  6 16:56 client-cert.pem</span><br><span class="line">-rw------- 1  999 docker     1676 May  6 16:56 client-key.pem</span><br><span class="line">-rw-r----- 1  999 docker     1318 May  6 16:56 ib_buffer_pool</span><br><span class="line">-rw-r----- 1  999 docker 79691776 May  6 16:56 ibdata1</span><br><span class="line">-rw-r----- 1  999 docker 50331648 May  6 16:56 ib_logfile0</span><br><span class="line">-rw-r----- 1  999 docker 50331648 May  6 16:56 ib_logfile1</span><br><span class="line">-rw-r----- 1  999 docker 12582912 May  6 16:56 ibtmp1</span><br><span class="line">drwxr-x--- 2  999 docker     4096 May  6 16:56 mysql</span><br><span class="line">lrwxrwxrwx 1  999 docker       27 May  6 16:56 mysql.sock -&gt; /var/run/mysqld/mysqld.sock</span><br><span class="line">drwxr-x--- 2  999 docker     4096 May  6 16:56 performance_schema</span><br><span class="line">-rw------- 1  999 docker     1680 May  6 16:56 private_key.pem</span><br><span class="line">-rw-r--r-- 1  999 docker      452 May  6 16:56 public_key.pem</span><br><span class="line">-rw-r--r-- 1  999 docker     1112 May  6 16:56 server-cert.pem</span><br><span class="line">-rw------- 1  999 docker     1676 May  6 16:56 server-key.pem</span><br><span class="line">drwxr-x--- 2  999 docker    12288 May  6 16:56 sys</span><br></pre></td></tr></table></figure><p>如果你对MySQL比较熟悉，应该就能认出来，这就是MySQL在<code>/var/lib/mysql</code>中存放的数据，我们可以做个简单的验证，使用如下命令，直接链接到这个新创建的容器的MySQL命令行中。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it testMysql mysql -uroot -p123456</span><br></pre></td></tr></table></figure><p>我们在MySQL里面创建一个testdb数据库和一个stu表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建数据库</span></span><br><span class="line"><span class="keyword">create</span> database testdb;</span><br><span class="line"><span class="comment">-- 进入testdb数据库</span></span><br><span class="line">use testdb;</span><br><span class="line"><span class="comment">-- 创建stu表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> stu(</span><br><span class="line">id <span class="type">int</span> <span class="keyword">primary</span> key,</span><br><span class="line">name <span class="type">varchar</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>操作完成后，exit退出容器，再次查看刚刚的volume目录。可以看到多了一个名为<code>testdb</code>的文件夹。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">❯ sudo ls -al /var/lib/docker/volumes/0cd65f1432c653ec08d7d8c3c50f645b97e0f26d139f1debb0c7fead3dafdfa4/_data</span><br><span class="line">total 188488</span><br><span class="line">drwxrwxrwt 6  999 docker     4096 May  6 17:15 .</span><br><span class="line">drwx-----x 3 root root       4096 May  6 16:56 ..</span><br><span class="line">-rw-r----- 1  999 docker       56 May  6 16:56 auto.cnf</span><br><span class="line">-rw------- 1  999 docker     1676 May  6 16:56 ca-key.pem</span><br><span class="line">-rw-r--r-- 1  999 docker     1112 May  6 16:56 ca.pem</span><br><span class="line">-rw-r--r-- 1  999 docker     1112 May  6 16:56 client-cert.pem</span><br><span class="line">-rw------- 1  999 docker     1676 May  6 16:56 client-key.pem</span><br><span class="line">-rw-r----- 1  999 docker     1318 May  6 16:56 ib_buffer_pool</span><br><span class="line">-rw-r----- 1  999 docker 79691776 May  6 17:15 ibdata1</span><br><span class="line">-rw-r----- 1  999 docker 50331648 May  6 17:15 ib_logfile0</span><br><span class="line">-rw-r----- 1  999 docker 50331648 May  6 16:56 ib_logfile1</span><br><span class="line">-rw-r----- 1  999 docker 12582912 May  6 16:56 ibtmp1</span><br><span class="line">drwxr-x--- 2  999 docker     4096 May  6 16:56 mysql</span><br><span class="line">lrwxrwxrwx 1  999 docker       27 May  6 16:56 mysql.sock -&gt; /var/run/mysqld/mysqld.sock</span><br><span class="line">drwxr-x--- 2  999 docker     4096 May  6 16:56 performance_schema</span><br><span class="line">-rw------- 1  999 docker     1680 May  6 16:56 private_key.pem</span><br><span class="line">-rw-r--r-- 1  999 docker      452 May  6 16:56 public_key.pem</span><br><span class="line">-rw-r--r-- 1  999 docker     1112 May  6 16:56 server-cert.pem</span><br><span class="line">-rw------- 1  999 docker     1676 May  6 16:56 server-key.pem</span><br><span class="line">drwxr-x--- 2  999 docker    12288 May  6 16:56 sys</span><br><span class="line">drwxr-x--- 2  999 docker     4096 May  6 17:15 testdb</span><br></pre></td></tr></table></figure><p>查看该文件夹，能看到刚刚我们创建的stu表的本地文件。可见这就是MySQL的本地路径。如果你在宿主机上直接使用apt安装一个MySQL&#x2F;MariaDB，也可以在宿主机的<code>/var/lib/mysql</code>中看到类似的文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">❯ sudo ls -al /var/lib/docker/volumes/0cd65f1432c653ec08d7d8c3c50f645b97e0f26d139f1debb0c7fead3dafdfa4/_data/testdb</span><br><span class="line">total 120</span><br><span class="line">drwxr-x--- 2 999 docker  4096 May  6 17:15 .</span><br><span class="line">drwxrwxrwt 6 999 docker  4096 May  6 17:15 ..</span><br><span class="line">-rw-r----- 1 999 docker    65 May  6 17:15 db.opt</span><br><span class="line">-rw-r----- 1 999 docker  8586 May  6 17:15 stu.frm</span><br><span class="line">-rw-r----- 1 999 docker 98304 May  6 17:15 stu.ibd</span><br></pre></td></tr></table></figure><p>通过<code>docker inspect testMysql</code>命令，可以查询到这个容器的配置详情，其中的Mount部分就有刚刚看到的volume，其中<code>Source</code>字段就是这个volume在宿主机上的路径，<code>Destination</code>字段是volume对应的容器内路径。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;Mounts&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;Type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;volume&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;Name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0cd65f1432c653ec08d7d8c3c50f645b97e0f26d139f1debb0c7fead3dafdfa4&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;Source&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/var/lib/docker/volumes/0cd65f1432c653ec08d7d8c3c50f645b97e0f26d139f1debb0c7fead3dafdfa4/_data&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;Destination&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/var/lib/mysql&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;Driver&quot;</span><span class="punctuation">:</span> <span class="string">&quot;local&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;Mode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;RW&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;Propagation&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>再去找找<a href="https://github.com/docker-library/mysql/blob/master/Dockerfile.debian">MySQL容器的dockerfile</a>，也可以在里面看到一行关于<a href="https://github.com/docker-library/mysql/blob/e384941f162df943146e314f12097cf69c3609fa/Dockerfile.debian#L85">volume</a>的配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">VOLUME /var/lib/mysql</span><br></pre></td></tr></table></figure><p>由此可见，对于创建容器，如果没有在run命令中主动mount某个volume或路径时，docker会自动创建一个随机命名的volume（保持唯一性），并将容器内的路径和这个volume绑定。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/07/6ef358884bc4f9af99bfc7ef5a530c4a.png" alt="image.png"></p><p>另外，一个volume的只能对应容器内的一个路径。如果容器在dockerfile中指定了多个不同路径的volume，则Docker也会创建多个volume与之对应。</p><h2 id="3-2-测试：主动指定volume"><a href="#3-2-测试：主动指定volume" class="headerlink" title="3.2. 测试：主动指定volume"></a>3.2. 测试：主动指定volume</h2><p>我们可以在run命令中指定容器路径和某个volume进行绑定，也可以写入一个volume的名字，在创建容器的同时创建这个volume。</p><p>下面这两种创建方式，都会在<code>/var/lib/docker/volumes</code>中创建一个名为<code>test_mysql_2</code>的volume。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建volume</span></span><br><span class="line">docker volume create test_mysql_2</span><br><span class="line"><span class="comment"># 绑定</span></span><br><span class="line">docker run -d \</span><br><span class="line">--name=<span class="string">&quot;testMysql2&quot;</span> \</span><br><span class="line">-v test_mysql_2:/var/lib/mysql \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=<span class="string">&quot;123456&quot;</span> \</span><br><span class="line">mysql:5.7</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建容器的时候直接创建volume</span></span><br><span class="line">docker run -d \</span><br><span class="line">--name=<span class="string">&quot;testMysql2&quot;</span> \</span><br><span class="line">-v test_mysql_2:/var/lib/mysql \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=<span class="string">&quot;123456&quot;</span> \</span><br><span class="line">mysql:5.7</span><br></pre></td></tr></table></figure><p>执行命令后，可以看到新创建出来的volume</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">❯ docker volume ls</span><br><span class="line">DRIVER    VOLUME NAME</span><br><span class="line">local     0cd65f1432c653ec08d7d8c3c50f645b97e0f26d139f1debb0c7fead3dafdfa4</span><br><span class="line">local     53b8da5cc9f94a856e263d36ae69aea754be90a5a8b5b4848850af6e35503770</span><br><span class="line">local     act-toolcache</span><br><span class="line">local     test_mysql_2</span><br></pre></td></tr></table></figure><p>通过<code>docker inspect testMysql2</code>命令，可以看到Mount中的信息</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;Mounts&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;Type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;volume&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;Name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;test_mysql_2&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;Source&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/var/lib/docker/volumes/test_mysql_2/_data&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;Destination&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/var/lib/mysql&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;Driver&quot;</span><span class="punctuation">:</span> <span class="string">&quot;local&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;Mode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;z&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;RW&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;Propagation&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="3-3-绑定volume的权限选项"><a href="#3-3-绑定volume的权限选项" class="headerlink" title="3.3. 绑定volume的权限选项"></a>3.3. 绑定volume的权限选项</h2><p>这里能发现字段<code>Mode</code>有变化，由空串变成了小写的<code>z</code>。这个是什么意思呢？</p><ul><li><code>z</code>（小写）：代表绑定的目录由多个容器共享，其他容器也可以挂载这个volume；</li><li><code>Z</code>（大写）：代表绑定的目录由单个容器私有，其他容器无法挂载；</li></ul><p>在使用<code>-v</code>绑定某个路径的时候，可以在路径后面再添加一个选项，来指定权限和绑定模式。方式如下，在容器内路径后再追加一个冒号</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-v volume名字或宿主机路径:容器内路径:[权限选项]</span><br></pre></td></tr></table></figure><p>权限的可选项有四种，默认情况下，给定的是rw读写权限。</p><ul><li>大写Z</li><li>小写z</li><li>ro（只读）</li><li>rw（读写）</li></ul><p>其中<code>:z</code>和<code>:Z</code>选项是和SELinux有关的，具体可以参考<a href="https://docs.docker.com/reference/cli/docker/container/run/#volumes-from">官方文档</a>和<a href="https://linux.cn/article-14319-1.html">Linux中国</a>的文章。</p><blockquote><p>在Ubuntu上，SELinux工具集默认应该是没有启用的。</p></blockquote><p>注意，如果你使用<code>:Z</code>（大写）选项绑定了宿主机中诸如<code>/</code>、<code>/usr</code>、<code>/home</code>的目录，你可能会因为权限问题，直接无法使用宿主机！使用该选项的时候需要慎重！</p><h1 id="4-mount"><a href="#4-mount" class="headerlink" title="4. mount"></a>4. mount</h1><h2 id="4-1-bind-mount"><a href="#4-1-bind-mount" class="headerlink" title="4.1. bind mount"></a>4.1. bind mount</h2><h3 id="4-1-1-说明"><a href="#4-1-1-说明" class="headerlink" title="4.1.1. 说明"></a>4.1.1. 说明</h3><p>bind mount是docker早期就已经存在的数据持久化方式，其支持将容器的内的路径映射到某个宿主机上的路径，实现容器和宿主机文件的同步。绑定挂载直接使用了宿主机的文件系统，性能更佳。</p><p>绑定路径在docker run命令中和volume类似，都可以使用<code>-v</code>选项来实现</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-v 宿主机路径:容器内路径</span><br></pre></td></tr></table></figure><p>下面是一个示例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用root用户，在宿主机上创建路径</span></span><br><span class="line"><span class="built_in">mkdir</span> /data/mysql</span><br><span class="line"><span class="comment"># docker容器绑定这个路径</span></span><br><span class="line">docker run -d \</span><br><span class="line">--name=<span class="string">&quot;testMysql3&quot;</span> \</span><br><span class="line">-v /data/mysql:/var/lib/mysql \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=<span class="string">&quot;123456&quot;</span> \</span><br><span class="line">mysql:5.7</span><br></pre></td></tr></table></figure><p>这样这个docker安装的MySQL容器内的所有数据都会被写入宿主机的<code>/data/mysql</code>路径中，我们可以直接备份这个路径实现对MySQL数据的保留。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/07/04de1e3846636800c9e7f58c550065a3.png" alt="image.png"></p><h3 id="4-1-2-源路径的说明"><a href="#4-1-2-源路径的说明" class="headerlink" title="4.1.2. 源路径的说明"></a>4.1.2. 源路径的说明</h3><p>注意绑定挂载时<code>-v</code>选项中的<strong>路径</strong>和<strong>volume</strong>的区别。我们知道，在Linux命令行中，直接输入一个目录&#x2F;文件的名称，<strong>会默认是当前路径下的内容</strong>。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd  folder   等价于 cd ./folder</span><br><span class="line">vim test.txt 等价于 vim ./test.txt</span><br></pre></td></tr></table></figure><p>而在docker run命令的<code>-v</code>选项中，源路径source输入直接为某个目录名的时候，会认为是volume的名称！而不是当前路径下的文件！</p><p>假设我们当前运行docker run的终端路径中有一个<strong>folder文件夹</strong>，我们想将这个文件夹映射到docker容器内的<code>/data</code>路径，推荐的写法如下（推荐使用绝对路径来设置源主机上的路径）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-v $&#123;PWD&#125;/folder:/data</span><br></pre></td></tr></table></figure><p>错误的写法如下，直接写一个folder会以之为名<strong>创建一个新的volume</strong>，不符合我们的需要！</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-v folder:/data</span><br></pre></td></tr></table></figure><p>这一点在新建容器的时候一定要注意！个人推荐维持一个原则，即使用bind mount的时候一定要用<strong>绝对路径</strong>来设置宿主机上的文件路径。</p><h3 id="4-1-3-bind-mount的弊端"><a href="#4-1-3-bind-mount的弊端" class="headerlink" title="4.1.3. bind mount的弊端"></a>4.1.3. bind mount的弊端</h3><p>绑定挂载也有弊端</p><ul><li><strong>Bind mounts allow access to sensitive files</strong> One side effect of using bind mounts, for better or for worse, is that you can change the host filesystem via processes running in a container, including creating, modifying, or deleting important system files or directories. This is a powerful ability which can have security implications, including impacting non-Docker processes on the host system.</li></ul><p>翻译过来就是，绑定挂载（特别是以读写方式挂载）会让docker容器有权限修改宿主机的任何文件，甚至包括宿主机的系统文件。存在安全性问题。</p><p>这一点在<a href="https://linux.cn/article-14319-1.html">Linux中国</a>关于SELinux的文章中就有介绍，比如我们将宿主机的<code>/</code>路径直接绑定到容器的<code>/test</code>路径中时，使用<code>docker exec</code>进入这个容器的终端，我们会拥有<strong>容器内的root权限</strong>（即可以对当前登录的这个容器内的文件做任意修改），此时就直接可以通过编辑容器内的<code>/test</code>路径，来删除&#x2F;修改宿主机上的重要文件。</p><h3 id="4-1-4-docker-run-的-–mount-选项"><a href="#4-1-4-docker-run-的-–mount-选项" class="headerlink" title="4.1.4. docker run 的 –mount 选项"></a>4.1.4. docker run 的 –mount 选项</h3><p>除了<code>-v</code>选项，还可以用<code>--mount</code>选项来挂载数据卷，效果一致。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">--name=<span class="string">&quot;testMysql4&quot;</span> \</span><br><span class="line">--mount <span class="built_in">type</span>=<span class="built_in">bind</span>,<span class="built_in">source</span>=/data/mysql,target=/var/lib/mysql \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=<span class="string">&quot;123456&quot;</span> \</span><br><span class="line">mysql:5.7</span><br></pre></td></tr></table></figure><p>mount选项中，绑定的选项都用参数名写出来了，相对来说会更好理解，但是命令也变得复杂了。</p><table><thead><tr><th>key</th><th>value</th></tr></thead><tbody><tr><td>type</td><td>bind&#x2F;volume&#x2F;tmpfs</td></tr><tr><td>source&#x2F;src</td><td>docker host上的一个目录或文件</td></tr><tr><td>destination&#x2F;dst&#x2F;target</td><td>容器内的一个目录或文件</td></tr><tr><td>readonly</td><td>挂载为只读</td></tr><tr><td>option</td><td>额外选项</td></tr></tbody></table><p>如果需要指定readonly，直接在target后面添加该选项即可。添加了只读选项后，容器内对于这个路径就只能读，不能写入了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--mount type=bind,source=/data/mysql,target=/var/lib/mysql,readonly</span><br></pre></td></tr></table></figure><p>当使用mount选项来绑定volume的时候，<strong>可以省略type</strong>，此时docker会自动以source写入的字符串作为volume的名字，创建一个新volume并与当前容器进行绑定。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">--name=<span class="string">&quot;testMysql4&quot;</span> \</span><br><span class="line">--mount <span class="built_in">source</span>=mysql_vol,target=/var/lib/mysql \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=<span class="string">&quot;123456&quot;</span> \</span><br><span class="line">mysql:5.7</span><br></pre></td></tr></table></figure><h2 id="4-2-tmpfs-mount"><a href="#4-2-tmpfs-mount" class="headerlink" title="4.2. tmpfs mount"></a>4.2. tmpfs mount</h2><p>当容器为了性能原因，需要高频读写某些缓存文件（比如jellyfin镜像就有一个cache目录的volume，内部是一些缓存文件），或者为了安全性考虑不打算将一些数据写入磁盘的时候，我们可以使用tmpfs mount，将指定的路径绑定到宿主机的内存上。</p><p>对于nginx容器而言，其默认会有一个nginx的欢迎页面，存放在<code>/usr/share/nginx/html</code>路径中，这个欢迎页面可能会被经常的读取，占用空间也不大，所以我们可以将其放入内存中。</p><p>可以使用mount选项来进行绑定</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 直接绑定</span></span><br><span class="line">docker run -d -it \</span><br><span class="line">  -p 80:80 \</span><br><span class="line">  --name tmptest \</span><br><span class="line">  --mount <span class="built_in">type</span>=tmpfs,target=/usr/share/nginx/html \</span><br><span class="line">  nginx:latest</span><br><span class="line"><span class="comment"># 绑定时添加权限选项,1770代表全局可写</span></span><br><span class="line">docker run -d -it \</span><br><span class="line">  -p 80:80 \</span><br><span class="line">  --name tmptest \</span><br><span class="line">  --mount <span class="built_in">type</span>=tmpfs,target=/usr/share/nginx/html,tmpfs-mode=1770 \</span><br><span class="line">  nginx:latest</span><br></pre></td></tr></table></figure><p>也可以使用tmpfs选项来绑定</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -it \</span><br><span class="line">  -p 80:80 \</span><br><span class="line">  --name tmptest \</span><br><span class="line">  --tmpfs /usr/share/nginx/html \</span><br><span class="line">  nginx:latest</span><br></pre></td></tr></table></figure><p>更多相关的参数，可以参考docker的官方文档<a href="https://docs.docker.com/storage/tmpfs/">storage&#x2F;tmpfs</a>。</p><h2 id="4-3-bind-mount和volume的区别"><a href="#4-3-bind-mount和volume的区别" class="headerlink" title="4.3. bind mount和volume的区别"></a>4.3. bind mount和volume的区别</h2><p>docker官方其实一直都推荐我们使用volume来实现数据持久化，而不是使用bind mount。来看看二者的区别吧。</p><table><thead><tr><th>区别</th><th>bind mount</th><th>volume</th></tr></thead><tbody><tr><td>source位置</td><td>任意指定</td><td><code>/var/lib/docker/volumes</code></td></tr><tr><td>source路径为空</td><td>覆盖容器中的内容</td><td>容器内数据复制到volume</td></tr><tr><td>权限控制</td><td>读写&#x2F;只读</td><td>读写&#x2F;只读</td></tr><tr><td>单个文件</td><td>支持</td><td>不支持，只能是目录</td></tr><tr><td>移植性</td><td>弱,与hostpath绑定</td><td>强,无需指定hostpath</td></tr></tbody></table><h1 id="5-持久化和数据卷"><a href="#5-持久化和数据卷" class="headerlink" title="5. 持久化和数据卷"></a>5. 持久化和数据卷</h1><p>数据卷的最大特点是它的生命周期独立于容器的生命周期，即便容器被删除，<strong>数据卷中的内容也不会被删除</strong>（tmpfs除外，它的内容本来就没有写入磁盘）。当使用<code>docker rm</code>删除某个容器的时候，docker并不会主动删除和容器关联的数据卷。</p><ul><li>数据卷可在容器之间共享或重用数据。</li><li>数据卷的更改可以直接生效。</li><li>数据卷的生命周期一直持续到没有容器使用它为止。</li><li>对数据卷操作不会影响到镜像本身。</li><li>数据卷可以完成容器到宿主机、宿主机到容器以及容器到容器之间的数据共享。</li></ul><p>可见数据卷的好处还是多多的。所以，当你打算删除某个数据卷的时候，一定要确保这个数据卷里面的文件是完全无用了！</p><h1 id="6-参考文档"><a href="#6-参考文档" class="headerlink" title="6. 参考文档"></a>6. 参考文档</h1><ul><li><a href="https://colynn.github.io/2022-05-02-docker-volume/">理解并正确使用docker volume&#x2F;bind mount</a></li><li><a href="http://docker.baoshu.red/data_management/volume.html">docker volume详解</a></li><li><a href="https://blog.container-solutions.com/understanding-volumes-docker">Understanding Volumes in Docker</a></li></ul>]]></content>
    
    
    <summary type="html">Docker学习第3话，详解docker的volume</summary>
    
    
    
    <category term="编程学习" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="Docker学习" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/Docker%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Docker" scheme="https://blog.musnow.top/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>【Docker】Docker学习02 | Docker-cli的基本命令</title>
    <link href="https://blog.musnow.top/posts/347805151/"/>
    <id>https://blog.musnow.top/posts/347805151/</id>
    <published>2024-07-21T06:02:27.000Z</published>
    <updated>2024-07-26T22:28:27.000Z</updated>
    
    <content type="html"><![CDATA[<p>简单了解一下docker client的常用命令，更多命令可以查看<a href="https://www.runoob.com/docker/docker-command-manual.html">完整命令列表</a>。不同命令之间的关系，可以查看下图。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/07/ae4ba91e6c24459450a04bf77a3208e4.png" alt="image.png"></p><p>如果你看不到图片，不用担心，后面对每个命令进行介绍的时候，会提到它们的作用的。</p><p>本文所述的所有命令都是<code>docker-cli</code>的命令（cli是client的缩写），它们本质上都是在和主机上的 docker engine 通信，获取结果。最终容器的运行管理，实际上都是由作为服务端的 docker engine 来处理的。所以在运行 docker-cli 命令之前，需要保证 docker engine  已经启动。一般的Linux系统上，都可以使用 systemctl 命令管理 docker engine 的服务。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure><h1 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h1><p>docker的帮助命令和基本信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker --<span class="built_in">help</span>  <span class="comment"># 查看帮助命令</span></span><br><span class="line">docker version <span class="comment"># 查看docker信息，会显示client和server的版本</span></span><br><span class="line">docker info <span class="comment"># 显示当前docker的详细信息，包括有几个容器等</span></span><br></pre></td></tr></table></figure><h1 id="镜像相关命令"><a href="#镜像相关命令" class="headerlink" title="镜像相关命令"></a>镜像相关命令</h1><h2 id="docker-pull"><a href="#docker-pull" class="headerlink" title="docker pull"></a>docker pull</h2><p>用于下载镜像，当不指定tag的时候，会默认拉取latest版本（大部分镜像都会维护一个tag为latest的镜像）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull 镜像名:tag</span><br></pre></td></tr></table></figure><p>如果你不知道某个镜像是否存在，可以用docker search命令来查询它。</p><h2 id="docker-images"><a href="#docker-images" class="headerlink" title="docker images"></a>docker images</h2><p>查看当前本地已有的镜像的相关信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/07/71334bf9b04c97e757138e3b39c651bd.png" alt="image.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">❯ docker images</span><br><span class="line">REPOSITORY                TAG           IMAGE ID       CREATED         SIZE</span><br><span class="line">musnows/kook-ticket-bot   0.3.0         3033f09a7bb3   5 days ago      163MB</span><br><span class="line">musnows/kook-ticket-bot   latest        75f153e944da   5 days ago      163MB</span><br><span class="line">b3log/siyuan              v3.1.0        6498791aa636   2 weeks ago     225MB</span><br><span class="line">bitnami/minio             latest        02f75f2c3432   2 weeks ago     271MB</span><br><span class="line">neosmemo/memos            latest        5ddfb6978c7f   6 weeks ago     62.7MB</span><br></pre></td></tr></table></figure><p>另外，可以使用<code>docker images prune</code>快速删除所有未被容器使用且没有被tag的<strong>镜像层</strong>，如果想删除所有未被使用的镜像层，可以在这个命令后加上<code>-a</code>选项。</p><p>为什么需要清理呢？如果本地存在镜像层损坏，可能会影响新容器的构建和创建操作。可以尝试使用这个命令清理一下本地的镜像层。镜像层文件一般存放在<code>/var/lib/docker/overlay2</code>中。</p><p>注意，prune选项只是删除没有被使用的镜像层，但有些镜像的tag为none，但本身会和其他镜像共用镜像层，此时使用prune是不会清理掉这些镜像的。如果你想清理掉tag为none的镜像，可以使用如下命令快速清除。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images -f <span class="string">&quot;dangling=true&quot;</span> -q | xargs docker rmi</span><br></pre></td></tr></table></figure><h2 id="docker-tag"><a href="#docker-tag" class="headerlink" title="docker tag"></a>docker tag</h2><p>该命令用于给一个已有的镜像设置一个tag（设置镜像的名字）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker tag 镜像id 命名镜像</span><br></pre></td></tr></table></figure><p>每个docker镜像都有个标识（镜像的完整名字），通常由仓库名、镜像名和标签组成。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">仓库名/镜像上传者名/镜像本身名字:tag</span><br></pre></td></tr></table></figure><p>且为了区分镜像的上传者，镜像名中通常以<strong>斜杠</strong>来分割镜像上传者和镜像本身的名字。默认情况下，使用的仓库都是官方的docker hub，所以镜像的<strong>仓库名会被省略</strong>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">musnows/ImagesName:tag </span><br></pre></td></tr></table></figure><p>如果你使用了docker的镜像源（比如<a href="https://docker.nju.edu.cn/">南京大学</a>的镜像源），那么拉取下来的镜像中就会有仓库的名字。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker.nju.edu.cn/jellyfin/jellyfin:latest</span><br></pre></td></tr></table></figure><h2 id="docker-rmi"><a href="#docker-rmi" class="headerlink" title="docker rmi"></a>docker rmi</h2><p>可以使用<code>docker rmi</code>命令来删除某个镜像，需要提供镜像的<code>名字:tag</code>或者镜像的ID。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker rmi 镜像ID</span><br><span class="line">docker rmi 镜像名:tag</span><br></pre></td></tr></table></figure><p>如果要删除某个镜像，这个镜像必须没有关联的容器（需要先把关联的容器删除），才能被删除。否则删除请求会被拒绝。当然，可以使用<code>-f</code>选项来强制删除某个镜像。</p><p>另外，如果使用<code>镜像名:tag</code>的方式删除某个镜像时，并不一定会触发删除操作。因为同一个镜像可能会被打上多个tag，这时候只删除其中一个tag，相当于取消tag的操作。如果确定需要删除这个镜像，直接使用镜像的ID来删除是更好的办法。</p><p>如下所示，可以看到同一个镜像有两个不同的tag</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">REPOSITORY   TAG       IMAGE ID       CREATED        SIZE</span><br><span class="line">t            1         fa725ab19121   4 hours ago    432MB</span><br><span class="line">t            2         fa725ab19121   4 hours ago    432MB</span><br></pre></td></tr></table></figure><p>此时我们删除其中一个tag，可以看到返回的说明是<code>Untagged</code>，相当于是取消了对这个镜像的<code>t:1</code>这个tag。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker rmi t:1</span><br><span class="line">Untagged: t:1</span><br></pre></td></tr></table></figure><p>把<code>t:2</code>这个tag也给删除，才会真正删除镜像</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ docker rmi t:2 -f</span><br><span class="line">Untagged: t:2</span><br><span class="line">Deleted: sha256:fa725ab19121bd9c5628757049f5da5d4002f1ee10e41c4a87c33ab343d4ff28</span><br></pre></td></tr></table></figure><h2 id="docker-inspect"><a href="#docker-inspect" class="headerlink" title="docker inspect"></a>docker inspect</h2><p>这个命令用于查询某个容器&#x2F;镜像的元数据，会以json格式返回元数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect [OPTIONS] NAME|ID [NAME|ID...]</span><br></pre></td></tr></table></figure><h2 id="docker-save-x2F-load"><a href="#docker-save-x2F-load" class="headerlink" title="docker save&#x2F;load"></a>docker save&#x2F;load</h2><p>docker save和docker load命令相对应，用于将一个镜像打包成tar格式的文件，方便在不同主机上进行传输。其他主机可以用load命令加载一个导出的镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打包本地镜像</span></span><br><span class="line">docker save linux:monitor -o linux-monitor.tar</span><br><span class="line"><span class="comment"># 在其他主机上加载镜像</span></span><br><span class="line">docker load -i linux-monitor.tar</span><br></pre></td></tr></table></figure><p>为了减少导出镜像的文件大小，还可以用gzip命令来压缩导出的镜像包的体积</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通过管道，将docker save的结果传输给gzip工具，进行压缩</span></span><br><span class="line">docker save &lt;myimage&gt;:&lt;tag&gt; | gzip &gt; &lt;myimage&gt;_&lt;tag&gt;.tar.gz</span><br><span class="line"><span class="comment"># gzip解压之后，通过管道传输给docker load命令</span></span><br><span class="line">gunzip -c &lt;myimage&gt;_&lt;tag&gt;.tar.gz | docker load</span><br></pre></td></tr></table></figure><h2 id="【重点】docker-build"><a href="#【重点】docker-build" class="headerlink" title="【重点】docker build"></a>【重点】docker build</h2><p>docker build命令用于从docker file中构建一个docker的镜像，参考<a href="https://www.runoob.com/docker/docker-build-command.html">菜鸟教程</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build [OPTIONS] PATH | URL | -</span><br></pre></td></tr></table></figure><p>OPTIONS说明：</p><ul><li>–build-arg&#x3D;[] :设置镜像创建时的变量；</li><li>–cpu-shares :设置 cpu 使用权重；</li><li>–cpu-period :限制 CPU CFS周期；</li><li>–cpu-quota :限制 CPU CFS配额；</li><li>–cpuset-cpus :指定使用的CPU id；</li><li>–cpuset-mems :指定使用的内存 id；</li><li>–disable-content-trust :忽略校验，默认开启；</li><li>-f :指定要使用的Dockerfile路径；</li><li>–force-rm :设置镜像过程中删除中间容器；</li><li>–isolation :使用容器隔离技术；</li><li>–label&#x3D;[] :设置镜像使用的元数据；</li><li>-m :设置内存最大值；</li><li>–memory-swap :设置Swap的最大值为内存+swap，”-1”表示不限swap；</li><li><strong>–no-cache :创建镜像的过程不使用缓存</strong>；</li><li>–pull :尝试去更新镜像的新版本；</li><li>–quiet, -q :安静模式，成功后只输出镜像 ID；</li><li>–rm :设置镜像成功后删除中间容器；</li><li>–shm-size :设置&#x2F;dev&#x2F;shm的大小，默认值是64M；</li><li>–ulimit :Ulimit配置。</li><li>–squash :将 Dockerfile 中所有的操作压缩为一层。</li><li>–tag, -t: 镜像的名字及标签，通常 name:tag 或者 name 格式；可以在一次构建中为一个镜像设置多个标签。</li><li>–network: 默认 default。在构建期间设置RUN指令的默认网络模式；</li></ul><p>示例1：使用<code>.</code>当前路径下的dockerfile构建镜像，tag为<code>runoob/ubuntu:v1</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t runoob/ubuntu:v1 .</span><br></pre></td></tr></table></figure><p>示例2：使用指定路径<code>/path/to/a/Dockerfile</code>中的dockerfile，从<code>.</code>当前目录中<strong>指定上下文</strong>，【重点】Docker需要拷贝的内容是以命令中指定的<code>.</code><strong>当前目录</strong>为PWD进行dockerfile内相对路径计算的，构建镜像。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -f /path/to/a/Dockerfile .</span><br></pre></td></tr></table></figure><p>示例3：使用<code>-f</code>手动指定dockerfile的名字为<code>base.dockerfile</code>，并设置了docker镜像的默认网络模式是host，这个网络模式下docker容器会直接使用宿主机的端口。</p><p>如果没有指定dockerfile文件，默认会<strong>忽略大小写</strong>在当前目录下搜索名为<code>dockerfile</code>的文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build --network host -f base.dockerfile .</span><br></pre></td></tr></table></figure><p>构建过程中可能遇到一些问题，比较常见的是和构建缓存还有上下文相关的，示例如下，报错中提到了<code>/install/grpc</code>文件不存在，这是因为当前指定的docker build上下文中没有办法被COPY到这个文件，需要检查你指定的docker构建上下文以及dockerfile中的相对路径是否正确。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ERROR: failed to solve: failed to compute cache key: failed to calculate checksum of ref 15c2f5bc-d5d7-4c81-9b8d-35af99494b3e::iuik026yg20qwxl8dajjkigru: <span class="string">&quot;/install/grpc&quot;</span>: not found</span><br></pre></td></tr></table></figure><p>还有另外一个问题是我在构建一个新镜像时遇到的，出现的场景在于上一次构建被我手动CTRL+C终止了，再次构建就会出现错误（即便build命令加上<code>--no-cache</code>选项也会失败）。这种大概率就是缓存损坏了，可以用如下方式清理一下本地的构建缓存。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除损害的构建缓存</span></span><br><span class="line">docker builder prune</span><br><span class="line"><span class="comment"># 删除所有未被使用的中间容器</span></span><br><span class="line">docker container prune</span><br><span class="line"><span class="comment"># 删除所有未被使用的镜像层</span></span><br><span class="line">docker image prune</span><br><span class="line"><span class="comment"># 删除所有tag为none的镜像</span></span><br><span class="line">docker images -f <span class="string">&quot;dangling=true&quot;</span> -q | xargs docker rmi</span><br></pre></td></tr></table></figure><h1 id="容器相关命令"><a href="#容器相关命令" class="headerlink" title="容器相关命令"></a>容器相关命令</h1><h2 id="docker-ps"><a href="#docker-ps" class="headerlink" title="docker ps"></a>docker ps</h2><p>查看当前正在运行的容器。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/07/7212bae043d3d720edc43cd614582cab.png" alt="image.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">❯ docker ps    </span><br><span class="line">CONTAINER ID   IMAGE                   COMMAND                  CREATED        STATUS          PORTS                                                                                      NAMES</span><br><span class="line">04fec1b6c345   b3log/siyuan:v3.1.0     &quot;/opt/siyuan/kernel …&quot;   2 weeks ago    Up 16 minutes   0.0.0.0:10060-&gt;6806/tcp, :::10060-&gt;6806/tcp, 0.0.0.0:10061-&gt;6808/tcp, :::10061-&gt;6808/tcp   siyuan</span><br><span class="line">69328f37ac26   bitnami/minio:latest    &quot;/opt/bitnami/script…&quot;   2 weeks ago    Up 16 minutes   0.0.0.0:9000-9001-&gt;9000-9001/tcp, :::9000-9001-&gt;9000-9001/tcp                              minio</span><br><span class="line">612786ac157c   neosmemo/memos:latest   &quot;./memos&quot;                5 weeks ago    Up 16 minutes   0.0.0.0:14710-&gt;5230/tcp, :::14710-&gt;5230/tcp                                                memos</span><br><span class="line">ffbdfb02af22   gitea/gitea:1.21.4      &quot;/usr/bin/entrypoint…&quot;   5 months ago   Up 16 minutes   127.0.0.1:2222-&gt;22/tcp, 0.0.0.0:30000-&gt;3000/tcp, :::30000-&gt;3000/tcp                        gitea                 </span><br></pre></td></tr></table></figure><p>使用<code>-a</code>选项可以看到所有容器，包括创建了但没有运行的容器（停止状态的容器）。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/07/08a7b9e5f2885524380a9ed4b756fabb.png" alt="image.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">❯ docker ps -a</span><br><span class="line">CONTAINER ID   IMAGE                          COMMAND                  CREATED        STATUS                      PORTS                                                                                      NAMES</span><br><span class="line">940156496e93   musnows/linux-monitor:latest   &quot;/bin/bash&quot;              24 hours ago   Exited (255) 13 hours ago                                                                                              linux_monitor</span><br><span class="line">04fec1b6c345   b3log/siyuan:v3.1.0            &quot;/opt/siyuan/kernel …&quot;   2 weeks ago    Up 16 minutes               0.0.0.0:10060-&gt;6806/tcp, :::10060-&gt;6806/tcp, 0.0.0.0:10061-&gt;6808/tcp, :::10061-&gt;6808/tcp   siyuan</span><br><span class="line">69328f37ac26   bitnami/minio:latest           &quot;/opt/bitnami/script…&quot;   2 weeks ago    Up 16 minutes               0.0.0.0:9000-9001-&gt;9000-9001/tcp, :::9000-9001-&gt;9000-9001/tcp                              minio</span><br><span class="line">612786ac157c   neosmemo/memos:latest          &quot;./memos&quot;                5 weeks ago    Up 16 minutes               0.0.0.0:14710-&gt;5230/tcp, :::14710-&gt;5230/tcp                                                memos</span><br><span class="line">e4c3decfa29d   halohub/halo:2.11.3            &quot;sh -c &#x27;java $&#123;JVM_O…&quot;   5 months ago   Exited (255) 5 months ago   0.0.0.0:18000-&gt;8090/tcp, :::18000-&gt;8090/tcp                                                halo</span><br><span class="line">ffbdfb02af22   gitea/gitea:1.21.4             &quot;/usr/bin/entrypoint…&quot;   5 months ago   Up 16 minutes               127.0.0.1:2222-&gt;22/tcp, 0.0.0.0:30000-&gt;3000/tcp, :::30000-&gt;3000/tcp                        gitea</span><br><span class="line">642c1a6c90d2   mysql:5.7                      &quot;docker-entrypoint.s…&quot;   5 months ago   Exited (255) 5 months ago   33060/tcp, 0.0.0.0:13306-&gt;3306/tcp, :::13306-&gt;3306/tcp                                     mysql57</span><br></pre></td></tr></table></figure><p>所有使用<strong>容器名</strong>操作的命令，都可以使用容器的<code>CONTAINER ID</code>进行操作，使用容器的<code>container id</code>是更好的选择，因为它是每个容器唯一的，不会重复。</p><h2 id="docker-start-x2F-stop-x2F-restart"><a href="#docker-start-x2F-stop-x2F-restart" class="headerlink" title="docker start&#x2F;stop&#x2F;restart"></a>docker start&#x2F;stop&#x2F;restart</h2><p>用于对某个容器进行操作，启动、停止、容器容器。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker start 容器名   <span class="comment"># 运行</span></span><br><span class="line">docker stop 容器名    <span class="comment"># 停止</span></span><br><span class="line">docker restart 容器名 <span class="comment"># 重启</span></span><br></pre></td></tr></table></figure><h2 id="docker-rm"><a href="#docker-rm" class="headerlink" title="docker rm"></a>docker rm</h2><p>这个命令用于删除某个容器。容器必须是停止状态才能被删除。同样可以使用<code>-f</code>选项强制删除某个正在运行的容器。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">rm</span> 容器名</span><br><span class="line">docker <span class="built_in">rm</span> 容器ID</span><br></pre></td></tr></table></figure><h2 id="docker-stats"><a href="#docker-stats" class="headerlink" title="docker stats"></a>docker stats</h2><p>这个命令可以查看当前正在运行的容器状态，包括容器占用的内存&#x2F;CPU百分比等性能信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker stats       <span class="comment"># 查看所有容器的运行状态</span></span><br><span class="line">docker stats 容器名 <span class="comment"># 查看某个容器的运行状态</span></span><br></pre></td></tr></table></figure><h2 id="docker-exec"><a href="#docker-exec" class="headerlink" title="docker exec"></a>docker exec</h2><p>这个命令用于进入某个正在运行的容器的终端，或者说是在某个容器中执行命令，<code>-it</code>选项代表以命令行交互与容器通信。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it 容器名 需要执行的命令</span><br></pre></td></tr></table></figure><p>比如我们想进入<code>linux_monitor</code>容器的终端，使用的是如下命令。这个命令本质上是在容器内执行<code>/bin/bash</code>命令，相当于启动了一个容器内的bash终端。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it linux_monitor /bin/bash</span><br></pre></td></tr></table></figure><p>如果我们想进入mysql容器内的mysql命令行，可以使用如下命令，相当于在名为<code>mysql57</code>的容器的终端中执行了<code>mysql -uroot -p123456</code>命令，这样能直接进入容器内的mysql终端。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it mysql57 mysql -uroot -p123456</span><br></pre></td></tr></table></figure><p>如下所示，我们使用这个命令直接进入了mysql容器内的终端</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">❯ docker exec -it mysql57 mysql -uroot -p123456</span><br><span class="line">mysql: [Warning] Using a password on the command line interface can be insecure.</span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection id is 2</span><br><span class="line">Server version: 5.7.44 MySQL Community Server (GPL)</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2023, Oracle and/or its affiliates.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and/or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type &#x27;help;&#x27; or &#x27;\h&#x27; for help. Type &#x27;\c&#x27; to clear the current input statement.</span><br><span class="line"></span><br><span class="line">mysql&gt; </span><br></pre></td></tr></table></figure><p>进入容器后，执行exit命令即会退出容器内的终端，回到宿主机的终端中。</p><p>注意，只有一个容器处于运行状态，才能使用 docker exec 进入到容器内终端中。</p><h2 id="docker-attach"><a href="#docker-attach" class="headerlink" title="docker attach"></a>docker attach</h2><p>想直接进入容器终端，还有另外一个命令。这个命令会直接进入容器内的终端。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker attach 容器名</span><br></pre></td></tr></table></figure><p>对比一下attach和exec命令</p><ul><li>attach 不会在容器中创建进程执行额外的命令，只是附着到容器上。</li><li>exec 会在运行的容器上<strong>创建进程执行新的命令</strong>。</li></ul><p>如果docker容器是使用<code>/bin/bash</code>作为shell启动的，则可以使用attach来直接访问它。如果不是，则需要在容器内创建一个bash的进程。</p><h2 id="docker-cp"><a href="#docker-cp" class="headerlink" title="docker cp"></a>docker cp</h2><p>从容器内拷贝文件到宿主机上，也可以从宿主机拷贝文件到容器内。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">cp</span> 容器<span class="built_in">id</span>:容器内路径 宿主机上的目的路径</span><br><span class="line">docker <span class="built_in">cp</span> 宿主机上的目的路径 容器<span class="built_in">id</span>:容器内路径</span><br></pre></td></tr></table></figure><h2 id="【重点】docker-run"><a href="#【重点】docker-run" class="headerlink" title="【重点】docker run"></a>【重点】docker run</h2><p>docker run 命令用于从镜像中创建一个容器，命令行参数参考<a href="https://www.runoob.com/docker/docker-run-command.html">菜鸟教程</a>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run [OPTIONS] IMAGE [COMMAND] [ARG...]</span><br></pre></td></tr></table></figure><p>OPTIONS说明：</p><ul><li><strong>-a stdin:</strong> 指定标准输入输出内容类型，可选 STDIN&#x2F;STDOUT&#x2F;STDERR 三项；</li><li><strong>-d:</strong> 后台运行容器，并返回容器ID；</li><li><strong>-i:</strong> 以交互模式运行容器，通常与 -t 同时使用；</li><li><strong>-t:</strong> 为容器重新分配一个伪输入终端，通常与 -i 同时使用；</li><li><strong>-P:</strong> 随机端口映射，容器内部端口<strong>随机</strong>映射到主机的端口</li><li><strong>-p:</strong> 指定端口映射，格式为：主机(宿主)端口:容器端口</li><li><strong>–name&#x3D;”nginx-lb”:</strong> 为容器指定一个名称；</li><li><strong>–dns 8.8.8.8:</strong> 指定容器使用的DNS服务器，默认和宿主一致；</li><li><strong>–dns-search example.com:</strong> 指定容器DNS搜索域名，默认和宿主一致；</li><li><strong>-h “mars”:</strong> 指定容器的hostname；</li><li><strong>-e username&#x3D;”ritchie”:</strong> 设置环境变量；</li><li><strong>–env-file&#x3D;[]:</strong> 从指定文件读入环境变量；</li><li><strong>–cpuset&#x3D;”0-2” or –cpuset&#x3D;”0,1,2”:</strong> 绑定容器到指定CPU运行；</li><li><strong>-m</strong>:设置容器使用内存最大值；</li><li><strong>–net&#x3D;”bridge”:</strong> 指定容器的网络连接类型，支持 bridge&#x2F;host&#x2F;none&#x2F;container: 四种类型</li><li><strong>–link&#x3D;[]:</strong> 添加链接到另一个容器；</li><li><strong>–expose&#x3D;[]:</strong> 开放一个端口或一组端口；</li><li><strong>–volume , -v:</strong> 绑定一个卷</li><li><strong>–rm</strong>：当容器内程序退出的时候，自动删除容器，用于测试运行。不能和<code>-d</code>一起使用。</li></ul><p>示例：使用nginx镜像创建一个容器，并在后台运行。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">--name mynginx </span><br><span class="line">nginx:latest</span><br></pre></td></tr></table></figure><p>当默认创建一个容器的时候，docker会给这个容器创建一个卷（volumes），就好比虚拟机的虚拟磁盘。当某个容器被删除，和它关联的卷也就失效了。所以，如果你在容器内部对容器运行的程序做了配置上的修改，删除这个容器后就会失效。</p><p>为了避免这种情况，我们一般都会将容器中的某个存放配置文件和数据的路径给<strong>映射</strong>到宿主机，这样容器对这个路径的修改就会直接写入到宿主机的文件系统中（持久化），即便容器删除也不会影响。</p><p>比如nginx的配置文件都在<code>/etc/nginx</code>中，我们可以把这个目录映射到宿主机的<code>/root/docker/nginx</code>路径中（冒号左侧是宿主机的路径，冒号右侧是容器内的路径），这样就可以直接通过修改宿主机中的路径来修改容器中nginx的配置，同时nginx容器的配置也实现了持久化，即便容器删除也不会丢失。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">--name mynginx \</span><br><span class="line">-v /root/docker/nginx:/etc/nginx</span><br><span class="line">nginx:latest</span><br></pre></td></tr></table></figure><p>当前状态下我们没有设置这个容器的网络环境，一般情况下，容器都会以默认的bridge桥接网络链接到宿主机中，即容器是通过宿主机的网卡做桥接（类似于虚拟机的NAT模式）上网的。</p><p>比如上方配置的nginx容器，它并不会对宿主机的80&#x2F;443端口收到的请求做任何操作，因为它监听的是容器内的80和443端口，而这两个端口并没有映射到宿主机上。如果我们想让容器能处理宿主机收到的数据，则需要进行容器的<strong>端口映射</strong>。</p><p>如下所示，我们使用了两个<code>-p</code>选项，分别映射了80端口和443端口到宿主机的80和443端口（冒号左侧是宿主机的端口，右侧是容器内的端口），此时使用的是默认的bridge桥接方式接通了容器和宿主机的网络端口。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">--name mynginx \</span><br><span class="line">-v /root/docker/nginx:/etc/nginx \</span><br><span class="line">-p 80:80 \</span><br><span class="line">-p 443:443 \</span><br><span class="line">nginx:latest</span><br></pre></td></tr></table></figure><p>当然，也可以直接用host网络模式运行nginx容器，这样nginx默认绑定的80和443就是直接绑定的宿主机的端口了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">--name mynginx \</span><br><span class="line">-v /root/docker/nginx:/etc/nginx \</span><br><span class="line">--net=&quot;host&quot; \</span><br><span class="line">nginx:latest</span><br></pre></td></tr></table></figure><p>关于docker run中<code>-v</code>命令和<code>--mount</code>命令以及绑定数据卷的说明，请参考<a href="https://blog.musnow.top/posts/2851039659">docker volume</a>中的介绍。</p><h2 id="docker-volume"><a href="#docker-volume" class="headerlink" title="docker volume"></a>docker volume</h2><p>volume是docker中的数据卷，可以用下方的命令来操作这些数据卷。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker volume <span class="built_in">ls</span>               <span class="comment"># 查看所有数据卷</span></span><br><span class="line">docker volume <span class="built_in">rm</span> 数据卷ID       <span class="comment"># 删除某个卷</span></span><br><span class="line">docker volume inspect 数据卷ID  <span class="comment"># 查看某个数据卷的详细信息</span></span><br><span class="line">docker volume prune            <span class="comment"># 删除没有使用的数据卷</span></span><br><span class="line">docker volume create 数据卷名字  <span class="comment"># 创建卷</span></span><br></pre></td></tr></table></figure><p>关于数据卷的知识，可以看<a href="https://blog.musnow.top/posts/2851039659">docker volume</a>的介绍。</p><h2 id="docker-logs"><a href="#docker-logs" class="headerlink" title="docker logs"></a>docker logs</h2><p>docker logs可以查看某个容器的日志输出，用于定位容器运行产生的问题。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker logs 容器ID</span><br><span class="line">docker logs 容器名</span><br></pre></td></tr></table></figure><p>比较常用的选项就是<code>--tail</code>，用于显示最新的几行命令，避免容器内的日志过长，打印耗时太久。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 只显示最新20行的日志</span></span><br><span class="line">docker logs 容器ID --<span class="built_in">tail</span>=20</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Docker学习第2话，docker-cli的基本命令</summary>
    
    
    
    <category term="编程学习" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="Docker学习" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/Docker%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Docker" scheme="https://blog.musnow.top/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>【Docker】Docker学习01 | 什么是docker？</title>
    <link href="https://blog.musnow.top/posts/1177093765/"/>
    <id>https://blog.musnow.top/posts/1177093765/</id>
    <published>2024-07-21T06:01:27.000Z</published>
    <updated>2024-07-26T15:18:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>因为本人没有学习过docker，虽然部署过很多镜像，但是对于docker底层的实现一概不知。趁学习一个新项目的契机，将docker的相关概念了解清楚。</p><blockquote><p>安装docker的教程请查看 <a href="https://blog.musnow.top/posts/2069190154">Linux主机安装docker</a>。</p></blockquote><p>如果你想和我一起学习docker，请关注本站的<code>编程学习/Docker学习</code>专栏。后续和docker概念相关的内容都会放到这个分类里面，而折腾docker镜像和开源软件的内容则保留在<code>编程学习/Docker真好玩</code>中。</p><h1 id="1-docker和虚拟机的区别"><a href="#1-docker和虚拟机的区别" class="headerlink" title="1.docker和虚拟机的区别"></a>1.docker和虚拟机的区别</h1><h2 id="1-1-简述"><a href="#1-1-简述" class="headerlink" title="1.1 简述"></a>1.1 简述</h2><p>虚拟机和Docker都是在原有主机的基础上添加了抽象层，通过这些抽象层来实现特定的功能。</p><blockquote><p>这就好比C语言中的文件操作实际上封装了Linux和Windows的文件系统调用接口。这一层封装就是一层抽象层，通过封装，C语言实现了跨平台的统一文件函数接口。</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/07/1eead7f84081f888a29a54f02d70918e.png" alt="image.png"></p><p>虚拟机：虚拟机是通过Hypervisor（虚拟机管理系统）来虚拟出网卡、CPU、内存等虚拟硬件，再在其上方建立一个虚拟机。每个虚拟机都有独立的操作系统，都有自己独立的系统内核。</p><p>docker容器：容器是利用linux下的<strong>namespace</strong>，将文件系统、进程、网络、设备等资源进行一定隔离，再使用<strong>cgroup</strong>对容器权限、资源进行限制（比如限制某个容器只能占用最多512MB的内存），最终让容器之间互不影响，容器无法影响宿主机。这些操作都是由宿主机的<code>Docker Engine</code>来实现和管理的。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/07/95345379d7ce18153ab8f81f1cb8fdcf.png" alt="image.png"></p><blockquote><p>上图源自 <a href="https://docs.microsoft.com/en-us/virtualization/windowscontainers/deploy-containers/media/docker-on-linux.png">微软官方文档</a></p></blockquote><h2 id="1-2-什么是GuestOS"><a href="#1-2-什么是GuestOS" class="headerlink" title="1.2 什么是GuestOS"></a>1.2 什么是GuestOS</h2><p>GuestOS（Guest Operating System）是指在虚拟化环境中运行的操作系统。</p><p>在虚拟化技术中，物理服务器上的虚拟化软件（如VMware、KVM、VirtualBox等）可以创建一个或多个虚拟的计算环境，每个环境都可以独立运行一个操作系统，这个操作系统就是 GuestOS。</p><h2 id="1-3-什么是namespace"><a href="#1-3-什么是namespace" class="headerlink" title="1.3 什么是namespace"></a>1.3 什么是namespace</h2><p>好比C++中的namespace，Linux内核中的namespace可以限制某个进程能“看到”的资源。</p><p>它是一种将全局系统资源划分为独立单元的资源隔离方法，对文件系统、进程、网络、设备等资源进行隔离，使得在不同命名空间中运行的进程看到的资源是不同的，彼此之间相互隔离，容器内的进程认为它们运行在独立的环境中，而不会看到主机上其他容器的影响。</p><h2 id="1-4-什么是cgroup"><a href="#1-4-什么是cgroup" class="headerlink" title="1.4 什么是cgroup"></a>1.4 什么是cgroup</h2><p>cgroup是一种用于限制和隔离一个或一组进程对系统资源使用的机制，将一组进程组织在一个控制组中，为这个控制组分配特定的资源限制与优先级，包括 CPU资源、内存、网络等。确保容器在共享主机上合理利用系统资源，避免资源竞争和过度使用。</p><h1 id="2-docker的优势"><a href="#2-docker的优势" class="headerlink" title="2.docker的优势"></a>2.docker的优势</h1><p>docker因自身的特性，相比虚拟机有很多优势：</p><ol><li>运行在容器上的Docker的程序，直接使用的都是宿主机的硬件资源，<strong>而且Docker比虚拟机有更少的抽象层</strong>，因此在cpu、内存、利用率上，Docker将会在效率上具有更大的优势。(效率高)</li><li>Docker直接利用宿主机的系统内核，避免了虚拟机启动时所需要的系统引导时间和操作系统运行的资源消耗，利用Docker能够在几秒钟之内启动大量的容器，是虚拟机无法办到的。快速启动低资源消耗的优点，使Docker在弹性云平台自动运维系统方面具有很好的应用场景。（速度快）</li><li>容器的启动时间是秒级的，大量节约开发、测试、部署的时间。而且因为Docker以统一的方式进行操作和部署，更方便自动化持续集成&#x2F;持续部署。</li><li>还有一个非常关键的点，就是Docker能够高效地部署和扩容，Docker容器几乎可以在任意平台上运行，包括虚拟机、物理机、公有云、私有云、个人电脑、服务器等，这种兼容性，可以让用户把一个应用程序从一个平台直接迁移到另外一个平台。（部署简单）</li></ol><p>但是，<strong>虚拟机的安全性比容器好一些</strong>，docker与宿主机共享内核、文件系统等资源，更有可能对其他容器、宿主机造成影响。</p><h1 id="3-docker的基本组成"><a href="#3-docker的基本组成" class="headerlink" title="3.docker的基本组成"></a>3.docker的基本组成</h1><h2 id="3-1-简述"><a href="#3-1-简述" class="headerlink" title="3.1 简述"></a>3.1 简述</h2><p>docker包括客户端docker client、服务端docker host，以及远程镜像仓库docker registry。</p><p>平时我们使用的docker命令（包括<code>docker-compose</code>工具），其实操作的都是 <code>docker cli</code> 客户端，它的作用是把这些命令发送给本地的 <code>docker.sock</code> 服务端，让服务端来执行docker容器的创建、运行、维护等操作。</p><ul><li>镜像 Images：可以认为是一个docker构建环境的系统模板，镜像中包括相关的依赖项、项目文件、如何开始运行等信息。镜像是由一层一层的文件系统构建而成的，每一层文件系统是下一层的增量变化。每个镜像都是静态的，被创建后就无法改变；</li><li>容器 Container：容器是某个正在运行的镜像，是镜像的实体。同一个镜像可以创建出多个不同的容器，且不同容器之间通过Linux内核的namespace和cgroup等技术实现相互隔离，拥有自己独立的文件系统、进程地址空间、网络空间等。</li></ul><p>有了镜像，我们可以在不同的Linux主机上，创建容器来统一项目运行的环境，避免在不同系统上安装项目依赖项的繁琐。这可以降低项目部署的难度，提高效率。同时，让项目在容器中运行，也能减少对宿主机的影响，可以避免出现<strong>两个不同的项目依赖项冲突</strong>而无法运行的情况。</p><p>本项目使用docker，就是为了实现不同机器上运行环境的统一，毕竟整个项目涉及到了很多依赖项，如果一个一个安装的话，较为麻烦且容易出错。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/07/9ed214ba2ac9e206a396c4c4f361eec1.png" alt="image.png"></p><h2 id="3-2-docker镜像是什么？"><a href="#3-2-docker镜像是什么？" class="headerlink" title="3.2 docker镜像是什么？"></a>3.2 docker镜像是什么？</h2><p><strong>Docker 镜像</strong> 是一个特殊的文件系统，除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（如匿名卷、环境变量、用户等）。镜像 <strong>不包含</strong> 任何动态数据，其内容在构建之后也不会被改变。</p><p>我们都知道，操作系统分为 <strong>内核</strong> 和 <strong>用户空间</strong>。对于 <code>Linux</code> 而言，内核启动后，会挂载 <code>root</code> 文件系统为其提供用户空间支持。而 <strong>Docker 镜像</strong>（<code>Image</code>），就相当于是一个 <code>root</code> 文件系统。比如官方镜像 <code>ubuntu:18.04</code> 就包含了完整的一套 Ubuntu 18.04 最小系统的 <code>root</code> 文件系统。</p><p>Docker镜像是由<strong>多层</strong>的文件系统构建而成的，<strong>每一层文件系统是下一层的增量变化</strong>。对于Ubuntu&#x2F;CentOS这种基础镜像而言，它们一般都只有一层。但对于基于这两个镜像构建的其他Docker镜像，则会出现多层，具体取决于镜像构建使用的DockerFile。</p><h2 id="3-3-docker容器是什么？"><a href="#3-3-docker容器是什么？" class="headerlink" title="3.3 docker容器是什么？"></a>3.3 docker容器是什么？</h2><p>容器是镜像的实体。</p><p>容器在运行的时候，会在镜像文件的<strong>只读层</strong>上方创建一个<strong>读写层</strong>，并在这个读写层中进行文件的读写和运行。同时容器也可以暴露出端口，或与宿主机的某个文件&#x2F;文件路径绑定，来对外提供网络服务，和数据的持久化。</p><h1 id="4-docker-run的运行过程"><a href="#4-docker-run的运行过程" class="headerlink" title="4.docker run的运行过程"></a>4.docker run的运行过程</h1><p>当我们执行 docker run 命令创建一个容器的时候，会执行如下操作。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/07/322b5ba46918cff1844b38699a262e11.png" alt="image.png"></p><p>当本机找不到指定的镜像时，会自动去docker hub或者预先配置好的docker镜像源仓库中，查询这个镜像并进行下载（查询不到则提示“镜像不存在”）。找到指定的镜像后，会自动执行docker pull操作将镜像下载至本地，随后以该镜像，按docker run命令给定参数创建容器并运行。</p>]]></content>
    
    
    <summary type="html">Docker学习第1话，什么是docker？</summary>
    
    
    
    <category term="编程学习" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="Docker学习" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/Docker%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Docker" scheme="https://blog.musnow.top/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>【Docker】如何让子用户直接使用docker命令</title>
    <link href="https://blog.musnow.top/posts/3987990807/"/>
    <id>https://blog.musnow.top/posts/3987990807/</id>
    <published>2024-07-21T03:58:24.000Z</published>
    <updated>2024-07-27T23:26:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>通过用户组，让子用户可以直接使用docker命令。</p><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>正常情况下，使用一个子用户来执行docker命令，会出现如下提示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker ps</span><br><span class="line">permission denied while trying to connect to the Docker daemon socket at unix:///var/run/docker.sock: Get &quot;http://%2Fvar%2Frun%2Fdocker.sock/v1.45/containers/json&quot;: dial unix /var/run/docker.sock: connect: permission denied</span><br></pre></td></tr></table></figure><p>这个提示中的关键词是<code>permission denied</code>，即我们当前的子用户没有权限来执行这个命令。只有加上sudo之后才能以root身份执行这个命令。</p><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><p>子用户可以通过加入docker的用户组的方式来直接使用docker命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 用户组配置</span></span><br><span class="line">sudo groupadd docker <span class="comment"># 创建docker用户组（安装docker的时候会被创建）</span></span><br><span class="line">sudo usermod -aG docker <span class="variable">$&#123;USER&#125;</span> <span class="comment"># 当前子用户加入docker用户组</span></span><br><span class="line">sudo systemctl restart docker   <span class="comment"># 重启docker服务</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在子用户中执行如下命令</span></span><br><span class="line">newgrp docker  <span class="comment"># 用相同的用户，以docker群组的身份登录bash</span></span><br><span class="line">docker ps      <span class="comment"># 现在不用sudo也能执行docker命令了</span></span><br></pre></td></tr></table></figure><p>执行了上面这些命令后，不需要sudo子用户也可以执行docker命令啦。</p>]]></content>
    
    
    <summary type="html">通过用户组，让子用户可以直接使用docker命令。</summary>
    
    
    
    <category term="编程学习" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="Docker真好玩" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/Docker%E7%9C%9F%E5%A5%BD%E7%8E%A9/"/>
    
    
    <category term="Docker" scheme="https://blog.musnow.top/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>【思源笔记】思源笔记配置S3同步</title>
    <link href="https://blog.musnow.top/posts/1277165852/"/>
    <id>https://blog.musnow.top/posts/1277165852/</id>
    <published>2024-07-16T12:41:44.000Z</published>
    <updated>2024-07-27T23:27:31.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-写在前面"><a href="#1-写在前面" class="headerlink" title="1. 写在前面"></a>1. 写在前面</h2><p><a href="https://b3log.org/siyuan/">思源笔记</a>是一款由国人开发的本地优先，支持双链、块级的开源笔记软件。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/07/2a32b8f8acb8cc9f68982a7041db8297.png" alt="image.png"></p><p>思源笔记采用json作为数据存储格式，编辑器兼容MarkDown语法且编辑体验极佳（堪比Typora）。最重要的是，<strong>自带同步功能</strong>。它是我目前使用过的所有笔记软件中，最适合个人多设备使用的笔记软件，既能简单的实现多设备同步，又能保证数据本地化，不受在线笔记产品会员资费、云服务宕机的困扰。</p><blockquote><p>你可以在官网找到下载页面，也可以去Github Release中下载：<a href="https://b3log.org/siyuan/download.html">https://b3log.org/siyuan/download.html</a></p></blockquote><p>思源笔记基础版本提供了几乎所有笔记相关的功能，会员版本分为永久买断功能特性和年付订阅，详见<a href="https://b3log.org/siyuan/pricing.html">价格页面</a>:</p><ul><li>永久买断：在所有基础功能的基础上，提供S3&#x2F;WEBDAV同步功能（需自行使用第三方服务）</li><li>年付订阅：在永久买断的基础上，提供官方的同步功能（8GB空间），且支持图床（可以将自己的图片上传至官方图床并在博客中引用）和剪藏、微信收集箱（通过微信公众号实时记录笔记并保存到思源笔记中）功能。</li><li>注意，若年付订阅者想使用S3&#x2F;WEBDAV同步功能，<strong>则需要保持按年付费</strong>，会员失效后无法使用S3&#x2F;WEBDAV功能，若想永久使用这两个功能，也需要购买永久买断的功能特性。</li></ul><p>如下图所示，<strong>付费版本和免费版本的区别只有同步功能是否可以使用</strong>，不会存在基础笔记共的限制。个人感觉目前64元买断的价格还是非常香的（之前早鸟付费是48元）。考虑到这里标了个原价96，建议对思源笔记感兴趣，且使用后觉得确实不错的老哥趁早购买功能特性，不排除后续可能会恢复原价96的情况。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/07/bd7cf06a72bae304c8222f78bf126f94.png" alt="image.png"></p><p>另外，除非你不太想折腾S3同步（本文就是教你怎么做的），个人其实不太建议购买年付订阅：</p><ul><li>一是提供的同步空间有点小（社区里不少用户反馈认为8GB太少了，虽然对于我来说是够用）；</li><li>二是S3的配置并不算麻烦，而官方提供的同步功能和S3同步基本没有体验差异。只要敢于尝试配置S3，完全可以省下这笔钱。</li></ul><p>不过这里有个小提醒，不管是功能特性还是年付订阅均<strong>不支持退款</strong>，付款前请三思。</p><h2 id="2-什么是思源笔记的S3-x2F-WEBDAV同步？"><a href="#2-什么是思源笔记的S3-x2F-WEBDAV同步？" class="headerlink" title="2. 什么是思源笔记的S3&#x2F;WEBDAV同步？"></a>2. 什么是思源笔记的S3&#x2F;WEBDAV同步？</h2><h3 id="2-1-说明"><a href="#2-1-说明" class="headerlink" title="2.1. 说明"></a>2.1. 说明</h3><p>思源笔记本身是一个<strong>本地</strong>的笔记软件，提供了端到端加密的S3&#x2F;WEBDAV或官方提供的同步功能。当你安装思源笔记后，在默认的思源用户指南笔记本中，可以看到有一整个章节都是关于数据安全的描述：</p><ul><li>思源云端同步使用端到端加密，密码在本地通过内置密钥加密保存，除使用者之外的任何第三方均无法在云端获得明文数据。</li><li>加密和解密过程完全在本地设备上进行</li><li>加密算法为业界公认安全的 AES GCM；</li></ul><p>端到端加密同步功能，简单来说，就是思源笔记使用一个密钥，先在你的电脑上将需要同步的笔记内容加密成密文，然后发送给云端。当这些数据在网络中开始流动时，它们已经是加密后的内容了，最终存放在云端服务商里面的内容也是加密后的，<strong>对于不知道密钥的其他人来说，这一堆数据和乱码没有区别</strong>。在你需要同步的<strong>另外一台设备</strong>中，它会下载云端的加密内容，数据在流入这台设备之前也是一堆乱码，只能在你的设备中，通过相同的密钥才能正确解密，还原出最初的笔记内容。</p><p>这个功能的启用，意味着除非你自己知道你的数据库密钥，否则即便别人获取到了你存放在云端的全量同步数据，<strong>也无法解密内容</strong>。这样一来也完全避免了云端服务商可能存在的扫盘而带来的隐私担忧。与之对应的是，<strong>如果你忘记了你的数据库密钥</strong>，且没有进行其他备份的话，那么任何人都没有办法解密你的<strong>云端</strong>笔记数据了。</p><p>思源提供S3和WEBDAV这两个不同的云端存储服务协议进行同步。<strong>其中S3协议的可靠性和稳定性远远优于WEBDAV</strong>，除非特殊情况，否则百分百不推荐使用WEBDAV进行同步。</p><p>当你配置了S3&#x2F;WEBDAV同步之后，只需要在其他设备上使用相同的同步配置以及数据库密钥，即可以实现多设备的同步。思源提供了<strong>三种同步选项</strong>，分别是完全手动、半自动（客户端开启和关闭的时候会自动同步一次，其余时间手动同步）、自动同步（停止修改后30S自动同步一次）。</p><blockquote><p>这里推荐手机APP采用<strong>全手动</strong>模式，因为手机端界面按钮较小，极其容易误触导致意外修改一些内容，完全手动同步可以避免这些意外修改的内容被上传。电脑客户端根据您自己的需要选择半自动或全自动。另外，手机APP也可以在设置中配置为<strong>默认只读</strong>状态，这样可以避免修改笔记内容。</p></blockquote><p>但需要注意的是，思源的加密仅限于同步到云端的数据，你的<strong>笔记在设备本地是明文存储的</strong>。也就是说，如果你的设备丢失，那么任何人都可以<strong>在设备本地的硬盘中读取到你的笔记明文内容</strong>。除非你对笔记所在文件夹使用其他软件或系统功能进行了加密，比如微软的BitLocker。</p><p>作为一个本地优先的笔记软件，配置了同步后，即便没有网络，也丝毫不影响你浏览本地已有笔记内容（只不过会有一个无法同步的提示）。这一点对于我个人来说非常重要，我已经遇到过两次因为云端服务商产品协议更改或服务器访问波动导致我急需阅读笔记的时候无法阅读了。在那之后，我就把我所有的笔记内容全都转为纯本地了，包括笔记内的图片附件。</p><p>思源对大文本（超过4W字）的笔记支持也非常不错，毕竟是个本地笔记软件，性能基本取决于你的电脑配置。不过要注意尽量别把思源的工作空间放在机械硬盘上。</p><blockquote><p>我曾使用过语雀存放我计算机网络的笔记（大约5.7W字），语雀会直接卡到完全不能动弹，整个页面都卡死了。即便我过几天再上去打开那个文档，也依旧是这样。不过flowus对这种大文本支持也还算不错，不会卡死。但是flowus的免费用户直接限制成了200MB的存储空间也太抠了，我一个计算机网络笔记里面的图片和附件就不止这么多了。</p></blockquote><p>咳咳，不跑题了，回到正文。</p><h3 id="2-2-思源的同步配置和工作空间"><a href="#2-2-思源的同步配置和工作空间" class="headerlink" title="2.2. 思源的同步配置和工作空间"></a>2.2. 思源的同步配置和工作空间</h3><blockquote><p>本文将以2024-07-17可下载到的最新思源版本<code>V3.1.1</code>做演示。</p></blockquote><p>思源笔记以<code>工作空间</code>为基础，独立进行各类主题、设置、密钥、同步配置。工作空间就是你的电脑上的一个文件夹，在这个工作空间中产生的各类笔记本和附件，都会被存放到这个工作空间的文件夹中。每个工作空间之间相互独立，没有任何关联，也需要进行独立的同步配置，和obisidian的vault是同一个概念。</p><p>为了避免出现同步错误，每个工作空间不可共用S3的bucket或同一个WEBDAV的同步路径。正确配置方式是每一个工作空间<strong>独立使用</strong>一个S3同步的bucket或者WEBDAV同步目录。</p><p>另外，因为思源笔记经常会实时进行本地文件的索引，所以不能将思源笔记的工作空间文件夹选择放在坚果云、OneDrive这类会进行实时同步的同步目录中，<strong>必须将思源的工作空间文件夹存放在一个和其他任何软件都没有任何关系的文件目录中</strong>。若想同步，请使用思源笔记自带的同步功能；若想备份，思源笔记的设置中有一个<code>导出-导出DATA</code>功能，这个功能会将整个工作空间的笔记和附件全量导出为一个压缩包，可以在另外一个设备上进行导入或上传至云盘进行备份。</p><p>在你初次打开思源笔记的界面下，也会有相关的提示。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/07/92ce5419aa5e159e68dca2e1a39ca0be.png" alt="image.png"></p><p>选择工作空间文件夹的时候也会有提示，不能放在同步盘的路径中。如上文所述，在一个和其他任何软件都没有关系的独立文件夹中创建一个文件夹来存放思源笔记的工作空间，选中这个文件夹后，下方的弹窗点击确定就可以了。</p><p><strong>这只是个每次都会出现的提示</strong>，并不代表你当前选中的文件夹有这些第三方同步盘配置。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/07/7f858cb23ae59c2d46d4491f8fdabaca.png" alt="image.png"></p><h3 id="2-3-什么是S3协议？"><a href="#2-3-什么是S3协议？" class="headerlink" title="2.3. 什么是S3协议？"></a>2.3. 什么是S3协议？</h3><p>S3是一个对象存储的公共协议，目前国内主流的云服务厂商如阿里云、腾讯云、七牛云等等都会提供兼容S3协议的对象存储的服务。您可以选择任意一家您熟悉的支持对象存储的服务提供商来配置思源的S3同步，并不局限于本文举例的服务商。</p><p>如果您是第一次使用思源笔记，且没有接触过S3对象存储，个人推荐有免费额度的<strong>七牛云</strong>作为入门选择。我已经使用七牛云超过一年了，暂未遇到过收到影响的无法访问的情况，稳定性还是不错的。</p><p>几乎所有服务商的对象存储服务，都是分为两个计费项的：</p><ul><li>流量计费；</li><li>存储空间计费；</li></ul><p>存储空间计费比较好理解，就是为你存储空间占用的硬盘容量付钱。流量付费对于小白来说可能没有听说过，因为商用宽带是很贵的，所以云服务厂家为您提供服务时，需要收取带宽的流量费用。一般情况下来说，都是<strong>上传不计费（公网流入不计费），下载才计费（外网流出计费）</strong>。举个例子，您使用思源笔记，将本地的文件同步到S3时，使用的是<code>上传</code>宽带，这一部分是不计费的；而在另外一台设备上，将云端的内容同步到本地时，使用的是<code>下载</code>操作，会产生公网流出流量，这一部分就需要计费了。</p><blockquote><p>公网&#x2F;外网流出：“流出”是针对于云服务而言的，您从云服务上下载文件，对于云服务器来说是把文件发送给您的设备，数据流向是从云服务器到您的设备上的，这会产生从云服务器出去的流量，即为公网流出&#x2F;外网流出流量。</p></blockquote><p>如果您的设备不多，这部分由同步产生的下载流量费用是不高的。以我个人举例，我使用的思源笔记目前存储空间只有1GB，在七牛云产生的资费只有极低的外网流出流量的费用。</p><p>如下是2024年6月的账单，可以看到存储空间容量直接扣除了免费的额度，不用钱。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/07/e246955816ceef383e0dceb4f7c02a5c.png" alt="image.png"></p><p>外网流出流量2.68GB，扣费0.77元。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/07/58892f2e7d28d94f96bc41efa0ef47d7.png" alt="image.png"></p><p>PUT&#x2F;DELETE和GET请求都没有超过免费额度，都不用钱。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/07/9b7bc32056f81b49039199e2b4d9743a.png" alt="image.png"></p><p>还需要解释的一点是，假设您的某个工作空间A只在设备B上存在，并配置了S3同步。此时虽然没有第二个设备去访问这个S3存储桶进行<code>下载</code>同步操作，但实际上你的当前设备B也会需要去访问云端空间，下载数据库进行与本地的对比和验证操作的，这样思源才能知道本地的工作空间A已经成功同步到S3的bucket中了。<strong>所以即便您的工作空间只存在于B设备上，但依旧会产生少许的外网流出流量</strong>。</p><h2 id="3-配置思源S3同步"><a href="#3-配置思源S3同步" class="headerlink" title="3. 配置思源S3同步"></a>3. 配置思源S3同步</h2><h3 id="3-1-初始化数据仓库密钥"><a href="#3-1-初始化数据仓库密钥" class="headerlink" title="3.1. 初始化数据仓库密钥"></a>3.1. 初始化数据仓库密钥</h3><p>初次使用思源时，创建了一个工作空间后，要做的第一件事是在<code>设置-关于</code>中，初始化你的仓库密钥。思源会使用这个密钥进行端到端加密，密钥只有你当前使用的设备能知道。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/07/1003cc7ab75d392c3a727ceaf8b29f08.png" alt="image.png"></p><p>点击自动生成密钥，这里会提示您如果在其他设备上已经有工作空间时，应该选择导入密钥。而我们当前是新建的一个工作空间，需要初始化密钥，点击确定即可。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/07/3dd380d46081974cce118403a3e06d5d.png" alt="image.png"></p><p>密钥初始化完毕后，这里会显示复制密钥字符串，如果你需要在其他设备上同步这个工作空间的内容，可以在这里复制密钥，然后在另外一台设备上（比如手机app或者另外一台电脑）思源app设置的<code>设置-关于-数据仓库密钥</code>中，选择<strong>导入密钥</strong>。两台设备只有密钥一致，才能正确解密云端同步的数据。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/07/7521b39d5081c25ee529b5ccc488b8c9.png" alt="image.png"></p><h3 id="3-2-思源S3同步界面"><a href="#3-2-思源S3同步界面" class="headerlink" title="3.2. 思源S3同步界面"></a>3.2. 思源S3同步界面</h3><p>思源的S3同步界面是在<code>右上角按钮-设置-云端</code>里面的，在使用同步功能之前，需要先在<strong>账户</strong>一栏登录你的思源账户（用于验证是否购买了订阅）。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/07/2df437c04fb0dc9213678ff62a421653.png" alt="image.png"></p><p>登录了之后，云端选项就会开放，在下拉菜单中选择S3即可。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/07/480859be7370f05529b8829c01904a60.png" alt="image.png"></p><p>你可以先记住这里的几个配置条目，后文会一一说明它们的对应内容。</p><h3 id="3-3-配置七牛云KODO"><a href="#3-3-配置七牛云KODO" class="headerlink" title="3.3. 配置七牛云KODO"></a>3.3. 配置七牛云KODO</h3><p>使用浏览器打开 <a href="https://www.qiniu.com/">七牛云</a> 官网， 注册账户。</p><p>七牛云的S3对象存储服务名为KODO，在它的<a href="https://www.qiniu.com/prices/kodo">定价页面</a>，你可以看到七牛云提供了每月10GB的免费存储空间和10GB的CDN回源流量额度。对于思源笔记的用途而言，CDN是用不上的，所以这个10G的CDN回源流量额度是用不到的，<strong>但10GB的存储空间额度可以用上了</strong>。至于后续的PUT&#x2F;DELETE还有GET的免费额度可以不用管，基本是用不完的。</p><p>这里也说明了上传流量是免费的，符合前文关于S3计费项目的介绍。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/07/284ac975a2928deb82469434bd5426c0.png" alt="image.png"></p><p>另外，在这个页面也有一个<a href="https://www.qiniu.com/prices/kodo?tab=calc">价格计算器</a>，你可以根据你的存储空间容量和设备数量来估计你最终会流出多少流量以及产生的资费。思源笔记的容量大小可以打开本地工作空间的文件夹查看内部data文件夹的占用空间。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/07/db52829d391cd219ec5be752b65a4bf3.png" alt="image.png"></p><p>每个月的外网流出流量（也就是你的同步下载流量）平均到每月大概是在笔记本容量的1.5倍左右。注意：这只是个我根据个人情况<strong>猜测出来的大概比例</strong>，不代表实际情况，只用于预估价格。</p><p>如下图所示，假设你有10GB的笔记容量空间，那么外网流出流量一个月可能会需要15GB，那么每个月产生的资费是4.35元左右。这只是流出流量的费用，因为10GB的存储空间是免费的，<strong>只有超出10GB存储空间的免费额度，才需要对存储空间进行按量计费</strong>。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/07/9ca445e8b78103c7743e4aeeaae6d5a9.png" alt="image.png"></p><p>现在你已经了解定价啦，来看看怎么配置七牛云的S3同步吧。登录七牛云后，点击右上角账户旁边的控制台按钮，进入后台，点击产品与方案，选择对象存储kodo。你可以在这里选择将其钉住，这样会直接显示在侧边栏上。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/07/0706e3ee43433f31fa2789e222f35a35.png" alt="image.png"></p><p>在对象存储栏目中，点击空间管理，点击新建空间，这会创建一个bucket，也对应的思源S3同步中bucket一栏的填写项。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/07/b9463c8ecd8c05327a5155b9145cc241.png" alt="image.png"></p><p>bucket的名字根据你的喜好填写，<strong>建议填写辨识度高的名字</strong>，而不要填写一个诸如siyuan这类没有什么辨识度的名字。辨识度高的名字方便你后续创建更多bucket来对应其他思源工作空间或其他软件。</p><p>地域的选择采取就近原则，除非你人在国外，否则请不要选择非大陆地域。</p><p>访问控制选择<strong>私有</strong>，这代表只有拥有你的七牛云账户和相关密钥的软件可以访问这个bucket，其他任何人都没有办法直接访问这个bucket。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/07/384a403c846ce69b5d0437b53008dbe2.png" alt="image.png"></p><p>点击确定后，会弹出如下的提示。这里是很多新手朋友不太理解的一点，什么是测试域名？为什么有效期只有30天？实际上，这个域名是用于<strong>公开bucket</strong>的访问的，刚刚我们创建bucket的时候已经选择了私有，<strong>这个域名对于思源同步来说没有任何用处</strong>，也就不用管他的30天过期说明！直接点击<code>好的,我知道了</code>忽略这个提示即可！</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/07/ea73be35361f1647eb68fa5b810e2258.png" alt="image.png"></p><p>现在我们已经创建了一个新的bucket，点击它的名字，即可进入bucket的管理页面</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/07/ca825415de2154c81ad5fc4e82c60b8d.png" alt="image.png"></p><p>在bucket的空间概览中，可以看到当前bucket的存储空间占用量，以及外网流出流量统计。我们需要记录的是右下角的这个存储空间域名。这个存储空间域名的格式如下所示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">http(s)://siyuan-bucket-1.s3.cn-east-1.qiniucs.com</span><br><span class="line">http(s)://&lt;bucket名字&gt;.s3.cn-east-1.qiniucs.com</span><br><span class="line">http(s)://&lt;bucket名字&gt;.&lt;协议&gt;.cn-east-1.qiniucs.com</span><br><span class="line">http(s)://&lt;bucket名字&gt;.&lt;协议&gt;.&lt;区域名字&gt;.qiniucs.com</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/07/f8bf7b43794bb2c22fd9a51f7988c20a.png" alt="image.png"></p><p>回到思源的配置中，现在可以填写一部分内容了</p><ul><li>Bucket：对应刚刚你创建的存储空间的名字，在我的示例中，是<code>siyuan-bucket-1</code>;</li><li>Endpoint：填写域名中除了bucket名字以外的部分，即<code>https://s3.cn-east-1.qiniucs.com</code>；</li><li>Region：填写域名中显示的区域名字，即<code>cn-east-1</code>；</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/07/d6d18a4d349bb3384f256082620f76b3.png" alt="image.png"></p><p>还剩下两个内容分别是Access Key和Secret Key，正如它们的名字翻译过来的结果，这两个是访问你这个bucket的用户密钥，也是你的七牛云账户的密钥。这是你的<strong>私密信息</strong>，请一定<strong>不要将用户密钥发送给任何人或发送到论坛上</strong>！</p><p>这两个密钥的获取位置是在七牛云界面的右上角，鼠标移动到你的用户头像位置，会弹出一个选择框，点击里面的密钥管理。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/07/4ab349939ae1115bf41ecc1c2c60f8c6.png" alt="image.png"></p><p>这里我已经创建过两组密钥了，我不记得新用户进到这个界面时是否会有一个创建密钥的提示了。总之你可以创建一组密钥，然后分别复制这里的<strong>AK和SK</strong>，填写到思源笔记的Access Key和Secret Key中，同步配置就完成了！</p><blockquote><p>如果你认为你的七牛云密钥已经泄漏，可以选择停用密钥，停用后删除这个密钥，再重新创建一个新密钥即可。</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/07/723f04ab1bc1f51300e4bf2dfe07706d.png" alt="image.png"></p><p>填写完毕后，点击下方的启用云端同步</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/07/9082891d4b4817ef75a96e99354c2c09.png" alt="image.png"></p><p>在同步方式中，可以选择前文提到过的三种不同方式。对于电脑客户端而言，选择自动同步或者手动同步都是可以的；而对于手机APP而言，强烈推荐选择完全手动同步。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/07/731b4f2549605e64575e9e63bc1e68ad.png" alt="image.png"></p><p>这里又会出现另外一个会让小白感到困扰的设置，在云端同步目录的设置中，你会发现你的七牛云账户里面的所有bucket都会显示出来。但是！刚刚在S3的同步配置中有一个Bucket填写项，我们使用的Bucket已经在填写项目中被<strong>固定</strong>了，所以这里的bucket选项是毫无意义的！<strong>它是留给WEBDAV协议选择文件路径使用的</strong>！使用了S3协议后，请忽略这个<code>云端同步目录</code>配置项。</p><p>正如前文提到过的，请针对<strong>每一个工作空间配置一个对应的Bucket</strong>，请不要多个工作空间公用同一个bucket！</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/07/846620eca1ae0a2485b07f2df3d45a2f.png" alt="image.png"></p><p>现在我创建了一个测试笔记本，点击左上角的这个<strong>小云图标</strong>，即可进行同步操作。</p><blockquote><p>顺带提一嘴，你可能会在文档树中看到<code>思源用户指南</code>这个笔记本，请不要在这个笔记中记录任何笔记！每次启动思源的时候，<strong>这个笔记本都会被重置</strong>！他是一个说明书，并不是一个可用的笔记本。一定要在文档树中<code>右键-新建笔记本</code>来做你的记录！</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/07/2e07bd704af10290cb5ef8449fb28b5c.png" alt="image.png"></p><p>同步时，左下角会显示实时进度。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/07/70b0e714f197963591e412662e5a966d.png" alt="image.png"></p><p>同步完毕后，我们可以来到七牛云的bucket的文件管理中，查看是否有新增的数据。如下图所示，刚刚我新建的bucket中已经出现了一个repo文件夹，且内部已有文件，这就代表你的同步配置完成啦！</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/07/92474957afc3dfd8203b51a2336ebd5d.png" alt="image.png"></p><p>这里的repo文件和本地工作空间路径中的repo文件夹内容是一致的，都是使用数据库密钥加密后的笔记内容。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/07/f47a493cc9fdd4cab4084f24c307ef69.png" alt="image.png"></p><h3 id="3-4-如何将同步配置导入其他设备？"><a href="#3-4-如何将同步配置导入其他设备？" class="headerlink" title="3.4. 如何将同步配置导入其他设备？"></a>3.4. 如何将同步配置导入其他设备？</h3><p>注意：<strong>两台设备请保证思源的版本一致，数据仓库密钥一致，再进行同步</strong>。个人建议关闭思源客户端的自动更新功能，只要你使用当前版本没有遇到任何问题，建议维持版本，不进行更新。我现在还在使用<code>v2.11.4</code>老版本呢。</p><p>在<code>设置-云端</code>中，会有一个导入和导出的按钮，在这里可以快捷的导出你的云端配置，并在其他设备的云端设置中进行导入。</p><blockquote><p>请注意区分 云端的导入&#x2F;导出 和 设置中的导出 选项，<code>设置-导出-导出DATA</code>是将你的全量笔记数据导出为一个压缩包，方便在其他设备上直接导入笔记或备份笔记。而<code>设置-云端-导出</code>则只是导出你的云端配置项目，方便在其他设备上直接引用相同的云端配置项而不需要重新填写而已！</p></blockquote><p>注意：导出的压缩包内文件是明文存储的，你的AccessKey和SecretKey都是明文。所以，<strong>请在导入其他设备后，尽快删除压缩包</strong>，避免AccessKey和SecretKey泄漏！</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/07/697b546ceaecff9365b3b46bce82d4d8.png" alt="image.png"></p><p>在其他设备导入云端配置后，启用云端同步，将同步选项改为<code>完全手动同步</code>，并手动点击小云图标，选择下载数据。等待云端的数据被下载完毕之后，再修改为其他同步方式。这样能最大限度的保障同步数据不出错！</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/07/cc7ca5c616e1c0670d32a9ea35141f3b.png" alt="image.png"></p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/07/72a6d2b5d430eb96520a5750e2e4803a.png" alt="image.png"></p><p>另外，如果你尝试用QQ或微信的文件传输助手将这个云端同步压缩包发送给手机，需要注意的是QQ的文件传输助手收到的压缩包文件，没有办法在手机自带的文件管理器中被找到，也就没有办法导入思源APP中。<strong>建议使用数据线连接手机和电脑，将导出的云端同步配置压缩包传输到手机上</strong>。您还可以同时把导出的DATA压缩包也传至手机，先在手机APP中导入DATA和云端配置，再执行一次下载云端数据到本地，这样可以节省一部分流量费用。</p><h2 id="4-其他服务商的配置教程"><a href="#4-其他服务商的配置教程" class="headerlink" title="4. 其他服务商的配置教程"></a>4. 其他服务商的配置教程</h2><p>这里给大家贴出其他服务商配置思源S3的教程。因为上文第三点已经带大家走过一遍配置流程了，其他云服务厂商的配置都是大同小异，所以这里就只贴出其他服务商如何找到思源S3所需配置项的条目，对应填入云端配置项中就OK啦。需要特别注意一点，不管您使用哪一个服务商，在开通对象存储服务的时候，一定要选标准的对象存储类型，不要选择低频访问、冷归档之类的对象存储类型！</p><ul><li>七牛云KODO：<a href="https://developer.qiniu.com/kodo/4088/s3-access-domainname">AWS S3 兼容 - 服务域名</a>，<a href="https://developer.qiniu.com/af/kb/1479/how-to-access-or-locate-the-access-key-and-secret-key">怎么获取或者找到 Access Key 和 Secret Key</a>;</li><li>阿里云OSS：<a href="https://help.aliyun.com/zh/oss/user-guide/regions-and-endpoints">OSS访问域名</a>，<a href="https://help.aliyun.com/zh/ram/user-guide/create-an-accesskey-pair?spm=a2c4g.53045.0.0.68147f80YkG9tZ#task-2245479">创建AccessKey</a>;</li><li>腾讯云COS：<a href="https://cloud.tencent.com/document/product/436/41284">在兼容 S3 的第三方应用中使用 COS 的通用配置</a>;</li><li>又拍云存储：<a href="https://help.upyun.com/knowledge-base/aws-s3%e5%85%bc%e5%ae%b9/">AWS S3协议兼容</a>;</li></ul><p>这里再次对对象存储服务的资费做一个解释，毕竟这是初次接触这类云服务的小白最容易看不懂的东西。</p><p>以<a href="https://help.aliyun.com/zh/oss/product-overview/billable-items/">阿里云OSS</a>为例，你会看到阿里云OSS提供存储的资源包，如下图所示，40GB的标准存储一年是费用是9元。这个40GB的资源包和七牛云提供的免费10GB存储容量一样，<strong>都是只抵消了存储空间的按量付费</strong>！即如果您使用阿里云OSS，购买了这个40GB的资源包后，40GB以内的存储空间都不会进行按量计费，只有超过40GB的空间才会需要按量计费。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/07/a0d141b1d102562cec42a2ce4ea0a30c.png" alt="image-20240719064441734"></p><p>那么我们需不需要购买这个资费包呢？可以来算一笔账，看看按量付费要多少GB的存储空间才需要9元。根据阿里云<a href="https://help.aliyun.com/zh/oss/product-overview/storage-fees">OSS存储空间资费</a>文档，<strong>标准本地冗余存储</strong>的按量付费的计算公式如下<br>$$<br>按量付费：存储费用&#x3D;存储量（GB）×月单价÷30（天）÷24（小时）<br>$$<br>在<a href="https://www.aliyun.com/price/product?spm=a2c4g.11186623.0.0.387e7bbezYDEsc#/oss/detail/ossbag">价格页面</a>可以看到OSS的存储空间按量付费单价和外网流出流量的付费单价。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/07/1f67a335d5b937023c0e66f248810b76.png" alt="image-20240719065211076"></p><p>根据<code>0.12元/GB/月</code>，我们可以算出一年是<code>1.44元/GB</code>，进一步计算<code>9 ÷ 1.44 = 6.25</code>，得出结论，当你的存储空间容量低于<code>6.25GB</code>时，可以不用去购买OSS的存储空间资费包。如果您的思源笔记内容庞大，则在存储空间占用大于6GB的时候，就可以考虑购买40GB的资费包了！</p><p>顺带计算一下外网流出流量的价格，还是以上文提到的每月平均外网流出流量是占用存储空间的1.5倍计算，假设你有占用了6GB存储空间的笔记，那么每个月的外网流出流量预估是9GB，直接按忙时价格计算，外网流出流量资费是<code>4.5元/月</code>，同时还需<code>0.72元</code>的6GB月存储空间费用，合计<code>5.22元</code>每月。</p><p>对于阿里云OSS的新用户，您可以领取一次<a href="https://help.aliyun.com/zh/oss/product-overview/free-quota-for-new-users">20GB存储空间和2GB外网流出流量&#x2F;3月</a>的免费额度，这篇文档中还提到了一些地域的OSS会有每月5GB的标准存储和外网流出流量的免费额度，但根据思源论坛的反馈，中国香港地域和海外地域的OSS在大陆访问效果并不好，连通性差，不建议省这笔钱！</p><h2 id="5-The-end"><a href="#5-The-end" class="headerlink" title="5. The end"></a>5. The end</h2><p>到这里，云端的配置就大功告成啦！主要是如何找到对象存储服务地域节点的域名，以及用户的AccessKey和SecretKey。这一部分操作都可以去查阅各大云服务厂商编写过的文档。想必聪明的你已经学会啦！</p><p>感谢大家支持！如果在配置过程中有任何问题，都可以在评论区与我交流。如果本文帮助到了你，也可以在评论区互动一下，这会让慕雪感觉自己的努力有收获，非常感谢！</p>]]></content>
    
    
    <summary type="html">一步一步引导诸位配置思源笔记的S3同步。</summary>
    
    
    
    <category term="编程学习" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="Docker真好玩" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/Docker%E7%9C%9F%E5%A5%BD%E7%8E%A9/"/>
    
    
    <category term="Docker" scheme="https://blog.musnow.top/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>【leetcode】647.回文子串</title>
    <link href="https://blog.musnow.top/posts/3816992778/"/>
    <id>https://blog.musnow.top/posts/3816992778/</id>
    <published>2024-07-14T02:08:13.000Z</published>
    <updated>2024-07-21T23:05:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>leetcode刷题笔记-647.回文子串</p><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><blockquote><p><a href="https://leetcode.cn/problems/palindromic-substrings/">https://leetcode.cn/problems/palindromic-substrings/</a></p></blockquote><p>给你一个字符串 s ，请你统计并返回这个字符串中 回文子串 的数目。</p><p>回文字符串 是正着读和倒过来读一样的字符串。</p><p>子字符串 是字符串中的由连续字符组成的一个序列。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">示例 1：</span><br><span class="line">输入：s = &quot;abc&quot;</span><br><span class="line">输出：3</span><br><span class="line">解释：三个回文子串: &quot;a&quot;, &quot;b&quot;, &quot;c&quot;</span><br><span class="line"></span><br><span class="line">示例 2：</span><br><span class="line">输入：s = &quot;aaa&quot;</span><br><span class="line">输出：6</span><br><span class="line">解释：6个回文子串: &quot;a&quot;, &quot;a&quot;, &quot;a&quot;, &quot;aa&quot;, &quot;aa&quot;, &quot;aaa&quot;</span><br></pre></td></tr></table></figure><p>提示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1 &lt;= s.length &lt;= 1000</span><br><span class="line">s 由小写英文字母组成</span><br></pre></td></tr></table></figure><h1 id="思路一：双指针法"><a href="#思路一：双指针法" class="headerlink" title="思路一：双指针法"></a>思路一：双指针法</h1><p>我们可以遍历整个字符串，用双指针法从当前下标开始扩张寻找回文子串。找寻相同的字符，如果找到了，则将结果集加一（回文子串个数）。</p><p>这里需要注意的是，回文子串有两种情况，一种是奇数长度，我们从中间位置开始扩张就OK了，另外一种是偶数长度，我们必须从中间两位开始扩张。</p><p>这个思路比较好理解，所以直接上代码。主要还是注意奇数和偶数这两种不同的回文子串长度。偶数情况可以从<code>(i-1,i)</code>开始找，也可以从<code>(i,i+1)</code>开始找，最终结果都是等价的。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">countSubstrings</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s.<span class="built_in">size</span>() &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> s.<span class="built_in">size</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> result = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            result += <span class="built_in">subStringExtend</span>(s, i, i, s.<span class="built_in">size</span>());     <span class="comment">// 奇数</span></span><br><span class="line">            result += <span class="built_in">subStringExtend</span>(s, i, i + <span class="number">1</span>, s.<span class="built_in">size</span>()); <span class="comment">// 偶数</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 从left/right开始往两头扩展，返回最长回文子串长度</span></span><br><span class="line">    <span class="comment">// 分为二者相等（奇数长度）二者不等（偶数长度）的情况</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">subStringExtend</span><span class="params">(<span class="type">const</span> string&amp; s, <span class="type">int</span> left, <span class="type">int</span> right, <span class="type">int</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> result = <span class="number">0</span>; <span class="comment">// 字符自己也认为是一个长度</span></span><br><span class="line">        <span class="keyword">while</span> (left &gt;= <span class="number">0</span> &amp;&amp; right &lt; end &amp;&amp; s[left] == s[right]) &#123;</span><br><span class="line">            left--;</span><br><span class="line">            right++;</span><br><span class="line">            <span class="comment">// 结果长度</span></span><br><span class="line">            result++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/07/df29ff97cd6c91a9429382adb4d27a47.png" alt="image.png"></p><h1 id="思路二：动态规划"><a href="#思路二：动态规划" class="headerlink" title="思路二：动态规划"></a>思路二：动态规划</h1><p>动态规划的思路就在<a href="https://blog.musnow.top/posts/2092587888">516最长回文子序列</a>题目里面接触过了。</p><p>动态规划的思路主要还是在于回文子串的特性是只需要判断首末两个字符是否相同。如果相同，再根据之前判断的结果，看这两个字符中间的部分是否回文，就能得出整体是否回文。</p><p>定义二维bool数组dp，长和宽都是字符串的长度；<code>dp[i][j]</code>的含义是i和j之间的子串是否为回文子串。</p><p>此时递推就只有<code>s[i]==s[j]</code>的情况需要进行操作，分为三种长度</p><ol><li>长度为1，一个字符是回文；</li><li>长度为2，两个字符相同，比如<code>aa</code>，也是回文；</li><li>长度大于2，可能是奇数回文也可能是偶数回文子串，判断<code>dp[i+1][j-1]</code>是否为true。</li></ol><p>根据这个递推关系，i和j的遍历顺序也需要进行修改，首先j肯定大于i，所以j是从i开始正序遍历的（因为j依赖于j-1）；而i依赖于i+1，所以i是从最后一个字符开始倒叙遍历的。</p><p>初始化的时候，只需要初始化矩阵中i和j相等的部分，相当于一个字符，是回文子串。</p><p>完整代码如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">countSubstrings</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s.<span class="built_in">size</span>() &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> s.<span class="built_in">size</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 代表s中i和j下标之间是否是回文子串</span></span><br><span class="line">        vector&lt;vector&lt;<span class="type">bool</span>&gt;&gt; <span class="built_in">dp</span>(s.<span class="built_in">size</span>(), <span class="built_in">vector</span>&lt;<span class="type">bool</span>&gt;(s.<span class="built_in">size</span>(), <span class="literal">false</span>));</span><br><span class="line">        <span class="comment">// 初始化，i和j相同的时候肯定是回文，初始化为true</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            dp[i][i] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> result = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 开始遍历，依赖项是i+1和j-1，所以i倒叙遍历，j正序遍历</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = s.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = i; j &lt; s.<span class="built_in">size</span>(); j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (s[i] == s[j]) &#123;</span><br><span class="line">                    <span class="comment">// 只有一个字符，或者两个字符，是回文</span></span><br><span class="line">                    <span class="keyword">if</span> (<span class="built_in">abs</span>(i - j) + <span class="number">1</span> &lt;= <span class="number">2</span>) &#123;</span><br><span class="line">                        result++;</span><br><span class="line">                        dp[i][j] = <span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 偶数回文和奇数回文的情况等价，需要判断中间是否回文</span></span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (dp[i + <span class="number">1</span>][j - <span class="number">1</span>]) &#123;</span><br><span class="line">                        result++;</span><br><span class="line">                        dp[i][j] = <span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/07/88be5cf1b9174388e1e9428a851cd66c.png" alt="image.png"></p>]]></content>
    
    
    <summary type="html">leetcode刷题笔记-647.回文子串</summary>
    
    
    
    <category term="编程学习" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="把题目都给刷干净" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/%E6%8A%8A%E9%A2%98%E7%9B%AE%E9%83%BD%E7%BB%99%E5%88%B7%E5%B9%B2%E5%87%80/"/>
    
    
    <category term="OJ刷题" scheme="https://blog.musnow.top/tags/OJ%E5%88%B7%E9%A2%98/"/>
    
    <category term="leetcode" scheme="https://blog.musnow.top/tags/leetcode/"/>
    
    <category term="动态规划" scheme="https://blog.musnow.top/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>【leetcode】72.编辑距离问题</title>
    <link href="https://blog.musnow.top/posts/3809163346/"/>
    <id>https://blog.musnow.top/posts/3809163346/</id>
    <published>2024-07-14T01:29:40.000Z</published>
    <updated>2024-08-07T22:24:33.000Z</updated>
    
    <content type="html"><![CDATA[<p>leetcode刷题笔记-72.编辑距离问题</p><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><blockquote><p><a href="https://leetcode.cn/problems/edit-distance/">https://leetcode.cn/problems/edit-distance/</a></p></blockquote><p>给你两个单词 word1 和 word2， 请返回将 word1 转换成 word2 所使用的最少操作数  。</p><p>你可以对一个单词进行如下三种操作：</p><ul><li>插入一个字符</li><li>删除一个字符</li><li>替换一个字符</li></ul><p>示例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">示例 1：</span><br><span class="line">输入：word1 = &quot;horse&quot;, word2 = &quot;ros&quot;</span><br><span class="line">输出：3</span><br><span class="line">解释：</span><br><span class="line">horse -&gt; rorse (将 &#x27;h&#x27; 替换为 &#x27;r&#x27;)</span><br><span class="line">rorse -&gt; rose (删除 &#x27;r&#x27;)</span><br><span class="line">rose -&gt; ros (删除 &#x27;e&#x27;)</span><br><span class="line"></span><br><span class="line">示例 2：</span><br><span class="line">输入：word1 = &quot;intention&quot;, word2 = &quot;execution&quot;</span><br><span class="line">输出：5</span><br><span class="line">解释：</span><br><span class="line">intention -&gt; inention (删除 &#x27;t&#x27;)</span><br><span class="line">inention -&gt; enention (将 &#x27;i&#x27; 替换为 &#x27;e&#x27;)</span><br><span class="line">enention -&gt; exention (将 &#x27;n&#x27; 替换为 &#x27;x&#x27;)</span><br><span class="line">exention -&gt; exection (将 &#x27;n&#x27; 替换为 &#x27;c&#x27;)</span><br><span class="line">exection -&gt; execution (插入 &#x27;u&#x27;)</span><br></pre></td></tr></table></figure><p>提示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0 &lt;= word1.length, word2.length &lt;= 500</span><br><span class="line">word1 和 word2 由小写英文字母组成</span><br></pre></td></tr></table></figure><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>这道题基于<a href="https://blog.musnow.top/posts/1692714843">583.两个字符串的删除操作</a>上，将只可以删除一个字符改成了可以进行删除、替换、插入操作。但本质还是两个字符串进行比较，所以大部份代码都是一模一样的，只有比较时两个字符不相同的时候的操作才有区别。</p><p>首先是定义dp数组，还是采用常用的定义方式</p><ul><li><code>dp[i][j]</code>：将字符串1的i之前和字符串2的j之前变成相同字符串的最少操作次数。</li></ul><p>然后是确定dp数组的递推，首先是<code>word1[i-1]</code>和<code>word2[j-1]</code>相同和不相同这两种大情况</p><ul><li>当<code>word1[i-1] == word2[j-1]</code>，相当于不需要进行操作，<code>dp[i][j]=dp[i-1][j-1]</code>;</li><li>当<code>word[i-1] != word2[j-1]</code>，就需要进行编辑修改了；</li></ul><p>当二者不同的时候，有多种方式进行修改，题目给出的是删除、替换、插入。但其实插入和删除是等价的！给出下面这两个字符串</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">word1=&quot;a&quot; word2=&quot;ab&quot;</span><br></pre></td></tr></table></figure><p>假设我们进行删除，可以从word2中删除b字符，操作数是1；而进行插入是给word1插入一个字符b，操作数也是1。二者的操作数相同，那么递推公式也就相同，所以插入和删除可以认为是一种操作方式！</p><p>和583题不同的点就在于有一个<strong>替换</strong>的操作方式，当两个字符不同的时候，我们可以直接替换其中一个字符串中的字符，替换后两个字符就相等了，也就变成了<code>word1[i-1] == word2[j-1]</code>的情况，<code>dp[i][j]==dp[i-1][j-1]+1</code>;</p><p>最终的递推方案如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (word1[i<span class="number">-1</span>] == word2[j<span class="number">-1</span>]) &#123;</span><br><span class="line"><span class="comment">// 二者相等，不需要做额外操作，沿用前一位的结果</span></span><br><span class="line">dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 二者不相等，分为三种操作情况，其中插入一个字符和删除一个字符等价</span></span><br><span class="line"><span class="comment">// 1.在word1中删除一个字符</span></span><br><span class="line"><span class="type">int</span> action1 = dp[i - <span class="number">1</span>][j] + <span class="number">1</span>;</span><br><span class="line"><span class="comment">// 2.在word2中删除一个字符</span></span><br><span class="line"><span class="type">int</span> action2 = dp[i][j - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line"><span class="comment">// 3.二者都删除一个字符</span></span><br><span class="line"><span class="type">int</span> action3 = dp[i - <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">2</span>;</span><br><span class="line"><span class="comment">// 4.在word1或者word2中替换一个字符，那就是使用一次操作让二者相等；</span></span><br><span class="line"><span class="comment">//   可以理解为是先把二者视作相等，然后加一次因为替换而产生的步骤；</span></span><br><span class="line"><span class="type">int</span> action4 = dp[i - <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line"><span class="comment">// 得到最小值</span></span><br><span class="line">dp[i][j] =</span><br><span class="line"><span class="built_in">min</span>(<span class="built_in">min</span>(action1, action2), <span class="built_in">min</span>(action3, action4));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但实际上，这里完全可以省略583题目中<strong>两个字符串中都删除字符</strong>的操作，因为它的值很明显比替换字符需要的操作数多一次，进行min计算是没有意义的。</p><p>初始化和遍历方式都和583题目完全一样，可以去看站内之前写的<a href="https://blog.musnow.top/posts/1692714843">583题目</a>的题解，这里就不赘述了。</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p>完整代码如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minDistance</span><span class="params">(string word1, string word2)</span> </span>&#123;</span><br><span class="line">        <span class="type">size_t</span> sz1 = word1.<span class="built_in">size</span>(), sz2 = word2.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span> (sz1 == <span class="number">0</span> || sz2 == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> sz1 == <span class="number">0</span> ? sz2 : sz1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 1中i之前和2中j之前的字符串的最小编辑距离</span></span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dp</span>(sz1 + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(sz2 + <span class="number">1</span>, <span class="number">0</span>));</span><br><span class="line">        <span class="comment">// 初始化情况，dp[0][0]是两个空字符串，不需要编辑，初始化为0</span></span><br><span class="line">        <span class="comment">// i=0的情况和j=0的情况都是初始化为另外一个字符串的长度</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= sz1; i++) &#123;</span><br><span class="line">            dp[i][<span class="number">0</span>] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= sz2; j++) &#123;</span><br><span class="line">            dp[<span class="number">0</span>][j] = j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 开始遍历</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= sz1; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= sz2; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (word1[i - <span class="number">1</span>] == word2[j - <span class="number">1</span>]) &#123;</span><br><span class="line">                    <span class="comment">// 二者相等，不需要做额外操作，沿用前一位的结果</span></span><br><span class="line">                    dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// 二者不相等，分为三种操作情况，其中插入一个字符和删除一个字符等价</span></span><br><span class="line">                    <span class="comment">// 1.在word1中删除一个字符</span></span><br><span class="line">                    <span class="type">int</span> action1 = dp[i - <span class="number">1</span>][j] + <span class="number">1</span>;</span><br><span class="line">                    <span class="comment">// 2.在word2中删除一个字符</span></span><br><span class="line">                    <span class="type">int</span> action2 = dp[i][j - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">                    <span class="comment">// 3.二者都删除一个字符，但这会比第四点耗费多一次操作，没意义</span></span><br><span class="line">                    <span class="comment">// int action3 = dp[i - 1][j - 1] + 2;</span></span><br><span class="line">                    <span class="comment">// 4.在word1或者word2中替换一个字符，那就是使用一次操作让二者相等</span></span><br><span class="line">                    <span class="type">int</span> action4 = dp[i - <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">                    <span class="comment">// 得到最小值</span></span><br><span class="line">                    dp[i][j] = <span class="built_in">min</span>(<span class="built_in">min</span>(action1, action2), action4);</span><br><span class="line">                    <span class="comment">// cout &lt;&lt; i &lt;&lt; &quot; &quot; &lt;&lt; j &lt;&lt; &quot;:&quot; &lt;&lt; dp[i][j] &lt;&lt; endl;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[sz1][sz2];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2024/07/89371c34c3d6a3dacfa8f4ce0db8fa16.png" alt="image.png"></p>]]></content>
    
    
    <summary type="html">leetcode刷题笔记-72.编辑距离问题</summary>
    
    
    
    <category term="编程学习" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="把题目都给刷干净" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/%E6%8A%8A%E9%A2%98%E7%9B%AE%E9%83%BD%E7%BB%99%E5%88%B7%E5%B9%B2%E5%87%80/"/>
    
    
    <category term="OJ刷题" scheme="https://blog.musnow.top/tags/OJ%E5%88%B7%E9%A2%98/"/>
    
    <category term="leetcode" scheme="https://blog.musnow.top/tags/leetcode/"/>
    
    <category term="动态规划" scheme="https://blog.musnow.top/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
</feed>
