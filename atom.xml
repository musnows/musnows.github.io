<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>慕雪的寒舍</title>
  
  <subtitle>雪下了一夜</subtitle>
  <link href="https://blog.musnow.top/atom.xml" rel="self"/>
  
  <link href="https://blog.musnow.top/"/>
  <updated>2025-10-02T03:29:39.000Z</updated>
  <id>https://blog.musnow.top/</id>
  
  <author>
    <name>慕雪年华</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【Hexo】为自己的博客站点加上离线的AI摘要</title>
    <link href="https://blog.musnow.top/posts/5899307553/"/>
    <id>https://blog.musnow.top/posts/5899307553/</id>
    <published>2025-10-02T01:08:21.000Z</published>
    <updated>2025-10-02T03:29:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>参考大佬的教程，为自己的博客站点加上了离线的AI摘要。</p><h2 id="1-写在前面">1. 写在前面</h2><p>之前逛个个大佬的个人博客的时候，发现有不少大佬都给自己的博客文章开头加上了一个AI摘要的功能。我也想过类似的功能，但是当时以为这些AI摘要都是实时请求的，会太消耗Token，于是就没有处理了。</p><p>今天心血来潮又去搜了一下相关的教程，找到了LiuShen大佬fork制作的一份只需要hexo的front-matter就能在前端显示AI摘要的插件。这个插件就比较符合我的需求了，因为我不想要一个实时的AI请求，离线在本地给hexo文章的front-matter加上AI摘要，已经足够了。</p><blockquote><p>参考博客：<a href="https://blog.liushen.fun/posts/40702a0d/">https://blog.liushen.fun/posts/40702a0d/</a>；<br>仓库开源地址：<a href="https://github.com/willow-god/hexo-ai-summary">https://github.com/willow-god/hexo-ai-summary</a></p></blockquote><p>大佬用的也是butterfly主题，所以针对主题的修改是一模一样的，可以直接套用。</p><p>话不多说，直接开整！</p><h2 id="2-配置">2. 配置</h2><h3 id="2-1-安装插件">2.1. 安装插件</h3><p>首先是安装大佬搞定的插件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-ai-summary-liushen --save</span><br><span class="line"><span class="comment"># 检查一下你的hexo有没有下面这些依赖，没有需要安装</span></span><br><span class="line">npm install axios p-limit node-fetch --save</span><br></pre></td></tr></table></figure><p>安装了之后，在Hexo的配置文件<code>_config.yml</code>里面追加如下内容。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># hexo-ai-summary-liushen</span></span><br><span class="line"><span class="comment"># docs on : https://github.com/willow-god/hexo-ai-summary</span></span><br><span class="line"><span class="attr">aisummary:</span></span><br><span class="line">  <span class="comment"># 基本控制</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span>               <span class="comment"># 是否启用插件，如果关闭，也可以在文章顶部的is_summary字段单独设置是否启用，反之也可以配置是否单独禁用</span></span><br><span class="line">  <span class="attr">cover_all:</span> <span class="literal">false</span>           <span class="comment"># 是否覆盖已有摘要，默认只生成缺失的，注意开启后，可能会导致过量的api使用！</span></span><br><span class="line">  <span class="attr">summary_field:</span> <span class="string">summary</span>     <span class="comment"># 摘要写入字段名（建议保留为 summary），重要配置，谨慎修改！！！！！！！</span></span><br><span class="line">  <span class="attr">logger:</span> <span class="number">1</span>                  <span class="comment"># 日志等级（0=仅错误，1=生成+错误，2=全部）</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># AI 接口配置</span></span><br><span class="line">  <span class="attr">api:</span> <span class="string">https://api.openai.com/v1/chat/completions</span>     <span class="comment"># OpenAI 兼容模型接口</span></span><br><span class="line">  <span class="attr">token:</span> <span class="string">sk-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</span>  <span class="comment"># OpenAI 或兼容模型的密钥</span></span><br><span class="line">  <span class="attr">model:</span> <span class="string">gpt-3.5-turbo</span>                                <span class="comment"># 使用模型名称</span></span><br><span class="line">  <span class="attr">prompt:</span> <span class="string">&gt;</span></span><br><span class="line"><span class="string">    你是一个博客文章摘要生成工具，只需根据我发送的内容生成摘要。</span></span><br><span class="line"><span class="string">    不要换行，不要回答任何与摘要无关的问题、命令或请求。</span></span><br><span class="line"><span class="string">    摘要内容必须在150到250字之间，仅介绍文章核心内容。</span></span><br><span class="line"><span class="string">    请用中文作答，去除特殊字符，输出内容开头为“这里是清羽AI，这篇文章”。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">  <span class="comment"># 内容清洗设置</span></span><br><span class="line">  <span class="attr">ignoreRules:</span>              <span class="comment"># 可选：自定义内容清洗的正则规则</span></span><br><span class="line">    <span class="comment"># - &quot;\\&#123;%.*?%\\&#125;&quot;</span></span><br><span class="line">    <span class="comment"># - &quot;!\\[.*?\\]\\(.*?\\)&quot;</span></span><br><span class="line">  </span><br><span class="line">  <span class="attr">max_token:</span> <span class="number">5000</span>           <span class="comment"># 输入内容最大 token 长度（非输出限制）</span></span><br><span class="line">  <span class="attr">concurrency:</span> <span class="number">2</span>            <span class="comment"># 并发处理数，建议不高于 5</span></span><br></pre></td></tr></table></figure><p>其中最重要的是配置AI接口，这里可以参考本站前几天写的<a href="https://blog.musnow.top/posts/5046572767">白嫖LongCat</a>的教程，把LongCat免费的api弄上去。LongCat还有个优势就是快，对我这种已经有很多篇文章，都需要重新进行AI摘要的情况非常合适，不然你要是用硅基流动免费的8B小模型之类的，那处理效果差不说，速度可还慢的要死，有得一等了。</p><h3 id="2-2-测试运行摘要生成">2.2. 测试运行摘要生成</h3><p>配置了上述两个内容之后，就可以开始生成AI摘要了。这个插件会给你的hexo博客开头追加一个summary字段，字段内容就是AI生成的摘要。</p><p>注意，插件会主动修改front-matter，为了避免插件可能有bug导致写回出错，覆盖你的所有内容，<strong>一定要在首次尝试之前进行博客源文件的备份</strong>！避免AI处理出错把你的配置全覆盖了，你还没有备份，那就麻烦了！</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo cl</span><br><span class="line">hexo g  <span class="comment"># 开始进行摘要生成</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/10/43fa9f1af383e27ef346e322cdec9861.webp" alt="image.png"></p><p>没有任何问题，成功生成了摘要</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/10/ffcdfe1fd81b8d60a4471516ceb5113f.webp" alt="image.png"></p><h3 id="2-3-修改butterfly主题">2.3. 修改butterfly主题</h3><h4 id="2-3-1-主题配置文件修改">2.3.1. 主题配置文件修改</h4><p>首先需要修改主题的配置文件<code>_config.butterfly.yaml</code>，追加如下配置。其中enable是这个功能的开关，后面的文字都是占位符，可以根据你的需要修改。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># --------------------------------------</span></span><br><span class="line"><span class="comment"># 文章设置</span></span><br><span class="line"><span class="comment"># --------------------------------------</span></span><br><span class="line"><span class="comment"># 文章AI摘要是否开启，会自动检索文章summary字段，若没有则不显示</span></span><br><span class="line"><span class="attr">ai_summary:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">title:</span> <span class="string">慕雪小助手的总结</span>  <span class="comment"># 左下角显示的标题</span></span><br><span class="line">  <span class="attr">loadingText:</span> <span class="string">慕雪的小助手正在绞尽脑汁···</span></span><br><span class="line">  <span class="attr">modelName:</span> <span class="string">LongCat-Flash-Chat</span>  <span class="comment"># 显示的模型名称</span></span><br></pre></td></tr></table></figure><h4 id="2-3-2-主题pug修改">2.3.2. 主题pug修改</h4><p>随后需要修改主题源码文件，新增针对AI摘要的处理。</p><p>首先是修改<code>theme/butterfly/layout/post.pug</code>文件，在第8行之后新增两行内容。注意添加的时候需要严格缩进，避免格式错误</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">article#article-container.container.post-content</span><br><span class="line">  //- 添加下面这两行</span><br><span class="line">  if page.summary &amp;&amp; theme.ai_summary.enable</span><br><span class="line">    include includes/post/post-summary.pug</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/10/a7d4c09ae8413735421b60f4f9b8d315.webp" alt="image.png"></p><p>然后添加组件，创建文件<code>theme/butterfly/layout/includes/post/post-summary.pug</code>，写入以下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.ai-summary</span><br><span class="line">    .ai-explanation(style=&quot;display: block;&quot; data-summary=page.summary)=theme.ai_summary.loadingText</span><br><span class="line">    .ai-title </span><br><span class="line">        .ai-title-left </span><br><span class="line">            i.fa-brands.fa-slack</span><br><span class="line">            .ai-title-text=theme.ai_summary.title</span><br><span class="line">        .ai-tag#ai-tag= theme.ai_summary.modelName</span><br></pre></td></tr></table></figure><h4 id="2-3-3-主题样式修改">2.3.3. 主题样式修改</h4><p>然后添加样式到<code>theme/butterfly/source/css/_layout/ai-summary.styl</code>文件</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><span class="line">// ===================</span><br><span class="line">// 🌗 主题变量定义（仅使用项）</span><br><span class="line">// ===================</span><br><span class="line"></span><br><span class="line"><span class="selector-pseudo">:root</span></span><br><span class="line">  // ai_summary</span><br><span class="line">  <span class="attr">--liushen-title-font-color</span>: <span class="number">#0883b7</span></span><br><span class="line">  --liushen-maskbg: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.85</span>)</span><br><span class="line">  --liushen-ai-bg: <span class="built_in">conic-gradient</span>(from <span class="number">1.5708rad</span> at <span class="number">50%</span> <span class="number">50%</span>, <span class="number">#d6b300</span> <span class="number">0%</span>, <span class="number">#42A2FF</span> <span class="number">54%</span>, <span class="number">#d6b300</span> <span class="number">100%</span>)</span><br><span class="line"></span><br><span class="line">  // card 背景</span><br><span class="line">  --liushen-card-secondbg: <span class="number">#f1f3f8</span></span><br><span class="line"></span><br><span class="line">  // text</span><br><span class="line">  --liushen-text: <span class="number">#4c4948</span></span><br><span class="line">  --liushen-secondtext: <span class="number">#3c3c43cc</span></span><br><span class="line"></span><br><span class="line">[data-theme=<span class="string">&#x27;dark&#x27;</span>]</span><br><span class="line">  // ai_summary</span><br><span class="line">  --liushen-title-font-color: <span class="number">#0883b7</span></span><br><span class="line">  --liushen-maskbg: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.85</span>)</span><br><span class="line">  --liushen-ai-bg: <span class="built_in">conic-gradient</span>(from <span class="number">1.5708rad</span> at <span class="number">50%</span> <span class="number">50%</span>, <span class="built_in">rgba</span>(<span class="number">214</span>, <span class="number">178</span>, <span class="number">0</span>, <span class="number">0.46</span>) <span class="number">0%</span>, <span class="built_in">rgba</span>(<span class="number">66</span>, <span class="number">161</span>, <span class="number">255</span>, <span class="number">0.53</span>) <span class="number">54%</span>, <span class="built_in">rgba</span>(<span class="number">214</span>, <span class="number">178</span>, <span class="number">0</span>, <span class="number">0.49</span>) <span class="number">100%</span>)</span><br><span class="line"></span><br><span class="line">  // card 背景</span><br><span class="line">  --liushen-card-secondbg: <span class="number">#3e3f41</span></span><br><span class="line"></span><br><span class="line">  // text</span><br><span class="line">  --liushen-text: <span class="number">#ffffffb3</span></span><br><span class="line">  --liushen-secondtext: <span class="number">#a1a2b8</span></span><br><span class="line"></span><br><span class="line">// ===================</span><br><span class="line">// 📘 AI 摘要模块样式</span><br><span class="line">// ===================</span><br><span class="line"></span><br><span class="line">if <span class="built_in">hexo-config</span>(<span class="string">&#x27;ai_summary.enable&#x27;</span>)</span><br><span class="line">  .ai-summary</span><br><span class="line">    background-color <span class="built_in">var</span>(--liushen-maskbg)</span><br><span class="line">    background <span class="built_in">var</span>(--liushen-card-secondbg)</span><br><span class="line">    border-radius <span class="number">12px</span></span><br><span class="line">    padding <span class="number">8px</span> <span class="number">8px</span> <span class="number">12px</span> <span class="number">8px</span></span><br><span class="line">    line-height <span class="number">1.3</span></span><br><span class="line">    flex-direction column</span><br><span class="line">    margin-bottom <span class="number">24px</span></span><br><span class="line">    display flex</span><br><span class="line">    gap <span class="number">5px</span></span><br><span class="line">    position relative</span><br><span class="line"></span><br><span class="line">    &amp;::before</span><br><span class="line">      content <span class="string">&#x27;&#x27;</span></span><br><span class="line">      position absolute</span><br><span class="line">      top <span class="number">0</span></span><br><span class="line">      left <span class="number">0</span></span><br><span class="line">      width <span class="number">100%</span></span><br><span class="line">      height <span class="number">100%</span></span><br><span class="line">      z-index <span class="number">1</span></span><br><span class="line">      filter <span class="built_in">blur</span>(<span class="number">8px</span>)</span><br><span class="line">      opacity .<span class="number">4</span></span><br><span class="line">      background-image <span class="built_in">var</span>(--liushen-ai-bg)</span><br><span class="line">      transform <span class="built_in">scaleX</span>(<span class="number">1</span>) <span class="built_in">scaleY</span>(.<span class="number">95</span>) <span class="built_in">translateY</span>(<span class="number">2px</span>)</span><br><span class="line">    </span><br><span class="line">    &amp;::after</span><br><span class="line">      content: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">      <span class="attribute">position</span>: absolute;</span><br><span class="line">      <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">      <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">      <span class="attribute">z-index</span>: <span class="number">2</span>;</span><br><span class="line">      <span class="attribute">border-radius</span>: <span class="number">12px</span>;</span><br><span class="line">      <span class="attribute">background</span>: <span class="built_in">var</span>(--liushen-maskbg);</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.ai-explanation</span></span><br><span class="line">      <span class="attribute">z-index</span> <span class="number">10</span></span><br><span class="line">      <span class="attribute">padding</span> <span class="number">8px</span> <span class="number">12px</span></span><br><span class="line">      <span class="attribute">font-size</span> <span class="number">15px</span></span><br><span class="line">      <span class="attribute">line-height</span> <span class="number">1.4</span></span><br><span class="line">      <span class="attribute">color</span> <span class="selector-tag">var</span>(<span class="attr">--liushen-text</span>)</span><br><span class="line">      <span class="attribute">text-align</span> justify</span><br><span class="line"></span><br><span class="line">      // ✅ 打字机光标动画</span><br><span class="line">      &amp;<span class="selector-pseudo">::after</span></span><br><span class="line">        <span class="attribute">content</span> &#x27;&#x27;</span><br><span class="line">        <span class="attribute">display</span> inline-block</span><br><span class="line">        <span class="attribute">width</span> <span class="number">8px</span></span><br><span class="line">        <span class="attribute">height</span> <span class="number">2px</span></span><br><span class="line">        <span class="attribute">margin-left</span> <span class="number">2px</span></span><br><span class="line">        <span class="attribute">background</span> <span class="selector-tag">var</span>(<span class="attr">--liushen-text</span>)</span><br><span class="line">        <span class="attribute">vertical-align</span> <span class="attribute">bottom</span></span><br><span class="line">        <span class="attribute">animation</span> blink-underline <span class="number">1s</span> ease-in-out infinite</span><br><span class="line">        <span class="attribute">transition</span> <span class="attribute">all</span> .<span class="number">3s</span></span><br><span class="line">        <span class="attribute">position</span> relative</span><br><span class="line">        <span class="attribute">bottom</span> <span class="number">3px</span></span><br><span class="line"></span><br><span class="line">      // 平滑滚动动画</span><br><span class="line">      // <span class="selector-class">.char</span></span><br><span class="line">      //   <span class="attribute">display</span> inline-block</span><br><span class="line">      //   <span class="attribute">opacity</span> <span class="number">0</span></span><br><span class="line">      //   <span class="attribute">animation</span> chat-<span class="attribute">float</span> .<span class="number">5s</span> ease forwards</span><br><span class="line">    </span><br><span class="line">    <span class="selector-class">.ai-title</span></span><br><span class="line">      <span class="attribute">z-index</span> <span class="number">10</span></span><br><span class="line">      <span class="attribute">font-size</span> <span class="number">14px</span></span><br><span class="line">      <span class="attribute">display</span> <span class="attribute">flex</span></span><br><span class="line">      <span class="attribute">border-radius</span> <span class="number">8px</span></span><br><span class="line">      <span class="attribute">align-items</span> center</span><br><span class="line">      <span class="attribute">position</span> relative</span><br><span class="line">      <span class="attribute">padding</span> <span class="number">0</span> <span class="number">12px</span></span><br><span class="line">      <span class="attribute">cursor</span> default</span><br><span class="line">      <span class="attribute">user-select</span> <span class="attribute">none</span></span><br><span class="line"></span><br><span class="line">      <span class="selector-class">.ai-title-left</span></span><br><span class="line">        <span class="attribute">display</span> <span class="attribute">flex</span></span><br><span class="line">        <span class="attribute">align-items</span> center</span><br><span class="line">        <span class="attribute">color</span> <span class="selector-tag">var</span>(<span class="attr">--liushen-title-font-color</span>)</span><br><span class="line"></span><br><span class="line">        <span class="selector-tag">i</span></span><br><span class="line">          <span class="attribute">margin-right</span> <span class="number">3px</span></span><br><span class="line">          <span class="attribute">display</span> <span class="attribute">flex</span></span><br><span class="line">          <span class="attribute">color</span> <span class="selector-tag">var</span>(<span class="attr">--liushen-title-font-color</span>)</span><br><span class="line">          <span class="attribute">border-radius</span> <span class="number">20px</span></span><br><span class="line">          <span class="attribute">justify-content</span> center</span><br><span class="line">          <span class="attribute">align-items</span> center</span><br><span class="line"></span><br><span class="line">        <span class="selector-class">.ai-title-text</span></span><br><span class="line">          <span class="attribute">font-weight</span> <span class="number">500</span></span><br><span class="line"></span><br><span class="line">      <span class="selector-class">.ai-tag</span></span><br><span class="line">        <span class="attribute">color</span> <span class="selector-tag">var</span>(<span class="attr">--liushen-secondtext</span>)</span><br><span class="line">        <span class="attribute">font-weight</span> <span class="number">300</span></span><br><span class="line">        <span class="attribute">margin-left</span> auto</span><br><span class="line">        <span class="attribute">display</span> <span class="attribute">flex</span></span><br><span class="line">        <span class="attribute">align-items</span> center</span><br><span class="line">        <span class="attribute">justify-content</span> center</span><br><span class="line">        <span class="attribute">transition</span> .<span class="number">3s</span></span><br><span class="line"></span><br><span class="line">  // 平滑滚动动画</span><br><span class="line">  // <span class="keyword">@keyframes</span> chat-float</span><br><span class="line">  //   <span class="number">0%</span> </span><br><span class="line">  //     opacity <span class="number">0</span></span><br><span class="line">  //     transform translateY(<span class="number">20px</span>)</span><br><span class="line">  //   <span class="number">100%</span> </span><br><span class="line">  //       opacity <span class="number">1</span></span><br><span class="line">  //       transform translateY(<span class="number">0</span>)</span><br><span class="line">  </span><br><span class="line">  // ✅ 打字机光标闪烁动画</span><br><span class="line">  @keyframes blink-underline</span><br><span class="line">    <span class="number">0%</span>, <span class="number">100%</span></span><br><span class="line">      opacity <span class="number">1</span></span><br><span class="line">    <span class="number">50%</span></span><br><span class="line">      opacity <span class="number">0</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2-3-4-追加打字机JS">2.3.4. 追加打字机JS</h4><p>下面的js文件可以随意放到一个source目录下，在主题里面引用上就行了。</p><p>这里我是放到了<code>source/js/typing_style.js</code>里面，然后修改主题配置文件，在header里面引入了这个js文件。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Inject</span></span><br><span class="line"><span class="attr">inject:</span></span><br><span class="line">  <span class="attr">head:</span></span><br><span class="line">    <span class="comment"># ai总结能力打字机效果</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;script</span> <span class="string">src=&quot;/js/typing_style.js&quot;&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><p>js文件内容如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 打字机效果</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">typeTextMachineStyle</span>(<span class="params">text, targetSelector, options = &#123;&#125;</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;</span><br><span class="line">        delay = <span class="number">50</span>,</span><br><span class="line">        startDelay = <span class="number">2000</span>,</span><br><span class="line">        onComplete = <span class="literal">null</span>,</span><br><span class="line">        clearBefore = <span class="literal">true</span>,</span><br><span class="line">        eraseBefore = <span class="literal">true</span>, <span class="comment">// 新增：是否以打字机方式清除原文本</span></span><br><span class="line">        eraseDelay = <span class="number">30</span>,    <span class="comment">// 新增：删除每个字符的间隔</span></span><br><span class="line">    &#125; = options;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> el = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(targetSelector);</span><br><span class="line">    <span class="keyword">if</span> (!el || <span class="keyword">typeof</span> text !== <span class="string">&quot;string&quot;</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="title function_">startTyping</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">            <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">function</span> <span class="title function_">renderChar</span>(<span class="params"></span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (index &lt;= text.<span class="property">length</span>) &#123;</span><br><span class="line">                    el.<span class="property">textContent</span> = text.<span class="title function_">slice</span>(<span class="number">0</span>, index++);</span><br><span class="line">                    <span class="built_in">setTimeout</span>(renderChar, delay);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    onComplete &amp;&amp; <span class="title function_">onComplete</span>(el);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="title function_">renderChar</span>();</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (clearBefore) &#123;</span><br><span class="line">            <span class="keyword">if</span> (eraseBefore &amp;&amp; el.<span class="property">textContent</span>.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">let</span> currentText = el.<span class="property">textContent</span>;</span><br><span class="line">                <span class="keyword">let</span> eraseIndex = currentText.<span class="property">length</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">function</span> <span class="title function_">eraseChar</span>(<span class="params"></span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (eraseIndex &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        el.<span class="property">textContent</span> = currentText.<span class="title function_">slice</span>(<span class="number">0</span>, --eraseIndex);</span><br><span class="line">                        <span class="built_in">setTimeout</span>(eraseChar, eraseDelay);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="title function_">startTyping</span>(); <span class="comment">// 删除完毕后开始打字</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="title function_">eraseChar</span>();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                el.<span class="property">textContent</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">                <span class="title function_">startTyping</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="title function_">startTyping</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, startDelay);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">renderAISummary</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> summaryEl = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.ai-summary .ai-explanation&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (!summaryEl) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> summaryText = summaryEl.<span class="title function_">getAttribute</span>(<span class="string">&#x27;data-summary&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (summaryText) &#123;</span><br><span class="line">        <span class="title function_">typeTextMachineStyle</span>(summaryText, <span class="string">&quot;.ai-summary .ai-explanation&quot;</span>); <span class="comment">// 如果需要切换，在这里调用另一个函数即可</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;pjax:complete&#x27;</span>, renderAISummary);</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;DOMContentLoaded&#x27;</span>, renderAISummary);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-最终效果">3. 最终效果</h2><p>如图所示，效果不错，可行！</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/10/69c09b7076c4cbce910c615ea2aba44b.webp" alt="image.png"></p><p>小Tips：如果你觉得这个AI总结框和正文间隔太小了，可以修改<code>theme/butterfly/source/css/_layout/ai-summary.styl</code>里面的<code>.ai-summary</code>的<code>margin-bottom 24px</code>，把24px进一步加大即可，本站设置成了36px。</p><h2 id="4-发现插件的几个小问题">4. 发现插件的几个小问题</h2><h3 id="4-1-请求超过RPM">4.1. 请求超过RPM</h3><p>然后我就发现了几个小问题，首先，LongCat实在是返回的太快了！会出现超RPM的情况<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>。这需要在插件里面新增一个配置项，每次请求之后都sleep等待再发起下一个请求。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[Hexo-AI-Summary-LiuShen] 原始字符串长度： 8728</span><br><span class="line">[Hexo-AI-Summary-LiuShen] 最终输出长度： 1945</span><br><span class="line">[Hexo-AI-Summary-LiuShen] 生成摘要失败：【C语言】传值调用和传址调用</span><br><span class="line">AI 请求失败: AI 请求失败 (429): &#123;&quot;error&quot;:&#123;&quot;message&quot;:&quot;App:**xxxx在模型:longcat-flash-chatai-api每分钟请求次数超过限制&quot;,&quot;type&quot;:&quot;rate_limit_error&quot;,&quot;code&quot;:&quot;rate_limit_exceeded&quot;&#125;&#125;</span><br></pre></td></tr></table></figure><p>这个问题我已经提交了PR：<a href="https://github.com/willow-god/hexo-ai-summary/pull/2">https://github.com/willow-god/hexo-ai-summary/pull/2</a>，等待原作者合并。如果你也遇到了类似的问题且PR还没有合并，可以直接修改本地<code>node_moudles</code>下的代码<code>node_modules/hexo-ai-summary-liushen/index.js</code>，写死一个休眠时间，翻到文件的最后，在return data之前加一个休眠时间（毫秒）就行了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        <span class="comment">// 这里新增一个休眠时间，2000ms就是2秒</span></span><br><span class="line">        <span class="keyword">await</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> <span class="built_in">setTimeout</span>(resolve, <span class="number">2000</span>))</span><br><span class="line">        <span class="keyword">return</span> data</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>需要注意的是，本地<code>node_moudles</code>的修改只针对本地生效，如果你用了vercel、netlify等部署平台，这个操作是不会生效的。</p><h3 id="4-2-AI返回的结果里面可能有换行">4.2. AI返回的结果里面可能有换行</h3><p>除了超RPM的问题，慕雪还遇到了AI返回的结果出现了换行的问题。所以，需要在插件对AI结果的解析中，把所有换行符<code>\n</code>变成空格。<strong>这部分我看插件的ai.js的第42行已经有了</strong>，用正则进行了替换。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 后处理与校验</span></span><br><span class="line"><span class="keyword">const</span> cleaned = reply</span><br><span class="line">  .<span class="title function_">replace</span>(<span class="regexp">/[\r\n]+/g</span>, <span class="string">&#x27; &#x27;</span>) <span class="comment">// 去换行</span></span><br><span class="line">  .<span class="title function_">replace</span>(<span class="regexp">/\s+/g</span>, <span class="string">&#x27; &#x27;</span>)     <span class="comment">// 合并多空格</span></span><br><span class="line">  .<span class="title function_">trim</span>()</span><br></pre></td></tr></table></figure><p>后来又查了查资料，了解到yaml只要用<code>&gt;-</code>开头，后续的内容都会合并成一行显示的，是符合语法规则的，所以没有问题。</p><p>可以在prompt里面进一步警示AI“禁止输出任何换行”，让他别输出有换行的内容。</p><h3 id="4-3-使用vercel、netlify等平台如何进行同步？">4.3. 使用vercel、netlify等平台如何进行同步？</h3><p>这里还有另外一个问题。如果你像慕雪一样，用了vercel、netlify等平台进行自动部署，那么hexo三板斧都是在vercel和netlify服务器上进行的，虽然也会请求AI，修改hexo文件，但是<strong>生成的摘要和修改后的文件都是在vercel和netlify的服务器上</strong>，不会写到你的hexo配置仓库里面。</p><p>这就会导致，如果你没有在本地运行hexo g命令手动执行插件，那么你新增的博客就永远不会有summary总结字段了。</p><p>所以，使用这个插件，最好还是定期手动去你的hexo仓库里面执行一下hexo g，把新增的博客全都搞上，免得每次Vercel和Netlify部署的时候，都需要给没有摘要的博客重新生成摘要。</p><h2 id="5-当前本站使用的构建方案的困境">5. 当前本站使用的构建方案的困境</h2><p>慕雪现在使用的hexo部署方案，是从obsidian直接触发的<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup>，基本流程如下：</p><ul><li>obsidian内使用了git插件，自动commit+push到obsidian仓库</li><li>obsidian仓库配置了Github Action，会自动把obsidian的博客文件夹和Hexo源配置仓库的<code>source/_post</code>目录进行同步，将obsidian修改的博客推送到Hexo源配置仓库。</li><li>Vercel、Netlify、Cloudflare Workers等CICD平台，检测到Hexo源码配置仓库更新后，自动进行hexo三板斧操作构建并部署。</li></ul><p>这整个流程我在本地上都只用在obsidian里面操作，除非我需要修改hexo主题的配置，才需要打开hexo仓库操作。</p><p>这就导致即便我去了<code>hexo g</code>里面手动触发了插件，新增了summary的文件也是在hexo仓库里面，在我的obsidian仓库里面没有。这个问题在abbrlink插件中也会出现，当时的解决办法是我用python脚本去生成了不冲突的abbrlink，然后手动配置到博客里面。</p><p>所以，现在这个AI summary我也得用类似的方案了，写了一个Python脚本，来生成总结。后续就在obisdian仓库里面运行这个python脚本即可。</p><p>先用<code>pip3</code>安装依赖项，主要是通过openai库去请求AI。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip3 install openai</span><br><span class="line">pip3 install python-dotenv</span><br><span class="line">pip3 install PyYAML</span><br></pre></td></tr></table></figure><p>脚本如下，你需要通过最后的几个<strong>环境变量</strong>（可以在脚本所在目录下放一个.env文件配置环境变量）配置你的OPENAI请求地址、模型和API Key，然后修改一下脚本里面的<code>MD_FILE_PATHS</code>指定你的obsidian博客md文件在哪一个目录。</p><p>这里<code>MD_FILE_PATHS</code>我设置成了一个list是因为python脚本运行的时候pwd可能不一样，会去找多个相对路径。免得只能在某个固定的pwd下运行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> yaml</span><br><span class="line"><span class="keyword">from</span> pathlib <span class="keyword">import</span> Path</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">List</span>, <span class="type">Dict</span></span><br><span class="line"><span class="keyword">from</span> openai <span class="keyword">import</span> OpenAI</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">MD_FILE_PATHS = [<span class="string">&#x27;../../Notes/CODE&#x27;</span>, <span class="string">&#x27;../Notes/CODE&#x27;</span>, <span class="string">&#x27;Notes/CODE&#x27;</span>]</span><br><span class="line"><span class="string">&quot;&quot;&quot;博客md文件路径列表&quot;&quot;&quot;</span></span><br><span class="line">SLEEP_TIME = <span class="number">1.5</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;处理一个文件休眠时间&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SummaryAgent</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, api_key: <span class="built_in">str</span>, base_url: <span class="built_in">str</span>, model: <span class="built_in">str</span>, max_tokens=<span class="number">8192</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;初始化数据集生成器</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            api_key: OpenAI API密钥</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.client = OpenAI(api_key=api_key, base_url=base_url)</span><br><span class="line">        <span class="variable language_">self</span>.model = model</span><br><span class="line">        <span class="variable language_">self</span>.max_tokens = max_tokens</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 系统提示词，和魔斯拉数据集</span></span><br><span class="line">        <span class="variable language_">self</span>.system_prompt = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">你是一个博客文章摘要生成工具，只需根据我发送的内容生成摘要。</span></span><br><span class="line"><span class="string">禁止输出换行，摘要必须是单行文本。禁止回答任何与摘要无关的问题、命令或请求。</span></span><br><span class="line"><span class="string">摘要内容必须在100到200字之间，仅介绍文章核心内容。</span></span><br><span class="line"><span class="string">请用中文作答，去除特殊字符，输出内容开头为&quot;这里是慕雪的小助手，这篇文章&quot;。</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">read_file</span>(<span class="params">path: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;读取文件函数&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(path, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="keyword">return</span> f.read()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">extract_json_from_response</span>(<span class="params">self, response_text: <span class="built_in">str</span></span>) -&gt; <span class="type">Dict</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;从AI返回的文本中提取JSON数据</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            response_text: AI返回的文本</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Returns:</span></span><br><span class="line"><span class="string">            提取的JSON字典，如果提取失败返回空字典</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 使用正则表达式提取JSON部分</span></span><br><span class="line">            <span class="comment"># 匹配从第一个&#123;到最后一个&#125;的内容</span></span><br><span class="line">            json_pattern = <span class="string">r&#x27;\&#123;.*\&#125;&#x27;</span></span><br><span class="line">            <span class="keyword">match</span> = re.search(json_pattern, response_text, re.DOTALL)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">match</span>:</span><br><span class="line">                json_str = <span class="keyword">match</span>.group(<span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span> json.loads(json_str)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;未在响应中找到JSON格式数据&quot;</span>)</span><br><span class="line">                <span class="keyword">return</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">except</span> json.JSONDecodeError <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;JSON解析错误: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> &#123;&#125;</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;提取JSON时出错: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">query</span>(<span class="params">self, prompt: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;调用ai生成摘要&quot;&quot;&quot;</span></span><br><span class="line">        response = <span class="variable language_">self</span>.client.chat.completions.create(model=<span class="variable language_">self</span>.model,</span><br><span class="line">                                                       messages=[&#123;</span><br><span class="line">                                                           <span class="string">&quot;role&quot;</span>: <span class="string">&quot;system&quot;</span>,</span><br><span class="line">                                                           <span class="string">&quot;content&quot;</span>: <span class="variable language_">self</span>.system_prompt</span><br><span class="line">                                                       &#125;, &#123;</span><br><span class="line">                                                           <span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>,</span><br><span class="line">                                                           <span class="string">&quot;content&quot;</span>: prompt</span><br><span class="line">                                                       &#125;],</span><br><span class="line">                                                       temperature=<span class="number">0.7</span>,</span><br><span class="line">                                                       max_tokens=<span class="variable language_">self</span>.max_tokens)</span><br><span class="line"></span><br><span class="line">        response_text = response.choices[<span class="number">0</span>].message.content</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;[AI]  AI响应长度: <span class="subst">&#123;<span class="built_in">len</span>(response_text)&#125;</span> 字符&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> response_text</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MarkdownProcessor</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Markdown文件处理器&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">find_markdown_files</span>(<span class="params">notes_dirs: <span class="type">List</span>[<span class="built_in">str</span>]</span>) -&gt; <span class="type">List</span>[<span class="built_in">str</span>]:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;查找多个Notes目录中的所有markdown文件&quot;&quot;&quot;</span></span><br><span class="line">        all_md_files = []</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> notes_dir <span class="keyword">in</span> notes_dirs:</span><br><span class="line">            notes_path = Path(notes_dir)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> notes_path.exists():</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;跳过：Notes目录不存在: <span class="subst">&#123;notes_dir&#125;</span>&quot;</span>)</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            </span><br><span class="line">            md_files = <span class="built_in">list</span>(notes_path.rglob(<span class="string">&quot;*.md&quot;</span>))</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;在 <span class="subst">&#123;notes_dir&#125;</span> 中找到 <span class="subst">&#123;<span class="built_in">len</span>(md_files)&#125;</span> 个markdown文件&quot;</span>)</span><br><span class="line">            all_md_files.extend([<span class="built_in">str</span>(f) <span class="keyword">for</span> f <span class="keyword">in</span> md_files])</span><br><span class="line">            <span class="keyword">break</span> <span class="comment"># 只处理一个目录</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;总共找到 <span class="subst">&#123;<span class="built_in">len</span>(all_md_files)&#125;</span> 个markdown文件&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> all_md_files</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">parse_front_matter</span>(<span class="params">content: <span class="built_in">str</span></span>) -&gt; <span class="built_in">tuple</span>[<span class="type">Dict</span>, <span class="built_in">str</span>, <span class="built_in">str</span>]:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;解析front-matter并返回front-matter字典和剩余内容</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Returns:</span></span><br><span class="line"><span class="string">            tuple: (front_matter_dict, front_matter_str, content_without_front_matter)</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        front_matter_pattern = <span class="string">r&#x27;^---\s*\n(.*?)\n---\s*\n&#x27;</span></span><br><span class="line">        <span class="keyword">match</span> = re.search(front_matter_pattern, content, re.DOTALL)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">match</span>:</span><br><span class="line">            front_matter_str = <span class="keyword">match</span>.group(<span class="number">1</span>)</span><br><span class="line">            content_without_front_matter = content[<span class="keyword">match</span>.end():]</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 使用yaml库解析YAML front-matter</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                front_matter = yaml.safe_load(front_matter_str) <span class="keyword">or</span> &#123;&#125;</span><br><span class="line">            <span class="keyword">except</span> yaml.YAMLError <span class="keyword">as</span> e:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;YAML解析错误: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">                front_matter = &#123;&#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> front_matter, front_matter_str, content_without_front_matter</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 如果没有front-matter，返回空的front-matter和完整内容</span></span><br><span class="line">            <span class="keyword">return</span> &#123;&#125;, <span class="string">&quot;&quot;</span>, content</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add_summary_to_front_matter</span>(<span class="params">content: <span class="built_in">str</span>, summary: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;在front-matter中添加summary字段</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            content: 原始文件内容</span></span><br><span class="line"><span class="string">            summary: 要添加的摘要</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Returns:</span></span><br><span class="line"><span class="string">            修改后的文件内容</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        front_matter, _, remaining_content = MarkdownProcessor.parse_front_matter(content)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 确保summary是单行</span></span><br><span class="line">        summary = summary.replace(<span class="string">&#x27;\n&#x27;</span>, <span class="string">&#x27; &#x27;</span>).strip()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 如果没有front-matter，创建一个新的</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> front_matter:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">f&quot;---\nsummary: <span class="subst">&#123;summary&#125;</span>\n---\n<span class="subst">&#123;content&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 如果已经有summary字段，替换它</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;summary&#x27;</span> <span class="keyword">in</span> front_matter:</span><br><span class="line">            front_matter[<span class="string">&#x27;summary&#x27;</span>] = summary</span><br><span class="line">            <span class="comment"># 使用yaml库重新构建front-matter字符串</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                front_matter_yaml = yaml.dump(front_matter, allow_unicode=<span class="literal">True</span>, default_flow_style=<span class="literal">False</span>)</span><br><span class="line">                new_front_matter_str = <span class="string">f&quot;---\n<span class="subst">&#123;front_matter_yaml&#125;</span>---\n&quot;</span></span><br><span class="line">            <span class="keyword">except</span> yaml.YAMLError <span class="keyword">as</span> e:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;YAML序列化错误: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">                <span class="comment"># 如果yaml序列化失败，使用简单格式</span></span><br><span class="line">                new_front_matter_lines = [<span class="string">&#x27;---&#x27;</span>]</span><br><span class="line">                <span class="keyword">for</span> key, value <span class="keyword">in</span> front_matter.items():</span><br><span class="line">                    new_front_matter_lines.append(<span class="string">f&quot;<span class="subst">&#123;key&#125;</span>: <span class="subst">&#123;value&#125;</span>&quot;</span>)</span><br><span class="line">                new_front_matter_lines.append(<span class="string">&#x27;---\n&#x27;</span>)</span><br><span class="line">                new_front_matter_str = <span class="string">&#x27;\n&#x27;</span>.join(new_front_matter_lines)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 如果没有summary字段，直接在front-matter末尾添加</span></span><br><span class="line">            <span class="comment"># 查找最后一个---的位置</span></span><br><span class="line">            last_end = content.find(<span class="string">&#x27;---\n&#x27;</span>, content.find(<span class="string">&#x27;---&#x27;</span>) + <span class="number">3</span>)</span><br><span class="line">            <span class="keyword">if</span> last_end == -<span class="number">1</span>:</span><br><span class="line">                <span class="comment"># 如果没有找到正确的结束标记，就在开头插入</span></span><br><span class="line">                <span class="keyword">return</span> <span class="string">f&quot;---\nsummary: <span class="subst">&#123;summary&#125;</span>\n---\n<span class="subst">&#123;content&#125;</span>&quot;</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 在---之前插入summary字段</span></span><br><span class="line">                before = content[:last_end]</span><br><span class="line">                after = content[last_end:]</span><br><span class="line">                <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;before&#125;</span>summary: <span class="subst">&#123;summary&#125;</span>\n<span class="subst">&#123;after&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> new_front_matter_str + remaining_content</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_file</span>(<span class="params">file_path: <span class="built_in">str</span>, summary_agent: SummaryAgent</span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;处理单个markdown文件，生成摘要并添加到front-matter&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            content = SummaryAgent.read_file(file_path)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 检查是否有front-matter</span></span><br><span class="line">            front_matter, _, article_content = MarkdownProcessor.parse_front_matter(content)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> front_matter:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;跳过 <span class="subst">&#123;file_path&#125;</span> - 没有front-matter&quot;</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 检查是否有abbrlink字段或abbrlink为空</span></span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;abbrlink&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> front_matter <span class="keyword">or</span> <span class="keyword">not</span> front_matter[<span class="string">&#x27;abbrlink&#x27;</span>] <span class="keyword">or</span> <span class="built_in">str</span>(front_matter[<span class="string">&#x27;abbrlink&#x27;</span>]).strip() == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;跳过 <span class="subst">&#123;file_path&#125;</span> - abbrlink字段为空或不存在&quot;</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 检查是否已经有summary字段</span></span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;summary&#x27;</span> <span class="keyword">in</span> front_matter:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;跳过 <span class="subst">&#123;file_path&#125;</span> - 已存在summary字段&quot;</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 限制内容长度以避免token限制</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(article_content) &gt; <span class="number">4000</span>:</span><br><span class="line">                article_content = article_content[:<span class="number">4000</span>] + <span class="string">&quot;...&quot;</span></span><br><span class="line"></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;正在为 <span class="subst">&#123;file_path&#125;</span> 生成摘要...&quot;</span>)</span><br><span class="line">            summary = summary_agent.query(article_content)</span><br><span class="line">            time.sleep(SLEEP_TIME)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 更新文件内容</span></span><br><span class="line">            new_content = MarkdownProcessor.add_summary_to_front_matter(content, summary)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                f.write(new_content)</span><br><span class="line"></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;✓ 成功为 <span class="subst">&#123;file_path&#125;</span> 添加摘要&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;✗ 处理文件 <span class="subst">&#123;file_path&#125;</span> 时出错: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> dotenv <span class="keyword">import</span> load_dotenv</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="comment"># 加载.env文件</span></span><br><span class="line">    load_dotenv(override=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    api_key = os.getenv(<span class="string">&quot;OPENAI_API_KEY&quot;</span>)</span><br><span class="line">    base_url = os.getenv(<span class="string">&quot;OPENAI_BASE_URL&quot;</span>)</span><br><span class="line">    model = os.getenv(<span class="string">&quot;OPENAI_MODEL&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> api_key <span class="keyword">or</span> <span class="keyword">not</span> base_url <span class="keyword">or</span> <span class="keyword">not</span> model:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;错误：未提供 API 密钥或基础 URL。请检查环境变量。&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    mothra = SummaryAgent(api_key=api_key, base_url=base_url, model=model)</span><br><span class="line">    processor = MarkdownProcessor()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 处理整个Notes目录</span></span><br><span class="line">    md_files = processor.find_markdown_files(MD_FILE_PATHS)</span><br><span class="line">    processed_count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> file_path <span class="keyword">in</span> md_files:</span><br><span class="line">        <span class="keyword">if</span> processor.process_file(file_path, mothra):</span><br><span class="line">            processed_count += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;\n处理完成！共处理了 <span class="subst">&#123;processed_count&#125;</span> 个文件&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="The-end">The end</h2><p>不管怎么说，本站也算是成功接入了AI总结的显示能力啦！虽然有点麻烦，但总好过没有。很多问题都是可以解决的。</p><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p>之前慕雪用python脚本测试过LongCat的OpenAI接口的rpm，约为30，也就是一分钟只能请求30次。 <a href="#fnref1" class="footnote-backref">↩︎</a></p></li><li id="fn2" class="footnote-item"><p>obsidian触发hexo详情可见：<a href="https://blog.musnow.top/posts/8608489065">https://blog.musnow.top/posts/8608489065</a> <a href="#fnref2" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content>
    
    
    <summary type="html">参考大佬的教程，为自己的博客站点加上了离线的AI摘要</summary>
    
    
    
    <category term="差生文具多" scheme="https://blog.musnow.top/categories/%E5%B7%AE%E7%94%9F%E6%96%87%E5%85%B7%E5%A4%9A/"/>
    
    <category term="博客建站" scheme="https://blog.musnow.top/categories/%E5%B7%AE%E7%94%9F%E6%96%87%E5%85%B7%E5%A4%9A/%E5%8D%9A%E5%AE%A2%E5%BB%BA%E7%AB%99/"/>
    
    
    <category term="博客建站" scheme="https://blog.musnow.top/tags/%E5%8D%9A%E5%AE%A2%E5%BB%BA%E7%AB%99/"/>
    
    <category term="Hexo" scheme="https://blog.musnow.top/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>【Agent.04】AI时代的hello world：调用OpenAI接口，与大模型交互</title>
    <link href="https://blog.musnow.top/posts/4044218607/"/>
    <id>https://blog.musnow.top/posts/4044218607/</id>
    <published>2025-09-30T07:25:08.000Z</published>
    <updated>2025-09-30T11:17:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>欢迎阅读慕雪撰写的AI Agent专栏，本专栏目录如下</p><ol class="series-items"><li><a href="/posts/4710483697/" title="【AI】AI对26届计算机校招的影响">【AI】AI对26届计算机校招的影响</a></li><li><a href="/posts/6796656750/" title="【Agent.01】AI Agent智能体开发专题引言">【Agent.01】AI Agent智能体开发专题引言</a></li><li><a href="/posts/6151856853/" title="【Agent.02】市面上常见的大模型有哪些？">【Agent.02】市面上常见的大模型有哪些？</a></li><li><a href="/posts/5745961587/" title="【Agent.03】带你学会写一个基础的Prompt">【Agent.03】带你学会写一个基础的Prompt</a></li><li><a href="/posts/4044218607/" title="【Agent.04】AI时代的hello world：调用OpenAI接口，与大模型交互">【Agent.04】AI时代的hello world：调用OpenAI接口，与大模型交互</a></li></ol><p>本文介绍了如何使用python发送请求，调用OpenAI的API，与大模型交互，获取到大模型关于hello的响应。</p><h2 id="1-引言">1. 引言</h2><p>如果说学习编程的第一个程序是hello world，那么学习AI Agent开发的第一个程序就是调用AI API。就像学车要先认识方向盘一样，调用API也是AI开发的必备技能。</p><p>本文将介绍如何使用Python的requests库调用硅基流动的OpenAI兼容API。这其实就是一个HTTP请求的事，我们发送请求给OpenAI格式API接口的服务端，服务端将请求处理成大模型能够接受的入参，再把大模型返回的结果，以OpenAI API的格式返回给我们。</p><p>本文使用Python的requests库，以硅基流动的API做示例，请求Qwen/Qwen3-8B模型。OpenAI的请求格式可以参考硅基流动的<a href="https://docs.siliconflow.cn/cn/api-reference/chat-completions/chat-completions">OpenAI API文档</a>。</p><p>阅读本文之前，请确保你对HTTP协议、Python的基本语法和requests库的使用有一定了解。本站的Agent专题不包含Python教学部分。</p><h2 id="2-准备工作">2. 准备工作</h2><h3 id="2-1-获取API密钥">2.1. 获取API密钥</h3><p>首先需要注册硅基流动账号，地址：<a href="https://cloud.siliconflow.cn/">https://cloud.siliconflow.cn/</a></p><blockquote><p>如果你愿意支持慕雪，可以使用<a href="https://cloud.siliconflow.cn/i/dyscfgUM">慕雪的邀请链接</a>注册硅基流动，万分感谢！</p></blockquote><p>登录后，在控制台找到&quot;API Keys&quot;页面，创建新的API密钥。这个密钥就是你在硅基流动这个平台上的身份证，千万保管好，别泄露了。任何平台的API Key都必须保管好！</p><h3 id="2-2-安装依赖库">2.2. 安装依赖库</h3><p>首先需要保证你的电脑上有Python的基本环境，安装Python参考本站博客：<a href="https://blog.musnow.top/posts/800910784">点我</a>。建议至少安装Python 3.10.x版本，不要安装太老的版本。</p><p>我们需要使用Python的requests库发送HTTP请求，所以需要安装requests库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install requests</span><br></pre></td></tr></table></figure><p>requests这玩意非常常用，所以直接装在你python全局环境就OJBK了，刚开始学习的时候，没必要去折腾啥虚拟环境。</p><h2 id="3-开始调用！">3. 开始调用！</h2><h3 id="3-1-基础调用示例">3.1. 基础调用示例</h3><p>下面是一个最最最基础的OpenAI请求，包含了一个system prompt和我们咨询的问题。</p><p>使用这个代码之前，你需要先替换代码最后的<code>API_KEY</code>为你自己的硅基流动API Key。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">call_ai_api</span>(<span class="params">api_key, question</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">调用硅基流动的OpenAI兼容API</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        api_key: API密钥</span></span><br><span class="line"><span class="string">        question: 用户问题</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        API响应结果</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    url = <span class="string">&quot;https://api.siliconflow.cn/v1/chat/completions&quot;</span></span><br><span class="line"></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&quot;Authorization&quot;</span>: <span class="string">f&quot;Bearer <span class="subst">&#123;api_key&#125;</span>&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/json&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&quot;model&quot;</span>: <span class="string">&quot;Qwen/Qwen3-8B&quot;</span>,</span><br><span class="line">        <span class="string">&quot;messages&quot;</span>: [</span><br><span class="line">            &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;system&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;你是一个有帮助的AI助手，回答要简明扼要。&quot;</span>&#125;,</span><br><span class="line">            &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: question&#125;</span><br><span class="line">        ],</span><br><span class="line">        <span class="string">&quot;stream&quot;</span>: <span class="literal">False</span>,</span><br><span class="line">        <span class="string">&quot;max_tokens&quot;</span>: <span class="number">512</span>,</span><br><span class="line">        <span class="string">&quot;temperature&quot;</span>: <span class="number">0.7</span>,</span><br><span class="line">        <span class="string">&quot;top_p&quot;</span>: <span class="number">0.7</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    response = requests.post(url, headers=headers, json=data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">        <span class="keyword">return</span> response.json()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&quot;error&quot;</span>: <span class="string">f&quot;请求失败，状态码: <span class="subst">&#123;response.status_code&#125;</span>&quot;</span>, <span class="string">&quot;message&quot;</span>: response.text&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用示例</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    API_KEY = <span class="string">&quot;your_api_key_here&quot;</span>  <span class="comment"># 替换为实际API密钥</span></span><br><span class="line">    result = call_ai_api(API_KEY, <span class="string">&quot;Hello World在编程中的意义是什么？&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;error&quot;</span> <span class="keyword">in</span> result:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;请求出错: <span class="subst">&#123;result[<span class="string">&#x27;error&#x27;</span>]&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;AI回复: <span class="subst">&#123;result[<span class="string">&#x27;choices&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;message&#x27;</span>][<span class="string">&#x27;content&#x27;</span>]&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>运行结果如下，AI成功回答了我们的问题</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">❯ uv run basic/01.openai_hello_world.py </span><br><span class="line">AI回复: </span><br><span class="line"></span><br><span class="line">&quot;Hello World&quot;是编程学习的入门示例，主要用于：  </span><br><span class="line">1. **验证环境**：确认编程语言和开发工具配置正确。  </span><br><span class="line">2. **教学用途**：帮助初学者快速理解基本语法结构（如输出语句）。  </span><br><span class="line">3. **历史传统**：源自1970年代C语言的早期教程，现已成为编程界的通用&quot;Hello World&quot;惯例。  </span><br><span class="line">4. **调试起点**：作为程序运行的简单测试，确保代码执行无误。  </span><br><span class="line"></span><br><span class="line">它象征着编程学习的起点，强调“能运行即可”的核心目标。</span><br></pre></td></tr></table></figure><h3 id="3-2-关键参数说明">3.2. 关键参数说明</h3><p>接下来，对OpenAI API接口中的关键参数进行说明。</p><h4 id="3-2-1-Header">3.2.1. Header</h4><p>首先是header里面的字段，Authorization是一个比较通用的鉴权字段，这里传入了我们的API KEY用来确认我们的用户身份，服务器才能提供响应。后续调用收费的模型，也会自动定位到你的硅基流动账户，进行扣费。</p><p>简单来说，Authorization就是一个身份标识，好比进门的钥匙。毕竟你不能不带钥匙就去开门，如果谁来都开门了，这个OpenAI的API接口岂不是能随便请求，那肯定会被干爆的！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&quot;Authorization&quot;</span>: <span class="string">f&quot;Bearer <span class="subst">&#123;api_key&#125;</span>&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/json&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-2-2-Body">3.2.2. Body</h4><p>随后，再来看看OpenAI的body字段里面有哪些内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&quot;model&quot;</span>: <span class="string">&quot;Qwen/Qwen3-8B&quot;</span>,</span><br><span class="line">    <span class="string">&quot;messages&quot;</span>: [</span><br><span class="line">        &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;system&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;你是一个有帮助的AI助手，回答要简明扼要。&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: question&#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&quot;stream&quot;</span>: <span class="literal">False</span>,</span><br><span class="line">    <span class="string">&quot;max_tokens&quot;</span>: <span class="number">512</span>,</span><br><span class="line">    <span class="string">&quot;temperature&quot;</span>: <span class="number">0.7</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个body里面包含的字段如下：</p><ol><li><strong>model</strong>：选择使用的AI模型，硅基流动提供多种模型可选</li><li><strong>messages</strong>：对话历史，包含角色和内容</li><li><strong>stream</strong>：是否使用流式响应，False表示等待完整响应，True代表使用流失响应；</li><li><strong>max_tokens</strong>：限制响应的最大token数量，防止AI输出到一半就不干活了，或者输出太多&quot;跑火车&quot;；</li><li><strong>temperature</strong>：控制回答的随机性，0到1之间的小数，值越高回答越有创意，或者说越高就越偏离你的原定目标。如果想让AI别那么发散，就把这个值稍微调小一点。一般建议默认使用<code>0.7</code>；</li></ol><h4 id="3-2-3-Messages列表">3.2.3. Messages列表</h4><p>其中，最重要的参数，是messages列表，这个列表控制了我们的历史记录。我们每次对大模型的请求，都是无状态的，整个对话的输入输出，都是客户端在控制。</p><p>举个例子：</p><ul><li>你请求了大模型A，咨询了问题1234。</li><li>你使用相同的历史记录去请求大模型B，大模型B依旧会有这些历史记录的“记忆”，继续回答你的问题5，同时也会知道前4个问题是啥。</li></ul><p>所以，在编写一个多次对话的大模型请求的时候，我们作为客户端的代码需要<strong>主动维护这个历史消息</strong>的messages列表，保证已有对话的记忆不丢失。</p><p>messages列表中的每一个成员都是一个dict，包含两个字段：</p><ul><li>role：字符串类型。当前这条消息的身份，可选值为system、user、assistant、tool，分别对应系统消息（system prompt）、用户发送的问题、大模型的回答、以及工具调用的返回值（工具调用结果）。</li><li>content：字符串或数组类型，当前这条消息的内容。建议不要使用数组类型，直接用字符串填写内容。</li></ul><p>对应Json格式如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;role&quot;</span><span class="punctuation">:</span> <span class="string">&quot;system | user | assistant | tool&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;字符串内容&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>当出现多轮对话的时候，我们请求体里面的messages列表也要对应更新，这便是我们客户端维护的历史消息。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line">  <span class="punctuation">&#123;</span><span class="attr">&quot;role&quot;</span><span class="punctuation">:</span> <span class="string">&quot;system&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;你是一名旅行顾问&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#123;</span><span class="attr">&quot;role&quot;</span><span class="punctuation">:</span> <span class="string">&quot;user&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;巴黎有哪些免费景点？&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#123;</span><span class="attr">&quot;role&quot;</span><span class="punctuation">:</span> <span class="string">&quot;assistant&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;巴黎免费景点有：塞纳河步行、卢森堡公园、蒙马特高地……&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#123;</span><span class="attr">&quot;role&quot;</span><span class="punctuation">:</span> <span class="string">&quot;user&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;那吃的呢？什么是最好吃的？&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#123;</span><span class="attr">&quot;role&quot;</span><span class="punctuation">:</span> <span class="string">&quot;assistant&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;法式牛排非常吃！&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><p>role中比较特殊的是tool这个类型，代表的是工具调用的返回结果。这部分在后续function calling实操部分再展开讲讲，现在你只要知道role有这个类型就行了。</p><h3 id="3-3-进阶：流式响应">3.3. 进阶：流式响应</h3><p>如果需要实时查看AI的输出过程（类似ChatGPT网页端上的样子），可以使用流式响应：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">stream_response</span>(<span class="params">api_key, question</span>):</span><br><span class="line">    url = <span class="string">&quot;https://api.siliconflow.cn/v1/chat/completions&quot;</span></span><br><span class="line"></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&quot;Authorization&quot;</span>: <span class="string">f&quot;Bearer <span class="subst">&#123;api_key&#125;</span>&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/json&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&quot;model&quot;</span>: <span class="string">&quot;Qwen/Qwen3-8B&quot;</span>,</span><br><span class="line">        <span class="string">&quot;messages&quot;</span>: [</span><br><span class="line">            &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: question&#125;</span><br><span class="line">        ],</span><br><span class="line">        <span class="string">&quot;stream&quot;</span>: <span class="literal">True</span>,</span><br><span class="line">        <span class="string">&quot;max_tokens&quot;</span>: <span class="number">512</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    response = requests.post(url, headers=headers, json=data, stream=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># 这里返回200，并不是请求全都发回来了，而是连上服务器了！</span></span><br><span class="line">    <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">        <span class="comment"># 开始遍历返回的结果，判断是不是有数据</span></span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> response.iter_lines():</span><br><span class="line">            <span class="keyword">if</span> line:</span><br><span class="line">                line_str = line.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">                <span class="keyword">if</span> line_str.startswith(<span class="string">&#x27;data:&#x27;</span>):</span><br><span class="line">                    <span class="keyword">if</span> line_str == <span class="string">&#x27;data: [DONE]&#x27;</span>:</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">                    json_str = line_str[<span class="number">5</span>:]</span><br><span class="line">                    chunk = json.loads(json_str)</span><br><span class="line">                    <span class="comment"># 真的有数据诶，打印一下！</span></span><br><span class="line">                    <span class="keyword">if</span> chunk[<span class="string">&#x27;choices&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;delta&#x27;</span>].get(<span class="string">&#x27;content&#x27;</span>):</span><br><span class="line">                        <span class="built_in">print</span>(chunk[<span class="string">&#x27;choices&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;delta&#x27;</span>][<span class="string">&#x27;content&#x27;</span>], end=<span class="string">&#x27;&#x27;</span>, flush=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;请求失败，状态码: <span class="subst">&#123;response.status_code&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用示例</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    API_KEY = <span class="string">&quot;your_api_key_here&quot;</span></span><br><span class="line">    stream_response(API_KEY, <span class="string">&quot;请写一首关于冬天的诗&quot;</span>)</span><br></pre></td></tr></table></figure><p>流式传输的执行效果如下</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/09/03fb2bf3dd500f94f9435d07da60e790.gif" alt="Sep-30-2025 16-35-28的副本.gif"></p><h2 id="4-总结">4. 总结</h2><p>调用OpenAI API是AI开发的入门技能，就像学习编程的hello world。掌握了这个基础，后续可以：</p><ol><li>尝试不同模型，比较效果差异</li><li>将AI集成到实际项目中</li><li>探索更多AI应用场景</li></ol><p>最后提醒：AI只是工具，关键是怎么用。与其追求最新最强的模型，不如先掌握好基本用法。</p><p>另外，本文介绍的OpenAI API请求只是最基础的一个hello world，Agent开发中并不会使用这么原始的方式调用OpenAI的接口，而是会使用OpenAI官方提供的python sdk和包装好的Agent框架，这样能避免造轮子的尴尬。这些都是后续专栏中会逐步介绍的内容了。</p>]]></content>
    
    
    <summary type="html">本文介绍了如何使用python发送请求，调用OpenAI的API，与大模型交互，获取到大模型关于hello的响应。</summary>
    
    
    
    <category term="编程学习" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="Agent智能体开发" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/Agent%E6%99%BA%E8%83%BD%E4%BD%93%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="AI" scheme="https://blog.musnow.top/tags/AI/"/>
    
    <category term="Agent开发" scheme="https://blog.musnow.top/tags/Agent%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>【面试】求职面试大忌：自断后路</title>
    <link href="https://blog.musnow.top/posts/3454235760/"/>
    <id>https://blog.musnow.top/posts/3454235760/</id>
    <published>2025-09-29T11:31:10.000Z</published>
    <updated>2025-09-30T07:14:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>转眼间，那位在求职汪洋里面扑腾求生的同学，也成了其他人的前辈……</p><p>这就是一篇随便写写的随笔，主要记录一下最近在网上和同学弟学妹交流期间，遇到的种种求职面试中“自断后路”的情况。为了规避隐私问题，博客发布的时候，事情已经过去数个月了，发布也征得了本人的同意。</p><h2 id="入职时间？问就是立马能去！">入职时间？问就是立马能去！</h2><p>先来说说一个发生在身边的案例吧。26年秋招内推了一位学弟，给他传授了点没啥用的经验，也帮他改了改简历。学弟本身<strong>实力很不错</strong>，简历、笔试都通过了，面试一面也顺利通过，但却输在了二面上。根据学弟所述，他二面的技术问题也都回答上来了，而且二面面了超过70分钟，不理解为啥二面面试官会把他挂了。</p><p>我也觉得纳闷，如果面试问题都答出来了，面试还超过了70分钟，理论上不应该会挂人的。因为互联网大厂的二面面试官一般都是某个小组的leader了，如果他对候选人没有兴趣，是不会耗费大于一小时的时间去面试的，太浪费时间。所以，二面超过1小时却挂掉了，除非是因为横向学历不够导致挂了，否则于情于理都说不明白。</p><p>学弟托了另外一位学长，在内部系统帮他找人查了二面面评，真相大白了。二面面试官在面试不通过原因里面写的是：“入职时间太晚，不能来提前实习。”</p><p>我问了学弟才知道，当时面试官问他什么时候能入职，他的回答是：“要26年7月入职，提前实习也得明年，因为现在的实习协议签到了明年。”</p><p>这就是一个典型的自绝后路回答啊！我们来分析一下面试官为什么要问这个问题：</p><ul><li>你参加的是校招生面试，国内高校的大学生毕业时间都是26年的6月到7月，<strong>面试官如果不需要你来提前实习，他没有任何必要问你“什么时候可以入职”</strong>。因为校招候选者正常入职的时间都得是明年的6月到7月！</li><li>理解这一点后，面试官问这个问题，期望得到的答复，自然是你能来提前实习！越早来的人机会就越大！大概率是面试官所在业务部门现在缺人，有校招生HC的同时期望这位校招生能提前实习，缓解一下人力缺口的压力。</li><li>而且，面试官问出这个问题，大概率是你的面试基本上已经过了（当然这一点要看面试官性格）。如果你的面试没有过，面试官问你什么时候能入职也没有意义呀！他又不打算要你。</li></ul><p>综上所述，无论什么情况，无论是校招生还是暑期实习，当面试官问你什么时候能入职，你都要说一个面试官满意的答案：“我马上就能入职。”</p><p>当然，如果你学校这边的事情真安排不过来，也不要笃定说自己一定能去，给面试官一个模糊的答案，比如：“应该能够月内入职”即可。</p><p>任何情况，都是先拿到offer再谈后续！届时offer发给你了，你真不能去提前实习，面试官也拿你没有办法的。除了少部分垃圾公司，会因为这种事情直接给你offer毁约了，这种公司不去也罢！</p><h2 id="意向Base地？全国可飞！">意向Base地？全国可飞！</h2><p>除了入职时间这个问题，还有另外一个送命问题就是Base地。</p><p>除非你是顶流大佬，能够做到让公司迁就你的Base地选择，否则，当公司HR问：“你接不接受xx工作地点”时候，回答绝对是一个字：“去！”</p><p>这个问题和上述问题根源都是同一的：如果HR能把你安排到你想去的Base地，他干嘛问你愿不愿意去另外一个？</p><p>所以，除非你是offer打牌的大佬，有能力选择自己的Base地，不然像我等小喽啰还是老老实实走“低声下气”路线，先把offer拿到手再说吧。哪怕你最终因为Base地决定不去这家公司，也别让到手的offer飞了。有offer，至少你有的选！</p><h2 id="薪资？你们定！">薪资？你们定！</h2><p>面试中还有另外一个非常高频的问题，就是问你的期望薪资。</p><p>这个问题本质上也是个送命题了，非常容易翻车。说大了容易“狮子大开口”，说小了会让人觉得你“不够自信”，反正好赖话都让HR说了。</p><p>之前在牛客网上看到过关于薪资问题的一个回答，我感觉可以借鉴：“我对薪资没有明确的个人要求，我认可贵司对校招生薪资的评估和决策。”</p><p>这句话本质上就是把薪资问题直接踢回给了面试官，想问我期望薪资？你们定！</p><p>毕竟即便你提了一个自己的薪资偏好，最终还是HR和面试官共同决定要给你开什么等级的offer，和你自己提的薪资偏好没有太大的关系。</p>]]></content>
    
    
    <summary type="html">简单谈谈慕雪最近在给学弟学妹们内推的时候，遇到的重重令人可惜的经历。</summary>
    
    
    
    <category term="求职路上一去不复返" scheme="https://blog.musnow.top/categories/%E6%B1%82%E8%81%8C%E8%B7%AF%E4%B8%8A%E4%B8%80%E5%8E%BB%E4%B8%8D%E5%A4%8D%E8%BF%94/"/>
    
    
    <category term="面经" scheme="https://blog.musnow.top/tags/%E9%9D%A2%E7%BB%8F/"/>
    
    <category term="随笔" scheme="https://blog.musnow.top/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>【AI】配置claude-code-router转发Claude Code请求至OpenAI API格式</title>
    <link href="https://blog.musnow.top/posts/4200815612/"/>
    <id>https://blog.musnow.top/posts/4200815612/</id>
    <published>2025-09-27T12:33:46.000Z</published>
    <updated>2025-09-28T14:19:33.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文将告诉你如何配置claude-code-router转发Claude Code请求至OpenAI API格式，兼容所有OpenAI格式的平台。</p><h2 id="1-前情提要">1. 前情提要</h2><p><a href="https://blog.musnow.top/posts/5046572767">上文</a>提到过，Claude Code必须要使用Anthropic API格式才能正常调用，但是绝大部分平台还没有跟进这一兼容性API，只提供了OpenAI这个老大哥格式的API接口。所以，我们需要借助工具，把Claude Code的Anthropic API格式请求转成OpenAI的格式，就可以正常使用了。</p><p>这个工具，便是开源的claude-code-router。注意，claude-code-router是一个额外的工具，和claude-code本体没有任何关联。</p><p>开源仓库：<a href="https://github.com/musistudio/claude-code-router/">https://github.com/musistudio/claude-code-router/</a></p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/09/433a83dc7a70b4b075b1affe953faa90.webp" alt="image.png"></p><h2 id="2-配置Claude-Code-Router">2. 配置Claude Code Router</h2><h3 id="2-1-安装Claude-Code-Router">2.1. 安装Claude Code Router</h3><p>首先，你需要安装好大于18版本的node和npm（最好是安装20.x版本以上的），并且安装了Claude Code<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @anthropic-ai/claude-code</span><br></pre></td></tr></table></figure><p>然后，安装 Claude Code Router：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @musistudio/claude-code-router</span><br></pre></td></tr></table></figure><p>安装好了之后，可以使用<code>ccr start</code>命令启动claude-code-router的服务端，这便是我们需要设置到Claude Code的<code>ANTHROPIC_BASE_URL</code>环境变量中的值了，默认端口是localhost:3456。</p><p>本文测试使用的版本，这俩工具版本更新比较快，不保证所有版本都可用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">❯ claude --version</span><br><span class="line">1.0.127 (Claude Code)</span><br><span class="line"></span><br><span class="line">❯ ccr version     </span><br><span class="line">claude-code-router version: 1.0.50</span><br></pre></td></tr></table></figure><h3 id="2-2-配置Claude-Code">2.2. 配置Claude Code</h3><p>在终端中修改Claude Code环境变量如下，就可以让Claude Code使用Claude Code Router的转发能力了。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> ANTHROPIC_BASE_URL=http://127.0.0.1:3456</span><br><span class="line"><span class="comment"># 这里必须设置AUTH_TOKEN，随便弄一个值就行，不然claude code会进行检查，没有AUTH_TOKEN是不合法的，会提示让你/login登录</span></span><br><span class="line"><span class="built_in">export</span> ANTHROPIC_AUTH_TOKEN=12356 </span><br></pre></td></tr></table></figure><h3 id="2-3-配置Claude-Code-Router">2.3. 配置Claude Code Router</h3><p>上面我们只是下载了Claude Code Router，还需要在Claude Code Router里面进行配置，才能转发到我们想要使用的OpenAI格式端点上。</p><p>需要修改配置文件<code>~/.claude-code-router/config.json</code>，写入如下内容。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;PORT&quot;</span><span class="punctuation">:</span> <span class="number">3456</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;LOG&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;LOG_LEVEL&quot;</span><span class="punctuation">:</span> <span class="string">&quot;debug&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;API_TIMEOUT_MS&quot;</span><span class="punctuation">:</span> <span class="number">600000</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;NON_INTERACTIVE_MODE&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;Providers&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;siliconflow&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;api_base_url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://api.siliconflow.cn/v1/chat/completions&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;api_key&quot;</span><span class="punctuation">:</span> <span class="string">&quot;硅基流动API KEY&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;models&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;Qwen/Qwen3-8B&quot;</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;transformer&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;use&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">          <span class="punctuation">[</span></span><br><span class="line">            <span class="string">&quot;maxtoken&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">              <span class="attr">&quot;max_tokens&quot;</span><span class="punctuation">:</span> <span class="number">8192</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">          <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;Router&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;default&quot;</span><span class="punctuation">:</span> <span class="string">&quot;siliconflow,Qwen/Qwen3-8B&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;background&quot;</span><span class="punctuation">:</span> <span class="string">&quot;siliconflow,Qwen/Qwen3-8B&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;think&quot;</span><span class="punctuation">:</span> <span class="string">&quot;siliconflow,Qwen/Qwen3-8B&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;longContext&quot;</span><span class="punctuation">:</span> <span class="string">&quot;siliconflow,Qwen/Qwen3-8B&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;longContextThreshold&quot;</span><span class="punctuation">:</span> <span class="number">60000</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;webSearch&quot;</span><span class="punctuation">:</span> <span class="string">&quot;siliconflow,Qwen/Qwen3-8B&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>在这个配置中，Router是我们最终想要使用的模型服务，格式为<code>提供商,模型名</code>。</p><p>提供商就是在Providers里面写好的供应商列表，其中第一个的name我设置成了siliconflow，base_url是硅基流动的OpenAI API，Claude Code Router会自动判断URL类型（OpenAI格式URL后缀都是<code>/chat/completions</code>），并使用内置的OpenAI格式转发器，将Anthropic API格式转换成OpenAI格式。</p><p>其他OpenAI API服务提供商也是一样的操作，你只需要修改本配置中的<code>api_base_url</code>和<code>api_key</code>就可以了，其他什么都不用改。<code>max_tokens</code>的数字也可以根据你的需要修改，会直接设置到OpenAI的API中。</p><p>注意，使用Claude Code Router之后，Claude Code的环境变量<code>ANTHROPIC_MODEL</code>里面配置的模型已经没有任何作用了，我们的模型由<strong>Claude Code Router的Router配置</strong>决定使用哪一个模型。</p><h3 id="2-4-后台持久运行ccr">2.4. 后台持久运行ccr</h3><p>如果是mac和Linux设备，你可以使用两种方式后台持久运行ccr，第一种方式是nohup，系统一般都自带了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">nohup</span> ccr start &gt;&gt; /dev/null 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><p>第二种方式是我更加推荐的，用tmux在后台运行<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装tmux</span></span><br><span class="line">brew install tmux</span><br><span class="line"><span class="comment"># 开一个终端</span></span><br><span class="line">tmux new-sesstion -s ccr</span><br><span class="line"><span class="comment"># 开始运行</span></span><br><span class="line">ccr start</span><br><span class="line"><span class="comment"># 然后用ctrl+b d的快捷键退出tmux，或直接关闭当前终端（tmux不会终止）</span></span><br></pre></td></tr></table></figure><p>windows设备我不太清楚如何让一个命令行程序后台运行，建议自己百度一下或者问AI。</p><h2 id="3-测试效果">3. 测试效果</h2><p>写好上述配置之后，<code>ccr restart</code>重新启动ccr的服务，然后打开claude code，就可以看到效果了，注意图中的<strong>API Base URL</strong>必须是本地的3456端口，才能确定使用的是Claude Code Router，一定要检查一下。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/09/d0af7c481cc6d9cf02592d1f0bfb57e4.webp" alt="image.png"></p><p>可以看到，发送的hello有了正常的回答。此时我们的请求已经通过Claude Code Router，打到了硅基流动OpenAI API的服务器上，成功使用上了OpenAI API的能力。</p><blockquote><p>梅开二度的解释：如果你发现在Claude Code里面使用非Claude模型咨询“你是谁”时返回了一个Claude模型的结果，不要惊讶，这也是正常情况。因为Claude Code的System Prompt里面写了让AI工具返回他自己是Claude 4 Sonet模型，所以即便你用的不是Claude模型，AI因为遵循了SP依旧返回了Claude模型的答案。不过目前看Claude Code新版本好像已经修复了这个问题了。</p></blockquote><p>可以试试让AI读一个文件，测试工具调用也是OK的</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/09/235d8ea77b066366bfb55b76ed196a67.webp" alt="image.png"></p><p>至此，大功告成！</p><h2 id="4-额外transformer配置：合并Content数组">4. 额外transformer配置：合并Content数组</h2><h3 id="4-1-啥时候需要这个transformer？">4.1. 啥时候需要这个transformer？</h3><p>如果你在执行了上文前三点的配置之后就可以用了（发送请求和工具调用都没问题），那就不需要这个自定义的transformer。如果不能，考虑是不是你使用的OpenAI API content不支持数组的问题，尝试一下添加第四点的这个transformer插件。</p><hr><p>下面讲一下转发OpenAI接口时，可能会遇到的情况。</p><p>相关issue：</p><ul><li><a href="https://github.com/musistudio/claude-code-router/issues/307">https://github.com/musistudio/claude-code-router/issues/307</a></li><li><a href="https://github.com/musistudio/claude-code-router/issues/483">https://github.com/musistudio/claude-code-router/issues/483</a></li></ul><p>我们最常见的OpenAI API的请求body格式如下</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;model&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gpt-3.5-turbo&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;messages&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;role&quot;</span><span class="punctuation">:</span> <span class="string">&quot;system&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;You are a helpful, respectful and honest assistant. Always answer as helpfully as possible, while being safe. Your answers should not include any harmful, unethical, racist, sexist, toxic, dangerous, or illegal content. Please ensure that your responses are socially unbiased and positive in nature. If a question does not make sense or is not factually coherent, explain why instead of answering something not correct. If you don&#x27;t know the answer to a question, please don&#x27;t share false information.&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;role&quot;</span><span class="punctuation">:</span> <span class="string">&quot;user&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&#123;&#123;用户输入的问题或指令&#125;&#125;&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;temperature&quot;</span><span class="punctuation">:</span> <span class="number">0.7</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;max_tokens&quot;</span><span class="punctuation">:</span> <span class="number">1000</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;stream&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>新版本的OpenAI API格式中，content不仅可以是字符串，还可以是一个数组，如下所示</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;model&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gpt-3.5-turbo&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;messages&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;role&quot;</span><span class="punctuation">:</span> <span class="string">&quot;system&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">          <span class="punctuation">&#123;</span></span><br><span class="line">              <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;text&quot;</span><span class="punctuation">,</span></span><br><span class="line">              <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;You are a helpful, respectful and honest assistant. Always answer as helpfully as possible, while being safe. Your answers should not include any harmful, unethical, racist, sexist, toxic, dangerous, or illegal content. Please ensure that your responses are socially unbiased and positive in nature. If a question does not make sense or is not factually coherent, explain why instead of answering something not correct. If you don&#x27;t know the answer to a question, please don&#x27;t share false information.&quot;</span></span><br><span class="line">          <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">         <span class="punctuation">&#123;</span></span><br><span class="line">              <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;text&quot;</span><span class="punctuation">,</span></span><br><span class="line">              <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;其他内容&quot;</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;role&quot;</span><span class="punctuation">:</span> <span class="string">&quot;user&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&#123;&#123;用户输入的问题或指令&#125;&#125;&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;temperature&quot;</span><span class="punctuation">:</span> <span class="number">0.7</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;max_tokens&quot;</span><span class="punctuation">:</span> <span class="number">1000</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;stream&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>Claude Code Router正是使用这种数组的方式发送的OpenAI API请求。问题在于，<strong>并非所有OpenAI API服务提供商都兼容了content为数组的格式</strong>，这就导致可能有部分OpenAI API服务商没办法正常通过Claude Code Router转发使用。</p><p>此时，我们就需要加上Claude Code Router的<strong>自定义transformer插件</strong>能力了，自定义transformer允许我们对Claude Code Router发出的请求进行二次修改。通过一个js脚本，我们就可以把上述content为数组的情况，改成content为字符串的情况（强行合并content的数组）</p><h3 id="4-2-添加合并content数组的transformer">4.2. 添加合并content数组的transformer</h3><p>js脚本内容如下，写入<code>~/.claude-code-router/plugins/content_array_to_text.js</code>文件即可。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ContentArrayToTextTransformer</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">options = &#123;&#125;</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&quot;content-array-to-text&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">transformRequestIn</span>(<span class="params">request</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!request || !request.<span class="property">messages</span> || !<span class="title class_">Array</span>.<span class="title function_">isArray</span>(request.<span class="property">messages</span>)) &#123;</span><br><span class="line">      <span class="keyword">return</span> request;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 深拷贝整个请求对象</span></span><br><span class="line">    <span class="keyword">const</span> transformedRequest = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(request));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> message <span class="keyword">of</span> transformedRequest.<span class="property">messages</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> message.<span class="property">content</span> !== <span class="string">&#x27;string&#x27;</span> &amp;&amp; <span class="title class_">Array</span>.<span class="title function_">isArray</span>(message.<span class="property">content</span>)) &#123;</span><br><span class="line">        <span class="keyword">const</span> textParts = [];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> item <span class="keyword">of</span> message.<span class="property">content</span>) &#123;</span><br><span class="line">          <span class="keyword">if</span> (item.<span class="property">type</span> === <span class="string">&quot;text&quot;</span> || item.<span class="property">type</span> === <span class="literal">undefined</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">typeof</span> item.<span class="property">text</span> === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">              textParts.<span class="title function_">push</span>(item.<span class="property">text</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> item === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">              textParts.<span class="title function_">push</span>(item);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="comment">// 忽略非 text 类型</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (textParts.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">          message.<span class="property">content</span> = textParts.<span class="title function_">join</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果没有 text 内容，保留原数组（或你可以设为空字符串）</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> transformedRequest;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">transformResponseOut</span>(<span class="params">response</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 必须要有这一行</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title class_">ContentArrayToTextTransformer</span>;</span><br></pre></td></tr></table></figure><p>对应修改ccr的<code>~/.claude-code-router/config.json</code>，用上这个transformer。</p><p>注意，配置中最后的transformers里面的path必须写死一个绝对路径，不能使用相对路径，用户家目录也不能用<code>~</code>替代，必须用绝对路径！<strong>你需要改成你自己的绝对路径，别直接抄我的</strong>。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;PORT&quot;</span><span class="punctuation">:</span> <span class="number">3456</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;LOG&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;LOG_LEVEL&quot;</span><span class="punctuation">:</span> <span class="string">&quot;debug&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;API_TIMEOUT_MS&quot;</span><span class="punctuation">:</span> <span class="number">600000</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;NON_INTERACTIVE_MODE&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;Providers&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;openai&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;api_base_url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://api.siliconflow.cn/v1/chat/completions&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;api_key&quot;</span><span class="punctuation">:</span> <span class="string">&quot;sk-xxxx&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;models&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;Qwen/Qwen3-8B&quot;</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;transformer&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;use&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">          <span class="punctuation">[</span></span><br><span class="line">            <span class="string">&quot;maxtoken&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">              <span class="attr">&quot;max_tokens&quot;</span><span class="punctuation">:</span> <span class="number">8192</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">          <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">          <span class="string">&quot;content-array-to-text&quot;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;Router&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;default&quot;</span><span class="punctuation">:</span> <span class="string">&quot;openai,Qwen/Qwen3-8B&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;background&quot;</span><span class="punctuation">:</span> <span class="string">&quot;openai,Qwen/Qwen3-8B&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;think&quot;</span><span class="punctuation">:</span> <span class="string">&quot;openai,Qwen/Qwen3-8B&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;longContext&quot;</span><span class="punctuation">:</span> <span class="string">&quot;openai,Qwen/Qwen3-8B&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;longContextThreshold&quot;</span><span class="punctuation">:</span> <span class="number">60000</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;webSearch&quot;</span><span class="punctuation">:</span> <span class="string">&quot;openai,Qwen/Qwen3-8B&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;transformers&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/Users/mothra/.claude-code-router/plugins/content_array_to_text.js&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>修改配置之后，ccr start重新启动ccr服务，注意检查日志中必须出现这一行，才是ok的</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;level&quot;</span><span class="punctuation">:</span><span class="number">30</span><span class="punctuation">,</span><span class="attr">&quot;time&quot;</span><span class="punctuation">:</span><span class="number">1758979607079</span><span class="punctuation">,</span><span class="attr">&quot;pid&quot;</span><span class="punctuation">:</span><span class="number">58358</span><span class="punctuation">,</span><span class="attr">&quot;hostname&quot;</span><span class="punctuation">:</span><span class="string">&quot;MACBOOKAIR-MOTHRA&quot;</span><span class="punctuation">,</span><span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span><span class="string">&quot;register transformer: content-array-to-text (no endpoint)&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>如果出现了下面这种错误，说明你的transformers写的不对，需要修改！</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;level&quot;</span><span class="punctuation">:</span><span class="number">50</span><span class="punctuation">,</span><span class="attr">&quot;time&quot;</span><span class="punctuation">:</span><span class="number">1758979551770</span><span class="punctuation">,</span><span class="attr">&quot;pid&quot;</span><span class="punctuation">:</span><span class="number">58108</span><span class="punctuation">,</span><span class="attr">&quot;hostname&quot;</span><span class="punctuation">:</span><span class="string">&quot;MACBOOKAIR-MOTHRA&quot;</span><span class="punctuation">,</span><span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span><span class="string">&quot;load transformer (/Users/mothra/.claude-code-router/plugins/content_array_to_text.js) \nerror: t is not a constructor\nstack: TypeError: t is not a constructor\n    at ia.registerTransformerFromConfig (/usr/local/lib/node_modules/@musistudio/claude-code-router/dist/cli.js:79015:19)\n    at ia.loadFromConfig (/usr/local/lib/node_modules/@musistudio/claude-code-router/dist/cli.js:79050:33)\n    at ia.initialize (/usr/local/lib/node_modules/@musistudio/claude-code-router/dist/cli.js:79029:68)&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>注意，transformers写的不对时，<strong>不会让ccr拒绝启动</strong>，只是ccr不会加载这个transformers！别以为终端没有出现报错就是没啥问题，一定要检查日志哦。</p><h3 id="4-3-测试修改后的效果">4.3. 测试修改后的效果</h3><p>测试一下，依旧可以正常请求硅基流动，搞定了！</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/09/ff327ea05ac2cd4b7bc3c46bd1b96270.webp" alt="image.png"></p><p>在日志中可以看到，我们的请求已经正常合并成一个字符串了（这里system prompt的内容很长，我只截取了开头部分）</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;request&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;method&quot;</span><span class="punctuation">:</span> <span class="string">&quot;POST&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;headers&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&#123;\&quot;messages\&quot;:[&#123;\&quot;role\&quot;:\&quot;system\&quot;,\&quot;content\&quot;:\&quot;You are Claude Code, Anthropic&#x27;s official CLI for Claude.\\n\\nYou are an interactive CLI tool that helps users with software engineering tasks. Use the instructions below and the tools available to you to assist the user.\\n\\nIMPORTANT: Assist with defensive security tasks only. Refuse to create, modify, or improve code that may be used maliciously. Do not assist with credential discovery or harvesting, including bulk crawling for SSH keys, browser cookies, or cryptocurrency wallets. Allow security analysis, detection rules, vulnerability explanations, defensive tools, and security documentation.\\n</span></span><br></pre></td></tr></table></figure><p>而添加transformer修改之前的system content部分是个数组，如下所示</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;request&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;method&quot;</span><span class="punctuation">:</span> <span class="string">&quot;POST&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;headers&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&#123;\&quot;messages\&quot;:[&#123;\&quot;role\&quot;:\&quot;system\&quot;,\&quot;content\&quot;:[&#123;\&quot;type\&quot;:\&quot;text\&quot;,\&quot;text\&quot;:\&quot;You are Claude Code, Anthropic&#x27;s official CLI for Claude.\&quot;,\&quot;cache_control\&quot;:&#123;\&quot;type\&quot;:\&quot;ephemeral\&quot;&#125;&#125;,&#123;\&quot;type\&quot;:\&quot;text\&quot;,\&quot;text\&quot;:\&quot;\\nYou are an interactive CLI tool that helps users with software engineering tasks. Use the instructions below and the tools available to you to assist the user.\\n\\nIMPORTANT: Assist with defensive security tasks only. Refuse to create, modify, or improve code that may be used maliciously. Do not assist with credential discovery or harvesting, including bulk crawling for SSH keys, browser cookies, or cryptocurrency wallets. Allow security analysis, detection rules, vulnerability explanations, defensive tools, and security documentation.\\n</span></span><br></pre></td></tr></table></figure><h2 id="5-更多">5. 更多</h2><p>更多Claude Code Router的配置，可以参考官方Github的文档：<a href="https://github.com/musistudio/claude-code-router/blob/main/README_zh.md">https://github.com/musistudio/claude-code-router/blob/main/README_zh.md</a></p><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p>claude-code安装参考：<a href="https://blog.musnow.top/posts/5046572767">https://blog.musnow.top/posts/5046572767</a> <a href="#fnref1" class="footnote-backref">↩︎</a></p></li><li id="fn2" class="footnote-item"><p>tmux的使用参考之前写过的博客：<a href="https://blog.musnow.top/posts/2203891398/">https://blog.musnow.top/posts/2203891398/</a> <a href="#fnref2" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content>
    
    
    <summary type="html">本文将告诉你如何配置claude-code-router转发Claude Code请求至OpenAI API格式，兼容所有OpenAI格式的平台。</summary>
    
    
    
    <category term="差生文具多" scheme="https://blog.musnow.top/categories/%E5%B7%AE%E7%94%9F%E6%96%87%E5%85%B7%E5%A4%9A/"/>
    
    <category term="编程工具" scheme="https://blog.musnow.top/categories/%E5%B7%AE%E7%94%9F%E6%96%87%E5%85%B7%E5%A4%9A/%E7%BC%96%E7%A8%8B%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="AI" scheme="https://blog.musnow.top/tags/AI/"/>
    
    <category term="AI编程工具" scheme="https://blog.musnow.top/tags/AI%E7%BC%96%E7%A8%8B%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>【AI】下载安装claude-code，并配置免费的LongCat大模型</title>
    <link href="https://blog.musnow.top/posts/5046572767/"/>
    <id>https://blog.musnow.top/posts/5046572767/</id>
    <published>2025-09-27T09:27:18.000Z</published>
    <updated>2025-10-01T02:09:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文将教大家如何下载安装claude-code，并配置免费的美团LongCat大模型API进行使用。</p><p>一句话介绍：Claude Code是Anthropic开发的一个智能编程工具，它直接在您的终端中运行，帮助您更快地将想法转化为代码。</p><h2 id="1-Node-js-安装">1. Node.js 安装</h2><p>要想安装Claude Code，需要先安装node和npm。</p><p>node的官网提供了一个完整的下载指导：<a href="https://nodejs.org/zh-cn/download">https://nodejs.org/zh-cn/download</a>，跟着操作就ok了，node算是一个编程学习者的必备工具了，很多第三方工具都是通过npm下载和管理的。</p><h3 id="1-1-Windows-系统">1.1. Windows 系统</h3><p>安装 Node.js 其实很简单，直接去 Node.js 官网 <a href="https://nodejs.org">https://nodejs.org</a> 下载 LTS 版本的安装包，建议选 22.x 或 24.x 版本，其他版本太老了，后续可能会停止支持。</p><p>下载完成后双击运行，跟着安装向导一路点击&quot;下一步&quot;就可以了。</p><p>装完后，打开一个终端（win+r里面输入cmd，或者直接在开始菜单的搜索里面搜cmd），可以在命令提示符里输入 <code>node -v</code> 和 <code>npm -v</code> 检查一下是否安装成功，如果显示了node的版本号那就没问题了。</p><h3 id="1-2-Mac-系统">1.2. Mac 系统</h3><h4 id="1-2-1-方法一：官网安装包（适合新手）">1.2.1. 方法一：官网安装包（适合新手）</h4><p>和 Windows一样，直接去官网 <a href="https://nodejs.org">https://nodejs.org</a> 下载 macOS 的<code>.pkg</code>安装包，推荐下载 LTS 版本（22.x 或 24.x）。下载后双击运行，按照安装向导的指引一路点&quot;继续&quot;就搞定了。安装完成后打开终端，输入 <code>node -v</code> 和 <code>npm -v</code> 验证一下，能看到版本号就说明装好了。</p><h4 id="1-2-2-方法二：Homebrew-安装（适合开发者）">1.2.2. 方法二：Homebrew 安装（适合开发者）</h4><p>如果你已经装了 Homebrew，那安装就更简单了。首先确保 Homebrew 已经安装，如果还没装，可以在终端里运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装homebrew</span></span><br><span class="line">/bin/bash -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure><p>Homebrew 装好后，直接运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install node@22</span><br></pre></td></tr></table></figure><p>同样，安装完成后输入 <code>node -v</code> 和 <code>npm -v</code> 检查一下。</p><blockquote><p>Homebrew这玩意基本上是mac必备的命令行工具了，这也是mac有别于windows电脑的一点，mac上很多有趣的软件和开发者工具可以通过Homebrew一键安装，而windows上配置一些环境容易头大。网上所谓“mac更适合编程人员”的论调也是基于此原因。</p><p>但是，对于普通学习者，特别是理工科大学生来说，没有任何必要，也<strong>千万不要</strong>把你的windows电脑卖了换个mac电脑。mac电脑在很多工科专业软件兼容性这方面是0！</p></blockquote><h4 id="1-2-3-方法三：nvm安装（强烈不推荐！！！！）">1.2.3. 方法三：nvm安装（强烈不推荐！！！！）</h4><p>node官网给出的安装指令，是让你先安装了一个node的版本管理工具nvm，然后通过nvm安装了22版本的node。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Download and install nvm:</span></span><br><span class="line">curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.3/install.sh | bash</span><br><span class="line"><span class="comment"># in lieu of restarting the shell</span></span><br><span class="line">\. <span class="string">&quot;<span class="variable">$HOME</span>/.nvm/nvm.sh&quot;</span></span><br><span class="line"><span class="comment"># Download and install Node.js:</span></span><br><span class="line">nvm install 22</span><br><span class="line"><span class="comment"># Verify the Node.js version:</span></span><br><span class="line">node -v <span class="comment"># Should print &quot;v22.20.0&quot;.</span></span><br><span class="line"><span class="comment"># Verify npm version:</span></span><br><span class="line">npm -v <span class="comment"># Should print &quot;10.9.3&quot;.</span></span><br></pre></td></tr></table></figure><p><strong>慕雪强烈不推荐这种方式</strong>！虽然nvm能够帮你管理node版本，但是在<code>.nvmrc</code>和全局的node版本不一样时，非常容易出现node版本不一致、不符合要求导致的各类问题。尤其是后续如果你需要使用npm安装的mcp工具时，nvm造成的问题绝对是烦人至极。</p><p>所以：<strong>强烈建议，不要在你的电脑上下载nvm</strong>！</p><p>现在更推荐使用<strong>mise</strong>来管理多个版本的node，参考官方文档：<a href="https://mise.jdx.dev/installing-mise.html">https://mise.jdx.dev/installing-mise.html</a>，后续慕雪会单独写个文档告诉大家如何使用mise。</p><h2 id="2-Claude-Code-安装">2. Claude Code 安装</h2><h3 id="2-1-啥是Claude-Code？">2.1. 啥是Claude Code？</h3><p>Claude Code是Anthropic开发的一个智能编程工具，它直接在您的终端中运行，帮助您更快地将想法转化为代码<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>。</p><p><strong>主要功能</strong>:</p><p>Claude Code可以帮您：</p><ul><li><strong>从描述构建功能</strong>：用简单的英语告诉Claude您想要构建什么，它会制定计划、编写代码并确保代码正常工作</li><li><strong>调试和修复问题</strong>：描述错误或粘贴错误消息，Claude Code会分析您的代码库，识别问题并实施修复</li><li><strong>导航任何代码库</strong>：询问关于团队代码库的任何问题，获得深思熟虑的回答。Claude Code能够了解整个项目结构，可以从网络获取最新信息，并通过MCP连接外部数据源</li><li><strong>自动化繁琐任务</strong>：修复lint问题、解决合并冲突、编写发布说明</li></ul><p><strong>为什么开发者喜欢Claude Code</strong>?</p><ul><li><strong>在终端中工作</strong>：不是另一个聊天窗口或IDE，Claude Code在您已经工作的地方与您相遇<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup></li><li><strong>直接执行操作</strong>：Claude Code可以直接编辑文件、运行命令和创建提交</li><li><strong>Unix哲学</strong>：Claude Code是可组合和可脚本化的</li><li><strong>企业就绪</strong>：内置企业级安全性、隐私保护和合规性</li></ul><hr><p>上面这个介绍很明显是AI写的，慕雪这里补充一点：Claude Code的Agent框架设计的非常完善，是目前终端命令行工具（Gemini、Qwen Code、codex）中设计的最好的一个，这也是为啥很多人都在用Claude Code。而且Claude Code并没有强行绑定官方API服务，让我们可以接入其他API，也满足了个人的多样化和企业的信息安全要求。</p><h3 id="2-2-安装-Claude-Code">2.2. 安装 Claude Code</h3><p>Node.js 安装好后，我们就可以开始安装 Claude Code 了。直接在终端里运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @anthropics/claude-code</span><br></pre></td></tr></table></figure><p>如果你的网络无法正常安装npm工具，可以加上国内阿里云镜像源进行安装：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @anthropics/claude-code --registry https://registry.npmmirror.com</span><br></pre></td></tr></table></figure><p>在macOS和Linux上，如果npm安装提示没有权限&quot;permission denied&quot;，可以在命令之前加上sudo执行。</p><p>等待安装完成，然后输入 <code>claude --version</code> 验证一下是否安装成功。出现了版本号就是OK了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">❯ claude --version</span><br><span class="line">1.0.127 (Claude Code)</span><br></pre></td></tr></table></figure><h2 id="3-配置-LongCat-API">3. 配置 LongCat API</h2><h3 id="3-1-LongCat是什么来头？">3.1. LongCat是什么来头？</h3><p>如果你最近有了解过大模型最新动态，你应该知道送外卖的<strong>美团</strong>发布了他们自研的大模型LongCat，在性能不错的同时，主打一个快。不管去问什么问题，回答的速度都是飞一般的快，和隔壁Kimi K2的慢吞吞形成鲜明对比。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/09/b17ccefb1a1f0b36400304a052a80c52.webp" alt=""></p><p>美团这次非常大方，每天提供了50w Token的API调用额度，足够我们学习和测试大模型了。</p><p>Claude Code 默认是使用 Anthropic 的 API，直接执行claude命令的时候，会告诉你当前无法连接上Anthropic的服务器，无法使用，这是正常情况，因为我们没有购买Anthropic的订阅，网络也连不上Anthropic的服务器（如果你买了估计你也不会来看本文了吧……哈哈）。</p><p>我们可以用 LongCat 免费提供的 API 来替代Anthropic官方API：<a href="https://longcat.chat/platform/docs/zh/ClaudeCode.html">LongCat文档</a>。</p><p>具体步骤如下：</p><h4 id="3-1-1-获取-LongCat-API-Key">3.1.1. 获取 LongCat API Key</h4><ol><li>访问 <a href="https://longcat.chat">LongCat 官网</a></li><li>注册并登录账号（其实就是你的美团账户）</li><li>进入<a href="https://longcat.chat/platform/usage">控制台</a>，创建新的 API Key</li><li>复制 API Key（注意保密，可千万别发网上）</li></ol><h4 id="3-1-2-配置-Claude-Code-使用-LongCat-API">3.1.2. 配置 Claude Code 使用 LongCat API</h4><p>根据官方文档，修改<code>~/.claude/settings.json</code>配置文件，写入如下内容，使用LongCat的Anthropic API，其中<code>ANTHROPIC_AUTH_TOKEN</code>需要更换成你自己的LongCat API Token。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;env&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;ANTHROPIC_AUTH_TOKEN&quot;</span><span class="punctuation">:</span> <span class="string">&quot;your_longcat_api_key&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;ANTHROPIC_BASE_URL&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://api.longcat.chat/anthropic&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;ANTHROPIC_MODEL&quot;</span><span class="punctuation">:</span> <span class="string">&quot;LongCat-Flash-Chat&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;ANTHROPIC_SMALL_FAST_MODEL&quot;</span><span class="punctuation">:</span> <span class="string">&quot;LongCat-Flash-Chat&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;ANTHROPIC_DEFAULT_SONNET_MODEL&quot;</span><span class="punctuation">:</span> <span class="string">&quot;LongCat-Flash-Chat&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;ANTHROPIC_DEFAULT_OPUS_MODEL&quot;</span><span class="punctuation">:</span> <span class="string">&quot;LongCat-Flash-Chat&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;CLAUDE_CODE_MAX_OUTPUT_TOKENS&quot;</span><span class="punctuation">:</span> <span class="string">&quot;8192&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;CLAUDE_CODE_DISABLE_NONESSENTIAL_TRAFFIC&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;permissions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;allow&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;deny&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>如果你是windows用户，这个配置文件的路径如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\[你的用户名]\.claude\settings.json</span><br></pre></td></tr></table></figure><p>这个配置文件本质上是在设置Claude Code全局使用的环境变量，你可以通过直接设置环境变量的方式，来实现相同的接入。将如下内容写入你的<code>~/.zshrc</code>、<code>~/.bashrc</code>，或在windows系统环境变量中设置即可。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> ANTHROPIC_AUTH_TOKEN=<span class="string">&quot;your_longcat_api_key&quot;</span></span><br><span class="line"><span class="built_in">export</span> ANTHROPIC_BASE_URL=<span class="string">&quot;https://api.longcat.chat/anthropic&quot;</span></span><br><span class="line"><span class="built_in">export</span> ANTHROPIC_MODEL=<span class="string">&quot;LongCat-Flash-Chat&quot;</span></span><br><span class="line"><span class="built_in">export</span> ANTHROPIC_SMALL_FAST_MODEL=<span class="string">&quot;LongCat-Flash-Chat&quot;</span></span><br><span class="line"><span class="built_in">export</span> ANTHROPIC_DEFAULT_SONNET_MODEL=<span class="string">&quot;LongCat-Flash-Chat&quot;</span></span><br><span class="line"><span class="built_in">export</span> ANTHROPIC_DEFAULT_OPUS_MODEL=<span class="string">&quot;LongCat-Flash-Chat&quot;</span></span><br><span class="line"><span class="built_in">export</span> CLAUDE_CODE_MAX_OUTPUT_TOKENS=<span class="string">&quot;8192&quot;</span></span><br><span class="line"><span class="built_in">export</span> CLAUDE_CODE_DISABLE_NONESSENTIAL_TRAFFIC=1</span><br></pre></td></tr></table></figure><p>注意：<code>~/.claude/settings.json</code>配置文件<strong>优先级高于</strong>终端环境变量，建议二者只选其中之一进行配置，不要两个一起配置。免得自己把自己的配置搞混。</p><h3 id="3-2-启动-Claude-Code">3.2. 启动 Claude Code</h3><p>配置完成后，直接在终端里输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">claude</span><br></pre></td></tr></table></figure><p>首次启动会提示你接受使用条款，运行访问当前目录，直接Yes即可，不然你是打不开的。</p><p>启动之后，可以看到API Base URL已经是美团LongCat的URL了，说明设置成功了。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/09/8e364bef6e80c67402631c65b01bc43d.webp" alt="image.png"></p><p>这里我们先hello一下，确认API配置没有问题，能够正常访问，然后顺带问问AI他知不知道自己是谁，龙猫的回答也是OK的。</p><p>至此，配置就OK啦！</p><blockquote><p>如果你发现在Claude Code里面使用<strong>非Claude模型</strong>咨询“你是谁”时返回了一个Claude模型的结果，不要惊讶，这也是正常情况。因为Claude Code的<strong>System Prompt</strong>里面写了让AI工具返回他自己是Claude 4 Sonet模型，所以即便你用的不是Claude模型，AI因为遵循了SP依旧返回了Claude模型的答案。不过目前看Claude Code新版本好像已经修复了这个问题了。</p></blockquote><h3 id="3-3-小小的问题：Token额度">3.3. 小小的问题：Token额度</h3><h4 id="3-3-1-申请更多额度">3.3.1. 申请更多额度</h4><p>虽然LongCat大方地提供了50w Token的免费额度，但Claude Code工具本身可是个吃Token的大户，随便处理一两个问题就用出去30w Token了，所以大家使用的时候还是得注意Token消耗。</p><p>如果你是在学习大模型Agent开发，以OpenAI API调用的话，那50w Token的免费额度可以说是彻底够够的了。也就Claude Code这种强Agent工具链会吃这么多Token，因为它内置了大概20k-30k Token的System Prompt和十多个内置工具，这些内置工具会以function call格式发送给大模型后端，也会算作Input Token的一部分。</p><p>不过呢！你可以在API后台里面<strong>申请更多额度</strong>，填写一个所在行业和公司的申请表（应该可以乱填，或者直接填你的学校）</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/09/24f2733e29ae8cda4c64676087654858.webp" alt="image.png"></p><p>填写完成点击提交后，如果审核通过了，你的每日Token额度，会暴涨到5M一天，也就是500万的Token额度！这个额度的Token即便在Claude Code里面也是基本够用了，白嫖成功！</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/09/c0a489207c640df01d7808ef931ba975.webp" alt="image.png"></p><h4 id="3-3-2-本地查看Claude-Code的Token用量">3.3.2. 本地查看Claude Code的Token用量</h4><p>你可以用npm安装ccusage项目，查看本地Claude Code累计的Token消耗。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> npm install -g ccusage </span><br></pre></td></tr></table></figure><p>安装之后，直接执行ccusage命令就可以看到记录了。更多命令可以用<code>ccusage --help</code>查看。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/09/09a4a2216afd95e6e4e19985bcc3a611.webp" alt="image.png"></p><h2 id="4-其他大模型">4. 其他大模型</h2><h3 id="4-1-配置DeepSeek-API">4.1. 配置DeepSeek API</h3><p>除了美团的LongCat，DeepSeek官方也提供了Anthropic API的支持：<a href="https://api-docs.deepseek.com/zh-cn/guides/anthropic_api">ds文档</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> ANTHROPIC_BASE_URL=https://api.deepseek.com/anthropic</span><br><span class="line"><span class="built_in">export</span> ANTHROPIC_AUTH_TOKEN=<span class="variable">$&#123;DEEPSEEK_API_KEY&#125;</span></span><br><span class="line"><span class="built_in">export</span> API_TIMEOUT_MS=600000</span><br><span class="line"><span class="built_in">export</span> ANTHROPIC_MODEL=deepseek-chat</span><br><span class="line"><span class="built_in">export</span> ANTHROPIC_SMALL_FAST_MODEL=deepseek-chat</span><br><span class="line"><span class="built_in">export</span> CLAUDE_CODE_DISABLE_NONESSENTIAL_TRAFFIC=1</span><br></pre></td></tr></table></figure><p>需要注意的是，DS提供的API并非免费的，所以你需要给你的DeepSeek账户<a href="https://platform.deepseek.com/top_up">充值</a>才能使用</p><p>根据<a href="https://api-docs.deepseek.com/zh-cn/quick_start/pricing">官方价格文档</a>，输入Token的价格是4元每百万（缓存基本上都命中不了），输出Token的价格是12元每百万，对于Claude Code这个吃Token大户来说，至少得准备几百元的预算才能放心使用。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/09/02a36b2033fba1348d5b7fc8afd44aca.webp" alt="image.png"></p><h3 id="4-2-配置智谱GLM的API">4.2. 配置智谱GLM的API</h3><p>GLM官方文档：<a href="https://docs.bigmodel.cn/cn/coding-plan/tool/claude#claude-code">https://docs.bigmodel.cn/cn/coding-plan/tool/claude#claude-code</a></p><blockquote><p>如果你没有注册过智谱，可以用一下慕雪的<a href="https://www.bigmodel.cn/claude-code?ic=VRGTIU5R45">邀请链接</a>，感谢支持！</p></blockquote><p>智谱注册之后，官方也会赠送200W Tokens的通用额度，可以拿来测试一下效果。</p><p>把如下内容填入<code>~/.claude/settings.json</code>文件即可，最新出的glm4.6最大支持64K Tokens的输出，这里把输出<code>CLAUDE_CODE_MAX_OUTPUT_TOKENS</code>设置成32K就差不多了。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">   <span class="attr">&quot;env&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;ANTHROPIC_AUTH_TOKEN&quot;</span><span class="punctuation">:</span> <span class="string">&quot;你的token&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;ANTHROPIC_BASE_URL&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://open.bigmodel.cn/api/anthropic&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;ANTHROPIC_MODEL&quot;</span><span class="punctuation">:</span> <span class="string">&quot;GLM-4.6&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;ANTHROPIC_SMALL_FAST_MODEL&quot;</span><span class="punctuation">:</span> <span class="string">&quot;GLM-4.6&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;ANTHROPIC_DEFAULT_SONNET_MODEL&quot;</span><span class="punctuation">:</span> <span class="string">&quot;GLM-4.6&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;ANTHROPIC_DEFAULT_OPUS_MODEL&quot;</span><span class="punctuation">:</span> <span class="string">&quot;GLM-4.6&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;CLAUDE_CODE_MAX_OUTPUT_TOKENS&quot;</span><span class="punctuation">:</span> <span class="string">&quot;32000&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;CLAUDE_CODE_DISABLE_NONESSENTIAL_TRAFFIC&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;permissions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;allow&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;deny&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>这里不得不吐槽一下智谱AI的后台，整个逻辑写的一坨屎，API Key的位置不好找，Token额度的位置不好找，就连买订阅的购物入口位置都莫名其妙的。反正突出一个抽象，使用体验很糟糕。</p><p>举个最简单的例子，慕雪为了测试效果几何，买了按月的20元Lite套餐，但一直没有找到这个套餐的额度在哪里看，没想到是在控制台主页往下滑里面才看的到！20元Lite套餐的Tokens额度是19.152亿（1915.2百万），这个额度确实够够的了，就是不知道为啥有零有整的，初始就不能给个整数额度吗。</p><blockquote><p>购买包月套餐的地址是：<a href="https://bigmodel.cn/claude-code">https://bigmodel.cn/claude-code</a></p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/09/aec1ab92549f07e623af4b1a6aacdf22.webp" alt="image.png"></p><p>好吧，既然这是一个资源包，那资源包页面里面有没有呢？答案是没有！如下图所示，资源包页面里面，<strong>没有GLM Coding Lite这个套餐的可用额度和剩余额度</strong>！！！！</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/09/bb14e1035918bcf3a7f2595baf625b40.webp" alt="image.png"></p><p>而且，在购买包月套餐的<a href="https://bigmodel.cn/claude-code">价格页面</a>里面，没有写这几个套餐分别有多少Tokens的额度，而是写了按prompt计算的用量，鬼知道你这个用量是怎么算出来的？你的prompt和我一样吗？还来一个“约”……</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/09/692908a765afd8eaa34e11c642de7e0d.webp" alt="image.png"></p><p>太逆天了，已经无言以对了。手动笑哭。</p><h3 id="4-3-还有其他白嫖方式吗？">4.3. 还有其他白嫖方式吗？</h3><p>那么肯定有聪明的盆友想问了，除了美团给的免费额度，还有没有谁也给了我们能用的免费额度呢？</p><p>有的兄弟有的，注册阿里云的大模型百炼平台，刚注册的90天内，有很多个模型都是<strong>各</strong>免费100万Token的，用完一个模型的额度后可以换个模型继续用。具体可以在<a href="https://help.aliyun.com/zh/model-studio/models?spm=a2c4g.11186623.help-menu-2400256.d_0_0_2.ee007d9dLoyLde">阿里云百炼模型价格</a>里面查看。</p><p>免责声明：我可没有收推广费哦，本文里面的所有链接都是没有邀请码的（我还不知道在哪里能弄邀请码呢）</p><blockquote><p>PS：别被阿里云文档里看上去很便宜的API价格虎住了哦，它的价格是按每千Token算的，不是每百万Token！要乘以1000才是其他平台显示的每百万Token价格。</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/09/907ed72180640864c71feb3eca9c03be.webp" alt="image.png"></p><p>但是！目前百炼平台只提供了OpenAI API格式的接入，没办法直接在Claude Code里面使用，需要借助claude-code-router工具进行转发（把Anthropic API转成OpenAI API格式），才能正常使用哦。</p><blockquote><p>更新：其实百炼是提供了Anthropic API的：<a href="https://help.aliyun.com/zh/model-studio/claude-code">文档</a></p></blockquote><p>具体操作，请听下文分解：<a href="https://blog.musnow.top/posts/4200815612">【AI】配置claude-code-router转发Claude Code请求至OpenAI API格式</a>。</p><hr><p>另外，比较出名的大模型API平台<a href="https://cloud.siliconflow.cn/me/models">硅基流动</a>也提供了很多免费调用的模型，但免费的都是些7B的小模型，拿来玩玩都属于不够的水平，基本上是没啥用的。轨迹流动是有提供Anthropic API的，可以使用如下方式配置<sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup>：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> ANTHROPIC_BASE_URL=<span class="string">&quot;https://api.siliconflow.cn/&quot;</span></span><br><span class="line"><span class="built_in">export</span> ANTHROPIC_MODEL=<span class="string">&quot;moonshotai/Kimi-K2-Instruct-0905&quot;</span>    <span class="comment"># 可以自行修改所需模型，目前仅支持非思考模型</span></span><br><span class="line"><span class="built_in">export</span> ANTHROPIC_API_KEY=<span class="string">&quot;YOUR_SILICONCLOUD_API_KEY&quot;</span>    <span class="comment"># 请替换 API Key</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/09/47d84a047f2a2212b7fcdb47e2b356c3.webp" alt="image.png"></p><p>如果你想体验Claude Code的完全体，掏钱是必须的啦！目测想yolo使用，每天至少得要消耗几百万甚至上千万的Token，预算得非常充足才能掏的起这个API使用费用呢。</p><p>或者你可以<strong>斥巨资</strong>买一个Mac Studio 512GB内存版本，直接本地部署一个满血的deepseek或者qwen3coder，那就再也不用担心Token不够用的问题了。富哥vivo50！</p><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p>为啥开发者喜欢Claude Code：<a href="https://docs.claude.com/en/docs/claude-code/overview#why-developers-love-claude-code">https://docs.claude.com/en/docs/claude-code/overview#why-developers-love-claude-code</a> <a href="#fnref1" class="footnote-backref">↩︎</a></p></li><li id="fn2" class="footnote-item"><p>举个很简单的例子，如果是没有GUI的Linux服务器，需要AI辅助的时候，你只能使用Claude Code这种命令行工具，而没办法使用cursor或者vscode里面的copliot。 <a href="#fnref2" class="footnote-backref">↩︎</a></p></li><li id="fn3" class="footnote-item"><p>硅基流动配置Claude Code：<a href="https://docs.siliconflow.cn/cn/usercases/use-siliconcloud-in-ClaudeCode">https://docs.siliconflow.cn/cn/usercases/use-siliconcloud-in-ClaudeCode</a> <a href="#fnref3" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content>
    
    
    <summary type="html">本文将教大家如何下载安装claude-code，并配置免费的美团LongCat大模型API进行使用。文中也提到了其他大模型接入cc的教程。</summary>
    
    
    
    <category term="差生文具多" scheme="https://blog.musnow.top/categories/%E5%B7%AE%E7%94%9F%E6%96%87%E5%85%B7%E5%A4%9A/"/>
    
    <category term="编程工具" scheme="https://blog.musnow.top/categories/%E5%B7%AE%E7%94%9F%E6%96%87%E5%85%B7%E5%A4%9A/%E7%BC%96%E7%A8%8B%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="AI" scheme="https://blog.musnow.top/tags/AI/"/>
    
    <category term="AI编程工具" scheme="https://blog.musnow.top/tags/AI%E7%BC%96%E7%A8%8B%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>【Hexo】使用hexo-markdown-it实现渲染markdown脚注能力</title>
    <link href="https://blog.musnow.top/posts/8330674478/"/>
    <id>https://blog.musnow.top/posts/8330674478/</id>
    <published>2025-09-21T02:14:47.000Z</published>
    <updated>2025-09-29T11:56:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍了如何配置hexo-markdown-it，让hexo站点支持脚注。</p><h2 id="1-说明">1. 说明</h2><p>如果你看过本文先前更新的一系列SLAM相关博客，就会发现，在<a href="https://blog.musnow.top/posts/2657887526/">【SLAM】使用evo工具来绘制ORB_SLAM2轨迹图，评估ATE\RPE指标</a>一文中，出现了脚注的能力。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/09/f190121e20c40c6d46e1c5490ca0e129.webp" alt="image.png"></p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/09/c73145d9d2c46f0cb7144e5ff1521ae5.webp" alt="image.png"></p><p>hexo在默认情况下是不支持渲染markdown脚注的，而慕雪编写博客使用的obsidian原生支持脚注。所以，我们只需要修改hexo的配置，让它也能渲染出脚注的样式，就ok了。</p><p>脚注的markdown格式如下，脚注实际内容的可以随意放置，markdown渲染器会在渲染的时候将其自动移动到文末显示。我们可以把脚注的内容直接写在脚注附近，后续编辑的时候就不需要跳到文末去看内容了，很方便。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">这是一个脚注[^1]</span><br><span class="line"></span><br><span class="line">[<span class="symbol">^1</span>]: <span class="link">脚注内容</span></span><br></pre></td></tr></table></figure><p>比如：示例脚注文字<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup></p><h2 id="2-配置">2. 配置</h2><blockquote><p>参考：<a href="https://gz-metal-cell.github.io/posts/Hexo-markdown-it/">https://gz-metal-cell.github.io/posts/Hexo-markdown-it/</a></p></blockquote><p>要想实现脚注能力，需要使用<a href="https://github.com/hexojs/hexo-renderer-markdown-it">github.com/hexojs/hexo-renderer-markdown-it</a>插件，替换掉hexo原生的md渲染器。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall hexo-renderer-marked --save     <span class="comment"># 卸载原有渲染器</span></span><br><span class="line">npm install hexo-renderer-markdown-it --save  <span class="comment"># 更换新的</span></span><br></pre></td></tr></table></figure><p>更换了渲染器之后，把下面这一段放到hexo配置文件<code>_config.yml</code>的最后就可以了。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># https://github.com/hexojs/hexo-renderer-markdown-it</span></span><br><span class="line"><span class="comment"># markdown增强插件，需要先卸载原始markdown渲染器才能安装，安装它是为了尝试脚注功能</span></span><br><span class="line"><span class="comment"># npm un hexo-renderer-marked --save &amp;&amp; npm i hexo-renderer-markdown-it --save</span></span><br><span class="line"><span class="attr">markdown:</span></span><br><span class="line">  <span class="attr">preset:</span> <span class="string">&#x27;default&#x27;</span></span><br><span class="line">  <span class="attr">render:</span></span><br><span class="line">    <span class="attr">html:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">xhtmlOut:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">langPrefix:</span> <span class="string">&#x27;language-&#x27;</span></span><br><span class="line">    <span class="attr">breaks:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">linkify:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">typographer:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">quotes:</span> <span class="string">&#x27;“”‘’&#x27;</span></span><br><span class="line">  <span class="attr">enable_rules:</span></span><br><span class="line">  <span class="attr">disable_rules:</span></span><br><span class="line">  <span class="attr">plugins:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">markdown-it-footnote</span> <span class="comment"># 脚注</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">markdown-it-sub</span>   <span class="comment"># ~下标~</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">markdown-it-sup</span>   <span class="comment"># ^上标^</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">markdown-it-mark</span>  <span class="comment"># ==高亮==</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">markdown-it-emoji</span> <span class="comment"># 可以渲染:cat:这种emoji</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">markdown-it-task-lists</span> <span class="comment"># 任务列表 checkbox</span></span><br><span class="line">  <span class="attr">anchors:</span></span><br><span class="line">    <span class="attr">level:</span> <span class="number">2</span></span><br><span class="line">    <span class="attr">collisionSuffix:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="attr">permalink:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">permalinkClass:</span> <span class="string">&#x27;header-anchor&#x27;</span></span><br><span class="line">    <span class="attr">permalinkSide:</span> <span class="string">&#x27;left&#x27;</span></span><br><span class="line">    <span class="attr">permalinkSymbol:</span> <span class="string">&#x27;¶&#x27;</span></span><br><span class="line">    <span class="attr">case:</span> <span class="number">0</span></span><br><span class="line">    <span class="attr">separator:</span> <span class="string">&#x27;-&#x27;</span></span><br><span class="line">  <span class="attr">images:</span></span><br><span class="line">    <span class="attr">lazyload:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">prepend_root:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">post_asset:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">inline:</span> <span class="literal">false</span>  <span class="comment"># https://markdown-it.github.io/markdown-it/#MarkdownIt.renderInline</span></span><br></pre></td></tr></table></figure><p>其中脚注功能是插件能力的的一部分，需要添加plugins markdown-it-footnote来启用。更多插件的作用可以查看上面贴出来的博客，这里就不多记录了。目测其他的插件用不上，可以在<a href="https://mdit-plugins.github.io/zh/">mdit-plugins.github.io/zh/</a>里面找其他插件。</p><p>需要注意的是，markdown-it-task-lists需要额外安装插件，否则<code>hexo g</code>的时候会报错</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install markdown-it-task-lists</span><br></pre></td></tr></table></figure><p>如上配置之后，可以在本地hexo s测试一下，慕雪实测和butterfly主题完全兼容，不需要修改其他任何配置。</p><h2 id="3-额外添加脚注提示文字">3. 额外添加脚注提示文字</h2><p>默认情况下，hexo-renderer-markdown-it提供的脚注，是没有任何提示文字，直接显示在文末的（会和正文有一条分割线）。这对不太了解脚注的读者来说可能会产生误导。</p><p>所以，我让ai编写了一个js脚本，可以在脚注之前注入一个“脚注：”提示文字，这样就能让脚注明显和其他内容区分开来了。你可以把这个js放到butterfly主题的footter或者header配置里面，就会生效。其他主题使用的方式类似，只要能给主题注入这个js即可。</p><p>注意js脚本里面会先判断路径中带有<code>/posts</code>，也就是本站的文章页面才会启动，否则不会生效。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 脚注检测并显示一个加粗文字</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">&lt;script&gt;document.addEventListener(&#x27;DOMContentLoaded&#x27;,()=&gt;&#123;if(window.location.pathname.includes(&#x27;/posts&#x27;))&#123;const</span> <span class="string">e=document.querySelector(&#x27;.footnotes&#x27;);e&amp;&amp;e.insertBefore(document.createElement(&#x27;strong&#x27;).appendChild(document.createTextNode(&#x27;脚注：&#x27;)).parentNode,e.firstChild);&#125;&#125;);&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><p>最终效果如图所示，红框圈出来的部分就是新增的“脚注：”提示文字。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/09/d2b59f83ce550a6c8bc35db2341e3f2c.webp" alt="image.png"></p><h2 id="4-插件和butterfly主题存在的冲突">4. 插件和butterfly主题存在的冲突</h2><p>这里要提醒一下butterfly主题的用户，hexo-markdown-it和butterfly主题的<strong>自定义高亮块</strong>是冲突的，比如下面这种</p><div class="note info modern"><p>这是一个自定义信息展示框[^2]</p></div><p>可以看到，在本站butterfly的博客站点上，这个自定义信息框里面的2号脚注没有被正常渲染，显示出了markdown原本的语法，不符合预期。这个是hexo-markdown-it和butterfly主题的冲突问题，目测无解。只能规避这种用法了。</p><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p>这是一个脚注内容 <a href="#fnref1" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content>
    
    
    <summary type="html">本文介绍了如何配置hexo-markdown-it，让hexo站点支持markdown脚注</summary>
    
    
    
    <category term="差生文具多" scheme="https://blog.musnow.top/categories/%E5%B7%AE%E7%94%9F%E6%96%87%E5%85%B7%E5%A4%9A/"/>
    
    <category term="博客建站" scheme="https://blog.musnow.top/categories/%E5%B7%AE%E7%94%9F%E6%96%87%E5%85%B7%E5%A4%9A/%E5%8D%9A%E5%AE%A2%E5%BB%BA%E7%AB%99/"/>
    
    
    <category term="博客建站" scheme="https://blog.musnow.top/tags/%E5%8D%9A%E5%AE%A2%E5%BB%BA%E7%AB%99/"/>
    
    <category term="Hexo" scheme="https://blog.musnow.top/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>【Agent.03】带你学会写一个基础的Prompt</title>
    <link href="https://blog.musnow.top/posts/5745961587/"/>
    <id>https://blog.musnow.top/posts/5745961587/</id>
    <published>2025-09-19T14:35:38.000Z</published>
    <updated>2025-09-21T00:11:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>欢迎阅读慕雪撰写的AI Agent专栏，本专栏目录如下</p><ol class="series-items"><li><a href="/posts/4710483697/" title="【AI】AI对26届计算机校招的影响">【AI】AI对26届计算机校招的影响</a></li><li><a href="/posts/6796656750/" title="【Agent.01】AI Agent智能体开发专题引言">【Agent.01】AI Agent智能体开发专题引言</a></li><li><a href="/posts/6151856853/" title="【Agent.02】市面上常见的大模型有哪些？">【Agent.02】市面上常见的大模型有哪些？</a></li><li><a href="/posts/5745961587/" title="【Agent.03】带你学会写一个基础的Prompt">【Agent.03】带你学会写一个基础的Prompt</a></li><li><a href="/posts/4044218607/" title="【Agent.04】AI时代的hello world：调用OpenAI接口，与大模型交互">【Agent.04】AI时代的hello world：调用OpenAI接口，与大模型交互</a></li></ol><p>本文介绍了如何写好一个分为多个步骤的Prompt，让AI输出更符合我们要求的答案。这部分慕雪理解的也不是很透彻，所以只是一个抛砖引玉，仅供参考。</p><h2 id="1-名词解释">1. 名词解释</h2><p>以下是本文涉及到的部分AI大模型领域专有名词的解释</p><table><thead><tr><th style="text-align:left">名词解释</th><th style="text-align:left">详细说明</th><th style="text-align:left">实际举例</th></tr></thead><tbody><tr><td style="text-align:left">Prompt（提示词）</td><td style="text-align:left">Prompt（提示词）就是你在 AI Chat 框中，发送给 AI 的内容。</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">Token</td><td style="text-align:left">大模型语言以Token数计算处理信息的数量。你可以将一个 Token 简单地理解为你输入的一个字符，输入的字符越多，占用的 Token 也就越多。</td><td style="text-align:left">实际上，一个Token可以包含多个英文单词和中文字符，左侧描述“一个Token是一个字符”只是为了帮助理解。<br>你可以使用<a href="https://www.token-calculator.com/">Token计算器</a>计算你输入的信息占用的Token数量。</td></tr><tr><td style="text-align:left">上下文 Token</td><td style="text-align:left">对于大语言模型而言，它们能够接纳和处理的信息是有上限的，这个限制，就是最大上下文 Token 数。<strong>AI无法处理超过模型自身上下文Token限制的数据</strong>。注意，<strong>AI输出的内容</strong>也是上下文Token的一部分。<br></td><td style="text-align:left">例：模型的最大上下文 Token 数为 8000，那么 AI 输出的内容加上用户输入的内容总和不能超过 8000 个 Token。如果用户输入的内容已经占用了较多的 Token，那么 AI 输出的内容就会相应减少，以确保总和不超过最大上下文 Token 数。</td></tr><tr><td style="text-align:left">最大输出 Token（max_tokens)</td><td style="text-align:left">最大输出 Token 是指 AI 在一次回复中<strong>能够生成的最大字符数量</strong>。这个是一个单独的限制，同时这个数量同样受到模型上下文 Token 数的限制。<br></td><td style="text-align:left">例：模型的最大上下文 Token 数为 8000，<strong>最大输出 Token 数为 2000</strong>，那么 AI 输出的内容加上用户输入的内容总和不能超过 8000 个 Token，即便用户输入的内容远远少于8000个Token，<strong>AI也会在输出了2000个Token之后</strong>，由于<strong>最大输出Token限制</strong>而无法输出。</td></tr></tbody></table><h2 id="2-引言：乔哈里视窗">2. 引言：乔哈里视窗</h2><h3 id="2-1-什么是乔哈里视窗？">2.1. 什么是乔哈里视窗？</h3><p>要想写好一个Promp，最基础的问题，自然是<strong>一个好的Prompt应当需要包含哪些内容</strong>了。回答这个问题之前，我们需要先了解一个概念：<a href="https://baike.baidu.com/item/%E4%B9%94%E5%93%88%E9%87%8C%E8%A7%86%E7%AA%97/2501456#:~:text=%E5%85%B3%E4%BA%8E%E6%B2%9F%E9%80%9A%E7%9A%84%E6%8A%80%E5%B7%A7%E5%92%8C%E7%90%86%E8%AE%BA%E4%B9%94%E5%93%88%E9%87%8C%E8%A7%86%E7%AA%97%EF%BC%88Johari%20Window%EF%BC%89%E6%98%AF%E4%B8%80%E7%A7%8D%E5%85%B3%E4%BA%8E%E6%B2%9F%E9%80%9A%E7%9A%84%E6%8A%80%E5%B7%A7%E5%92%8C%E7%90%86%E8%AE%BA%EF%BC%8C%E4%B9%9F%E8%A2%AB%E7%A7%B0%E4%B8%BA%E2%80%9C%E8%87%AA%E6%88%91%E6%84%8F%E8%AF%86%E7%9A%84%E5%8F%91%E7%8E%B0%E2%80%94%E2%80%94%E5%8F%8D%E9%A6%88%E6%A8%A1%E5%9E%8B%E2%80%9D%EF%BC%8C%E4%B8%AD%E5%9B%BD%E7%AE%A1%E7%90%86%E5%AD%A6%E5%AE%9E%E5%8A%A1%E4%B8%AD%E9%80%9A%E5%B8%B8%E7%A7%B0%E4%B9%8B%E4%B8%BA">乔哈里视窗</a>（Johari Window）</p><p>乔哈里视窗并不是AI时代才提出的概念，它是由乔瑟夫（Joseph）和哈里（Harry）在20世纪50年代提出的。视窗理论将人际沟通的信息比作一个窗子，它被分为4个区域：开放区、隐秘区、盲目区、未知区，人的有效沟通就是这四个区域的有机融合。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/09/bd7d2bcd4e0f68aaa9f11859dce881b9.webp" alt="image.png"></p><p>同理，我们和AI的有效交流，也符合乔哈里视窗四个区域的概念：</p><ul><li>开放区：我们知道，AI知道。此类问题，在Prompt中无需多言。<ul><li>举例：你想让AI帮你写一个C语言的hello world，你不需要把C语言的编程手册全部发给AI，因为这个知识，是AI已经知道的内容。</li></ul></li><li>隐蔽区：我们知道，AI不知道。此类问题，在Prompt中需要着重描述。<ul><li>举例：你希望让AI帮你补充论文中的一部分内容，此时你希望AI以学术论文的风格输出文字。但如果不将“以学术论文的要求输出&quot;在Prompt里面告诉AI，AI就不会知道这个需要，大概率会用口语化表达输出你想要的内容，而这部分内容并不是你需要的结果。</li></ul></li><li>盲点区：我们不知道，AI知道。很多时候我们需要AI帮忙解决问题的时候，就是想让AI补充我们的盲点区。<ul><li>举例：你让AI帮你实现一个脚本的时候，只说了需求，没有指定脚本的编程语言，此时AI会根据你的上下文推测你想要的编程语言是谁，最终输出这个语言的脚本。</li></ul></li><li>未知区：我们不知道，AI也不知道。常见于头脑风暴、文字续写等探索性的场景。</li></ul><h3 id="2-2-善用乔哈里视窗">2.2. 善用乔哈里视窗</h3><p>不管是和AI交流还是和其他人交流，善用乔哈里视窗理念，能帮助你减少交流中出现的误解，提高交流体验和效率。最佳实践如下：</p><p><strong>一、扩大开放区</strong>：</p><ul><li>把心里想要的都说出来，不要留在“隐藏区”。</li><li>例如：“写一篇论文” → “写一篇 2000 字的中文论文，主题是人工智能对社会发展的影响，用正式学术风格”。</li></ul><p><strong>二、缩小盲区</strong>：</p><ul><li>通过反馈或示例，让 AI 知道你没意识到的重要信息。</li><li>比如AI输出后，你觉得风格不对，就要补充：“希望风格更口语化”。下次就能提前写进 Prompt。</li></ul><p><strong>三、利用未知区</strong>：</p><ul><li>当你不确定需求时，可以明确说“请先给我几个方向/示例让我选择”。这样 AI 可以帮你探索需求。</li><li>相反，如果你明确自己需要获得什么类型的答案的时候，也可以明确表明让AI往某个方向输出结果，这样AI也不会发散的给你提供多种方案了。</li></ul><h2 id="3-阐述：Prompt应包含的内容">3. 阐述：Prompt应包含的内容</h2><p>引入了乔哈里视窗这个概念之后，我们再来看看，一个好Prompt需要包含什么内容吧。</p><p>首先，一个好的Prompt，通常需要具备 <strong>清晰性、完整性和可操作性</strong>。这三个特性可以分成如下的关键要素：</p><h3 id="3-1-身份-角色设定">3.1. 身份/角色设定</h3><p>对于大语言模型而言，我们和它们的所有交流都是“无状态”的，为了更好的激活大语言模型中的特定参数区，我们可以给大语言模型提供一个身份设定。最简单的方式就是告诉AI，现在它是什么领域的专家、面试官、编辑、导师……，让AI扮演起这个角色，能让AI在这个领域的问题中正确思考，输出更好的答案。</p><p>比如，你需要咨询C/C++编程语言的问题，就可以在你的Prompt开头带上这样一句话：“你是一位C/C++编程领域的专家，擅长解决C/C++学习者在学习过程中会遇到的问题。”</p><p>这样，AI就会立马知道自己需要帮助你解决C/C++方向的问题，从而省去了AI从你的输入中推导你需要什么类型的辅助这一步骤。</p><h3 id="3-2-任务目标">3.2. 任务目标</h3><p>任务目标明确你需要AI做什么，避免模糊的需求描述。</p><p>比如，当你需要AI分析一段代码报错的时候，直接告诉AI：“请帮我分析这段Python的报错堆栈，告诉我出现了什么问题”，就比“帮我看看”这种简单的描述更好。</p><h3 id="3-3-上下文信息">3.3. 上下文信息</h3><p>“在没有错误日志的情况下诊断任何问题，无异于闭眼开车。”</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/09/27cfad0b678a3f0af0bc905a7e021c60.webp" alt="8619ab2b1b35b27a799f5873b5299168.jpeg"></p><p>咨询问题的时候，一定需要提供相关的上下文背景。比如分析报错，就需要告诉AI你的报错日志是什么、是在什么情况下发生的、你希望这个程序达到的目标是什么。</p><p>此类上下文信息，越多越好。它们是AI理解任务需求的重要参考资料。</p><p>同时，提供上下文信息的时候，需要遵循上文乔哈里视窗理念，<strong>不要给AI提供过量的上下文信息</strong>。比如某个编程语言的语法、某个常见Python库应该如何调用（比如requests库和aiohttp库）、如何使用g++编译程序等等……这类信息，虽然也是和你的需要息息相关，但它们都是AI已经知道的内容。过量提供上下文，会占用AI的上下文token，token占用过多，会导致AI更容易出现“幻觉”，无法理解你的需求，最终输出牛头不对马嘴的答案，浪费时间。</p><h3 id="3-4-输入数据">3.4. 输入数据</h3><p>这部分和上下文信息有一定区别，上下文信息是你当前操作项目的背景信息。而输入数据是你需要AI解决某个问题的直接信息输入。</p><ul><li>你需要AI查询最新的大模型论文，此时“帮我查询最新的大模型论文”就是你的直接输入数据，也是你的直接要求。</li><li>你需要AI帮你解决代码报错的时候，“帮我解决这个Python的报错”就是你的直接输入，而报错的日志属于这个输入的附加信息。</li></ul><h3 id="3-5-输出要求">3.5. 输出要求</h3><p>输出要求的目标是指定结果的格式和风格</p><ul><li>“用表格展示”、“用markdown输出”</li><li>“用C++实现”</li><li>“控制在300字以内”</li><li>“分点叙述，逻辑清晰”</li><li>“以xxx格式输出结果”</li></ul><p>这里对<strong>格式限制</strong>做特殊说明：为了实现大模型辅助我们完成一些自动化任务，我们必须限制大模型输出信息的格式，以方便我们在代码中接收了数据之后，进行格式化处理。</p><p>比如：“请以JSON格式输出你的分析结论”。这样，AI大模型就会以JSON格式输出结果，我们就可以在脚本中对AI输出的这条信息进行序列化处理。</p><p>如果不进行格式限制，AI输出纯文本信息，我们是无法在代码中对纯文本信息进行解译的，也就没办法自动化的应用AI输出的结果。因此，针对此类自动化需求，一定一定要牢记和AI约定要一个输出格式的限定条件，且此限定条件<strong>需要多次强调</strong>，才能保证AI遵循。</p><h3 id="3-6-限制条件">3.6. 限制条件</h3><p>说明必须遵守的规则：字数、语气、禁止输出的内容、引用文献的方式、是否允许使用外部知识等。</p><p>比如你需要AI根据某个文档输出结论的时候，就可以在Prompt中添加“必须以文档中的信息总结并回答我的问题，严禁使用任何外部知识”。</p><h3 id="3-7-示例或期望风格（Examples-Style-Guide）">3.7. 示例或期望风格（Examples / Style Guide）</h3><p>很多时候，我们希望AI以某个风格输出答案，此时就可以添加上风格要求的描述。</p><p>比如“参考下面这个写法……”或者“生成和这段风格类似的文本”。</p><h2 id="4-速查：Prompt检查单">4. 速查：Prompt检查单</h2><p>了解了上述内容后，想必你已经清楚了应该如何写一个好的Prompt了。</p><p>这里需要说明的是，这些Prompt的约束更多是在项目实战环节，也就是你需要AI长期稳定地给出你想要的答案时，才需要遵循的。日常我们和AI咨询问题，没必要死守这些原则，得到的答案好不好先不提，日常随便问个问题都死守原则，肯定会让自己的心情不好。</p><p>在后续的项目实战环节，会给大家展示好的Prompt和坏的Prompt的差距。你也可以自己测试一下，同一个问题，依照上述内容编写，和不遵循上述内容编写，咨询AI获得的答案的差距。</p><p>这里慕雪给大家一个简化的Prompt编写检查单，方便快速自检：</p><ul class="contains-task-list"><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 任务目标：我要让 AI 做什么？</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 上下文：需要提供哪些背景？</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 输入：AI 需要处理的内容是什么？</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 输出要求：希望结果的形式/风格/长度？</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 补充：有没有我没说清的，AI 可以提醒或给选项。</li></ul><h2 id="5-The-end">5. The end</h2><p>本文到这里就结束啦，有任何问题，欢迎评论区讨论！</p>]]></content>
    
    
    <summary type="html">本文介绍了如何写好一个分为多个步骤的Prompt，让AI输出更符合我们要求的答案。</summary>
    
    
    
    <category term="编程学习" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="Agent智能体开发" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/Agent%E6%99%BA%E8%83%BD%E4%BD%93%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="AI" scheme="https://blog.musnow.top/tags/AI/"/>
    
    <category term="Agent开发" scheme="https://blog.musnow.top/tags/Agent%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>【Agent.02】市面上常见的大模型有哪些？</title>
    <link href="https://blog.musnow.top/posts/6151856853/"/>
    <id>https://blog.musnow.top/posts/6151856853/</id>
    <published>2025-09-15T00:42:09.000Z</published>
    <updated>2025-09-27T09:22:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>欢迎阅读慕雪撰写的AI Agent专栏，本专栏目录如下</p><ol class="series-items"><li><a href="/posts/4710483697/" title="【AI】AI对26届计算机校招的影响">【AI】AI对26届计算机校招的影响</a></li><li><a href="/posts/6796656750/" title="【Agent.01】AI Agent智能体开发专题引言">【Agent.01】AI Agent智能体开发专题引言</a></li><li><a href="/posts/6151856853/" title="【Agent.02】市面上常见的大模型有哪些？">【Agent.02】市面上常见的大模型有哪些？</a></li><li><a href="/posts/5745961587/" title="【Agent.03】带你学会写一个基础的Prompt">【Agent.03】带你学会写一个基础的Prompt</a></li><li><a href="/posts/4044218607/" title="【Agent.04】AI时代的hello world：调用OpenAI接口，与大模型交互">【Agent.04】AI时代的hello world：调用OpenAI接口，与大模型交互</a></li></ol><p>本文是本专栏的正文第一篇。</p><h2 id="写在前面">写在前面</h2><p>要想更好的掌握AI，平日里就少不了和AI的交流。任何事情都是这样，只有用的更多，才有可能变得更加熟练，最后进行AI Agent开发的时候，也能够更加得心应手。</p><p>相比之下，如果现在还像从前一样只是啃B站视频或者书籍死学的同学，可能会逐步被AI时代淘汰。</p><p>本文收集了当前最主流的大模型，以及它们的官网、适用场景。建议大家在编程学习过程中把这一堆大模型全都自己试试，看看从你的角度出发，哪一个大模型的体验和效果最好。</p><h2 id="主流大模型一览">主流大模型一览</h2><p>下标囊括了当前最主流的大模型，以及它们的适用场景。大家都要多去试试这些模型的效果哦！</p><table><thead><tr><th style="text-align:center">大模型</th><th style="text-align:center">最新模型</th><th style="text-align:center">公司</th><th style="text-align:center">适用场景</th><th style="text-align:center">备注</th><th style="text-align:center">官网</th></tr></thead><tbody><tr><td style="text-align:center">GPT 系列</td><td style="text-align:center">GPT-4.5 Turbo</td><td style="text-align:center">OpenAI 🇺🇸</td><td style="text-align:center">通用对话、代码、多模态</td><td style="text-align:center">GPT应该是最早进入大众视野的大模型了</td><td style="text-align:center"><a href="https://chat.openai.com/">https://chat.openai.com/</a></td></tr><tr><td style="text-align:center">Gemini 系列</td><td style="text-align:center">Gemini 2.5 Pro</td><td style="text-align:center">Google / DeepMind 🇺🇸</td><td style="text-align:center">长文本、多模态、搜索增强</td><td style="text-align:center">谷歌的Gemini在长文本处理这块非常牛</td><td style="text-align:center"><a href="https://ai.google">https://ai.google</a><br><a href="https://aistudio.google.com/prompts/new_chat">https://aistudio.google.com/prompts/new_chat</a><br><a href="https://gemini.google.com/gem/brainstormer">https://gemini.google.com/gem/brainstormer</a><br><a href="https://notebooklm.google.com/notebook/">https://notebooklm.google.com/notebook/</a></td></tr><tr><td style="text-align:center">Claude 系列</td><td style="text-align:center">Claude 4 Opus</td><td style="text-align:center">Anthropic 🇺🇸</td><td style="text-align:center">长文档、安全对话</td><td style="text-align:center">Claude模型在Agent场景是目前最强大的模型</td><td style="text-align:center"><a href="https://anthropic.com">https://anthropic.com</a></td></tr><tr><td style="text-align:center">Llama 系列</td><td style="text-align:center">Llama 4 Maverick</td><td style="text-align:center">Meta 🇺🇸</td><td style="text-align:center">开源通用、代码、数学</td><td style="text-align:center">400B，可商用（限条件）</td><td style="text-align:center"><a href="https://ai.meta.com">https://ai.meta.com</a></td></tr><tr><td style="text-align:center">文心一言</td><td style="text-align:center">ERNIE-4.5</td><td style="text-align:center">百度 🇨🇳</td><td style="text-align:center">中文搜索、知识问答</td><td style="text-align:center">1.4T 参数，多模态+知识图谱</td><td style="text-align:center"><a href="https://yiyan.baidu.com">https://yiyan.baidu.com</a></td></tr><tr><td style="text-align:center">通义千问</td><td style="text-align:center">Qwen2.5-Max</td><td style="text-align:center">阿里巴巴 🇨🇳</td><td style="text-align:center">通用、音视频、多语言</td><td style="text-align:center">720B，20T token 预训练</td><td style="text-align:center"><a href="https://tongyi.aliyun.com">https://tongyi.aliyun.com</a><br><a href="https://chat.qwenlm.ai/">https://chat.qwenlm.ai/</a></td></tr><tr><td style="text-align:center">星火</td><td style="text-align:center">星火 4.0 Ultra</td><td style="text-align:center">科大讯飞 🇨🇳</td><td style="text-align:center">中文语音、教育、办公</td><td style="text-align:center">强语音合成/识别</td><td style="text-align:center"><a href="https://xinghuo.xfyun.cn">https://xinghuo.xfyun.cn</a></td></tr><tr><td style="text-align:center">混元</td><td style="text-align:center">Hunyuan-Pro</td><td style="text-align:center">腾讯 🇨🇳</td><td style="text-align:center">社交、游戏、客服</td><td style="text-align:center">千亿级，游戏 NPC 优化</td><td style="text-align:center"><a href="https://yuanbao.tencent.com">https://yuanbao.tencent.com</a></td></tr><tr><td style="text-align:center">豆包</td><td style="text-align:center">豆包 1.5 Pro</td><td style="text-align:center">字节跳动 🇨🇳</td><td style="text-align:center">短视频、客服、创作</td><td style="text-align:center">多模态，长上下文</td><td style="text-align:center"><a href="https://www.doubao.com">https://www.doubao.com</a></td></tr><tr><td style="text-align:center">Kimi</td><td style="text-align:center">Kimi-1.6</td><td style="text-align:center">月之暗面 🇨🇳</td><td style="text-align:center">长文本阅读、法律、金融</td><td style="text-align:center">200 万汉字上下文</td><td style="text-align:center"><a href="https://www.moonshot.cn">https://www.moonshot.cn</a><br><a href="https://www.kimi.com/">https://www.kimi.com/</a></td></tr><tr><td style="text-align:center">百川</td><td style="text-align:center">Baichuan4</td><td style="text-align:center">百川智能 🇨🇳</td><td style="text-align:center">医疗、中文问答</td><td style="text-align:center">医疗场景深度优化</td><td style="text-align:center"><a href="https://www.baichuan-ai.com">https://www.baichuan-ai.com</a></td></tr><tr><td style="text-align:center">DeepSeek</td><td style="text-align:center">DeepSeek-V3</td><td style="text-align:center">深度求索 🇨🇳</td><td style="text-align:center">金融、中文语义</td><td style="text-align:center">1.6T，部分开源</td><td style="text-align:center"><a href="https://chat.deepseek.com/">https://chat.deepseek.com/</a></td></tr><tr><td style="text-align:center">MiniMax</td><td style="text-align:center">MiniMax-Text-02</td><td style="text-align:center">MiniMax 🇨🇳</td><td style="text-align:center">多轮对话、语音合成</td><td style="text-align:center">千亿级，语音自然</td><td style="text-align:center"><a href="https://api.minimax.chat">https://api.minimax.chat</a></td></tr><tr><td style="text-align:center">InternLM</td><td style="text-align:center">InternLM3</td><td style="text-align:center">零一万物 🇨🇳</td><td style="text-align:center">开源通用、教育</td><td style="text-align:center">轻量长文本，可本地部署</td><td style="text-align:center"><a href="https://github.com/InternLM">https://github.com/InternLM</a></td></tr><tr><td style="text-align:center">盘古</td><td style="text-align:center">盘古 CV-3.0</td><td style="text-align:center">华为 🇨🇳</td><td style="text-align:center">工业视觉、遥感</td><td style="text-align:center">toB行业定制，我们用不了</td><td style="text-align:center"><a href="https://www.huaweicloud.com/product/pangu.html">https://www.huaweicloud.com/product/pangu.html</a></td></tr><tr><td style="text-align:center">Mistral</td><td style="text-align:center">Mistral Large 2</td><td style="text-align:center">Mistral AI 🇫🇷</td><td style="text-align:center">多语言、代码、推理</td><td style="text-align:center">123B，开源权重</td><td style="text-align:center"><a href="https://mistral.ai">https://mistral.ai</a></td></tr><tr><td style="text-align:center">Command</td><td style="text-align:center">Command R+</td><td style="text-align:center">Cohere 🇨🇦</td><td style="text-align:center">企业检索、RAG</td><td style="text-align:center">104B，商用友好</td><td style="text-align:center"><a href="https://cohere.com">https://cohere.com</a></td></tr><tr><td style="text-align:center">Grok</td><td style="text-align:center">Grok-3</td><td style="text-align:center">xAI 🇺🇸</td><td style="text-align:center">实时数据、社交对话</td><td style="text-align:center">X 平台深度集成</td><td style="text-align:center"><a href="https://x.ai">https://x.ai</a></td></tr><tr><td style="text-align:center">Falcon</td><td style="text-align:center">Falcon3-40B</td><td style="text-align:center">TII 🇦🇪</td><td style="text-align:center">多语言、开源</td><td style="text-align:center">可商用，工具调用</td><td style="text-align:center"><a href="https://huggingface.co/LLM360">https://huggingface.co/LLM360</a></td></tr><tr><td style="text-align:center">GLM</td><td style="text-align:center">GLM-4-32B</td><td style="text-align:center">清华&amp;智源 🇨🇳</td><td style="text-align:center">中英双语、工具调用</td><td style="text-align:center">开源，32B 轻量</td><td style="text-align:center"><a href="https://modelscope.cn/organization/THUDM">https://modelscope.cn/organization/THUDM</a></td></tr><tr><td style="text-align:center">LongCat</td><td style="text-align:center">LongCat-Flash-Chat</td><td style="text-align:center">美团 🇨🇳</td><td style="text-align:center">中英双语、工具调用</td><td style="text-align:center">美团推出的自研大模型，Token输出速度超快。目前API每天免费50W Tokens</td><td style="text-align:center"><a href="https://longcat.chat/">https://longcat.chat/</a></td></tr></tbody></table><h3 id="本地部署大模型">本地部署大模型</h3><p>除了上面这些可以在线使用的大模型，大家还可以尝试一下用<a href="https://ollama.com/">https://ollama.com/</a>和<a href="https://lmstudio.ai/">https://lmstudio.ai/</a>在本地部署大模型，依据你电脑配置的不同，可以在ollama的模型广场里面选择不同参数量的模型，建议直接用qwen3来测试。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ollama pull qwen3:1.7b</span><br></pre></td></tr></table></figure><p>举个例子：</p><ul><li>以游戏本为例，你能够本地部署的模型，就看你的显存大小是多少。</li><li>比如你是一个8GB显存的英伟达显卡，你就可以尝试部署4B的模型；如果你是一个16GB显存的显卡，就可以尝试部署7B或者14B的模型。</li><li>如果你不是游戏本，是核显商务本，也可以尝试部署一下1.7B的小模型（直接用CPU跑），也是可以在本地运行起来的。</li><li>如果是Arm的MAC电脑，部署模型直接看你的MAC有多少内存即可。</li></ul><p>你可能会问：线上的这些平台不是都提供了API吗，为什么还要尝试本地部署模型？小参数的模型不是很垃圾吗？</p><p>小参数的模型确实效果不如人意，但是对于本地部署模型而言，最重要的是你实操过ollama和LM Studio，知道本地部署模型需要做什么步骤。这就好比你在本地折腾过linux、docker、jenkins这些环境一样，只有本地折腾过，未来工作中遇到实际使用这些工具的时候，才不会抓瞎。</p><h2 id="The-end">The end</h2><p>本文主要还是为大家收集了主流的大模型以及在哪里使用它们。后续如果出现了新的性能还不错的大模型，会继续更新本文。</p><p>大家平日学习中要学会充分借助AI，但也不要过度依赖AI，特别是初学者！</p>]]></content>
    
    
    <summary type="html">本文将带大家了解当前主流的大模型，汇总了所有能使用这些模型的官方网站</summary>
    
    
    
    <category term="编程学习" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="Agent智能体开发" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/Agent%E6%99%BA%E8%83%BD%E4%BD%93%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="AI" scheme="https://blog.musnow.top/tags/AI/"/>
    
    <category term="Agent开发" scheme="https://blog.musnow.top/tags/Agent%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>【Agent.01】AI Agent智能体开发专题引言</title>
    <link href="https://blog.musnow.top/posts/6796656750/"/>
    <id>https://blog.musnow.top/posts/6796656750/</id>
    <published>2025-09-06T14:12:23.000Z</published>
    <updated>2025-09-15T00:59:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>慕雪即将更新一套AI Agent智能体开发的专栏，本文是这个专栏的引言。</p><ol class="series-items"><li><a href="/posts/4710483697/" title="【AI】AI对26届计算机校招的影响">【AI】AI对26届计算机校招的影响</a></li><li><a href="/posts/6796656750/" title="【Agent.01】AI Agent智能体开发专题引言">【Agent.01】AI Agent智能体开发专题引言</a></li><li><a href="/posts/6151856853/" title="【Agent.02】市面上常见的大模型有哪些？">【Agent.02】市面上常见的大模型有哪些？</a></li><li><a href="/posts/5745961587/" title="【Agent.03】带你学会写一个基础的Prompt">【Agent.03】带你学会写一个基础的Prompt</a></li><li><a href="/posts/4044218607/" title="【Agent.04】AI时代的hello world：调用OpenAI接口，与大模型交互">【Agent.04】AI时代的hello world：调用OpenAI接口，与大模型交互</a></li></ol><h2 id="1-写在前面">1. 写在前面</h2><p>在先前的<a href="https://blog.musnow.top/posts/4710483697">【AI】AI对26届计算机校招的影响</a>一文中，慕雪简述了一下当前AI发展对26届校招产生的影响。</p><p>目前校招的变化，还只是在笔试、面试形式上发生的影响，暂时还没有出现在面试内容中考核校招生对AI Agent开发理解程度的情况。但慕雪认为，开发岗中开始考核AI Agent开发相关内容，<strong>一定会发生</strong>，只是时间问题罢了。</p><p>以后的<strong>开发岗</strong>，包括前端、后端、客户端、测开，都一定会考核AI Agent开发相关的知识点，包括但不限于如下几点：</p><ul><li>基础：编程学习中是否会使用AI工具辅助？如何使用？能否很好的使用？<ul><li>目前美团秋招中引入的vibe coding环节本质上就是在考核这一层，算是AI时代的研发基本功。</li></ul></li><li>初级：是否能够编写一个很好的Prompt（Prompt工程，现在变成Context工程了）</li><li>中级：是否了解AI的Function Calling和MCP？是否调用过OpenAI格式接口与AI交互？<ul><li>最佳实践：为自己的前后端项目引入一个<strong>界面使用方式</strong>的AI问答机器人。</li></ul></li><li>高级：是否了解AI Agent？有没有编写过AI Agent为自己的项目赋能？<ul><li>最佳实践：在自己的项目中引入了AI Agent，并且这个Agent能够感知当前系统的状态，告知用户下一步应该做什么，<strong>最好是能够直接帮助用户操作</strong>。</li><li>QA最佳实践：在自己的项目中引入AI Agent，进行测试用例编写、测试用例覆盖率获取、优化测试用例的全环节。这部分可以和CI/CD结合。</li><li><strong>注意</strong>，了解AI Agent不只是了解Agent开发框架，还需要对主流Agent可以调用的工具进行了解，比如browser-use、codebase、git、命令行工具等等……</li></ul></li></ul><p>慕雪认为：明年27届秋招就会开始考核这些内容了。所以，如果你能够相比于其他竞争对手，<strong>提前</strong>了解AI Agent相关的信息，想办法在自己的项目中引入一个AI Agent，绝对能在互联网大厂的校招生招聘中大大的提分（特别是测试开发岗位）。</p><p>了解AI相关动态的第一步，就是把国内的“AI三大顶会”微信公众号关注起来：</p><ol><li>机器之心</li><li>量子位</li><li>新智元</li></ol><p>这三个公众号之所以称之为“顶会”，并不是它们有多权威，只是这三个公众号在传播AI行业最新发展动态上非常及时，且文中也不只是空谈理论，也会有实际测试的演示。对我们了解最新AI发展非常有帮助。</p><p>除了上面这三个“顶会”，InfoQ也可以关注一下。</p><h2 id="2-专栏内容">2. 专栏内容</h2><h3 id="2-1-说明">2.1. 说明</h3><p>本专栏将帮助大家，从写Prompt与AI交互开始，一直到在自己的项目中编写一个测试用例Agent的项目实战（选这个主题，是因为它和语言、项目不强依赖，基本上所有前后端项目都可以干上去）。</p><p>整个专栏不需要你对AI有任何了解，只需要了解Python基础语法即可。不会Python也没关系，Python是最好学的语言了，现在都有AI了，把文中涉及到的代码贴给AI让他给你解释解释，是最快的学习方式。</p><p>同时，整个专栏的所有资料都会在我的个人博客和我的Github上更新，不会涉及到任何知识付费内容！不过呢，后续为了测试，会涉及到调用<strong>硅基流动</strong>的OpenAI API，各位跟随本专栏学习的时候，会在硅基流动上会有一定API调用费用支出。</p><h3 id="2-2-目录">2.2. 目录</h3><p>本专栏目录如下：</p><ol><li>引言（本文）</li><li>当前有哪些常见的大模型呢？（大模型平台收集）</li><li>如何写好一个Prompt（其实慕雪也不是很会，所以只是抛砖引玉）</li><li>使用Python，编写第一个通过OpenAI API与大模型交互的代码（AI时代的hello world）</li><li>什么是Function Calling和MCP？（这部分其实已经有了，见本站<a href="https://blog.musnow.top/posts/2831928244">MCP协议介绍</a>)</li><li>什么是Agent？（概念引入）</li><li>使用OpenAI Agent框架，编写一个最简单的Agent范例</li><li>常用的Agent可调用工具有哪些？（引入主流MCP工具）</li><li>项目实战：在自己的项目中引入一个用例编写全流程Agent。</li></ol><p>注意，<strong>请不要把OpenAI API和OpenAPI给搞混了</strong>，OpenAI API专门指代OpenAI公司发布的与AI交互的API请求格式，而OpenAPI含义是某个系统对外开放的API。本质上，OpenAI API也是OpenAPI的一种。</p><h3 id="2-3-测试用例Agent实战">2.3. 测试用例Agent实战</h3><h4 id="2-3-1-Agent工作流程图">2.3.1. Agent工作流程图</h4><p>其中针对项目实战中的<strong>用例编写Agent</strong>做一定解释，常见的用例编写Agent涉及到如下环节</p><pre><code class="highlight mermaid">flowchart TD    A([Agent启动]) --&gt; C[生成/更新测试用例]    C --&gt; D[运行自动化测试]    D --&gt; E[收集覆盖率报告]    E --&gt; F&#123;覆盖率达标?&#125;    F --&gt;|否| G[定位未覆盖代码]    G --&gt; H[智能补充测试用例]    H --&gt; D    F --&gt;|是| I[生成测试报告]    I --&gt; J([Agent休眠/等待下次触发])        style A fill:#90EE90    style J fill:#FFB6C1</code></pre><p>在传统时代，上面的所有步骤，<strong>都涉及到人去做</strong>。即便传统的CI/CD工具（如Jenkins）能够帮助我们完成运行测试+覆盖率报告卡控的步骤，用例编写、覆盖率报告分析、补充用例的环节也还是需要人去做。</p><p>现在AI Agent的诞生，让测试用例编写的所有的流程都可以实现Agent“自回归”了。所谓自回归，就是Agent能够根据测试用例运行结果（谁失败了？）和覆盖率报告（哪里没覆盖到？）动态的修改测试用例，直到达成我们设定的覆盖率指标。人只需要去设定何时触发这个流程，剩下的所有事情都由AI代劳。</p><p>在传统的对话式AI交互的模式下，是无法实现AI自回归编写测试用例的。这个非常简单的流程图，直接体现了AI Agent对整个行业的巨大影响。你想想，原本需要一个对项目有了解的同学才可以编写这个项目的测试用例。现在AI来了，只要你会写Agent，直接咔咔编写一个Agent工作流和对于Prompt，一启动，AI框框干，压根不需要人的介入，我们只需要检查AI工作的结果对不对就行了。</p><p>长期来看，AI Agent的引入对项目开发效率的提升是非常大的，这也是为什么现在所有互联网公司都在整AI专项，AI相关的新闻更是常常刷屏。</p><h4 id="2-3-2-什么是测试用例覆盖率？">2.3.2. 什么是测试用例覆盖率？</h4><p>对不了解测试用例覆盖率指标的同学做一个简单的解释。</p><p>覆盖率指标包含函数覆盖率、行覆盖率、分支覆盖率：</p><ul><li>函数覆盖率：运行项目后，有哪些函数被调用了?</li><li>行覆盖率：运行项目后，有哪些代码行被执行了？</li><li>分支覆盖率（进阶）：运行项目后，代码中if判断相关的分支命中了几个？</li></ul><p>编程语言是C、C++、Object-C的项目，常用的覆盖率工具是<a href="https://github.com/linux-test-project/lcov">lcov</a>。本站之前编写过lcov工具安装配置的博客：<a href="https://blog.musnow.top/posts/1274282021">安装locv</a>，学C++方向的同学可以先试试开启自己项目的覆盖率统计并收集一下lcov报告。</p><blockquote><p>JAVA这边常用的覆盖率工具是<a href="https://www.jacoco.org/jacoco/">jacoco</a>，学JAVA的同学可以去了解一下。</p></blockquote><p>针对一个项目，常见的测试方式包含单元测试、集成测试（接口测试）、系统测试。其中，<strong>单元测试和集成测试</strong>是能够获取到测试用例覆盖率的。本Agent实战项目将以单元测试为例进行Agent用例编写，这也是能给你的项目加上一个AI Agent的最快、最稳妥的方式。</p><h2 id="3-The-end">3. The end</h2><p>由于专栏涉及到的内容比较多，慕雪平时工作也挺繁忙的，只有周末有时间更新。所以整个专栏的更新随缘。我尽量在26年的暑期实习招聘（27届暑期实习招聘）开始之前完成整个专栏。</p><p>所有内容都是慕雪本人对AI Agent开发的愚见，仅供参考，不保证有效性！更不保证学了本项目一定能在面试中有大优势！</p>]]></content>
    
    
    <summary type="html">慕雪即将更新一套AI Agent智能体开发的专栏，本文是这个专栏的引言</summary>
    
    
    
    <category term="编程学习" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="Agent智能体开发" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/Agent%E6%99%BA%E8%83%BD%E4%BD%93%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="AI" scheme="https://blog.musnow.top/tags/AI/"/>
    
    <category term="Agent开发" scheme="https://blog.musnow.top/tags/Agent%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>【AI】AI对26届计算机校招的影响</title>
    <link href="https://blog.musnow.top/posts/4710483697/"/>
    <id>https://blog.musnow.top/posts/4710483697/</id>
    <published>2025-08-31T07:12:29.000Z</published>
    <updated>2025-09-14T00:21:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>简单聊聊当前AI发展对26届计算机校招的影响，本文仅为慕雪的个人观点，仅供参考，请勿断章取义。有不同的观点，欢迎评论区讨论。</p><p>如果你不想看慕雪语句不通顺的瞎比比，请直接跳到最后看小结。</p><h2 id="写在前面">写在前面</h2><p>早在几十年前，人类就已经预见到人工智能蓬勃发展的未来。“人工智能取代人类”这一观点，更是不少影视作品与文学作品中反复探讨的核心主题。从《2001太空漫游》中的智能计算机HAL，到《终结者》系列中的天网系统，再到近年来层出不穷的人工智能题材电影与小说，社会对人工智能的想象往往带有深深的忧虑与警惕。这些作品不仅反映了人类对科技飞速发展的憧憬，同时也折射出人们对人工智能可能带来的失控风险、就业冲击乃至伦理困境的担忧。随着现实中的人工智能逐步走出实验室，进入生产、生活的方方面面，这一话题已不再只是虚构世界中的设想，而是真实世界必须直面的问题。</p><p>如果你在2025年有关注过大模型的发展，你大概听说过，今年是大模型迅猛发展的一年，要我说，真的可以算作“技术爆炸”的一年。不管是DeepSeek开源引爆业界对开源大语言模型的关注，还是cursor、copliot、claude-code等工具的火热，都是这“技术爆炸”的一部分。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/08/3a8db7a94b2b6fc9d75d2c6c8c5d5011.webp" alt="image.png"></p><p>大模型为我们的日常生活和学习工作都带来了种种便利，虽之而来的，就是大模型的出现对整个计算机行业的已有工作流程的“挑战”，这也包括了本文的主题，即大模型对计算机校招的挑战。</p><h2 id="最新动态">最新动态</h2><p>2025年8月，2026届秋招已经全面开始，从牛客网上的已有信息，慕雪发现了下面几个变动：</p><ol><li>美团开始在笔试和面试中直接引入大模型，面试新增AI Coding考察，笔试直接出现了允许使用AI辅助的算法题：<a href="https://www.nowcoder.com/feed/main/detail/4ecf6fe9bada45128a2b819aeceac39d?sourceSSR=search">帖子1</a>,<a href="https://www.nowcoder.com/feed/main/detail/3bb17f9dc7874b1ba2f8ebd8153c9b31?sourceSSR=search">帖子2</a>；</li><li>美团开发岗笔试题中出现了AI训练相关的题目：<a href="https://www.nowcoder.com/exam/test/90945132/detail?pid=63140272&amp;examPageSource=Company&amp;subTabName=written_page&amp;testCallback=https%3A%2F%2Fwww.nowcoder.com%2Fexam%2Fcompany%3FquestionJobId%3D10%26subTabName%3Dwritten_page&amp;testclass=%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91">牛客真题</a>；</li><li>大厂面试要求闭眼答题：<a href="https://mp.weixin.qq.com/s/uFUp5ryvBdlQjGcFAbviiQ">帖子</a>;</li><li>拼多多面试引入双机位：<a href="https://www.nowcoder.com/feed/main/detail/ebb09f6feede4afda3aad880877236ea?sourceSSR=search">帖子1</a>,<a href="https://www.nowcoder.com/feed/main/detail/e9f3a07f055e43288377b1799a423833?sourceSSR=search">帖子2</a>；</li><li>似乎更多大厂也要跟团开启双机位面试……</li><li>其他的信息还没收集到呢，如果有可以补偿在评论区。</li></ol><p>前两项变动，说明美团在校招中<strong>直接开始考察校招生的AI使用能力了</strong>。</p><p>大模型语言出现之后，传统的只靠人去考虑如何编程的时代已经过去了。现在我们可以使用各类大模型，直接把自己的需求点发给他，让AI给你写一套代码出来，然后再考虑往哪里插入。有了cursor这类工具之后，甚至考虑在哪里插入的事情都不需要做了，整个需求都可以让AI自己写出来，我们只需要去检查一下AI写的对不对就行了。</p><p>此时，每个人的效率都能在大模型的帮助下急剧提升，传统的经验积累被迅速缩短。现在一个同学的编程能力好不好，效率高不高，可以直接和他会不会使用AI、怎么使用AI、用的好不好挂钩。先前火过一段时间的“prompt工程师”便是这项能力的直接体现（只不过在网上怕是更多体现在卖课上了……）</p><blockquote><p>如果你不知道或者没有使用过cursor这类工具，现在必须要去了解并使用一下了。考虑到cursor之类的价格较贵，你可以先试用一下美团的<a href="https://nocode.cn/">nocode</a>和阿里的<a href="https://lingma.aliyun.com/">通灵义码</a>插件，这两个的效果和cursor都是类似的，而且<strong>免费</strong>，先用他们锻炼一下自己使用AI辅助编程的能力吧。</p></blockquote><p>而后两项变动，就是AI作弊相关的问题了。正如AI可以帮我们完成编程工作，AI在面试过程中帮面试者回答八股那更是一个信手拈来，这就导致面试官辛辛苦苦考察的一个同学，可能最后发现是靠作弊进的公司，本身是个水货，那多难受？</p><p>前排提醒，作弊这件事并不是有AI之后才出现的，线上面试作弊已经是见怪不怪了，只不过AI让作弊的手段从“场外援助”这种容易被发现的作弊手段变成了更难发现的“单人作战”。这对需要招聘的公司来说是不利的，为了转嫁这风险，只有三种手段：</p><ul><li>使用更严苛的反作弊措施，比如线上面试要求双机位、要求候选者闭眼答题……</li><li>斥巨资在全国各地组织线下面试，比如华为。</li><li>继续狠狠加大面试的难度！</li></ul><p>面试这件事本身就是前人挖坑后人跳坑的不利之举，除了那个考作弊拿到了offer的同学真正得利了，剩下的整个校招环境都被作弊破坏了。</p><p>慕雪告诫所有同学：不要有侥幸心理！校招面试作弊在任何公司都是无法忍受的红线问题，一旦有人举报你，或者你在入职之后被怀疑查出有作弊嫌疑，基本上都是丢了offer+被拉黑的结局。</p><blockquote><p><strong>纯猜想，不是真的</strong>：绝大部分公司都是用的牛客网提供的考试系统，每个公司都要求候选人绑定了手机号或者身份证号。此时牛客网从技术角度上看完全有能力为各个使用牛客网笔试系统的公司提供“联ban”服务，直接把有过作弊嫌疑的同学标记出来，所有公司都能直接自动拉黑这名同学了。</p><p>说不定牛客网现在就有这项“联ban”服务呢？只不过我们这些候选者不知道而已。</p></blockquote><p>其实还是那句话：在任何时候都不要想着靠作弊拿offer！</p><h2 id="小结">小结</h2><p>上面叭叭了那么多没用的东西，最终小结其实也就两点：</p><ol><li>未来的校招面试，会从考察八股、项目变成连带考察候选者是否会高效地使用AI工具。</li><li>AI的出现让校招面试作弊的情况变多，大厂只会采取更严苛的筛选机制排除作弊的“水货”。</li></ol><p>打铁还需自身硬，我们只有跟得上时代，才能不被时代抛弃。建议大家在编程学习，走到项目编写环节的时候，就可以引入AI工具为自己的项目编写工作赋能了。最好是能融合一个AI Agent到你的项目中去，成为你项目的一部分，哪在面试环节绝对会大加分。</p><p>但是！也不要过度依赖AI，如果你在刚开始学习，编写hello world的这个阶段就开始用AI工具帮你看编译器报错了，那会大大降低你的问题定位和解决问题的能力，在编程学习和工作中，这项能力是非常重要的！前期学习的时候，最好是不要借助AI的辅助！别捡了芝麻丢了西瓜哦~</p>]]></content>
    
    
    <summary type="html">简单聊聊当前AI发展对26届计算机校招的影响（纯纯粹粹的个人观点）</summary>
    
    
    
    <category term="编程学习" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="Agent智能体开发" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/Agent%E6%99%BA%E8%83%BD%E4%BD%93%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="AI" scheme="https://blog.musnow.top/tags/AI/"/>
    
    <category term="测试开发" scheme="https://blog.musnow.top/tags/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>【win】关闭windows系统切换输入法的其他快捷键（除了win+空格）</title>
    <link href="https://blog.musnow.top/posts/9373074383/"/>
    <id>https://blog.musnow.top/posts/9373074383/</id>
    <published>2025-08-24T07:52:44.000Z</published>
    <updated>2025-08-24T08:34:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文将告诉大家如何关闭windows系统切换输入法的其他快捷键，避免打游戏的时候被卡输入法困扰。</p><h2 id="1-写在前面">1. 写在前面</h2><p>先说说什么是卡输入法吧：卡输入法的问题通常在<strong>国外游戏</strong>上比较常见，国内网游一般对中文输入法都做了特殊处理，才能让玩家在游戏内的聊天框里面打中文。国外游戏因为没有考虑过中文聊天的问题（比如战地2042），在中文输入法的情况下按键盘会弹出输入法输入框，直接无法操控游戏。</p><p>默认情况下，我们会使用<code>win+空格</code>快捷键切换不同的输入法，打游戏的时候为了不卡输入法，需要安装一个ENG英文输入法，在打游戏之前切换过去，然后锁掉键盘的win键位，这样在打游戏的时候才不会卡输入法。</p><p>但是，windows其实不止一个切换输入法的快捷键，默认还有另外两个快捷键也是会在游戏里面被误触的。</p><ul><li>ctrl+alt</li><li>ctrl+空格</li></ul><p>咱也不知道为什么win要设计多几个快捷键出来，只留一个win+空格不好吗？不过好在另外这两个快捷键是可以删除的，详细操作参考后文。</p><h2 id="2-如何安装英文输入法">2. 如何安装英文输入法</h2><p>既然提到了卡输入法的问题，顺带就把安装ENG输入法的教程也提一嘴吧。在windows设置里面（win10和win11通用）搜索“语言和区域”，找到如下界面，点击添加语言，在语言列表里面找到英语(美国)，添加一下就可以了</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/08/196e1ec70d7fa6d396be486c454eb50e.webp" alt="image.png"></p><p>此时你的电脑右下角语言栏会出现英语美国输入法的选项，如果出现了这个选项那就ok了，打游戏的时候切换过去就行了。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/08/e068176739c6e19ac494b38a80deaa96.webp" alt="image.png"></p><h2 id="3-关掉除了win-空格外的其他切换输入法快捷键">3. 关掉除了win+空格外的其他切换输入法快捷键</h2><p>接下来进入正题，说说怎么关掉其他切换输入法的快捷键。</p><p>右下角先切到win系统自带的中文输入法，右键进入输入法按键配置（或者直接在系统里面搜<code>时间和语言-语言和区域-按键</code>）</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/08/09c31a606abbddb9f88cf02f05ef1bf2.webp" alt="image.png"></p><p>这个操作会打开win11设置里面的<code>时间和语言-语言和区域-按键</code>，在这里面，把ctrl+空格和ctrl这两个中英文模式切换的快捷键都给取消勾选</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/08/9156e2698ed1ce0d227e6584599fea1e.webp" alt="image.png"></p><p>随后再回到<code>时间和语言-输入-高级键盘设置-输入语言热键</code>里面，会打开一个控制面板</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/08/7c708f44a2750c1ab108f8d445a3a5b9.webp" alt="image.png"></p><p>找到<strong>高级键设置</strong>，这里就能看到另外的输入法控制快捷键了。建议把这里面所有操作的快捷键全都删掉！</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/08/443bd63aad72da98226a83eb04794cda.webp" alt="image.png"></p><p>选中一个选项，点击更改按键顺序，在弹框中把启用按键顺序取消勾选，就可以删掉这个快捷键了</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/08/2a040984c4240d4f4e6d27df4b0f8238.webp" alt="image.png"></p><p>点击确定，回到上级菜单，可以看到这个快捷键是<strong>无</strong>了。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/08/a4bcd6d41ced6bd2b84e0fba40022a8b.webp" alt="image.png"></p><p>不过需要注意的是，在我的电脑上高级键设置里面的“中文（简体）输入法 - 输入法/非输入法切换”这个项目是没有办法改成<strong>无</strong>的。即便修改以后当前显示成无（截图里面的样子），但是点击右下角<strong>应用</strong>之后又会变成<code>ctrl+空格</code>。</p><p>我的个人理解：这个快捷键可以不用管他，因为这个选项“似乎”不会有什么实际影响，<strong>我们在打游戏的时候已经切换成ENG输入法了</strong>，不在“中文（简体）输入法”下，所以这个快捷键是不会生效的。</p><h2 id="4-写在最后的碎碎念">4. 写在最后的碎碎念</h2><p>反正删除了上面几个快捷键之后就OJBK了，不再会在打游戏的时候又莫名其妙的从ENG输入法变成中文输入法了。</p><h3 id="4-1-咋知道自己键盘能不能锁WIN呢？">4.1. 咋知道自己键盘能不能锁WIN呢？</h3><p>如果你的电脑键盘连锁WIN键的功能都没有，<strong>那作为一块游戏键盘它是非常非常非常不合格的。</strong> 在此情况下，如果你已经被卡中文输入法或者在游戏里误触win弹出开始菜单的问题困扰过，作为游戏玩家，还是建议你更换一块键盘。现在100元价位的国产机械键盘应该都是带了锁WIN这个功能的，购买之前可以问问客服。</p><p>如果你不知道自己的键盘有没有锁WIN键的功能，可以用下面的方式验证：</p><ul><li>先看看你的键盘上有没有FN功能键，<strong>如果有</strong>，尝试按出FN+WIN。按了之后，再单击WIN，此时如果没有弹出windows的开始菜单，说明这个键盘是有锁WIN功能的，这个时候已经锁上了，再次按FN+WIN就可以恢复不锁WIN的状态。</li><li>部分键盘的锁WIN功能可能是<strong>连击两次WIN</strong>或者<strong>长按WIN</strong>触发，但是这种比较少见，因为连击两次WIN或者长按WIN都是有可能在游戏里面误触的。</li><li>如果你的键盘上没有FN功能键位，那大概率是不支持锁WIN的，只能建议换键盘喽。</li></ul><p>另外，如果你是最近几年购买的<strong>游戏本</strong>，可以去游戏本自带的控制软件里面找一下选项。我的印象中，联想拯救者的官方控制台里面是有锁掉笔记本自带键盘的WIN键以及笔记自带触控板的选项的。其他品牌的游戏本不太清楚，如果也有这个功能，欢迎大家在评论区补充。</p><h3 id="4-2-关于笔记本是否需要外接键盘">4.2. 关于笔记本是否需要外接键盘</h3><p>这里再再稍微多嘴一下：几乎所有游戏本在打游戏的高性能状态下，键盘都是会超过38°C甚至还有40°C以上的，为了避免低温烫伤，强烈建议购买外置键盘！不要使用游戏本自带键盘玩游戏！</p><p>刚刚去搜了笔吧评测室几款2025年新出的游戏本，不得不说时代变啦，现在游戏本键盘竟然能控制在35°C以下了，实在是难能可贵。</p><blockquote><p>备注：华硕天选6Pro已经算是中端游戏本扛把子机型了，如果买的不是这个型号，键盘温度控制估计不会这么好。</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/08/e51ea71d8a83c3f8d210f102a0e87c0a.webp" alt="image.png"></p><p>不过需要注意的是，视频里面是在室温25°C环境下测试的，如果你的室温高于这个温度，笔记本的温度肯定会上升的。现在一块国产机械键盘80元就能到手了，手感怎么说都比笔记本自带的键盘好，还是建议大家不要省这个钱了，长期在打游戏、高负载工作的时候接触高温的笔记本键盘肯定是不好的。</p><p>如果你的桌子实在没地方放键盘，可以买一个 <strong>50cm*25cm,高度大于11cm</strong> 的显示器支架（某宝关键词搜“显示器支架”或者“笔记本支架”应该都能搜到，20元左右）把笔记本架起来，键盘放在支架下方，这样既能把笔记本屏幕拉的离自己近一点，又可以用外接键盘，岂不美哉。</p><p><strong>还得提醒一下各位轻薄本用户</strong>：别以为轻薄本自带键盘就不会有低温烫伤风险啦！轻薄本和全能本由于散热模组更小，在高负载的情况下笔记本键盘温度<strong>只会比游戏本更高</strong>！除非是不卷性能释放的高端轻薄本。</p><p>慕雪用过两款轻薄本，在高温的时候键盘那是<strong>碰都碰不得</strong>，当时烫的我不得已临时购置了一款键盘顶上，才解决问题。不得不说狗东次日达还是很爽的。</p><p>总而言之，只要你在使用笔记本电脑的时候，<strong>感觉笔记本键盘有点温热</strong>，还是强烈建议买块外接键盘吧，哪怕是30元的薄膜键盘也好。比起你的笔记本电脑来说，外接键盘的钱真的是小钱啦，别因小失大！顶多用外接键盘的时候麻烦点。</p><h2 id="THE-END">THE END</h2><p>感谢大家看到最后，又水了一期博客（不是），至少没让站点冷下来。</p>]]></content>
    
    
    <summary type="html">本文将告诉大家如何关闭windows系统切换输入法的其他快捷键，避免打游戏的时候被卡输入法困扰。</summary>
    
    
    
    <category term="差生文具多" scheme="https://blog.musnow.top/categories/%E5%B7%AE%E7%94%9F%E6%96%87%E5%85%B7%E5%A4%9A/"/>
    
    <category term="电脑使用小贴士" scheme="https://blog.musnow.top/categories/%E5%B7%AE%E7%94%9F%E6%96%87%E5%85%B7%E5%A4%9A/%E7%94%B5%E8%84%91%E4%BD%BF%E7%94%A8%E5%B0%8F%E8%B4%B4%E5%A3%AB/"/>
    
    
    <category term="Windows" scheme="https://blog.musnow.top/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>【Nginx】配置nginx拦截非浏览器请求</title>
    <link href="https://blog.musnow.top/posts/9909449770/"/>
    <id>https://blog.musnow.top/posts/9909449770/</id>
    <published>2025-08-09T07:56:25.000Z</published>
    <updated>2025-08-13T00:27:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>如题，我用nginx代理的artalk，感觉最近有很多不像是真人发出来的评论到我的博客里面，</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/08/b639f6443b797bb4a6d51d5c00bc3d69.webp" alt="image.png"></p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/08/3420114cfc6d6ddde103334c4d1eae47.webp" alt="image.png"></p><p>看了一下1panel里面ngnix的日志，在之前的错误日志里面看到了很多python requests发出来的请求，明显不是真人发的（他甚至不愿意模拟一下浏览器的referer）</p><p>在nginx反向代理配置的location体内的<strong>最开头</strong>加上如下内容，直接拦截掉这些非浏览器的UA</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果 User-Agent 中包含这些字段，直接拒绝（非浏览器请求）</span></span><br><span class="line"><span class="attribute">if</span> (<span class="variable">$http_user_agent</span> <span class="regexp">~* (curl|wget|httpie|python|Go-http-client|okhttp|java|bot|spider|crawler|Postman|Apache-HttpClient|HeadlessChrome|xx032_))</span> &#123;</span><br><span class="line">    <span class="attribute">return</span> <span class="number">403</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简单测试一下是否能够拦截，首先是直接浏览器访问博客站点，artalk评论正常，那就没问题。</p><p>然后用curl模拟一下请求，nginx设置了之后会直接403拒绝，配置成功。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ curl <span class="string">&quot;https://artk.musnow.top&quot;</span></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;<span class="built_in">head</span>&gt;&lt;title&gt;403 Forbidden&lt;/title&gt;&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;center&gt;&lt;h1&gt;403 Forbidden&lt;/h1&gt;&lt;/center&gt;</span><br><span class="line">&lt;hr&gt;&lt;center&gt;openresty&lt;/center&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>接下来要解决另外一个问题，我们拦截的时候不能把uptimerobot的uptime检测器也给拦截掉（因为uptimerobot返回403也是认为服务down了的，必须返回200）</p><p>官网上可以找到uptimerobot使用的是User-Agent：<a href="https://help.uptimerobot.com/en/articles/11358489-what-is-the-uptimerobot-user-agent-string">文档链接</a></p><blockquote><p>The user agent we use is: Mozilla/5.0+(compatible; UptimeRobot/2.0; <a href="http://www.uptimerobot.com/">http://www.uptimerobot.com/</a>)|</p></blockquote><p>所以只需要修改nginx配置为如下就可以了，先过滤掉uptimerobot再判断其他ua。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">###### 非浏览器请求拦截 ######</span></span><br><span class="line"><span class="comment"># 1. 默认不拦截</span></span><br><span class="line"><span class="attribute">set</span> <span class="variable">$block_request</span> <span class="number">0</span>;</span><br><span class="line"><span class="comment"># 2. 如果 User-Agent 匹配黑名单，就标记为需要拦截</span></span><br><span class="line"><span class="attribute">if</span> (<span class="variable">$http_user_agent</span> <span class="regexp">~* (curl|wget|httpie|python|Go-http-client|okhttp|java|bot|spider|crawler|Postman|Apache-HttpClient|HeadlessChrome|xx032_))</span> &#123;</span><br><span class="line">    <span class="attribute">set</span> <span class="variable">$block_request</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 3. 例外：如果是 UptimeRobot，则取消拦截标记</span></span><br><span class="line"><span class="attribute">if</span> (<span class="variable">$http_user_agent</span> <span class="regexp">~* &quot;UptimeRobot&quot;)</span> &#123;</span><br><span class="line">    <span class="attribute">set</span> <span class="variable">$block_request</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 4. 最终判断：如果标记仍然为1，则执行拦截</span></span><br><span class="line"><span class="attribute">if</span> (<span class="variable">$block_request</span> = <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="attribute">return</span> <span class="number">403</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">###### 非浏览器请求拦截 ######</span></span><br></pre></td></tr></table></figure><p>不过，上述拦截只是治标不治本，脚本里面写个ua就可以绕过这一层。我主要是想拦截那些演都不演的脚本，直接请求头是python requests真恶心人吧。</p><p>另外，根据AI提供的建议，上述的nginx配置性能会比较差，更推荐在http配置里面使用map来处理。但是我的个人站点日活特别低，也不在乎这个性能差距了。主要是在location里面写这一层拦截是比较方便的，我可以直接在1panel的面板里面修改，如果设置成map需要在nginx的根配置文件http块里面写，太麻烦了。</p>]]></content>
    
    
    <summary type="html">配置nginx拦截非浏览器请求，避免有脚本刷Artalk评论</summary>
    
    
    
    <category term="差生文具多" scheme="https://blog.musnow.top/categories/%E5%B7%AE%E7%94%9F%E6%96%87%E5%85%B7%E5%A4%9A/"/>
    
    <category term="博客建站" scheme="https://blog.musnow.top/categories/%E5%B7%AE%E7%94%9F%E6%96%87%E5%85%B7%E5%A4%9A/%E5%8D%9A%E5%AE%A2%E5%BB%BA%E7%AB%99/"/>
    
    
    <category term="博客建站" scheme="https://blog.musnow.top/tags/%E5%8D%9A%E5%AE%A2%E5%BB%BA%E7%AB%99/"/>
    
    <category term="Hexo" scheme="https://blog.musnow.top/tags/Hexo/"/>
    
    <category term="Nginx" scheme="https://blog.musnow.top/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>【JAVA】SDKMAN环境管理工具</title>
    <link href="https://blog.musnow.top/posts/4576584980/"/>
    <id>https://blog.musnow.top/posts/4576584980/</id>
    <published>2025-08-02T10:42:04.000Z</published>
    <updated>2025-08-04T00:12:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍了环境管理工具SDKMAN，他可以辅助我们管理多个版本的JDK、Gradle和Maven环境，并可快捷切换。</p><h2 id="1-前言">1. 前言</h2><p>在实际学习和工作中，我们经常会需要配置不懂JDK版本的环境，同时这些JAVA的项目有些使用了Gradle管理依赖项，有些又使用的是Maven，不同项目之间使用的工具链版本也不一定相同，这就需要我们安装不同版本的依赖工具。</p><p>如果完全依靠我们<strong>人工</strong>去安装不同版本的工具链并自己去选定工具所在目录和设置诸如<code>JAVA_HOME</code>环境变量，就很容易出错。大家都知道，编程开发这边很多纯命令行的工具是很难卸载干净的，纯靠自己人工管理，还非常容易把自己电脑上的环境弄得一团糟。</p><p>之前本站已经给大家引入过了不同版本python的管理工具<a href="https://blog.musnow.top/posts/4192678800">uv</a>，uv不仅可以管理不同版本的python，还可以帮我们代理python venv虚拟环境和依赖下载，方便我们快捷启动某个项目。</p><h2 id="2-下载安装">2. 下载安装</h2><blockquote><p>官网：<a href="https://sdkman.io/">https://sdkman.io/</a></p></blockquote><p>安装sdkman非常简单。直接用如下命令就可以了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -s <span class="string">&quot;https://get.sdkman.io&quot;</span> | bash</span><br></pre></td></tr></table></figure><p>需要注意的是，sdkman是对类unix系统设计的，所以并不支持windows。在mac上安装sdkman之前，需要先安装homebrew。</p><p>安装完毕了之后，需要执行一下这个source命令让sdkman生效（注意路径中的参数是你自己的用户名，sdkman的安装工具安装结束后会打印出这个source命令）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> <span class="string">&quot;/Users/mothra/.sdkman/bin/sdkman-init.sh&quot;</span></span><br></pre></td></tr></table></figure><p>使用<code>sdk help</code>命令确定是否已经安装成功，后续的操作都是用sdk命令来执行。</p><h2 id="3-基本使用">3. 基本使用</h2><h3 id="3-1-下载不同版本的工具">3.1. 下载不同版本的工具</h3><p>sdkman可以管理Maven、Gradle和JDK的版本，使用如下命令查看能够直接通过sdkman安装的版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sdk list 工具类型</span><br></pre></td></tr></table></figure><p>比如使用<code>sdk list java</code>就能得到可以安装的JDK版本</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/08/3a639a4e4f859936e0212781054817b5.webp" alt="image.png"></p><p>这里优先推荐安装亚马逊的JDK，因为其比较完善还免费商用。使用如下命令即可安装：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sdk install java 17.0.14-amzn</span><br></pre></td></tr></table></figure><p>这里的下载源不在国内，所以下载的时候可能因为网络问题出现波动，你懂的~</p><p>下载Gradle也是同理</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sdk list gradle         <span class="comment"># 查看可以安装的版本</span></span><br><span class="line">sdk install gradle 7.5  <span class="comment"># gradle没有不同的提供商，所以只需要版本号就行了</span></span><br></pre></td></tr></table></figure><h3 id="3-2-选择不同版本的工具">3.2. 选择不同版本的工具</h3><p>选择工具有两个方式，一个是在当前终端临时生效，另外一个是全局生效（默认值）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sdk use 工具 工具版本</span><br><span class="line">sdk default 工具 工具版本</span><br></pre></td></tr></table></figure><p>比如我想在当前终端使用JDK17，那就使用如下命令。想全局设置就把use改成default即可。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sdk use java 17.0.14-amzn</span><br></pre></td></tr></table></figure><h3 id="3-3-添加已有的JDK">3.3. 添加已有的JDK</h3><p>如果在下载sdkman之前已经有JDK了（比如idea自动下载的JDK），而且后续还想使用这个JDK，要怎么做？</p><blockquote><p>Python uv工具能自动扫描出已有的python解析器安装路径，但是sdkman没有扫描功能。</p></blockquote><p>首先我们需要知道当前已经安装的JDK的位置在哪里，如果你之前配置过<code>JAVA_HOME</code>环境变量，可以直接使用如下命令找到它</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/libexec/java_home -V</span><br></pre></td></tr></table></figure><p>比如我的mac上当前使用的是idea下载的JDK</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">❯ /usr/libexec/java_home -V</span><br><span class="line">Matching Java Virtual Machines (1):</span><br><span class="line">    23.0.1 (arm64) <span class="string">&quot;Oracle Corporation&quot;</span> - <span class="string">&quot;OpenJDK 23.0.1&quot;</span> /Users/mothra/Library/Java/JavaVirtualMachines/openjdk-23.0.1/Contents/Home</span><br><span class="line">/Users/mothra/Library/Java/JavaVirtualMachines/openjdk-23.0.1/Contents/Home</span><br></pre></td></tr></table></figure><p>如果我们想用sdkman管理这个JDK，需要将这个home路径加到sdkman的管理目录<code>~/.sdkman/candidates</code>下。这个目录中会有sdkman安装的各类JDK，同时我们也可以在这个路径下添加软连接，把我们自己安装的JDK引入进来。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /Users/mothra/.sdkman/var/metadata  <span class="comment"># 缓存目录</span></span><br><span class="line"><span class="built_in">mkdir</span> -p ~/.sdkman/candidates/java</span><br><span class="line"><span class="built_in">cd</span> ~/.sdkman/candidates/java</span><br><span class="line"><span class="comment"># 直接利用环境变量指向的路径，软连接到sdkman目录下</span></span><br><span class="line"><span class="built_in">ln</span> -s <span class="variable">$JAVA_HOME</span> 23.0.1-openjdk</span><br><span class="line"><span class="comment"># 刷新</span></span><br><span class="line">sdk flush java</span><br><span class="line"><span class="comment"># 使用</span></span><br><span class="line">sdk use java 23.0.1-openjdk</span><br></pre></td></tr></table></figure><p>命令执行输出如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">~/.sdkman/candidates/java             </span><br><span class="line">❯ ln -s $JAVA_HOME 23.0.1-openjdk</span><br><span class="line"></span><br><span class="line">~/.sdkman/candidates/java             </span><br><span class="line">❯ sdk use java 23.0.1-openjdk</span><br><span class="line">Setting java version 23.0.1-openjdk as default.</span><br><span class="line"></span><br><span class="line">Using java version 23.0.1-openjdk in this shell.</span><br></pre></td></tr></table></figure><p>刷新了之后，是可以在<code>sdk list java</code>的最底部看到我们添加的这个JDK的，其会被显示为Unclassified未分组状态</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/08/66323a66427a5f7f7491620945f24db0.webp" alt="image.png"></p><p>除了上面这种手动软连接的方式，更推荐的方式是直接使用install命令的第三个参数path来直接指定安装。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sdk install java 名字 路径</span><br></pre></td></tr></table></figure><p>注意确认你指定的JDK所在path是存在的！</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">❯ sdk install java 23openjdk <span class="variable">$JAVA_HOME</span></span><br><span class="line">Linking java 23openjdk to /Users/mothra/.sdkman/candidates/java/current</span><br><span class="line">Done installing!</span><br></pre></td></tr></table></figure><p>安装了以后同样是使用<code>sdk use java 23openjdk</code>指定名字来使用这个JDK</p><h2 id="4-The-end">4. The end</h2><p>到这里就结束啦，sdkman的基本使用就是上面的几个命令，很简单的操作，就解决了我们自己管理环境的种种麻烦。</p><p>不过需要注意的是，sdkman设置的环境只在终端里面生效，idea里面的项目JDK和Gradle设置大概率<strong>不会</strong>跟着sdkman设置的版本走，还是需要在idea里面单独设置的！</p>]]></content>
    
    
    <summary type="html">本文介绍了环境管理工具SDKMAN，他可以辅助我们管理多个版本的JDK、Gradle和Maven环境，并可快捷切换。</summary>
    
    
    
    <category term="编程学习" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="测试开发那些事" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91%E9%82%A3%E4%BA%9B%E4%BA%8B/"/>
    
    
    <category term="测试开发" scheme="https://blog.musnow.top/tags/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91/"/>
    
    <category term="JAVA" scheme="https://blog.musnow.top/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>【SLAM】在ROS下发布ORB_SLAM2的位姿（RGB-D）</title>
    <link href="https://blog.musnow.top/posts/1101664024/"/>
    <id>https://blog.musnow.top/posts/1101664024/</id>
    <published>2025-05-31T09:10:00.000Z</published>
    <updated>2025-06-02T01:46:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍了如何修改ORB_SLAM2的ROS Demo，使其能够在建图的同时发布位姿。本文只涉及ROS RGB-D的代码修改。</p><h2 id="修改代码">修改代码</h2><p>直接进入正题，需要修改的代码文件是<code>Examples/ROS/ORB_SLAM2/src/ros_rgbd.cc</code>这个demo文件。ORB_SLAM2本身其实已经存放了相机的位姿和路径数据了，也提供了获取数据的接口，我们要做的就是将其转成ROS能够支持的格式并通过Topic发布出去。</p><p>首先添加头文件</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;tf/transform_broadcaster.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;../../../include/Converter.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;nav_msgs/Path.h&gt;</span></span></span><br></pre></td></tr></table></figure><p>然后在ImageGrabber类后方，main函数之前全局声明下面三个变量，注意是<strong>全局声明</strong>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ros::Publisher pose_pub;</span><br><span class="line">nav_msgs::Path rgbd_path;</span><br><span class="line">ros::Publisher rgbd_path_pub;</span><br></pre></td></tr></table></figure><p>main函数中<code>ros::spin();</code>之<strong>前</strong>新增如下代码，这里设置了我们发布位姿和路径的两个Topic，后续需要在rviz里面订阅这两个Topic来看到发布的位姿数据。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 发布位姿</span></span><br><span class="line">pose_pub = nh.<span class="built_in">advertise</span>&lt;geometry_msgs::PoseStamped&gt;(<span class="string">&quot;ORB_SLAM/pose&quot;</span>, <span class="number">5</span>);</span><br><span class="line"><span class="comment">// 发布路径</span></span><br><span class="line">rgbd_path_pub = nh.<span class="built_in">advertise</span>&lt;nav_msgs::Path&gt;(<span class="string">&quot;ORB_SLAM/path&quot;</span>, <span class="number">10</span>);</span><br></pre></td></tr></table></figure><p>在<code>ImageGrabber::GrabRGBD</code>函数的最后修改，修改和添加如下内容。这里是用了一个<code>cv::Mat</code>存放了<code>mpSLAM-&gt;TrackRGBD</code>函数的返回结果（之前是没有用变量存放的）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 发布位姿</span></span><br><span class="line">cv::Mat Tcw;</span><br><span class="line">Tcw = mpSLAM-&gt;<span class="built_in">TrackRGBD</span>(cv_ptrRGB-&gt;image, cv_ptrD-&gt;image, cv_ptrRGB-&gt;header.stamp.<span class="built_in">toSec</span>());</span><br><span class="line"><span class="keyword">if</span> (!Tcw.<span class="built_in">empty</span>()) <span class="comment">// 注意需要判断是否为空，可能为空</span></span><br><span class="line">&#123;</span><br><span class="line">    geometry_msgs::PoseStamped pose;</span><br><span class="line">    pose.header.stamp = ros::Time::<span class="built_in">now</span>();</span><br><span class="line">    pose.header.frame_id = <span class="string">&quot;map&quot;</span>; <span class="comment">// 注意这里，必须是map而不是path</span></span><br><span class="line"></span><br><span class="line">    cv::Mat Rwc = Tcw.<span class="built_in">rowRange</span>(<span class="number">0</span>, <span class="number">3</span>).<span class="built_in">colRange</span>(<span class="number">0</span>, <span class="number">3</span>).<span class="built_in">t</span>(); <span class="comment">// Rotation information</span></span><br><span class="line">    cv::Mat twc = -Rwc * Tcw.<span class="built_in">rowRange</span>(<span class="number">0</span>, <span class="number">3</span>).<span class="built_in">col</span>(<span class="number">3</span>);      <span class="comment">// translation information</span></span><br><span class="line">    vector&lt;<span class="type">float</span>&gt; q = ORB_SLAM2::Converter::<span class="built_in">toQuaternion</span>(Rwc);</span><br><span class="line"></span><br><span class="line">    tf::Transform new_transform;</span><br><span class="line">    new_transform.<span class="built_in">setOrigin</span>(tf::<span class="built_in">Vector3</span>(twc.<span class="built_in">at</span>&lt;<span class="type">float</span>&gt;(<span class="number">0</span>, <span class="number">0</span>), twc.<span class="built_in">at</span>&lt;<span class="type">float</span>&gt;(<span class="number">0</span>, <span class="number">1</span>), twc.<span class="built_in">at</span>&lt;<span class="type">float</span>&gt;(<span class="number">0</span>, <span class="number">2</span>)));</span><br><span class="line">    <span class="function">tf::Quaternion <span class="title">quaternion</span><span class="params">(q[<span class="number">0</span>], q[<span class="number">1</span>], q[<span class="number">2</span>], q[<span class="number">3</span>])</span></span>;</span><br><span class="line">    new_transform.<span class="built_in">setRotation</span>(quaternion);</span><br><span class="line">    tf::<span class="built_in">poseTFToMsg</span>(new_transform, pose.pose);</span><br><span class="line">    pose_pub.<span class="built_in">publish</span>(pose); <span class="comment">// 发布位姿</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发布路径</span></span><br><span class="line">    rgbd_path.header.frame_id = <span class="string">&quot;map&quot;</span>;</span><br><span class="line">    rgbd_path.header.stamp = ros::Time::<span class="built_in">now</span>();</span><br><span class="line">    rgbd_path.poses.<span class="built_in">push_back</span>(pose);</span><br><span class="line">    rgbd_path_pub.<span class="built_in">publish</span>(rgbd_path);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到这里就修改完成了，先使用项目根目录下的<code>build.sh</code>脚本编译ORB_SLAM2普通版本，然后使用<code>build_ros.sh</code>脚本编译ROS版本。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ORB_SLAM2 <span class="comment"># 先进入文件夹</span></span><br><span class="line"><span class="built_in">export</span> ROS_PACKAGE_PATH=<span class="variable">$ROS_PACKAGE_PATH</span>:<span class="variable">$PWD</span>/Examples/ROS/ORB_SLAM2</span><br><span class="line">./build.sh</span><br><span class="line">./build_ros.sh</span><br></pre></td></tr></table></figure><p>下面给出完整的demo代码，也可以在<a href="https://github.com/musnows/ORB_SLAM2/commit/9e018fc5baea03f707e9d75d58c4b14471c375d6">Github</a>查看。</p><details class="toggle" ><summary class="toggle-button" style="">修改后ros_rgbd.cc的完整代码</summary><div class="toggle-content"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;chrono&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ros/ros.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cv_bridge/cv_bridge.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;message_filters/subscriber.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;message_filters/time_synchronizer.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;message_filters/sync_policies/approximate_time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;opencv2/core/core.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;../../../include/System.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;tf/transform_broadcaster.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;../../../include/Converter.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;nav_msgs/Path.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ImageGrabber</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">ImageGrabber</span>(ORB_SLAM2::System *pSLAM) : <span class="built_in">mpSLAM</span>(pSLAM) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">GrabRGBD</span><span class="params">(<span class="type">const</span> sensor_msgs::ImageConstPtr &amp;msgRGB, <span class="type">const</span> sensor_msgs::ImageConstPtr &amp;msgD)</span></span>;</span><br><span class="line"></span><br><span class="line">    ORB_SLAM2::System *mpSLAM;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">ros::Publisher pose_pub;</span><br><span class="line">nav_msgs::Path rgbd_path;</span><br><span class="line">ros::Publisher rgbd_path_pub;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ros::<span class="built_in">init</span>(argc, argv, <span class="string">&quot;RGBD&quot;</span>);</span><br><span class="line">    ros::<span class="built_in">start</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (argc != <span class="number">3</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cerr &lt;&lt; endl</span><br><span class="line">             &lt;&lt; <span class="string">&quot;Usage: rosrun ORB_SLAM2 RGBD path_to_vocabulary path_to_settings&quot;</span> &lt;&lt; endl;</span><br><span class="line">        ros::<span class="built_in">shutdown</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Create SLAM system. It initializes all system threads and gets ready to process frames.</span></span><br><span class="line">    <span class="function">ORB_SLAM2::System <span class="title">SLAM</span><span class="params">(argv[<span class="number">1</span>], argv[<span class="number">2</span>], ORB_SLAM2::System::RGBD, <span class="literal">true</span>)</span></span>;</span><br><span class="line">    SLAM.<span class="built_in">LoadMap</span>(<span class="string">&quot;/home/bill/work/3dslam/orb_slam2/MapPointandKeyFrame.bin&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function">ImageGrabber <span class="title">igb</span><span class="params">(&amp;SLAM)</span></span>;</span><br><span class="line"></span><br><span class="line">    ros::NodeHandle nh;</span><br><span class="line"></span><br><span class="line">    <span class="function">message_filters::Subscriber&lt;sensor_msgs::Image&gt; <span class="title">rgb_sub</span><span class="params">(nh, <span class="string">&quot;/camera/rgb/image_raw&quot;</span>, <span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="function">message_filters::Subscriber&lt;sensor_msgs::Image&gt; <span class="title">depth_sub</span><span class="params">(nh, <span class="string">&quot;/camera/depth/image_raw&quot;</span>, <span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="keyword">typedef</span> message_filters::sync_policies::ApproximateTime&lt;sensor_msgs::Image, sensor_msgs::Image&gt; sync_pol;</span><br><span class="line">    <span class="function">message_filters::Synchronizer&lt;sync_pol&gt; <span class="title">sync</span><span class="params">(sync_pol(<span class="number">10</span>), rgb_sub, depth_sub)</span></span>;</span><br><span class="line">    sync.<span class="built_in">registerCallback</span>(boost::<span class="built_in">bind</span>(&amp;ImageGrabber::GrabRGBD, &amp;igb, _1, _2));</span><br><span class="line">    pose_pub = nh.<span class="built_in">advertise</span>&lt;geometry_msgs::PoseStamped&gt;(<span class="string">&quot;ORB_SLAM/pose&quot;</span>, <span class="number">5</span>); <span class="comment">// 发布位姿</span></span><br><span class="line">    rgbd_path_pub = nh.<span class="built_in">advertise</span>&lt;nav_msgs::Path&gt;(<span class="string">&quot;ORB_SLAM/path&quot;</span>, <span class="number">10</span>);       <span class="comment">// 发布路径</span></span><br><span class="line"></span><br><span class="line">    ros::<span class="built_in">spin</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Stop all threads</span></span><br><span class="line">    SLAM.<span class="built_in">Shutdown</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Save camera trajectory</span></span><br><span class="line">    SLAM.<span class="built_in">SaveKeyFrameTrajectoryTUM</span>(<span class="string">&quot;KeyFrameTrajectory.txt&quot;</span>);</span><br><span class="line">    SLAM.<span class="built_in">SaveMap</span>(<span class="string">&quot;MapPointandKeyFrame.bin&quot;</span>);</span><br><span class="line"></span><br><span class="line">    ros::<span class="built_in">shutdown</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ImageGrabber::GrabRGBD</span><span class="params">(<span class="type">const</span> sensor_msgs::ImageConstPtr &amp;msgRGB, <span class="type">const</span> sensor_msgs::ImageConstPtr &amp;msgD)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// Copy the ros image message to cv::Mat.</span></span><br><span class="line">    cv_bridge::CvImageConstPtr cv_ptrRGB;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        cv_ptrRGB = cv_bridge::<span class="built_in">toCvShare</span>(msgRGB);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">catch</span> (cv_bridge::Exception &amp;e)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">ROS_ERROR</span>(<span class="string">&quot;cv_bridge exception: %s&quot;</span>, e.<span class="built_in">what</span>());</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cv_bridge::CvImageConstPtr cv_ptrD;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        cv_ptrD = cv_bridge::<span class="built_in">toCvShare</span>(msgD);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">catch</span> (cv_bridge::Exception &amp;e)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">ROS_ERROR</span>(<span class="string">&quot;cv_bridge exception: %s&quot;</span>, e.<span class="built_in">what</span>());</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 发布位姿</span></span><br><span class="line">    cv::Mat Tcw;</span><br><span class="line">    Tcw = mpSLAM-&gt;<span class="built_in">TrackRGBD</span>(cv_ptrRGB-&gt;image, cv_ptrD-&gt;image, cv_ptrRGB-&gt;header.stamp.<span class="built_in">toSec</span>());</span><br><span class="line">    <span class="keyword">if</span> (!Tcw.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        geometry_msgs::PoseStamped pose;</span><br><span class="line">        pose.header.stamp = ros::Time::<span class="built_in">now</span>();</span><br><span class="line">        pose.header.frame_id = <span class="string">&quot;map&quot;</span>; <span class="comment">// 注意这里，必须是map而不是path</span></span><br><span class="line"></span><br><span class="line">        cv::Mat Rwc = Tcw.<span class="built_in">rowRange</span>(<span class="number">0</span>, <span class="number">3</span>).<span class="built_in">colRange</span>(<span class="number">0</span>, <span class="number">3</span>).<span class="built_in">t</span>(); <span class="comment">// Rotation information</span></span><br><span class="line">        cv::Mat twc = -Rwc * Tcw.<span class="built_in">rowRange</span>(<span class="number">0</span>, <span class="number">3</span>).<span class="built_in">col</span>(<span class="number">3</span>);      <span class="comment">// translation information</span></span><br><span class="line">        vector&lt;<span class="type">float</span>&gt; q = ORB_SLAM2::Converter::<span class="built_in">toQuaternion</span>(Rwc);</span><br><span class="line"></span><br><span class="line">        tf::Transform new_transform;</span><br><span class="line">        new_transform.<span class="built_in">setOrigin</span>(tf::<span class="built_in">Vector3</span>(twc.<span class="built_in">at</span>&lt;<span class="type">float</span>&gt;(<span class="number">0</span>, <span class="number">0</span>), twc.<span class="built_in">at</span>&lt;<span class="type">float</span>&gt;(<span class="number">0</span>, <span class="number">1</span>), twc.<span class="built_in">at</span>&lt;<span class="type">float</span>&gt;(<span class="number">0</span>, <span class="number">2</span>)));</span><br><span class="line">        <span class="function">tf::Quaternion <span class="title">quaternion</span><span class="params">(q[<span class="number">0</span>], q[<span class="number">1</span>], q[<span class="number">2</span>], q[<span class="number">3</span>])</span></span>;</span><br><span class="line">        new_transform.<span class="built_in">setRotation</span>(quaternion);</span><br><span class="line">        tf::<span class="built_in">poseTFToMsg</span>(new_transform, pose.pose);</span><br><span class="line">        pose_pub.<span class="built_in">publish</span>(pose); <span class="comment">// 发布位姿</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 发布路径</span></span><br><span class="line">        rgbd_path.header.frame_id = <span class="string">&quot;map&quot;</span>;</span><br><span class="line">        rgbd_path.header.stamp = ros::Time::<span class="built_in">now</span>();</span><br><span class="line">        rgbd_path.poses.<span class="built_in">push_back</span>(pose);</span><br><span class="line">        rgbd_path_pub.<span class="built_in">publish</span>(rgbd_path);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div></details><p>截个图，证明一下俺的代码是能正常编译的。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/05/33ecd0262d5239e316d208e49c1f4230.webp" alt="image.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[ 77%] Linking CXX executable ../Stereo</span><br><span class="line">[ 88%] Linking CXX executable ../RGBD</span><br><span class="line">[ 88%] Built target Stereo</span><br><span class="line">[ 88%] Built target RGBD</span><br><span class="line">[100%] Linking CXX executable ../MonoAR</span><br><span class="line">[100%] Built target MonoAR</span><br></pre></td></tr></table></figure><h2 id="测试效果">测试效果</h2><p>先在一个终端里面执行roscore命令，在另外一个终端里面使用<strong>rviz</strong>命令启动前端查看器。</p><p>另外再开一个终端，以RGBD模式启动ORB_SLAM2程序，注意需要修改TUM1.yaml文件中的DepthMapFactor为<code>1.0</code>，该参数ROS需要修改为<code>1.0</code>，直接运行是<code>5000.0</code>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> ROS_PACKAGE_PATH=$ROS_PACKAGE_PATH:$PWD/Examples/ROS/ORB_SLAM2</span><br><span class="line">rosrun ORB_SLAM2 RGBD Vocabulary/ORBvoc.txt Examples/RGB-D/TUM<span class="number">1.</span>yaml</span><br></pre></td></tr></table></figure><p>在左下角add里面选择<code>by topic</code>，订阅我们刚刚在ORB_SLAM2中发布的两个topic，注意需要启动ORB_SLAM2之后才能看到这两个topic。</p><blockquote><p>下图是从参考博客里面借来的，因为我自己忘记截图了。</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/05/290a78acf0230dc816889465607c7ab3.webp" alt="image.png"></p><p>rviz订阅完毕这两个topic之后，就可以开始播放tum数据集的bag文件了</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rosbag play \</span><br><span class="line">    datasets/TUM/rgbd_dataset_freiburg1_desk.bag \</span><br><span class="line">    /camera/rgb/image_color:=/camera/rgb/image_raw \</span><br><span class="line">    /camera/depth/image:=/camera/depth/image_raw</span><br></pre></td></tr></table></figure><p>能够观察到红色的箭头代表相机位姿，绿色线条代表相机走过的路径。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/05/4726ebdf968856e3c73fef762580daad.webp" alt="image.png"></p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/05/fceab2ff6e68086b764c316f5fae8a1b.webp" alt="image.png"></p><p>至此，位姿发布功能测试成功。</p><h2 id="参考博客">参考博客</h2><p>这里要提醒一下，参考博客中给出的代码是错的，主要是frame_id设置的不对，在我的测试环境中frame_id必须要设置为map，而不是path。如果你在修改了代码之后遇到了<code>Fix Frame [map] does not exist</code>的报错，就说明你的frame_id设置错误了。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/05/1c22f2d0bf3f055aa645d5a3ef503d19.webp" alt="image.png"></p><p>参考博客：</p><ul><li><a href="https://blog.csdn.net/YiYeZhiNian/article/details/109384099">blog.csdn.net/YiYeZhiNian/article/details/109384099</a></li><li><a href="https://blog.csdn.net/qinqinxiansheng/article/details/108288646">blog.csdn.net/qinqinxiansheng/article/details/108288646</a></li><li><a href="https://github.com/raulmur/ORB_SLAM2/issues/597">github.com/raulmur/ORB_SLAM2/issues/597</a></li></ul>]]></content>
    
    
    <summary type="html">本文介绍了如何修改ORB_SLAM2的ROS Demo，使其能够在建图的同时发布位姿。本文只涉及ROS RGB-D的代码修改。</summary>
    
    
    
    <category term="编程学习" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="项目开发记录" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="Linux" scheme="https://blog.musnow.top/tags/Linux/"/>
    
    <category term="SLAM" scheme="https://blog.musnow.top/tags/SLAM/"/>
    
  </entry>
  
  <entry>
    <title>【SLAM】使用evo工具来绘制ORB_SLAM2轨迹图，评估ATE&#92;RPE指标</title>
    <link href="https://blog.musnow.top/posts/2657887526/"/>
    <id>https://blog.musnow.top/posts/2657887526/</id>
    <published>2025-05-29T04:09:24.000Z</published>
    <updated>2025-05-31T12:48:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍了如何使用evo工具来绘制ORB_SLAM2的轨迹图和进行ATE\RPE评估。</p><blockquote><p>参考博客：<a href="https://zhaoxuhui.top/blog/2021/03/27/evo-slam-trajectory-evaluation.html">SLAM轨迹精度评价工具evo简介与使用</a></p></blockquote><h2 id="1-说明">1. 说明</h2><p>为了让SLAM建图的结果能够更好的展示出来，我们可以使用github开源的evo工具集<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>来对ORB_SLAM2生成的相机轨迹进行绘制，展现出绘制后的结果图。同时进行ape和rpe评估，评估结果也是我们SLAM系统和其他SLAM系统进行对比的重要指标。</p><p>github开源地址：<a href="https://github.com/MichaelGrupp/evo">https://github.com/MichaelGrupp/evo</a></p><h2 id="2-工具安装">2. 工具安装</h2><p>evo工具可以直接使用pip来安装，命令如下，使用了清华镜像源。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install evo -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure><p>第一次安装的时候报错了，提示是缺少了Fortran compiler。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">customize UnixCCompiler</span><br><span class="line">customize UnixCCompiler using build_clib</span><br><span class="line">building &#x27;dfftpack&#x27; library</span><br><span class="line">error: library dfftpack has Fortran sources but no Fortran compiler found</span><br></pre></td></tr></table></figure><p>咨询GPT后，说是需要安装gfortran包</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get install -y gfortran</span><br></pre></td></tr></table></figure><blockquote><p>如果安装gfortran的时候连不上ports.ubuntu.com站点，可以使用如下命令修改镜像源。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> sed -i <span class="string">&#x27;s#ports.ubuntu.com#mirrors.ustc.edu.cn/ubuntu-ports#g&#x27;</span> /etc/apt/sources.list</span><br></pre></td></tr></table></figure></blockquote><p>默认情况下pip会把evo工具安装在用户家目录下，所以需要把这个目录放入PATH中才能使用evo命令。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$HOME</span>/.local/bin/</span><br></pre></td></tr></table></figure><h2 id="3-工具使用">3. 工具使用</h2><h3 id="3-1-轨迹绘制">3.1. 轨迹绘制</h3><p>绘制轨迹的命令如下，这里的参数包含了ORB_SLAM2运行后产生的相机轨迹结果CameraTrajectory.txt，以及用作参考（ref）的TUM数据集groundtruth真实值。同时提供<code>-a</code>选项来对齐相机轨迹结果和TUM数据集对真实值，<code>--plot</code>参数代表我们当前需要做的操作是显示轨迹图。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">evo_traj tum \</span><br><span class="line">    CameraTrajectory.txt \</span><br><span class="line">    --ref=datasets/TUM/rgbd_dataset_freiburg1_desk/groundtruth.txt \</span><br><span class="line">    --plot -a</span><br></pre></td></tr></table></figure><p>运行效果如下，可以看到蓝色的是我们运行出来的结果，灰色虚线是TUM数据集的真实值，二者基本拟合，效果不错。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/05/95e2da1799dad391d8d747a7e1da8472.webp" alt="image.png"></p><p>图中出现了一个报错，会导致我们没有办法挪动GUI中的图像（本来是可以3D挪动的）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">QStandardPaths: wrong ownership on runtime directory /run/user/1000, 1000 instead of 0</span><br></pre></td></tr></table></figure><p>解决办法就是修改下面两个目录的权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo chown root:root /run/user/1000</span><br><span class="line">sudo chmod 700 /run/user/1000</span><br></pre></td></tr></table></figure><p>修改之后重新启动工具，就可以正常显示并且移动了</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/05/8c8e54456d51520e90ae4e1aaece45f7.webp" alt="image.png"></p><h3 id="3-2-ATE-RPE评估">3.2. ATE\RPE评估</h3><p>除了绘制轨迹图外，evo工具还可以用来输出ORB_SLAM2运行结果的<strong>绝对位姿误差ATE</strong>，对应的命令是evo_ape。如果要显示<strong>相对位姿误差RPE</strong>就用evo_rpe命令。</p><p>本文只涉及evo工具使用，关于ATE和RPE这两个指标的含义，可以去参考TUM针对SLAM系统性能评估的论文：A benchmark for the evaluation of RGB-D SLAM systems<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup>。</p><p>在我参考的evo工具使用博客中有下面这一句话：</p><blockquote><p>大多数中论文的指标为测量绝对误差，在进行评估时，若经过了缩放，在命令行中应将真实轨迹（参考轨迹）放在估计轨迹（计算轨迹）前方，避免在缩放时参考轨迹错误而造成误差被错误缩放。</p></blockquote><p>说人话就是在使用这两个位姿评估命令的时候，groundtruth必须要在CameraTrajectory<strong>之前</strong>传入。示例命令如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">evo_ape tum \</span><br><span class="line">    datasets/TUM/rgbd_dataset_freiburg1_desk/groundtruth.txt \</span><br><span class="line">    CameraTrajectory.txt \</span><br><span class="line">    --plot -as</span><br></pre></td></tr></table></figure><p>运行之后会绘制出一张APE的结果图，展现了整体的APE波动。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/05/bcfc6d91837927a0b2aa5c21b72ea9c1.webp" alt="image.png"></p><p>终端中会显示各项指标的计算结果：</p><ul><li><code>max</code>：最大误差；</li><li><code>mean</code>：平均误差；</li><li><code>median</code>：误差中位数；</li><li><code>min</code>：最小误差；</li><li><code>rmse</code>：均方根误差；</li><li><code>sse</code>：和方差、误差平方和；</li><li><code>std</code>：标准差。</li></ul><p>下面这个是ORB_SLAM2针对tum fr1/desk序列的的运行结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">APE w.r.t. translation part (m)</span><br><span class="line">(with Sim(3) Umeyama alignment)</span><br><span class="line"></span><br><span class="line">       max    0.070657</span><br><span class="line">      mean    0.012891</span><br><span class="line">    median    0.010890</span><br><span class="line">       min    0.001658</span><br><span class="line">      rmse    0.015674</span><br><span class="line">       sse    0.140522</span><br><span class="line">       std    0.008916</span><br></pre></td></tr></table></figure><p>一般情况下，在论文中可以直接使用RMSE这个<strong>均方根误差</strong>来作为SLAM系统精度的对比指标，该指标越低代表系统误差越低，也就是系统越优秀。</p><h2 id="4-The-end">4. The end</h2><p>本文对evo工具的简单介绍就到这里啦。</p><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p>Grupp M. evo: Python package for the evaluation of odometry and SLAM [EB/OL]. <a href="https://github.com/MichaelGrupp/evo">https://github.com/MichaelGrupp/evo</a>, 2017. <a href="#fnref1" class="footnote-backref">↩︎</a></p></li><li id="fn2" class="footnote-item"><p>J. Sturm, N. Engelhard, F. Endres, W. Burgard and D. Cremers, “A benchmark for the evaluation of RGB-D SLAM systems,” 2012 IEEE/RSJ International Conference on Intelligent Robots and Systems, Vilamoura-Algarve, Portugal, 2012, pp. 573-580, doi: <a href="https://cvg.cit.tum.de/_media/spezial/bib/sturm12iros.pdf">10.1109/IROS.2012.6385773</a>. <a href="#fnref2" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content>
    
    
    <summary type="html">本文介绍了如何使用evo工具来绘制ORB_SLAM2的轨迹图和进行ATE&#92;RPE评估。</summary>
    
    
    
    <category term="编程学习" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="项目开发记录" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="Linux" scheme="https://blog.musnow.top/tags/Linux/"/>
    
    <category term="SLAM" scheme="https://blog.musnow.top/tags/SLAM/"/>
    
  </entry>
  
  <entry>
    <title>【Mac】拒绝parallels toolbox，从我做起！</title>
    <link href="https://blog.musnow.top/posts/9085567599/"/>
    <id>https://blog.musnow.top/posts/9085567599/</id>
    <published>2025-05-26T00:57:24.000Z</published>
    <updated>2025-05-26T01:53:09.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文是个纯吐槽文，写的比较随意，仅代表个人观点。</p></blockquote><p>前几天，为了尝试parallels虚拟机的“融合模式”，去官网重新下了最新版本的parallels虚拟机（AppStore里面的版本是没有融合模式的），当时买macbook air送了两年的标准版，可以直接激活使用。</p><p>简单来说，“融合模式”就是可以直接在mac里面以原生软件的方式打开windows虚拟机里面的软件，软件窗口直接在mac里面打开而不是在虚拟机里面打开，但尝试之后发现<strong>软件会非常糊</strong>，个人认为效果还不如直接切换桌面在虚拟机里面用。只是尝试了一小会之后就关闭了融合模式。</p><p>但是，问题就来了，随着这个官网下载的parallels一同安装的，还有一个<strong>parallels toolbox</strong>，我本来以为这个是用来控制虚拟机的软件，所以就直接允许安装了。没想到安装了之后是一系列烦人事情的开始。</p><blockquote><p>实际上：<code>parallels tools</code>是在虚拟机内部安装的，用于控制虚拟机，实现剪贴板同步等功能。<code>parallels toolbox</code>是在mac上安装的一个用来优化mac使用的软件，和虚拟机没有任何关系！</p></blockquote><p>我有另外一台windows台式机，更新完毕parallels虚拟机之后就去打游戏了，第二天回来继续用mac，一看，我靠，<strong>桌面上的文件夹怎么都没了</strong>？我的毕设论文和代码可都在桌面上啊，蛋糕了！</p><p>第一反应是更新parallels虚拟机重新初始化windows的时候把桌面的东西都清空了（因为我在这段时间只做过这一个可能影响电脑的操作），检查了一下windows虚拟机里面的回收站和mac自己的垃圾桶，都没有桌面文件夹，干！难道文件丢了？</p><blockquote><p>这里就得提一嘴<a href="https://blog.musnow.top/posts/3543423459/">备份</a>的重要性了，虽然我的东西都放在了桌面上，但是我的毕设论文是用wps同步过的，毕设代码也有git，即便这两个文件夹都丢了，也不会造成实际上的数据丢失，但烦人和恼火是肯定的！</p></blockquote><p>赶快打开vscode记录里面桌面上的工作空间，正常打开……诶？文件没丢？</p><p>再ls看一下，得嘞，桌面上的文件夹都在，还好还好</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">❯ ls ~/Desktop</span><br><span class="line">final  docker</span><br></pre></td></tr></table></figure><p>但是都在，为什么不显示呢？</p><p>那就只能是被设置成了隐藏文件夹，使用<code>command+shift+.</code>这个快捷键，可以在访达里面切换是否显示隐藏文件夹，切换了之后桌面上的文件夹就以暗色显示出来了，确实是被隐藏了。</p><p>那就取消隐藏文件夹吧，在命令行里面执行一下chflags命令来设置或取消隐藏文件夹。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chflags nohidden ~/Desktop <span class="comment"># 取消隐藏文件夹</span></span><br><span class="line">chflags hidden ~/Desktop   <span class="comment"># 隐藏文件夹</span></span><br></pre></td></tr></table></figure><p>好的，问题是解决了，但还得找到罪魁祸首。</p><p>那就是前面提到的parallels toolbox了，这个软件有一个“演示模式”，在mac连接到第二块屏幕的时候，<strong>隐藏桌面上所有文件</strong>。从这个功能的名称和意义来看，它肯定是有点用的，在会议演示的时候桌面上的所有文件都会被自动隐藏，不会被其他人看到你放在桌面上的文件。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/05/5f5f638c492b44fda55b311fad6cf94f.webp" alt="image.png"></p><p>但是！<strong>问题就在于这个演示模式在开启时没有任何说明</strong>，它修改了什么设置你都需要点进这个演示模式的设置里面才能看到，在状态栏也不会有任何现在正处于演示模式的提示，只有一个parallels toolbox的图标。</p><p>而且安装了parallels toolbox之后，<strong>演示模式就会自动开启</strong>，退出parallels toolbox软件也<strong>不会</strong>把桌面的隐藏文件夹恢复。对于像我这种mac长期链接显示器的用户而言，这个工具在安装了之后的效果就是桌面上的文件夹莫名其妙的消失了，这能不吓人吗！</p><p>问题还不止这一个，parallels toolbox软件同时修改了我的电源计划，而且肯定是系统设置里面没有的电源计划，导致我的mac现在在锁屏阶段不会自动熄屏（原本在锁屏页面上过20分钟后会自动关闭屏幕的），这也很烦人，导致我晚上要么把显示器关了要么手动点击mac的睡眠按钮或者直接把mac关机。卸载了parallels toolbox之后重启电脑才恢复。</p><p>总而言之，parallels toolbox软件虽然提供了一些可能有帮助的功能，但是它对系统设置的<strong>无声修改</strong>非常致命！如果是一个对电脑使用不够熟悉的小白，安装虚拟机时无意中安装了这个软件的时候，恐怕很难意识到自己的电脑出了什么问题，光是桌面文件夹消失了这一点就够让人胆战心惊的，我当时真的被吓到了。</p><p>parallels toolbox要么在开启这些辅助功能的时候弹窗明确说明每个功能的作用（我甚至都不记得演示模式开启的时候有没有弹窗提示了，印象里是完全没有的），要么就别自动开启这些功能，特别是<strong>演示模式</strong>功能。</p><p>真无语……</p>]]></content>
    
    
    <summary type="html">被parallels toolbox的演示模式功能给坑惨了，拒绝parallels toolbox，从我做起！</summary>
    
    
    
    <category term="差生文具多" scheme="https://blog.musnow.top/categories/%E5%B7%AE%E7%94%9F%E6%96%87%E5%85%B7%E5%A4%9A/"/>
    
    <category term="电脑使用小贴士" scheme="https://blog.musnow.top/categories/%E5%B7%AE%E7%94%9F%E6%96%87%E5%85%B7%E5%A4%9A/%E7%94%B5%E8%84%91%E4%BD%BF%E7%94%A8%E5%B0%8F%E8%B4%B4%E5%A3%AB/"/>
    
    
    <category term="MacBook" scheme="https://blog.musnow.top/tags/MacBook/"/>
    
  </entry>
  
  <entry>
    <title>【Hexo】将代码块中tab替换为空格（修改tab_replace）</title>
    <link href="https://blog.musnow.top/posts/7827607861/"/>
    <id>https://blog.musnow.top/posts/7827607861/</id>
    <published>2025-05-16T02:00:57.000Z</published>
    <updated>2025-08-02T09:08:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>通过修改hexo配置文件将代码块中出现的tab制表符改成4个空格。</p><h2 id="问题">问题</h2><p>最近发现本站部分代码块中缩进过于离谱，比如<a href="https://blog.musnow.top/posts/4192678800/">python uv</a>这篇博客。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/05/b261108bc9763f858aaa8977257a14e0.webp" alt="image.png"></p><p>检查了此处的md源码之后发现，代码块中的缩进是tab而不是空格，所以导致采用了html默认的8个空格来展示tab，导致缩进过长。</p><h2 id="解决">解决</h2><blockquote><p>参考：<a href="https://blog.csdn.net/qq_41948288/article/details/138728709">https://blog.csdn.net/qq_41948288/article/details/138728709</a></p></blockquote><p>hexo中代码块的渲染是由hexo本身负责的，绝大部分主题并没有引入独立的代码块渲染机制。所以代码块的配置项是在hexo自己的<code>_config.yaml</code>配置文件中。</p><p>hexo <code>_config.yaml</code>配置文件（我的是在第50行）的highlight就是代码块的配置，如下所示：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">highlight:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">line_number:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">auto_detect:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">tab_replace:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="attr">wrap:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">hljs:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">exclude_languages:</span> [<span class="string">&#x27;mermaid&#x27;</span>] <span class="comment"># 渲染的时候忽略代码语言</span></span><br></pre></td></tr></table></figure><p>其中有一个选项是tab_replace，默认是空，不会做任何替换操作。将其修改为4个空格即可。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">tab_replace:</span> <span class="string">&#x27;    &#x27;</span></span><br></pre></td></tr></table></figure><p>修改后，重新进行hexo cl和hexo g，就可以观察到生效后的代码块，不再出现过长的缩进了</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;mcpServers&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;工具名称&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;uv&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="string">&quot;--directory&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;工作路径&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;run&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;test.py&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>问题解决</p>]]></content>
    
    
    <summary type="html">通过修改hexo配置文件将代码块中出现的tab制表符改成4个空格，全主题通用</summary>
    
    
    
    <category term="差生文具多" scheme="https://blog.musnow.top/categories/%E5%B7%AE%E7%94%9F%E6%96%87%E5%85%B7%E5%A4%9A/"/>
    
    <category term="博客建站" scheme="https://blog.musnow.top/categories/%E5%B7%AE%E7%94%9F%E6%96%87%E5%85%B7%E5%A4%9A/%E5%8D%9A%E5%AE%A2%E5%BB%BA%E7%AB%99/"/>
    
    
    <category term="博客建站" scheme="https://blog.musnow.top/tags/%E5%8D%9A%E5%AE%A2%E5%BB%BA%E7%AB%99/"/>
    
    <category term="Hexo" scheme="https://blog.musnow.top/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>【MCP】了解远程MCP调用背后使用的SSE协议</title>
    <link href="https://blog.musnow.top/posts/2725694758/"/>
    <id>https://blog.musnow.top/posts/2725694758/</id>
    <published>2025-04-20T06:47:57.000Z</published>
    <updated>2025-08-11T13:46:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍了远程MCP使用的SSE协议，通过wireshark抓包的方式了解MCP客户端和服务端之间通过SSE协议交互涉及到的请求与响应。</p><h2 id="1-什么是SSE协议？">1. 什么是SSE协议？</h2><blockquote><p>参考：<a href="https://zhuanlan.zhihu.com/p/1894024642395619635">科普一下MCP时代重要的SSE协议</a>、<a href="https://blog.csdn.net/aerror/article/details/146208818">关于MCP SSE 服务器的工作原理</a></p></blockquote><p>MCP的远程服务是通过SSE（Server-Sent Events）启动的，SSE是一个基于HTTP的长连接协议。SSE在逻辑上是一个由客户端发起、由服务器同意而建立的<strong>从服务器向客户端发消息的单向管道</strong>。这个管道建立之后，<strong>客户端给服务器发消息时用传统方式发</strong>，服务器给客户端发消息时用这个管道发，双方就可以灵活地进行通信了。</p><p>MCP SSE客户端会发起多个请求，第一个请求是<code>/sse</code>路径，这是建立SSE长连接的第一步。服务端会使用chunked方式来回传数据，每次不告诉客户端数据量有多少，让客户端保持连接始终联通，即维护了一个长连接。后续每一次服务端与客户端的通讯，都会采用事件字节数、事件名称event、data三个字段来通信（服务端发送给客户端）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">事件字节数（十六进制）</span><br><span class="line">event: 事件名称</span><br><span class="line">data: 事件数据</span><br><span class="line">&lt;这里一定会有一个空行，作为单个事件结束标志&gt;</span><br></pre></td></tr></table></figure><p>其中第一行是消息的字节数，以十六进制给出。从第二行event开始一直到data结束，都是这个事件字节数的长度范围内（不包括末尾的<code>\r\n</code>）</p><blockquote><p>2025.08.11 备注：在更新之前的博客中，第一行的<strong>事件字节数</strong>被我错误的理解为了不变的事件ID，在此对受误导的读者表示抱歉！感谢评论区网友的指正！</p></blockquote><h2 id="2-实际测试：运行MCP服务端和QwenAgent">2. 实际测试：运行MCP服务端和QwenAgent</h2><p>因为使用sse远程方式启动mcp服务端时是在本地回环地址启动的， 所以可以通过wireshark工具监听到我们本地客户端与服务端之间传输的请求与响应，通过这种方式来进一步了解mcp每一步都请求了什么，响应了什么。</p><p>首先是用sse模式启动我们的mcp服务端demo，也就是官方python sdk中的<code>mcp-python-sdk/examples/servers/simple-tool</code>，设置端口为8000。注意修改命令中<code>--directory</code>之后的路径为你电脑上<code>simple-tool</code>的正确路径。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">uv run \</span><br><span class="line">    --directory mcp-python-sdk/examples/servers/simple-tool \</span><br><span class="line">    mcp-simple-tool \</span><br><span class="line">    --transport sse --port 8000</span><br></pre></td></tr></table></figure><p>然后再在wireshark里面监听<strong>本地回环</strong>地址，使用过滤器<code>tcp.port==8000</code>筛选出所有和8000端口有关的请求。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/04/960acbb8a0e910ffcaf90cfba3a6a669.webp" alt="image.png"></p><p>使用如下代码，运行一次QwenAgent，调用mcp工具。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> qwen_agent.agents <span class="keyword">import</span> Assistant</span><br><span class="line"><span class="comment"># DEBUG模式，列出详细处理日志</span></span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line">logging.basicConfig(level=logging.DEBUG, </span><br><span class="line">                    <span class="built_in">format</span>=<span class="string">&#x27;%(asctime)s - %(levelname)s - %(message)s&#x27;</span>, </span><br><span class="line">                    filename=<span class="string">&#x27;app.log&#x27;</span>, </span><br><span class="line">                    filemode=<span class="string">&#x27;a&#x27;</span>) </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">init_agent_service</span>():</span><br><span class="line">    llm_cfg = &#123;</span><br><span class="line">        <span class="string">&#x27;model&#x27;</span>: <span class="string">&#x27;Qwen/Qwen2.5-32B-Instruct&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;model_server&#x27;</span>: <span class="string">&#x27;https://api.siliconflow.cn/v1&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;api_key&#x27;</span>: <span class="string">&#x27;xxxx&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    system = (<span class="string">&#x27;你是一个强大的助手，可以帮用户处理问题。&#x27;</span>)</span><br><span class="line">    tools = [&#123;</span><br><span class="line">        <span class="string">&quot;mcpServers&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;exmaple-server&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;url&quot;</span>: <span class="string">&quot;http://127.0.0.1:8000/sse&quot;</span>,</span><br><span class="line">                <span class="string">&quot;disabled&quot;</span>: <span class="literal">False</span>,</span><br><span class="line">                <span class="string">&quot;timeout&quot;</span>: <span class="number">30</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;]</span><br><span class="line">    bot = Assistant(</span><br><span class="line">        llm=llm_cfg,</span><br><span class="line">        name=<span class="string">&#x27;网页查看助手&#x27;</span>,</span><br><span class="line">        description=<span class="string">&#x27;网页查看&#x27;</span>,</span><br><span class="line">        system_message=system,</span><br><span class="line">        function_list=tools,</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> bot</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">text=<span class="string">&#x27;这个网站是什么？https://blog.musnow.top/&#x27;</span></span>):</span><br><span class="line">    bot = init_agent_service()</span><br><span class="line">    messages = [&#123;<span class="string">&#x27;role&#x27;</span>: <span class="string">&#x27;user&#x27;</span>, <span class="string">&#x27;content&#x27;</span>: text&#125;]</span><br><span class="line">    <span class="comment"># 请求</span></span><br><span class="line">    <span class="keyword">for</span> response <span class="keyword">in</span> bot.run(messages):</span><br><span class="line">        logging.info(<span class="string">&#x27;bot response: &#x27;</span> + <span class="built_in">str</span>(response)) <span class="comment"># 这里也用logging打印</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>MCP服务端服务端的日志中会出现下面五条请求记录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">❯ uv run --directory /Users/mothra/data/code/python/openai/mcp-python-sdk/examples/servers/simple-tool mcp-simple-tool --transport sse --port 8000</span><br><span class="line">start server sse</span><br><span class="line">INFO:     Started server process [87086]</span><br><span class="line">INFO:     Waiting for application startup.</span><br><span class="line">INFO:     Application startup complete.</span><br><span class="line">INFO:     Uvicorn running on http://0.0.0.0:8000 (Press CTRL+C to quit)</span><br><span class="line">INFO:     127.0.0.1:49652 - &quot;GET /sse HTTP/1.1&quot; 200 OK</span><br><span class="line">INFO:     127.0.0.1:49654 - &quot;POST /?session_id=b53301ca408f4da4a12562ce2fde23de HTTP/1.1&quot; 202 Accepted</span><br><span class="line">INFO:     127.0.0.1:49656 - &quot;POST /?session_id=b53301ca408f4da4a12562ce2fde23de HTTP/1.1&quot; 202 Accepted</span><br><span class="line">INFO:     127.0.0.1:49658 - &quot;POST /?session_id=b53301ca408f4da4a12562ce2fde23de HTTP/1.1&quot; 202 Accepted</span><br><span class="line">INFO:     127.0.0.1:49668 - &quot;POST /?session_id=b53301ca408f4da4a12562ce2fde23de HTTP/1.1&quot; 202 Accepted</span><br></pre></td></tr></table></figure><h2 id="3-分析wireshark抓包结果">3. 分析wireshark抓包结果</h2><h3 id="3-1-第一条请求：-SSE">3.1. 第一条请求：/SSE</h3><p>首先在wireshark中找到第一条sse请求，在wireshark中能清晰的看到客户端从49652端口向8000端口发起<strong>TCP三次握手</strong>的记录。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/04/69148f26b67e74bd190c98224b0e15e9.webp" alt="image.png"></p><p>客户端发起的<code>/sse</code>接口的请求报文如下，没有什么特别的</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/sse</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>127.0.0.1:8000</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>python-httpx/0.28.1</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/event-stream</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Cache-Control</span><span class="punctuation">: </span>no-store</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>服务端的响应如下，这一串响应是在两个tcp报文中发出的，下图中用紫色荧光笔标注len不为0的就是服务端发出的两个报文。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/04/815180df9842b41001a215e6d4b373d2.webp" alt="image.png"></p><blockquote><p><strong>注意</strong>：这里的HTTP响应报文是一个chunked类型的，也就是这一条HTTP响应报文后续还一直会有其他内容（服务端和客户端之间的管道），直到客户端和服务端的交互结束了，这一条HTTP响应报文才算完整结束！</p></blockquote><p>这两个报文的内容拼接起来如下，为了更直观的展示HTTP报文格式，这里将HTTP协议的<code>\r\n</code>换行符也人工标识出来。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">200</span> OK\r\n</span><br><span class="line"><span class="attribute">date</span><span class="punctuation">: </span>Sun, 20 Apr 2025 06:00:38 GMT\r\n</span><br><span class="line"><span class="attribute">server</span><span class="punctuation">: </span>uvicorn\r\n</span><br><span class="line"><span class="attribute">cache-control</span><span class="punctuation">: </span>no-cache\r\n</span><br><span class="line"><span class="attribute">connection</span><span class="punctuation">: </span>keep-alive\r\n</span><br><span class="line"><span class="attribute">x-accel-buffering</span><span class="punctuation">: </span>no\r\n</span><br><span class="line"><span class="attribute">content-type</span><span class="punctuation">: </span>text/event-stream; charset=utf-8\r\n</span><br><span class="line"><span class="attribute">Transfer-Encoding</span><span class="punctuation">: </span>chunked\r\n</span><br><span class="line">\r\n</span><br><span class="line">51\r\n</span><br><span class="line"><span class="attribute">event</span><span class="punctuation">: </span>endpoint\r\n</span><br><span class="line"><span class="attribute">data</span><span class="punctuation">: </span>/messages/?session_id=b53301ca408f4da4a12562ce2fde23de\r\n</span><br><span class="line">\r\n\r\n</span><br></pre></td></tr></table></figure><p>这里便是服务端发出的第一个SSE协议事件数据了。其中：</p><ul><li>事件字节数是十六进制的51（十进制81，是从event开始一直到data结束共81字节）；</li><li>事件名称是endpoint（告诉客户端后续需要请求的接口路径是啥）‘</li><li>事件内容就是endpoint的具体值了。</li></ul><p>在data之后还额外出现了两个<code>\r\n</code>，这便是单个事件的结束标志。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">51</span><br><span class="line"><span class="attribute">event</span><span class="punctuation">: </span>endpoint</span><br><span class="line"><span class="attribute">data</span><span class="punctuation">: </span>/messages/?session_id=b53301ca408f4da4a12562ce2fde23de</span><br><span class="line">&lt;空行&gt;</span><br></pre></td></tr></table></figure><p>这个endpoint响应就是告诉客户端，后续的请求全都要使用<code>/messages/?session_id=b53301ca408f4da4a12562ce2fde23de</code>这个路径来发起，这个路径中包含本次会话的session id，客户端使用这个路径，服务端就能够知道要在哪一个管道里面向客户端发回结果。</p><p>在QwenAgent的debug日志中（底层mcp交互用的是httpx库）也能观察到这个事件，客户端收到了服务端提供的endpoint URL。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">2025-04-20 14:32:01,570 - INFO - HTTP Request: GET http://127.0.0.1:8000/sse &quot;HTTP/1.1 200 OK&quot;</span><br><span class="line">2025-04-20 14:32:01,570 - DEBUG - SSE connection established</span><br><span class="line">2025-04-20 14:32:01,570 - DEBUG - receive_response_body.started request=&lt;Request [b&#x27;GET&#x27;]&gt;</span><br><span class="line">2025-04-20 14:32:01,570 - DEBUG - Received SSE event: endpoint</span><br><span class="line">2025-04-20 14:32:01,570 - INFO - Received endpoint URL: http://127.0.0.1:8000/messages/?session_id=b53301ca408f4da4a12562ce2fde23de</span><br></pre></td></tr></table></figure><h3 id="3-2-第二条请求：初始化">3.2. 第二条请求：初始化</h3><p>第二条客户端的请求如下，这里已经开始使用服务端刚刚返回的endpoint了。请求体部分是json格式的内容，initialize代表是初始化MCP客户端，告诉服务端当前客户端使用的协议版本protocolVersion、支持的能力capabilities、jsonrpc版本等等信息</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/messages/?session_id=b53301ca408f4da4a12562ce2fde23de</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>127.0.0.1:8000</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>python-httpx/0.28.1</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>194</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/event-stream</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/json</span><br><span class="line"></span><br><span class="line"><span class="language-json"><span class="punctuation">&#123;</span><span class="attr">&quot;method&quot;</span><span class="punctuation">:</span><span class="string">&quot;initialize&quot;</span><span class="punctuation">,</span><span class="attr">&quot;params&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;protocolVersion&quot;</span><span class="punctuation">:</span><span class="string">&quot;2024-11-05&quot;</span><span class="punctuation">,</span><span class="attr">&quot;capabilities&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;sampling&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="attr">&quot;roots&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;listChanged&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">true</span></span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="attr">&quot;clientInfo&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;mcp&quot;</span><span class="punctuation">,</span><span class="attr">&quot;version&quot;</span><span class="punctuation">:</span><span class="string">&quot;0.1.0&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="attr">&quot;jsonrpc&quot;</span><span class="punctuation">:</span><span class="string">&quot;2.0&quot;</span><span class="punctuation">,</span><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">&#125;</span></span></span><br></pre></td></tr></table></figure><p>针对这次请求，服务端发回的响应就比较简单了，一个Accepted告诉客户端他的请求已经被接受了，并没有返回实际性的内容。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">202</span> Accepted</span><br><span class="line"><span class="attribute">date</span><span class="punctuation">: </span>Sun, 20 Apr 2025 06:00:38 GMT</span><br><span class="line"><span class="attribute">server</span><span class="punctuation">: </span>uvicorn</span><br><span class="line"><span class="attribute">content-length</span><span class="punctuation">: </span>8</span><br><span class="line"></span><br><span class="line"><span class="language-ebnf"><span class="attribute">Accepted</span></span></span><br></pre></td></tr></table></figure><p>这正是前文提到过的SSE协议的特性，服务端传回的数据不会使用HTTP响应直接传回，<strong>而是会在第一次/sse请求后建立的长连接管道里面传回</strong>！上述响应只是针对客户端的POST请求，依照HTTP协议的要求发出的而已（HTTP要求每一个req都需要有一个res）</p><p>如下图所示，在服务端返回Accepted响应之后，就能观察到一个服务端向客户端发出的len不为0的TCP报文，这个报文中就包含了服务端针对客户端这次发起的初始化请求的实际事件响应。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/04/7a567ad3ca62c706b0d93587ea3212a9.webp" alt="image.png"></p><p>这个报文的内容如下，e9是当前消息的长度（十进制233），event事件名称是一个message，data中就包含了服务端对这次初始化请求的响应，返回了服务端的jsonrpc版本、支持的协议版本protocolVersion、支持的能力capabilities、服务端的信息serverInfo。</p><p>同样的，这里也是额外出现了两个<code>\r\n</code>作为事件结束标志。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">e9\r\n</span><br><span class="line"><span class="attribute">event</span><span class="punctuation">: </span>message\r\n</span><br><span class="line"><span class="attribute">data</span><span class="punctuation">: </span>&#123;&quot;jsonrpc&quot;:&quot;2.0&quot;,&quot;id&quot;:0,&quot;result&quot;:&#123;&quot;protocolVersion&quot;:&quot;2024-11-05&quot;,&quot;capabilities&quot;:&#123;&quot;experimental&quot;:&#123;&#125;,&quot;tools&quot;:&#123;&quot;listChanged&quot;:false&#125;&#125;,&quot;serverInfo&quot;:&#123;&quot;name&quot;:&quot;mcp-website-fetcher&quot;,&quot;version&quot;:&quot;1.6.1.dev14+babb477&quot;&#125;&#125;&#125;\r\n</span><br><span class="line">\r\n\r\n</span><br></pre></td></tr></table></figure><h3 id="3-3-第三条请求：初始化成功告知">3.3. 第三条请求：初始化成功告知</h3><p>第三条请求就是客户端告诉服务端自己已经准备好了，初始化成功initialized。同样会有一对POST和Accepted的HTTP请求，这里不再赘述</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/messages/?session_id=b53301ca408f4da4a12562ce2fde23de</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>127.0.0.1:8000</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>python-httpx/0.28.1</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>54</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/event-stream</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/json</span><br><span class="line"></span><br><span class="line"><span class="language-json"><span class="punctuation">&#123;</span><span class="attr">&quot;method&quot;</span><span class="punctuation">:</span><span class="string">&quot;notifications/initialized&quot;</span><span class="punctuation">,</span><span class="attr">&quot;jsonrpc&quot;</span><span class="punctuation">:</span><span class="string">&quot;2.0&quot;</span><span class="punctuation">&#125;</span></span></span><br></pre></td></tr></table></figure><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">202</span> Accepted</span><br><span class="line"><span class="attribute">date</span><span class="punctuation">: </span>Sun, 20 Apr 2025 06:00:38 GMT</span><br><span class="line"><span class="attribute">server</span><span class="punctuation">: </span>uvicorn</span><br><span class="line"><span class="attribute">content-length</span><span class="punctuation">: </span>8</span><br><span class="line"></span><br><span class="line"><span class="language-ebnf"><span class="attribute">Accepted</span></span></span><br></pre></td></tr></table></figure><p>从抓包结果中可以看到，这一条请求到下一条请求之间没有服务端向客户端发出len不为0的TCP报文，因为这一次请求只是客户端告知服务端自己已经准备好了，服务端没必要额外返回任何信息。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/04/7629117d0ef69dbcbf91511e93b6d3dc.webp" alt="image.png"></p><h3 id="3-4-第四条请求：请求工具列表">3.4. 第四条请求：请求工具列表</h3><p>第四条请求就是客户端向服务端请求服务端提供的工具列表了</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/messages/?session_id=b53301ca408f4da4a12562ce2fde23de</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>127.0.0.1:8000</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>python-httpx/0.28.1</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>46</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/event-stream</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/json</span><br><span class="line"></span><br><span class="line"><span class="language-json"><span class="punctuation">&#123;</span><span class="attr">&quot;method&quot;</span><span class="punctuation">:</span><span class="string">&quot;tools/list&quot;</span><span class="punctuation">,</span><span class="attr">&quot;jsonrpc&quot;</span><span class="punctuation">:</span><span class="string">&quot;2.0&quot;</span><span class="punctuation">,</span><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span><span class="number">1</span><span class="punctuation">&#125;</span></span></span><br></pre></td></tr></table></figure><p>服务端照常进行了Accepted响应</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">202</span> Accepted</span><br><span class="line"><span class="attribute">date</span><span class="punctuation">: </span>Sun, 20 Apr 2025 06:00:38 GMT</span><br><span class="line"><span class="attribute">server</span><span class="punctuation">: </span>uvicorn</span><br><span class="line"><span class="attribute">content-length</span><span class="punctuation">: </span>8</span><br><span class="line"></span><br><span class="line"><span class="language-ebnf"><span class="attribute">Accepted</span></span></span><br></pre></td></tr></table></figure><p>随后在管道里面发出的TCP报文中，就包含了服务端当前支持的工具，以及工具的参数和参数的类型与释义。这里第一行依旧是消息的十六进制字节数，109对应十进制265。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">109\r\n</span><br><span class="line"><span class="attribute">event</span><span class="punctuation">: </span>message\r\n</span><br><span class="line"><span class="attribute">data</span><span class="punctuation">: </span>&#123;&quot;jsonrpc&quot;:&quot;2.0&quot;,&quot;id&quot;:1,&quot;result&quot;:&#123;&quot;tools&quot;:[&#123;&quot;name&quot;:&quot;fetch&quot;,&quot;description&quot;:&quot;Fetches a website and returns its content&quot;,&quot;inputSchema&quot;:&#123;&quot;type&quot;:&quot;object&quot;,&quot;required&quot;:[&quot;url&quot;],&quot;properties&quot;:&#123;&quot;url&quot;:&#123;&quot;type&quot;:&quot;string&quot;,&quot;description&quot;:&quot;URL to fetch&quot;&#125;&#125;&#125;&#125;]&#125;&#125;\r\n</span><br><span class="line">\r\n\r\n</span><br></pre></td></tr></table></figure><p>从日志中看，QwenAgent会把这部分内容转换为prompt发送给AI，让AI来调用这个工具。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2025-04-20 14:32:01,637 - DEBUG - Request options: &#123;&#x27;method&#x27;: &#x27;post&#x27;, &#x27;url&#x27;: &#x27;/chat/completions&#x27;, &#x27;files&#x27;: None, &#x27;json_data&#x27;: &#123;&#x27;messages&#x27;: [&#123;&#x27;role&#x27;: &#x27;system&#x27;, &#x27;content&#x27;: &#x27;你是一个强大的助手，可以帮用户处理问题。\n\n# Tools\n\nYou may call one or more functions to assist with the user query.\n\nYou are provided with function signatures within &lt;tools&gt;&lt;/tools&gt; XML tags:\n&lt;tools&gt;\n&#123;&quot;type&quot;: &quot;function&quot;, &quot;function&quot;: &#123;&quot;name&quot;: &quot;exmaple-server-fetch&quot;, &quot;description&quot;: &quot;Fetches a website and returns its content&quot;, &quot;parameters&quot;: &#123;&quot;type&quot;: &quot;object&quot;, &quot;properties&quot;: &#123;&quot;url&quot;: &#123;&quot;type&quot;: &quot;string&quot;, &quot;description&quot;: &quot;URL to fetch&quot;&#125;&#125;, &quot;required&quot;: [&quot;url&quot;]&#125;&#125;&#125;\n&lt;/tools&gt;\n\nFor each function call, return a json object with function name and arguments within &lt;tool_call&gt;&lt;/tool_call&gt; XML tags:\n&lt;tool_call&gt;\n&#123;&quot;name&quot;: &lt;function-name&gt;, &quot;arguments&quot;: &lt;args-json-object&gt;&#125;\n&lt;/tool_call&gt;&#x27;&#125;, &#123;&#x27;role&#x27;: &#x27;user&#x27;, &#x27;content&#x27;: &#x27;这个网站是什么？https://blog.musnow.top/&#x27;&#125;], &#x27;model&#x27;: &#x27;Qwen/Qwen2.5-32B-Instruct&#x27;, &#x27;seed&#x27;: 44742000, &#x27;stream&#x27;: True&#125;&#125;</span><br></pre></td></tr></table></figure><p>其中上下文信息如下，可以看到这里并没有使用function call的请求格式，而是直接在system的prompt里把工具相关信息以XML格式发送给AI了。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#x27;messages&#x27;<span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line">        &#x27;role&#x27;<span class="punctuation">:</span></span><br><span class="line">        &#x27;system&#x27;<span class="punctuation">,</span></span><br><span class="line">        &#x27;content&#x27;<span class="punctuation">:</span></span><br><span class="line">        &#x27;你是一个强大的助手，可以帮用户处理问题。\n\n# Tools\n\nYou may call one or more functions to assist with the user query.\n\nYou are provided with function signatures within &lt;tools&gt;&lt;/tools&gt; XML tags<span class="punctuation">:</span>\n&lt;tools&gt;\n<span class="punctuation">&#123;</span><span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;function&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;function&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;exmaple-server-fetch&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Fetches a website and returns its content&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;parameters&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;object&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;URL to fetch&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="attr">&quot;required&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;url&quot;</span><span class="punctuation">]</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span>\n&lt;/tools&gt;\n\nFor each function call<span class="punctuation">,</span> return a json object with function name and arguments within &lt;tool_call&gt;&lt;/tool_call&gt; XML tags<span class="punctuation">:</span>\n&lt;tool_call&gt;\n<span class="punctuation">&#123;</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> &lt;function-name&gt;<span class="punctuation">,</span> <span class="attr">&quot;arguments&quot;</span><span class="punctuation">:</span> &lt;args-json-object&gt;<span class="punctuation">&#125;</span>\n&lt;/tool_call&gt;&#x27;</span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span></span><br><span class="line">        &#x27;role&#x27;<span class="punctuation">:</span> &#x27;user&#x27;<span class="punctuation">,</span></span><br><span class="line">        &#x27;content&#x27;<span class="punctuation">:</span> &#x27;这个网站是什么？https<span class="punctuation">:</span><span class="comment">//blog.musnow.top/&#x27;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><p>在输出的bot response中，能看到AI针对这个tools生成了请求参数，url参数的值也是正确的，和我们提出的问题保持了一致。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">t = [&#123;</span><br><span class="line">    <span class="string">&#x27;role&#x27;</span>: <span class="string">&#x27;assistant&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;content&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;reasoning_content&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;网页查看助手&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;function_call&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;exmaple-server-fetch&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;arguments&#x27;</span>: <span class="string">&#x27;&#123;&quot;url&quot;: &quot;https://blog.musnow.top/&quot;&#125;&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure><h3 id="3-5-第五条请求：调用工具">3.5. 第五条请求：调用工具</h3><p>在日志中能观察到，在AI生成了包含function_call的响应之后，QwenAgent的SDK就开始准备调用远程MCP工具了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">2025-04-20 15:32:49,370 - INFO - bot response: [&#123;&#x27;role&#x27;: &#x27;assistant&#x27;, &#x27;content&#x27;: &#x27;&#x27;, &#x27;reasoning_content&#x27;: &#x27;&#x27;, &#x27;name&#x27;: &#x27;网页查看助手&#x27;, &#x27;function_call&#x27;: &#123;&#x27;name&#x27;: &#x27;exmaple-server-fetch&#x27;, &#x27;arguments&#x27;: &#x27;&#123;&quot;url&quot;: &quot;https://blog.musnow.top/&quot;&#125;&#x27;&#125;&#125;]</span><br><span class="line">2025-04-20 15:32:49,370 - DEBUG - receive_response_body.complete</span><br><span class="line">2025-04-20 15:32:49,371 - DEBUG - response_closed.started</span><br><span class="line">2025-04-20 15:32:49,371 - DEBUG - response_closed.complete</span><br><span class="line">2025-04-20 15:32:49,373 - DEBUG - Sending client message: root=JSONRPCRequest(method=&#x27;tools/call&#x27;, params=&#123;&#x27;name&#x27;: &#x27;fetch&#x27;, &#x27;arguments&#x27;: &#123;&#x27;url&#x27;: &#x27;https://blog.musnow.top/&#x27;&#125;&#125;, jsonrpc=&#x27;2.0&#x27;, id=2)</span><br></pre></td></tr></table></figure><p>此时发起的请求如下，请求体中包含了需要请求的工具名称fetch，以及传输过来的参数arguments</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/messages/?session_id=b53301ca408f4da4a12562ce2fde23de</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>127.0.0.1:8000</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>python-httpx/0.28.1</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>119</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/event-stream</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/json</span><br><span class="line"></span><br><span class="line"><span class="language-json"><span class="punctuation">&#123;</span><span class="attr">&quot;method&quot;</span><span class="punctuation">:</span><span class="string">&quot;tools/call&quot;</span><span class="punctuation">,</span><span class="attr">&quot;params&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;fetch&quot;</span><span class="punctuation">,</span><span class="attr">&quot;arguments&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;url&quot;</span><span class="punctuation">:</span><span class="string">&quot;https://blog.musnow.top/&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="attr">&quot;jsonrpc&quot;</span><span class="punctuation">:</span><span class="string">&quot;2.0&quot;</span><span class="punctuation">,</span><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span><span class="number">2</span><span class="punctuation">&#125;</span></span></span><br></pre></td></tr></table></figure><p>服务端还是会返回一个accpet响应</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 202 Accepted</span><br><span class="line">date: Sun, 20 Apr 2025 06:00:39 GMT</span><br><span class="line">server: uvicorn</span><br><span class="line">content-length: 8</span><br><span class="line"></span><br><span class="line">Accepted</span><br></pre></td></tr></table></figure><p>随后，MCP服务端会根据这个请求，调用实际的工具，并最终返回结果。由于这个请求结果的content是慕雪个人博客首页的html源码，所以内容非常之大，这里就不贴出来完整的事件data了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">f0bd</span><br><span class="line">event: message</span><br><span class="line">data: &#123;&quot;jsonrpc&quot;:&quot;2.0&quot;,&quot;id&quot;:2,&quot;result&quot;:&#123;&quot;content&quot;:[&#123;&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;&lt;!DOCTYPE html&gt;&lt;html lang=\&quot;zh-CN\&quot; data-theme=\&quot;light\&quot;&gt;&lt;head&gt;&lt;meta charset=\&quot;UTF-8\&quot;&gt;&lt;meta http-equiv=\&quot;X-UA-Compatible\&quot; content=\&quot;IE=edge\&quot;&gt;&lt;meta name=\&quot;viewport\&quot; content=\&quot;width=device-width, initial-scale=1.0,viewport-fit=cover\&quot;&gt;&lt;title&gt;慕雪的寒舍 - 雪下了一夜&lt;/title&gt;</span><br></pre></td></tr></table></figure><p>可以看到，服务端通过三次TCP报文才把整个首页的html完整传输给客户端。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/04/a529e0c2bae9294ce4903ef635dc112e.webp" alt="image.png"></p><p>到这里，针对<code>/sse</code>接口的HTTP响应就完整结束了，MCP服务端以tools调用结果返回为标志来结束HTTP响应。</p><p>在wireshark拼接出来的完整HTTP响应中可以观察到，tools调用结果的json完整结束了，这个HTTP响应就是结束了，<strong>随后便出现了TCP四次挥手的报文</strong>。其中调用工具的响应json末尾会包含一个字段<code>&quot;isErr&quot;</code>，应该是用于标识本次mcp工具调用是否成功的，为false代表调用成功。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/04/9d00d0ef699833554e935274a84bb4fb.webp" alt="image.png"></p><h3 id="3-6-工具调用结果交付AI处理">3.6. 工具调用结果交付AI处理</h3><p>在收到工具调用结果之后，日志中就能够观察到QwenAgent将这个工具调用结果拼接在prompt里面发送给AI了。这里我把html文档的内容全部删掉了，改成了“首页HTML内容”，保留了其他字段。</p><p>首先这里能看到完整的MCP服务端工具调用结果的响应，包含jsonrpc字段、id字段、result字段、isError字段。其中工具调用结果是在result/content里面返回的。</p><p>QwenAgent的SDK依旧是在消息上下文里面将MCP工具的响应结果通过<code>&lt;tool_response&gt;\n首页HTML内容\n&lt;/tool_response&gt;</code>的拼接了起来，以user身份发送给了AI。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">2025-04-20 14:33:18,289 - DEBUG - Received SSE event: message</span><br><span class="line">2025-04-20 14:33:18,291 - DEBUG - Received server message: root=JSONRPCResponse(jsonrpc=&#x27;2.0&#x27;, id=2, result=&#123;&#x27;content&#x27;: [&#123;&#x27;type&#x27;: &#x27;text&#x27;, &#x27;text&#x27;: &#x27;首页HTML内容&#x27;&#125;], &#x27;isError&#x27;: False&#125;)</span><br><span class="line">2025-04-20 14:33:18,330 - DEBUG - Request options: &#123;&#x27;method&#x27;: &#x27;post&#x27;, &#x27;url&#x27;: &#x27;/chat/completions&#x27;, &#x27;files&#x27;: None, &#x27;json_data&#x27;: &#123;&#x27;messages&#x27;: [&#123;&#x27;role&#x27;: &#x27;system&#x27;, &#x27;content&#x27;: &#x27;你是一个强大的助手，可以帮用户处理问题。\n\n# Tools\n\nYou may call one or more functions to assist with the user query.\n\nYou are provided with function signatures within &lt;tools&gt;&lt;/tools&gt; XML tags:\n&lt;tools&gt;\n&#123;&quot;type&quot;: &quot;function&quot;, &quot;function&quot;: &#123;&quot;name&quot;: &quot;exmaple-server-fetch&quot;, &quot;description&quot;: &quot;Fetches a website and returns its content&quot;, &quot;parameters&quot;: &#123;&quot;type&quot;: &quot;object&quot;, &quot;properties&quot;: &#123;&quot;url&quot;: &#123;&quot;type&quot;: &quot;string&quot;, &quot;description&quot;: &quot;URL to fetch&quot;&#125;&#125;, &quot;required&quot;: [&quot;url&quot;]&#125;&#125;&#125;\n&lt;/tools&gt;\n\nFor each function call, return a json object with function name and arguments within &lt;tool_call&gt;&lt;/tool_call&gt; XML tags:\n&lt;tool_call&gt;\n&#123;&quot;name&quot;: &lt;function-name&gt;, &quot;arguments&quot;: &lt;args-json-object&gt;&#125;\n&lt;/tool_call&gt;&#x27;&#125;, &#123;&#x27;role&#x27;: &#x27;user&#x27;, &#x27;content&#x27;: &#x27;这个网站是什么？https://blog.musnow.top/&#x27;&#125;, &#123;&#x27;role&#x27;: &#x27;assistant&#x27;, &#x27;content&#x27;: &#x27;&lt;tool_call&gt;\n&#123;&quot;name&quot;: &quot;exmaple-server-fetch&quot;, &quot;arguments&quot;: &#123;&quot;url&quot;: &quot;https://blog.musnow.top/&quot;&#125;&#125;\n&lt;/tool_call&gt;&#x27;&#125;, &#123;&#x27;role&#x27;: &#x27;user&#x27;, &#x27;content&#x27;: &#x27;&lt;tool_response&gt;\n首页HTML内容\n&lt;/tool_response&gt;&#x27;&#125;], &#x27;model&#x27;: &#x27;Qwen/Qwen2.5-32B-Instruct&#x27;, &#x27;seed&#x27;: 181793637, &#x27;stream&#x27;: True&#125;&#125;</span><br><span class="line">2025-04-20 14:33:18,330 - DEBUG - Sending HTTP Request: POST https://api.siliconflow.cn/v1/chat/completions</span><br></pre></td></tr></table></figure><p>最终，AI理解并处理“首页HTML内容”，输出了回答</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#x27;role&#x27;: &#x27;assistant&#x27;, &#x27;content&#x27;: &#x27;该网站名为&quot;慕雪的寒舍 - 雪下了一夜&quot;，由作者&quot;慕雪年华&quot;创建。该网站看起来是一个个人博客，包含了各种类型的文章，例如编程学习、博客建站等。网站中的文章包含了不同的主题，如使用Python管理虚拟环境、MCP协议的理解和使用等。此外，网站顶部和底部列出了作者的一些社交链接和其他网站。&#x27;, &#x27;reasoning_content&#x27;: &#x27;&#x27;, &#x27;name&#x27;: &#x27;网页查看助手&#x27;&#125;</span><br></pre></td></tr></table></figure><p>不过，这里日志中出现了一个奇怪的地方，那就是代码里面打印的bot response上下文中的工具调用格式又变成了<code>function_call</code>，<strong>这里应该是QwenAgent SDK针对mcp工具在对外输出的response里面做的额外解析处理</strong>，并没有把内部通过prompt让AI调用MCP工具的格式输出出来，在最终输出的时候还是会使用<code>function_call</code>的格式来标识AI和MCP工具的调用，方便用户解析。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2025-04-20 15:32:57,549 - INFO - bot response: [&#123;&#x27;role&#x27;: &#x27;assistant&#x27;, &#x27;content&#x27;: &#x27;&#x27;, &#x27;reasoning_content&#x27;: &#x27;&#x27;, &#x27;name&#x27;: &#x27;网页查看助手&#x27;, &#x27;function_call&#x27;: &#123;&#x27;name&#x27;: &#x27;exmaple-server-fetch&#x27;, &#x27;arguments&#x27;: &#x27;&#123;&quot;url&quot;: &quot;https://blog.musnow.top/&quot;&#125;&#x27;&#125;&#125;, &#123;&#x27;role&#x27;: &#x27;function&#x27;, &#x27;content&#x27;: &#x27;首页HTML内容&#x27;, &#x27;reasoning_content&#x27;: &#x27;&#x27;, &#x27;name&#x27;: &#x27;exmaple-server-fetch&#x27;&#125;, &#123;&#x27;role&#x27;: &#x27;assistant&#x27;, &#x27;content&#x27;: &#x27;该网站名为&quot;慕雪的寒舍 - 雪下了一夜&quot;，由作者&quot;慕雪年华&quot;创建。该网站看起来是一个个人博客，包含了各种类型的文章，例如编程学习、博客建站等。网站中的文章包含了不同的主题，如使用Python管理虚拟环境、MCP协议的理解和使用等。此外，网站顶部和底部列出了作者的一些社交链接和其他网站。&#x27;, &#x27;reasoning_content&#x27;: &#x27;&#x27;, &#x27;name&#x27;: &#x27;网页查看助手&#x27;&#125;]</span><br></pre></td></tr></table></figure><p>从前文的日志分析中我们已经能够确定QwenAgent在调用工具的时候是直接通过prompt的方式让AI识别mcp工具的。在之前的博客中也提到过，这是MCP工具集成在Agent中的两种方式之一（另外一个方式就是直接使用AI的function call功能来调用），两种方式并没有好坏之分，只是将MCP集成到Agent中的不同的实现方式而已。</p><hr><p>我顺带测试了一下QwenAgent的自定义工具是否也是用prompt方式的，果不其然，通过QwenAgent提供的<code>@register_tool</code>注册的自定义工具也是通过prompt方式让AI来调用的。</p><p>以下是运行<code>Qwen-Agent/examples/assistant_add_custom_tool.py</code>时DEBUG日志中prompt内容，这里也是通过prompt让AI了解了自定义工具<code>my_image_gen</code>的调用方式。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2025-04-20 16:17:52,865 - DEBUG - Request options: &#123;&#x27;method&#x27;: &#x27;post&#x27;, &#x27;url&#x27;: &#x27;/chat/completions&#x27;, &#x27;files&#x27;: None, &#x27;json_data&#x27;: &#123;&#x27;messages&#x27;: [&#123;&#x27;role&#x27;: &#x27;system&#x27;, &#x27;content&#x27;: &#x27;According to the user\&#x27;s request, you first draw a picture and then automatically run code to download the picture and select an image operation from the given document to process the image\n\n# 知识库\n\n## 来自 [文件](doc.pdf) 的内容：\n\n```\n# Python Image Processing Tutorial: Downloading Images and Performing Flip Operations \n\nIn  this  tutorial,  we  will  learn  how  to  download  images  using  Python  and  perform  basic  image \noperations such as flipping and rotating using the Pillow library. \n ## Prerequisites \n Before we begin, make sure you have the following libraries installed in your Python environment: \n\n- `requests`: for downloading images \n- `Pillow`: for image processing \n If you haven\&#x27;t installed these libraries yet, you can install them using pip: \n\n```bash \npip install requests Pillow \n``` \n ## Step 1: Downloading an Image \n First, we need to download an image. We will use the `requests` library to accomplish this task. \n\n``` \nimport requests \n\ndef download_image(url, filename): \n\tresponse = requests.get(url) \n\tif response.status_code == 200: \n\twith open(filename, \&#x27;wb\&#x27;) as file: \n\tfile.write(response.content) \n\telse: \n\tprint(f&quot;Error: Failed to download image from &#123;url&#125;&quot;) \n\n# Example usage \nimage_url = &quot;https://example.com/image.jpg&quot;    # Replace with the URL of the image you want to \ndownload \nfilename = &quot;downloaded_image.jpg&quot; \ndownload_image(image_url, filename) \n``` \n ## Step 2: Opening and Displaying the Image \n Next, we will use the `Pillow` library to open and display the image we just downloaded. \n\n``` \nfrom PIL import Image \n\ndef open_and_show_image(filename): \n\timage = Image.open(filename) \n\timage.show() \n\n# Example usage \nopen_and_show_image(filename) \n``` \n ## Step 3: Flipping and Rotating the Image \n\nNow we can perform flip and rotate operations on the image. The `Pillow` library provides several \nmethods for image manipulation. \n\n``` \ndef flip_image(filename, mode=\&#x27;horizontal\&#x27;): \n\timage = Image.open(filename) \n\tif mode == \&#x27;horizontal\&#x27;: \n\tflipped_image = image.transpose(Image.FLIP_LEFT_RIGHT) \n\telif mode == \&#x27;vertical\&#x27;: \n\tflipped_image = image.transpose(Image.FLIP_TOP_BOTTOM) \n\telse: \n\tprint(&quot;Error: Mode should be \&#x27;horizontal\&#x27; or \&#x27;vertical\&#x27;&quot;) \n\treturn \n\tflipped_image.show() \n\treturn flipped_image \n\ndef rotate_image(filename, degrees): \n\timage = Image.open(filename) \n\trotated_image = image.rotate(degrees) \n\trotated_image.show() \n\treturn rotated_image \n\n# Example usage \nflipped_image = flip_image(filename, mode=\&#x27;horizontal\&#x27;)    # Horizontally flip \nflipped_image.save(&quot;flipped_horizontal.jpg&quot;)    # Save the horizontally flipped image \n\nflipped_image = flip_image(filename, mode=\&#x27;vertical\&#x27;)    # Vertically flip \nflipped_image.save(&quot;flipped_vertical.jpg&quot;)    # Save the vertically flipped image \n\nrotated_image = rotate_image(filename, 90)    # Rotate by 90 degrees \nrotated_image.save(&quot;rotated_90.jpg&quot;)    # Save the rotated image \n\n``` \n ## Step 4: Saving the Modified Image \n\nIn the examples above, we have seen how to save flipped and rotated images. You can use the \n`save` method to save any modified image. \n\n``` \n# Save the image \ndef save_image(image, filename): \n\timage.save(filename) \n\n# Example usage \nsave_image(flipped_image, &quot;flipped_image.jpg&quot;) \nsave_image(rotated_image, &quot;rotated_image.jpg&quot;) \n``` \n\nBy  now,  you  have  learned  how  to  download  images  using  Python  and  perform  basic  image \noperations using the Pillow library. You can extend these basics to implement more complex image \nprocessing functions as needed. \n\n```\n\n# Tools\n\nYou may call one or more functions to assist with the user query.\n\nYou are provided with function signatures within &lt;tools&gt;&lt;/tools&gt; XML tags:\n&lt;tools&gt;\n&#123;&quot;type&quot;: &quot;function&quot;, &quot;function&quot;: &#123;&quot;name&quot;: &quot;my_image_gen&quot;, &quot;description&quot;: &quot;AI painting (image generation) service, input text description, and return the image URL drawn based on text information.&quot;, &quot;parameters&quot;: [&#123;&quot;name&quot;: &quot;prompt&quot;, &quot;type&quot;: &quot;string&quot;, &quot;description&quot;: &quot;Detailed description of the desired image content, in English&quot;, &quot;required&quot;: true&#125;]&#125;&#125;\n&#123;&quot;type&quot;: &quot;function&quot;, &quot;function&quot;: &#123;&quot;name&quot;: &quot;code_interpreter&quot;, &quot;description&quot;: &quot;Python code sandbox, which can be used to execute Python code.&quot;, &quot;parameters&quot;: [&#123;&quot;name&quot;: &quot;code&quot;, &quot;type&quot;: &quot;string&quot;, &quot;description&quot;: &quot;The python code.&quot;, &quot;required&quot;: true&#125;]&#125;&#125;\n&lt;/tools&gt;\n\nFor each function call, return a json object with function name and arguments within &lt;tool_call&gt;&lt;/tool_call&gt; XML tags:\n&lt;tool_call&gt;\n&#123;&quot;name&quot;: &lt;function-name&gt;, &quot;arguments&quot;: &lt;args-json-object&gt;&#125;\n&lt;/tool_call&gt;&#x27;&#125;, &#123;&#x27;role&#x27;: &#x27;user&#x27;, &#x27;content&#x27;: &#x27;画一只猫的图片&#x27;&#125;], &#x27;model&#x27;: &#x27;Qwen/Qwen2.5-32B-Instruct&#x27;, &#x27;seed&#x27;: 652077296, &#x27;stream&#x27;: True&#125;&#125;</span><br><span class="line">2025-04-20 16:17:52,865 - DEBUG - Sending HTTP Request: POST https://api.siliconflow.cn/v1/chat/completions</span><br></pre></td></tr></table></figure><h2 id="4-The-end">4. The end</h2><p>今天心血来潮，通过抓包看了一下MCP客户端和服务端到底是怎么交互的，也算是学到了不少新知识，SSE协议也是第一次听说。如果对MCP或SSE有任何问题，欢迎评论讨论。</p><p>这次测试也借机了解了QwenAgent SDK底层是如何让Qwen大模型去处理tools的，采用的是prompt方案。所以QwenAgent在对接其他<strong>非Qwen大模型</strong>的时候<strong>基本不可用</strong>，比如我尝试了硅基流动的<code>THUDM/GLM-4-9B-0414</code>和<code>deepseek-ai/DeepSeek-V3</code>，都没办法正常处理QwenAgent提供的prompt，其中GLM-4-9B-0414尝试输出工具调用参数，但并不符合QwenAgent的需要，没有办法被SDK识别，程序直接停止运行了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># THUDM/chatglm3-6b 输出，工具调用方式不正确</span></span><br><span class="line">[&#123;<span class="string">&#x27;role&#x27;</span>: <span class="string">&#x27;assistant&#x27;</span>, <span class="string">&#x27;content&#x27;</span>: <span class="string">&#x27;mcp-simple-tool-fetch\n&#123;&quot;url&quot;: &quot;https://blog.musnow.top/&quot;&#125;&#x27;</span>, <span class="string">&#x27;reasoning_content&#x27;</span>: <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;网页查看助手&#x27;</span>&#125;] </span><br></pre></td></tr></table></figure><p>DeepSeek-V3尝试了多次，也是会出现<strong>无法正常输出工具调用参数</strong>的问题，勉强能成功一两次。这里给出DeepSeek成功处理的上下文，如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 请求体，包含工具prompt</span></span><br><span class="line">&#123;<span class="string">&#x27;method&#x27;</span>: <span class="string">&#x27;post&#x27;</span>, <span class="string">&#x27;url&#x27;</span>: <span class="string">&#x27;/chat/completions&#x27;</span>, <span class="string">&#x27;files&#x27;</span>: <span class="literal">None</span>, <span class="string">&#x27;json_data&#x27;</span>: &#123;<span class="string">&#x27;messages&#x27;</span>: [&#123;<span class="string">&#x27;role&#x27;</span>: <span class="string">&#x27;system&#x27;</span>, <span class="string">&#x27;content&#x27;</span>: <span class="string">&#x27;你是一个强大的助手，可以帮用户处理问题。\n\n# Tools\n\nYou may call one or more functions to assist with the user query.\n\nYou are provided with function signatures within &lt;tools&gt;&lt;/tools&gt; XML tags:\n&lt;tools&gt;\n&#123;&quot;type&quot;: &quot;function&quot;, &quot;function&quot;: &#123;&quot;name&quot;: &quot;mcp-simple-tool-fetch&quot;, &quot;description&quot;: &quot;Fetches a website and returns its content&quot;, &quot;parameters&quot;: &#123;&quot;type&quot;: &quot;object&quot;, &quot;properties&quot;: &#123;&quot;url&quot;: &#123;&quot;type&quot;: &quot;string&quot;, &quot;description&quot;: &quot;URL to fetch&quot;&#125;&#125;, &quot;required&quot;: [&quot;url&quot;]&#125;&#125;&#125;\n&lt;/tools&gt;\n\nFor each function call, return a json object with function name and arguments within &lt;tool_call&gt;&lt;/tool_call&gt; XML tags:\n&lt;tool_call&gt;\n&#123;&quot;name&quot;: &lt;function-name&gt;, &quot;arguments&quot;: &lt;args-json-object&gt;&#125;\n&lt;/tool_call&gt;&#x27;</span>&#125;, &#123;<span class="string">&#x27;role&#x27;</span>: <span class="string">&#x27;user&#x27;</span>, <span class="string">&#x27;content&#x27;</span>: <span class="string">&#x27;这个网站是什么？https://blog.musnow.top/&#x27;</span>&#125;], <span class="string">&#x27;model&#x27;</span>: <span class="string">&#x27;deepseek-ai/DeepSeek-V3&#x27;</span>, <span class="string">&#x27;seed&#x27;</span>: <span class="number">832221696</span>, <span class="string">&#x27;stream&#x27;</span>: <span class="literal">True</span>&#125;&#125;</span><br><span class="line"><span class="comment"># deepseek 成功输出工具调用参数</span></span><br><span class="line">[&#123;<span class="string">&#x27;role&#x27;</span>: <span class="string">&#x27;assistant&#x27;</span>, <span class="string">&#x27;content&#x27;</span>: <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;reasoning_content&#x27;</span>: <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;网页查看助手&#x27;</span>, <span class="string">&#x27;function_call&#x27;</span>: &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;mcp-simple-tool-fetch&#x27;</span>, <span class="string">&#x27;arguments&#x27;</span>: <span class="string">&#x27;&#123;&quot;url&quot;: &quot;https://blog.musnow.top/&quot;&#125;&#x27;</span>&#125;&#125;]</span><br><span class="line"><span class="comment"># deepseek 也正常识别出了工具返回结果，并输出了总结</span></span><br><span class="line">&#123;<span class="string">&#x27;role&#x27;</span>: <span class="string">&#x27;assistant&#x27;</span>, <span class="string">&#x27;content&#x27;</span>: <span class="string">&#x27;这个网站是“慕雪的寒舍”，是一个个人博客网站，由“慕雪年华”维护。博客主要涵盖了编程学习、技术教程、项目开发记录等内容，包括Python、SLAM（实时定位与地图构建）、图床工具、ROS（机器人操作系统）等技术方向的文章。此外，博客还展示了作者的书影评价、个人生活记录等内容。\n\n以下是一些关键信息：\n- **博客名称**：慕雪的寒舍  \n- **作者**：慕雪年华  \n- **简介**：爱折腾的代码初学者  \n- **内容分类**：编程学习、博客建站、工具推荐等  \n- **文章数量**：441篇  \n- **标签**：Hexo、Linux、Python、C语言等  \n\n此外，博客还提供了友链、关于页面、留言功能等社交互动模块。如果你对技术类内容感兴趣，可以进一步探索该博客的详细内容。&#x27;</span>, <span class="string">&#x27;reasoning_content&#x27;</span>: <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;网页查看助手&#x27;</span>&#125;</span><br></pre></td></tr></table></figure><p>总而言之，QwenAgent的这个prompt只有在使用Qwen自家模型的时候识别度才好，使用其他家模型的时候非常容易出现tools无法正常识别的情况。不过这也是意料之中了，毕竟人家都叫QwenAgent SDK了，本来就不是面向所有大模型的通用SDK。</p>]]></content>
    
    
    <summary type="html">本文介绍了远程MCP使用的SSE协议，通过wireshark抓包的方式了解MCP客户端和服务端之间通过SSE协议交互涉及到的请求与响应。</summary>
    
    
    
    <category term="编程学习" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="Agent智能体开发" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/Agent%E6%99%BA%E8%83%BD%E4%BD%93%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="AI" scheme="https://blog.musnow.top/tags/AI/"/>
    
    <category term="Python" scheme="https://blog.musnow.top/tags/Python/"/>
    
    <category term="MCP" scheme="https://blog.musnow.top/tags/MCP/"/>
    
  </entry>
  
  <entry>
    <title>【MCP】详细了解MCP协议：和function call的区别何在？如何使用MCP？</title>
    <link href="https://blog.musnow.top/posts/2831928244/"/>
    <id>https://blog.musnow.top/posts/2831928244/</id>
    <published>2025-04-19T00:56:01.000Z</published>
    <updated>2025-09-14T01:07:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍了MCP大模型上下文协议的的概念，并对比了MCP协议和function call的区别，同时用python sdk为例介绍了mcp的使用方式。</p><h2 id="1-什么是MCP？">1. 什么是MCP？</h2><blockquote><p>官网：<a href="https://modelcontextprotocol.io/introduction">https://modelcontextprotocol.io/introduction</a></p></blockquote><p>2025年，Anthropic提出了MCP协议。MCP全称为Model Context Protocol，翻译过来是大模型上下文协议。这个协议的主要为<strong>AI大模型和外部工具</strong>（比如让AI去查询信息，或者让AI操作本地文件）之间的交互提供了一个统一的处理协议。我们常用的USB TypeC接口（USB-C）统一了USB接口的样式，MCP协议就好比AI大模型中的USB-C，统一了大模型与工具的对接方式。</p><p>MCP协议采用了C/S架构，也就是服务端、客户端架构，能支持在客户端设备上调用远程Server提供的服务，同时也支持stdio流式传输模式，<strong>也就是在客户端本地启动mcp服务端</strong>。只需要在配置文件中新增MCP服务端，就能用上这个MCP服务器提供的各种工具，大大提高了大模型使用外部工具的便捷性。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/04/fef69c3cdacdc7927b494ed945c9210a.webp" alt="image.png"></p><p>MCP是开源协议，能让所有AI厂商、AI工具都将MCP集成到自己的客户端中，从而扩大MCP的可用面。毕竟只有用的人越多，协议才能不断发展，不断变得更好。</p><h2 id="2-了解function-call">2. 了解function call</h2><p>在MCP没有出来之前，我们的AI Agent开发如果想调用外部工具需要针对不同的AI大模型SDK编写不同的代码，其中最为常用的是openai提供的function call的处理逻辑。</p><p>本小节参考博客：</p><ul><li><a href="https://www.cnblogs.com/ruipeng/p/18216610">深入探讨Function Calling：实现外部函数调用的工作原理</a>；</li><li><a href="https://www.cnblogs.com/mingupupu/p/18385274">来自OpenAI官网的Function calling介绍与最佳实践</a></li></ul><h3 id="2-1-function-call-demo">2.1. function call demo</h3><h4 id="2-1-1-配置工具，AI提供参数">2.1.1. 配置工具，AI提供参数</h4><p>当我们调用 OpenAI Chat Completions 接口时，可以通过tools参数传入可供使用的外部工具。这个工具的调用中就包含了工具的作用，工具需要传入的参数，以及参数的释义。其中<code>tool_choice</code>字段设置为auto代表让大模型自动选择tools，设置为none时不会调用外部工具。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;tool_choice&quot;</span><span class="punctuation">:</span> <span class="string">&quot;auto&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;messages&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;role&quot;</span><span class="punctuation">:</span> <span class="string">&quot;system&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;你是一个天气查询助手&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;role&quot;</span><span class="punctuation">:</span> <span class="string">&quot;user&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;帮我查询上海的天气&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;tools&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;function&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;function&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;get_weather&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;获取指定城市的天气&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;parameters&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;object&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;city&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">              <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">              <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;城市名&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">          <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;required&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;city&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>对应的python openai代码如下，我们将tools部分放入一个包含dict的list，作为create函数的tools参数即可。同时tool_choice传入auto代表自动选择工具。这里我用了硅基流动提供的Qwen2.5模型作为演示，运行下面这个代码需要修改api_key为正确值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> openai <span class="comment"># 1.75.0</span></span><br><span class="line"><span class="keyword">import</span> json <span class="comment"># 后续会用到json</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    client = openai.OpenAI(</span><br><span class="line">        api_key=<span class="string">&quot;xxxxx&quot;</span>,</span><br><span class="line">        base_url=<span class="string">&quot;https://api.siliconflow.cn/v1&quot;</span>)</span><br><span class="line">    tools = [&#123;</span><br><span class="line">        <span class="string">&quot;type&quot;</span>: <span class="string">&quot;function&quot;</span>,</span><br><span class="line">        <span class="string">&quot;function&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;name&quot;</span>: <span class="string">&quot;get_weather&quot;</span>,</span><br><span class="line">            <span class="string">&quot;description&quot;</span>: <span class="string">&quot;获取指定城市的天气&quot;</span>,</span><br><span class="line">            <span class="string">&quot;parameters&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;type&quot;</span>: <span class="string">&quot;object&quot;</span>,</span><br><span class="line">                <span class="string">&quot;properties&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;city&quot;</span>: &#123;</span><br><span class="line">                        <span class="string">&quot;type&quot;</span>: <span class="string">&quot;string&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;description&quot;</span>: <span class="string">&quot;城市名&quot;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="string">&quot;required&quot;</span>: [<span class="string">&quot;city&quot;</span>],</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;]</span><br><span class="line">    res = client.chat.completions.create(model=<span class="string">&quot;Qwen/Qwen2.5-32B-Instruct&quot;</span>,</span><br><span class="line">                                         messages=[&#123;</span><br><span class="line">                                             <span class="string">&quot;role&quot;</span>: <span class="string">&quot;system&quot;</span>,</span><br><span class="line">                                             <span class="string">&quot;content&quot;</span>: <span class="string">&quot;你是一个天气查询助手&quot;</span></span><br><span class="line">                                         &#125;, &#123;</span><br><span class="line">                                             <span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>,</span><br><span class="line">                                             <span class="string">&quot;content&quot;</span>: <span class="string">&quot;帮我查询上海的天气&quot;</span></span><br><span class="line">                                         &#125;],</span><br><span class="line">                                         tools=tools,</span><br><span class="line">                                         tool_choice=<span class="string">&quot;auto&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;content:&quot;</span>,res.choices[<span class="number">0</span>].message.content)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;tools:&quot;</span>,res.choices[<span class="number">0</span>].message.tool_calls)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;message:&quot;</span>, res.choices[<span class="number">0</span>].message.to_dict())</span><br></pre></td></tr></table></figure><p>运行程序，发出请求后，大模型就会根据用户提出的问题和提供的tools，来为这个tools编写需要提供的参数。此时content会是空，不会输出内容，tool_calls中会包含调用的工具和参数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">❯ uv run main.py</span><br><span class="line">content: </span><br><span class="line">tools: [ChatCompletionMessageToolCall(id=&#x27;01964be6e485603d6a2a0acbbc7eba91&#x27;, function=Function(arguments=&#x27;&#123;&quot;city&quot;: &quot;上海&quot;&#125;&#x27;, name=&#x27;get_weather&#x27;), type=&#x27;function&#x27;)]</span><br><span class="line">message: &#123;&#x27;content&#x27;: &#x27;&#x27;, &#x27;role&#x27;: &#x27;assistant&#x27;, &#x27;tool_calls&#x27;: [&#123;&#x27;id&#x27;: &#x27;01964be6e485603d6a2a0acbbc7eba91&#x27;, &#x27;function&#x27;: &#123;&#x27;arguments&#x27;: &#x27;&#123;&quot;city&quot;: &quot;上海&quot;&#125;&#x27;, &#x27;name&#x27;: &#x27;get_weather&#x27;&#125;, &#x27;type&#x27;: &#x27;function&#x27;&#125;]&#125;</span><br></pre></td></tr></table></figure><p>对应如下json格式响应，包含了我们的参数</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;role&quot;</span><span class="punctuation">:</span> <span class="string">&quot;assistant&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;tool_calls&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;01964be6e485603d6a2a0acbbc7eba91&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;function&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;function&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;get_weather&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;arguments&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&#123;\n  \&quot;city\&quot;: \&quot;上海\&quot;\n&#125;&quot;</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="2-1-2-调用工具并让AI二次处理">2.1.2. 调用工具并让AI二次处理</h4><p>随后，我们就可以根据这个大模型返回的参数来调用我们的函数，并得到函数的返回结果，再次与大模型进行对话。此时需要按下面的方式维护对话上下文，首先需要将第一次请求AI返回的结果插入到上下文中（<code>&quot;role&quot;: &quot;assistant&quot;</code>的json字符串），然后再插入工具调用的数据，格式如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;role&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tool&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;工具调用结果&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;tool_call_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ai调用工具时返回的id&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>其中content代表工具调用的结果（字符串形式，内容可以是json），并且需要用<code>tool_call_id</code>来标识这是哪一个工具调用的请求，必须要和<code>&quot;role&quot;: &quot;assistant&quot;</code>响应中的id对应。</p><p>二次AI交互对应python代码如下，在上文提供的python代码之后追加</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 插入结果，再次对话</span></span><br><span class="line">messages.append(res.choices[<span class="number">0</span>].message.to_dict()) <span class="comment"># ai第一次返回的数据</span></span><br><span class="line"><span class="comment"># 工具调用的参数</span></span><br><span class="line">tool_call = res.choices[<span class="number">0</span>].message.tool_calls[<span class="number">0</span>]</span><br><span class="line">arguments = json.loads(tool_call.function.arguments)</span><br><span class="line">messages.append(&#123;</span><br><span class="line">    <span class="string">&quot;role&quot;</span>: <span class="string">&quot;tool&quot;</span>,</span><br><span class="line">    <span class="string">&quot;content&quot;</span>: get_weather(arguments[<span class="string">&#x27;city&#x27;</span>]),</span><br><span class="line">    <span class="string">&quot;tool_call_id&quot;</span>: tool_call.<span class="built_in">id</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment"># 二次请求</span></span><br><span class="line">res = client.chat.completions.create(model=model,</span><br><span class="line">                                     messages=messages,</span><br><span class="line">                                     tools=tools,</span><br><span class="line">                                     tool_choice=<span class="string">&quot;auto&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;content:&quot;</span>, res.choices[<span class="number">0</span>].message.content)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;tools:&quot;</span>, res.choices[<span class="number">0</span>].message.tool_calls)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;message:&quot;</span>, res.choices[<span class="number">0</span>].message.to_dict())</span><br></pre></td></tr></table></figure><p>其中get_weather函数如下，为了测试是写死的值，返回一个json字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_weather</span>(<span class="params">location</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#123;&quot;Celsius&quot;: 27, &quot;type&quot;: &quot;sunny&quot;&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>最终运行结果，AI成功根据我们工具调用的返回值来输出了对话方式的天气情况，包括温度和晴天。这样我们就完成了一个完整的tools调用和AI再处理的过程了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">❯ uv run main.py</span><br><span class="line">content: </span><br><span class="line">tools: [ChatCompletionMessageToolCall(id=&#x27;01964be6e485603d6a2a0acbbc7eba91&#x27;, function=Function(arguments=&#x27;&#123;&quot;city&quot;: &quot;上海&quot;&#125;&#x27;, name=&#x27;get_weather&#x27;), type=&#x27;function&#x27;)]</span><br><span class="line">message: &#123;&#x27;content&#x27;: &#x27;&#x27;, &#x27;role&#x27;: &#x27;assistant&#x27;, &#x27;tool_calls&#x27;: [&#123;&#x27;id&#x27;: &#x27;01964be6e485603d6a2a0acbbc7eba91&#x27;, &#x27;function&#x27;: &#123;&#x27;arguments&#x27;: &#x27;&#123;&quot;city&quot;: &quot;上海&quot;&#125;&#x27;, &#x27;name&#x27;: &#x27;get_weather&#x27;&#125;, &#x27;type&#x27;: &#x27;function&#x27;&#125;]&#125;</span><br><span class="line">-------------------</span><br><span class="line">content: 上海当前的天气是晴天，温度是27摄氏度。</span><br><span class="line">tools: None</span><br><span class="line">message: &#123;&#x27;content&#x27;: &#x27;上海当前的天气是晴天，温度是27摄氏度。&#x27;, &#x27;role&#x27;: &#x27;assistant&#x27;&#125;</span><br></pre></td></tr></table></figure><details class="toggle" ><summary class="toggle-button" style="">本次function call的完整上下文和代码</summary><div class="toggle-content"><p>完整json上下文信息</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;role&quot;</span><span class="punctuation">:</span> <span class="string">&quot;system&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;你是一个天气查询助手&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;role&quot;</span><span class="punctuation">:</span> <span class="string">&quot;user&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;帮我查询上海的天气&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;role&quot;</span><span class="punctuation">:</span> <span class="string">&quot;assistant&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;tool_calls&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;01964beeb9ee27098b74149d86560b35&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;function&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;arguments&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&#123;\&quot;city\&quot;: \&quot;上海\&quot;&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;get_weather&quot;</span></span><br><span class="line">                <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;function&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;role&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tool&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&#123;\&quot;Celsius\&quot;: 27, \&quot;type\&quot;: \&quot;sunny\&quot;&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;tool_call_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;01964beeb9ee27098b74149d86560b35&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;role&quot;</span><span class="punctuation">:</span> <span class="string">&quot;assistant&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;上海当前的天气是晴天，温度是27摄氏度。&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><p>完整代码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> openai <span class="comment"># 1.75.0</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_weather</span>(<span class="params">location</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#123;&quot;Celsius&quot;: 27, &quot;type&quot;: &quot;sunny&quot;&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">model=<span class="string">&quot;Qwen/Qwen2.5-32B-Instruct&quot;</span></span>):</span><br><span class="line">    client = openai.OpenAI(</span><br><span class="line">        api_key=<span class="string">&quot;xxxx&quot;</span>,</span><br><span class="line">        base_url=<span class="string">&quot;https://api.siliconflow.cn/v1&quot;</span>)</span><br><span class="line">    tools = [&#123;</span><br><span class="line">        <span class="string">&quot;type&quot;</span>: <span class="string">&quot;function&quot;</span>,</span><br><span class="line">        <span class="string">&quot;function&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;name&quot;</span>: <span class="string">&quot;get_weather&quot;</span>,</span><br><span class="line">            <span class="string">&quot;description&quot;</span>: <span class="string">&quot;获取指定城市的天气&quot;</span>,</span><br><span class="line">            <span class="string">&quot;parameters&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;type&quot;</span>: <span class="string">&quot;object&quot;</span>,</span><br><span class="line">                <span class="string">&quot;properties&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;city&quot;</span>: &#123;</span><br><span class="line">                        <span class="string">&quot;type&quot;</span>: <span class="string">&quot;string&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;description&quot;</span>: <span class="string">&quot;城市名&quot;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="string">&quot;required&quot;</span>: [<span class="string">&quot;city&quot;</span>],</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;]</span><br><span class="line">    messages = [&#123;</span><br><span class="line">        <span class="string">&quot;role&quot;</span>: <span class="string">&quot;system&quot;</span>,</span><br><span class="line">        <span class="string">&quot;content&quot;</span>: <span class="string">&quot;你是一个天气查询助手&quot;</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        <span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>,</span><br><span class="line">        <span class="string">&quot;content&quot;</span>: <span class="string">&quot;帮我查询上海的天气&quot;</span></span><br><span class="line">    &#125;]</span><br><span class="line">    res = client.chat.completions.create(model=model,</span><br><span class="line">                                         messages=messages,</span><br><span class="line">                                         tools=tools,</span><br><span class="line">                                         tool_choice=<span class="string">&quot;auto&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;content:&quot;</span>, res.choices[<span class="number">0</span>].message.content)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;tools:&quot;</span>, res.choices[<span class="number">0</span>].message.tool_calls)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;message:&quot;</span>, res.choices[<span class="number">0</span>].message.to_dict())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;-------------------&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 插入结果，再次对话</span></span><br><span class="line">    messages.append(res.choices[<span class="number">0</span>].message.to_dict())</span><br><span class="line">    tool_call = res.choices[<span class="number">0</span>].message.tool_calls[<span class="number">0</span>]</span><br><span class="line">    arguments = json.loads(tool_call.function.arguments)</span><br><span class="line">    messages.append(&#123;</span><br><span class="line">        <span class="string">&quot;role&quot;</span>: <span class="string">&quot;tool&quot;</span>,</span><br><span class="line">        <span class="string">&quot;content&quot;</span>: get_weather(arguments[<span class="string">&#x27;city&#x27;</span>]),</span><br><span class="line">        <span class="string">&quot;tool_call_id&quot;</span>: tool_call.<span class="built_in">id</span></span><br><span class="line">    &#125;)</span><br><span class="line">    res = client.chat.completions.create(model=model,</span><br><span class="line">                                         messages=messages,</span><br><span class="line">                                         tools=tools,</span><br><span class="line">                                         tool_choice=<span class="string">&quot;auto&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;content:&quot;</span>, res.choices[<span class="number">0</span>].message.content)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;tools:&quot;</span>, res.choices[<span class="number">0</span>].message.tool_calls)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;message:&quot;</span>, res.choices[<span class="number">0</span>].message.to_dict())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure></div></details><h4 id="2-1-3-tool-choice设置为none">2.1.3. tool_choice设置为none</h4><p>这里也测试一下把<code>tool_choice</code>设置为<strong>none</strong>的情况，此时即便传入了tools，AI也不会认为有外部工具，会直接返回文字说明。<code>tool_choice</code>还有另外一个可选值是required，也就是必须要调用外部工具。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">❯ uv run main.py</span><br><span class="line">content: 我无法提供实时数据或即时查询服务，因为我当前的功能不包括访问互联网获取最新信息。你可以通过查询各类天气应用查看上海最新的天气情况，或者提供具体日期，我可以教你如何根据这些信息来判断和理解天气状况。如果你有任何关于天气的一般性问题，或需要了解某些天气条件的影响，也欢迎向我询问。</span><br><span class="line">tools: None</span><br><span class="line">message: &#123;&#x27;content&#x27;: &#x27;我无法提供实时数据或即时查询服务，因为我当前的功能不包括访问互联网获取最新信息。你可以通过查询各类天气应用查看上海最新的天气情况，或者提供具体日期，我可以教你如何根据这些信息来判断和理解天气状况。如果你有任何关于天气的一般性问题，或需要了解某些天气条件的影响，也欢迎向我询问。&#x27;, &#x27;role&#x27;: &#x27;assistant&#x27;&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-function-call的问题">2.2. function call的问题</h3><p>如下是一次function call的流程图</p><pre><code class="highlight mermaid">graph TD    A[编写tools，并提供tools参数配置] --&gt; |调用OpenAI Chat Completions接口，提供tools|C[AI理解tools的作用和参数，并返回调用参数]    C --&gt; |脚本处理AI返回的参数，调用tools，获取结果|E[AI获取tools结果，解析并生成自然语言回答]</code></pre><p>经过这个流程会发现一个问题，即便是简单的调用一个只有单参数的获取天气的函数，在使用openai这个第三方库的情况下都需要费很大劲，<strong>主要是tools的调用操作需要我们自己编写脚本实现</strong>，如果我们整个AI处理流程涉及到更多tools函数的时候，就很难处理了。</p><p>为了解决这个问题，openai在2025年新开源的<a href="https://github.com/openai/openai-agents-python/">OpenAI Agent SDK</a>中提供了更加便捷的tools工具调用的处理，只需要编写一个工具类，在Agent初始化的时候传入，Agent就能自动识别这个工具类中的方法并调用工具（自动给本地的函数传入参数）。示例代码可以参考开源仓库中的<a href="https://github.com/openai/openai-agents-python/blob/main/examples/tools/web_search.py">example</a>。</p><p>不过这还是没有解决一个最根本的问题，<strong>那就是外部工具调用方式的不统一</strong>。光是我现在知道的Agent开发SDK就有三个（OpenAI、QwenAgent、谷歌ADK），这三个SDK都会有一套自己的tools调用逻辑，而且openai和qwen的SDK更是只支持自家的模型，这样就会导致即便是同一个tools，在使用不同的SDK的时候，也需要针对这个SDK去重新编写一套tools的调用逻辑，很是麻烦。</p><p>了解了这个背景之后，想必你能理解MCP协议的重要性了，它规范了tools的调用方式，同一个tools我们只需要编写一次MCP Server，就能够在众多支持mcp的AI Agent里面被调用，解决了针对不同AI模型或SDK对tools进行单独适配的痛点！</p><h2 id="3-MCP协议详解">3. MCP协议详解</h2><p>接下来让我们简单了解一下MCP协议是怎么提供统一的tools调用方式的。在这之前，需要先注明几个名词</p><ul><li>MCP Hosts：如 Claude Desktop、IDE 或 AI 工具，希望通过 MCP 访问数据的程序（也就是AI Agent程序）</li><li>MCP Clients：用于维护和服务器链接的一对一工具</li><li>MCP Servers：通过MCP协议提供特定能力</li><li>本地数据源：MCP服务器可以安装访问本地的文件、数据库和服务</li><li>远程服务：MCP服务器可通过各类API链接互联网上的外部系统</li></ul><p>其中要注意MCP Hosts和Clients的区别，为了更好的区分，后文会用AI来指代MCP Hosts，毕竟MCP工具的输出结果都是会让AI来处理的。</p><h3 id="3-1-MCP-Server">3.1. MCP Server</h3><h4 id="3-1-1-tools">3.1.1. tools</h4><p>以官方的<a href="https://github.com/modelcontextprotocol/python-sdk/tree/main/examples/servers/simple-tool">MCP Server Demo</a>为例，在tools模式下，Server主要提供的是两个能力，一个是获取当前服务器支持的tools，另外一个就是call tool调用工具的能力。</p><p>其中，获取当前支持的tools会返回tools列表、每个tools的inputSchema参数和参数的type/description释义。这一点和function call是类似的，只不过mcp的sdk将其包装成了一个types.Tool类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.list_tools()</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">list_tools</span>() -&gt; <span class="built_in">list</span>[types.Tool]:</span><br><span class="line">    <span class="keyword">return</span> [</span><br><span class="line">        types.Tool(</span><br><span class="line">            name=<span class="string">&quot;fetch&quot;</span>,</span><br><span class="line">            description=<span class="string">&quot;Fetches a website and returns its content&quot;</span>,</span><br><span class="line">            inputSchema=&#123;</span><br><span class="line">                <span class="string">&quot;type&quot;</span>: <span class="string">&quot;object&quot;</span>,</span><br><span class="line">                <span class="string">&quot;required&quot;</span>: [<span class="string">&quot;url&quot;</span>],</span><br><span class="line">                <span class="string">&quot;properties&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;url&quot;</span>: &#123;</span><br><span class="line">                        <span class="string">&quot;type&quot;</span>: <span class="string">&quot;string&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;description&quot;</span>: <span class="string">&quot;URL to fetch&quot;</span>,</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">        )</span><br><span class="line">    ]</span><br></pre></td></tr></table></figure><p>除了人工编写这部分参数列表，我们还可以参考<a href="https://github.com/modelcontextprotocol/servers/blob/main/src/git/src/mcp_server_git/server.py">mcp_server_git</a>的实现，借助pydantic来定义每一个方法的参数列表，并使用<code>schema()</code>自动获取参数释义。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Tool(</span><br><span class="line">    name=GitTools.DIFF_STAGED,</span><br><span class="line">    description=<span class="string">&quot;Shows changes that are staged for commit&quot;</span>,</span><br><span class="line">    inputSchema=GitDiffStaged.schema(),</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>举个例子，运行下面的代码，可以得到GitStatus这个类定义的两个入参的名称、类型和说明</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pydantic <span class="keyword">import</span> BaseModel</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GitStatus</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    repo_path: <span class="built_in">str</span></span><br><span class="line">    hello_text: <span class="built_in">str</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行会提示schema函数已经弃用，建议使用model_json_schema替代</span></span><br><span class="line"><span class="built_in">print</span>(GitStatus.model_json_schema())</span><br><span class="line"><span class="comment"># 输出如下</span></span><br><span class="line"><span class="comment"># &#123;&#x27;properties&#x27;: &#123;&#x27;repo_path&#x27;: &#123;&#x27;title&#x27;: &#x27;Repo Path&#x27;, &#x27;type&#x27;: &#x27;string&#x27;&#125;, &#x27;hello_text&#x27;: &#123;&#x27;title&#x27;: &#x27;Hello Text&#x27;, &#x27;type&#x27;: &#x27;string&#x27;&#125;&#125;, &#x27;required&#x27;: [&#x27;repo_path&#x27;, &#x27;hello_text&#x27;], &#x27;title&#x27;: &#x27;GitStatus&#x27;, &#x27;type&#x27;: &#x27;object&#x27;&#125;</span></span><br></pre></td></tr></table></figure><p>需要注意的是，这里获取到的title释义是直接根据<strong>参数名称</strong>来的，并没有人工编写的description那么准确。所以使用这种方式传入inputSchema的时候，需要我们尽可能地标准命名参数名称，<strong>让AI能通过参数名称直接推断出这个参数要传入什么内容</strong>。</p><p>调用函数的操作就和function call类似了，MCP协议传入的同样也是arguments列表，需要我们将其解析并调用我们实际编写的函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.call_tool()</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">fetch_tool</span>(<span class="params"></span></span><br><span class="line"><span class="params">    name: <span class="built_in">str</span>, arguments: <span class="built_in">dict</span></span></span><br><span class="line"><span class="params"></span>) -&gt; <span class="built_in">list</span>[types.TextContent | types.ImageContent | types.EmbeddedResource]:</span><br><span class="line">    <span class="keyword">if</span> name != <span class="string">&quot;fetch&quot;</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">f&quot;Unknown tool: <span class="subst">&#123;name&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;url&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> arguments:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;Missing required argument &#x27;url&#x27;&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> fetch_website(arguments[<span class="string">&quot;url&quot;</span>]) <span class="comment"># 调用实际函数</span></span><br></pre></td></tr></table></figure><p>除了这种复杂的方式，mcp sdk还提供了一个<a href="https://github.com/modelcontextprotocol/python-sdk/blob/main/examples/fastmcp/desktop.py">FastMcp</a>，只需要我们在编写的函数上加一个<code>@mcp.tool()</code>装饰器，就能立马把我们的普通函数变成mcp tools，非常方便。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> mcp.server.fastmcp <span class="keyword">import</span> FastMCP</span><br><span class="line">mcp = FastMCP(<span class="string">&quot;Demo&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@mcp.tool()</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">a: <span class="built_in">int</span>, b: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Add two numbers&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line"></span><br><span class="line">mcp.run() <span class="comment"># 运行server</span></span><br></pre></td></tr></table></figure><p>使用这种方式对时候，装饰器会自动去获取我们函数的参数以及参数的类型，并生成<code>types.Tool</code>返回给客户端。这个装饰器有两个参数，name在不传入的时候默认为函数名称，description在不传入的时候默认为函数的docstring（也就是函数下的<code>&quot;&quot;&quot;</code>注释）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name: Optional name for the tool (defaults to function name)</span><br><span class="line">description: Optional description of what the tool does</span><br></pre></td></tr></table></figure><p>从SDK的源码中可以找到，装饰器会调用<code>Tool.from_function</code>来生成<code>types.Tool</code>类型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add_tool</span>(<span class="params"></span></span><br><span class="line"><span class="params">    self,</span></span><br><span class="line"><span class="params">    fn: <span class="type">Callable</span>[..., <span class="type">Any</span>],</span></span><br><span class="line"><span class="params">    name: <span class="built_in">str</span> | <span class="literal">None</span> = <span class="literal">None</span>,</span></span><br><span class="line"><span class="params">    description: <span class="built_in">str</span> | <span class="literal">None</span> = <span class="literal">None</span>,</span></span><br><span class="line"><span class="params"></span>) -&gt; Tool:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Add a tool to the server.&quot;&quot;&quot;</span></span><br><span class="line">    tool = Tool.from_function(fn, name=name, description=description)</span><br><span class="line">    existing = <span class="variable language_">self</span>._tools.get(tool.name) <span class="comment"># 判断是否有同名函数已经被注册过了</span></span><br><span class="line">    <span class="keyword">if</span> existing:</span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.warn_on_duplicate_tools:</span><br><span class="line">            logger.warning(<span class="string">f&quot;Tool already exists: <span class="subst">&#123;tool.name&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> existing <span class="comment"># 直接返回已注册的同名函数，不返回本次新注册的函数</span></span><br><span class="line">    <span class="comment"># 新注册函数</span></span><br><span class="line">    <span class="variable language_">self</span>._tools[tool.name] = tool</span><br><span class="line">    <span class="keyword">return</span> tool</span><br></pre></td></tr></table></figure><p>在<code>Tool.from_function</code>函数中会注册name和description</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">func_name = name <span class="keyword">or</span> fn.__name__</span><br><span class="line"><span class="keyword">if</span> func_name == <span class="string">&quot;&lt;lambda&gt;&quot;</span>: <span class="comment"># lambda表达式没有函数名，必须传入name参数</span></span><br><span class="line">    <span class="keyword">raise</span> ValueError(<span class="string">&quot;You must provide a name for lambda functions&quot;</span>)</span><br><span class="line">func_doc = description <span class="keyword">or</span> fn.__doc__ <span class="keyword">or</span> <span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure><h4 id="3-1-2-prompts和resources">3.1.2. prompts和resources</h4><p>除了最常用的tools，mcp还提供了prompts和resources两种服务方式，其中prompt是用于定义一些常用操作的提示词，此时客户端可以直接去获取这些提示词和ai交互，避免我们针对某一个流程重复编写提示词；resources是定义一个url格式，当我们的交流中出现这个url格式的时候，ai就可以调用这个工具去做一些特定操作，比如请求某个api或者操作数据库。</p><p>但很不幸的是，以上都是慕雪的个人简单理解，由于prompt和resources实在没有找到可以参考的博客或如何使用的demo，我并不是很理解它们在AI工具中是怎么被使用以及是在什么时候被使用的。网上针对MCP的教程也主要集中于tools层面。</p><p>后续如果对这俩有更多了解了，再回来补充本文。</p><h3 id="3-2-客户端配置本地和远程MCP-Server">3.2. 客户端配置本地和远程MCP Server</h3><p>在MCP SDK中主要提供了两种server启动的方式，一个是stdio流式传输（本地）的方式，另外一个是sse远程API的方式。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TRANSPORTS = <span class="type">Literal</span>[<span class="string">&quot;stdio&quot;</span>, <span class="string">&quot;sse&quot;</span>]</span><br></pre></td></tr></table></figure><p>这两种方式分别对应了两种服务器的配置方式。如果是本地的mcp服务器，需要使用命令来指定mcp服务器代码文件所在路径，并启动它。这个代码可以是github上克隆的仓库，也可以是通过npm或其他方式安装到本地的可执行文件。</p><h4 id="3-2-1-本地（stdio）">3.2.1. 本地（stdio）</h4><p>以python编写的MCP Server为例，需要通过如下方式启动某一个MCP Server，其中<code>--directory</code>指定的工作路径，必须指定这个工作路径才能找到<code>mcp-simple-tool</code>的代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 官方 mcp-simple-tool demo</span></span><br><span class="line">uv run --directory /Users/mothra/data/code/python/openai/mcp-python-sdk/examples/servers/simple-tool mcp-simple-tool</span><br></pre></td></tr></table></figure><p>此时是采用stdio方式启动的server，对应配置文件如下（可供Agent SDK调用）</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;mcpServers&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;mcp-simple-tool&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;uv&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;run&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;--directory&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;/Users/mothra/data/code/python/openai/mcp-python-sdk/examples/servers/simple-tool&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;mcp-simple-tool&quot;</span></span><br><span class="line">            <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>当客户端需要使用这个MCP Server的时候，会自动根据我们配置的命令去尝试在本地启动这个mcp服务端，然后和它交互。所以，如果使用stdio来配置MCP Server但本地却没有uv环境的时候，程序是无法启动的。</p><p>以CherryStudio为例，在mcp配置中，以stdio格式添加我们这个配置，点击右上角保存，保存成功则代表配置正常。保存失败则需要检查配置的命令和路径是否出错</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/04/08b84f73e3c9751178714d6dbce3b404.webp" alt="image.png"></p><p>此时勾选底部的MCP服务器，和AI对话，给出一个URL，他会自动调用工具去下载这个URL的html文件，并解析和输出他对这个HTML文件的理解。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/04/d1d1d4c8e51a89067a001cb918f8f457.webp" alt="image.png"></p><p>需要注意的是CherryStudio的mcpServers json配置文件并不是标准mcpServers的格式，多了一些字段，估计是方便前端设计。在AI的初次输出中也会把GdTGt4qMFpnyYqBxaqTrM输出出来，因为在标准mcpServers配置中GdTGt4qMFpnyYqBxaqTrM字段就是mcp服务端的名称。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;mcpServers&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;GdTGt4qMFpnyYqBxaqTrM&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;isActive&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;网页获取&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;stdio&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;通过url获取网页内容&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;registryUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;uv&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;run&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;--directory&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;/Users/mothra/data/code/python/openai/mcp-python-sdk/examples/servers/simple-tool&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;mcp-simple-tool&quot;</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>标准的mcpServers的格式并不需要那些额外字段，只需要我在前文给出的基础mspServers配置就可以了。以Qwen-Agent为例，只需要把json填入tools中就可以调用mcp服务器了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> qwen_agent.agents <span class="keyword">import</span> Assistant</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">init_agent_service</span>():</span><br><span class="line">    llm_cfg = &#123;</span><br><span class="line">        <span class="string">&#x27;model&#x27;</span>: <span class="string">&#x27;Qwen/Qwen2.5-32B-Instruct&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;model_server&#x27;</span>: <span class="string">&#x27;https://api.siliconflow.cn/v1&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;api_key&#x27;</span>: <span class="string">&#x27;xxxx&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    system = (<span class="string">&#x27;你是一个强大的助手，可以帮用户处理问题。&#x27;</span>)</span><br><span class="line">    tools = [&#123;</span><br><span class="line">        <span class="string">&quot;mcpServers&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;mcp-simple-tool&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;command&quot;</span>:</span><br><span class="line">                <span class="string">&quot;uv&quot;</span>,</span><br><span class="line">                <span class="string">&quot;args&quot;</span>: [</span><br><span class="line">                    <span class="string">&quot;run&quot;</span>, <span class="string">&quot;--directory&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;/Users/mothra/data/code/python/openai/mcp-python-sdk/examples/servers/simple-tool&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;mcp-simple-tool&quot;</span></span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;]</span><br><span class="line">    bot = Assistant(</span><br><span class="line">        llm=llm_cfg,</span><br><span class="line">        name=<span class="string">&#x27;网页查看助手&#x27;</span>,</span><br><span class="line">        description=<span class="string">&#x27;网页查看&#x27;</span>,</span><br><span class="line">        system_message=system,</span><br><span class="line">        function_list=tools,</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> bot</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">text=<span class="string">&#x27;这个网站是什么？https://blog.musnow.top/&#x27;</span></span>):</span><br><span class="line">    bot = init_agent_service()</span><br><span class="line">    messages = [&#123;<span class="string">&#x27;role&#x27;</span>: <span class="string">&#x27;user&#x27;</span>, <span class="string">&#x27;content&#x27;</span>: text&#125;]</span><br><span class="line">    <span class="comment"># 请求</span></span><br><span class="line">    <span class="keyword">for</span> response <span class="keyword">in</span> bot.run(messages):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;bot response:&#x27;</span>, response)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>Qwen最终的输出如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#x27;role&#x27;: &#x27;assistant&#x27;, &#x27;content&#x27;: &#x27;这个网址是一个个人博客站点，名字叫做“慕雪的寒舍”。站点描述自己为“爱折腾的代码初学者”。\n\n博客主要内容包含了编程学习（如Python、C、ROS等）、博客建站的相关知识以及一些编程相关的项目开发记录。\n\n网站首页还展示了近期发表的文章、公告、分类和标签等信息方便用户查找和浏览。\n\n总之，这是一个包含了编程学习和项目开发记录内容的个人技术博客。&#x27;, &#x27;reasoning_content&#x27;: &#x27;&#x27;, &#x27;name&#x27;: &#x27;网页查看助手&#x27;&#125;</span><br></pre></td></tr></table></figure><h4 id="3-2-2-远程（sse）">3.2.2. 远程（sse）</h4><p>远程调用的配置就需要服务器的url了。首先通过如下方式启动demo，提供命令行参数sse以远程方式启动，port指定端口8000</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uv run --directory /Users/mothra/data/code/python/openai/mcp-python-sdk/examples/servers/simple-tool mcp-simple-tool --transport sse --port 8000</span><br></pre></td></tr></table></figure><p>此时终端会输出当前进程PID以及服务端的url</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">INFO:     Started server process [17058]</span><br><span class="line">INFO:     Waiting for application startup.</span><br><span class="line">INFO:     Application startup complete.</span><br><span class="line">INFO:     Uvicorn running on http://0.0.0.0:8000 (Press CTRL+C to quit)</span><br></pre></td></tr></table></figure><p>对应mcpServers配置文件，其中<strong>disabled</strong>是当前server是否被禁用，设置false为启用这个server，<strong>timeout</strong>是链接服务端的超时时间。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;mcpServers&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;exampleServer&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://127.0.0.1:8000/sse&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;disabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;timeout&quot;</span><span class="punctuation">:</span> <span class="number">30</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>在cherrystudio中填写 <code>http://0.0.0.0:8000/sse</code>作为sse服务地址</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/04/58c071e226b752b3071a8677e574ef02.webp" alt="image.png"></p><p>同样可以正常调用，输出结果</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/04/0587057a2eb1b032ab58cd848f0b82e5.webp" alt="image.png"></p><p>注意，在QwenAgent SDK中必须使用<code>http://127.0.0.1:8000/sse</code>才能正常连接这个远程服务器，不能使用<code>http://0.0.0.0:8000/sse</code>，否则会出现502 Bad Gateway错误，详见<a href="https://github.com/QwenLM/Qwen-Agent/issues/501">issue</a>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">INFO:mcp.client.sse:Connecting to SSE endpoint: http://0.0.0.0:8000/sse/</span><br><span class="line">DEBUG:httpcore.connection:connect_tcp.started host=&#x27;127.0.0.1&#x27; port=7897 local_address=None timeout=5 socket_options=None</span><br><span class="line">DEBUG:httpcore.connection:connect_tcp.complete return_value=&lt;httpcore._backends.anyio.AnyIOStream object at 0x1075a3c70&gt;</span><br><span class="line">DEBUG:httpcore.http11:send_request_headers.started request=&lt;Request [b&#x27;GET&#x27;]&gt;</span><br><span class="line">DEBUG:httpcore.http11:send_request_headers.complete</span><br><span class="line">DEBUG:httpcore.http11:send_request_body.started request=&lt;Request [b&#x27;GET&#x27;]&gt;</span><br><span class="line">DEBUG:httpcore.http11:send_request_body.complete</span><br><span class="line">DEBUG:httpcore.http11:receive_response_headers.started request=&lt;Request [b&#x27;GET&#x27;]&gt;</span><br><span class="line">DEBUG:httpcore.http11:receive_response_headers.complete return_value=(b&#x27;HTTP/1.1&#x27;, 502, b&#x27;Bad Gateway&#x27;, [(b&#x27;Connection&#x27;, b&#x27;close&#x27;), (b&#x27;Content-Length&#x27;, b&#x27;0&#x27;)])</span><br><span class="line">INFO:httpx:HTTP Request: GET http://0.0.0.0:8000/sse/ &quot;HTTP/1.1 502 Bad Gateway&quot;</span><br><span class="line">DEBUG:httpcore.http11:response_closed.started</span><br><span class="line">DEBUG:httpcore.http11:response_closed.complete</span><br><span class="line">2025-04-19 15:51:29,240 - mcp_manager.py - 206 - INFO - Failed to connect to server: unhandled errors in a TaskGroup (1 sub-exception)</span><br><span class="line">INFO:qwen_agent_logger:Failed to connect to server: unhandled errors in a TaskGroup (1 sub-exception)</span><br><span class="line">2025-04-19 15:51:29,247 - mcp_manager.py - 91 - INFO - Error executing function: &#x27;NoneType&#x27; object is not iterable</span><br><span class="line">INFO:qwen_agent_logger:Error executing function: &#x27;NoneType&#x27; object is not iterable</span><br></pre></td></tr></table></figure><p>修改了tools的配置为远程url，其他代码保持不变</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> qwen_agent.agents <span class="keyword">import</span> Assistant</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line">logging.basicConfig(level=logging.DEBUG)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">init_agent_service</span>():</span><br><span class="line">    llm_cfg = &#123;</span><br><span class="line">        <span class="string">&#x27;model&#x27;</span>: <span class="string">&#x27;Qwen/Qwen2.5-32B-Instruct&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;model_server&#x27;</span>: <span class="string">&#x27;https://api.siliconflow.cn/v1&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;api_key&#x27;</span>: <span class="string">&#x27;xxxx&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    system = (<span class="string">&#x27;你是一个强大的助手，可以帮用户处理问题。&#x27;</span>)</span><br><span class="line">    tools = [&#123;</span><br><span class="line">        <span class="string">&quot;mcpServers&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;exmaple-server&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;url&quot;</span>: <span class="string">&quot;http://127.0.0.1:8000/sse&quot;</span>,</span><br><span class="line">                <span class="string">&quot;disabled&quot;</span>: <span class="literal">False</span>,</span><br><span class="line">                <span class="string">&quot;timeout&quot;</span>: <span class="number">30</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;]</span><br><span class="line">    bot = Assistant(</span><br><span class="line">        llm=llm_cfg,</span><br><span class="line">        name=<span class="string">&#x27;网页查看助手&#x27;</span>,</span><br><span class="line">        description=<span class="string">&#x27;网页查看&#x27;</span>,</span><br><span class="line">        system_message=system,</span><br><span class="line">        function_list=tools,</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> bot</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">text=<span class="string">&#x27;这个网站是什么？https://blog.musnow.top/&#x27;</span></span>):</span><br><span class="line">    bot = init_agent_service()</span><br><span class="line">    messages = [&#123;<span class="string">&#x27;role&#x27;</span>: <span class="string">&#x27;user&#x27;</span>, <span class="string">&#x27;content&#x27;</span>: text&#125;]</span><br><span class="line">    <span class="comment"># 请求</span></span><br><span class="line">    <span class="keyword">for</span> response <span class="keyword">in</span> bot.run(messages):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;bot response:&#x27;</span>, response)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>QwenAgent正常调用工具并返回网页的结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#x27;role&#x27;: &#x27;assistant&#x27;, &#x27;content&#x27;: &#x27;这是一个名为&quot;慕雪的寒舍&quot;的博客网站。博客的作者是慕雪年华。网站上有很多关于编程学习、技术分享的文章，同时，博客还提供了分类、标签、归档等功能来帮助读者查找信息。它看起来像是一个个人的技术博客。&#x27;, &#x27;reasoning_content&#x27;: &#x27;&#x27;, &#x27;name&#x27;: &#x27;网页查看助手&#x27;&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/04/508dbaded94578dec7febdb6858fe7de.webp" alt="image.png"></p><h3 id="3-3-使用MCP协议后的tools调用流程图">3.3. 使用MCP协议后的tools调用流程图</h3><p>使用MCP协议后，流程图就变成了下面这样，此时ai工具就从tools中解放了出来，我们可以随心所欲地添加任何我们需要的MCP Server配置，最终ai能自动调用这些外部工具并处理他们的结果，不再需要像function call一样人工编写脚本处理大模型生成的参数，也不需要在不同Agent SDK中独立为tools编写适配代码了。</p><pre><code class="highlight mermaid">graph TD;    A[ai工具加载mcp配置] --&gt; |启动和连接mcp服务器|B    B[mcp client] --&gt; |链接服务器，获取已有工具，调用工具|C[MCP Server]     C --&gt;|返回已有工具，返回工具调用结果|B</code></pre><p>在让AI调用外部工具的方面，MCP协议还是非常重要的。</p><p>不过需要注意的是，MCP和function call并不是完全独立的关系。目前MCP Host中接入MCP工具有两种方式，一个是prompt的方式，另外一个就是function call方式。也就是说，在部分ai工具中，<strong>会直接使用function call功能来让ai识别MCP工具并调用</strong>。MCP主要的助力在于统一了调用这些外部工具的配置项和服务端的实现方式，让我们编写的外部工具能做到一次编写多处使用。</p><h2 id="5-The-end">5. The end</h2><p>关于MCP协议的介绍到这里就结束啦，主要介绍的还是MCP TOOLS方面的内容，有任何问题欢迎评论区讨论。</p>]]></content>
    
    
    <summary type="html">本文介绍了MCP大模型上下文协议的的概念，并对比了MCP协议和function call的区别，同时用python sdk为例介绍了mcp的使用方式。</summary>
    
    
    
    <category term="编程学习" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="Agent智能体开发" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/Agent%E6%99%BA%E8%83%BD%E4%BD%93%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="AI" scheme="https://blog.musnow.top/tags/AI/"/>
    
    <category term="Python" scheme="https://blog.musnow.top/tags/Python/"/>
    
    <category term="MCP" scheme="https://blog.musnow.top/tags/MCP/"/>
    
  </entry>
  
  <entry>
    <title>【vuepress】更新vuepress-theme-vdoing站点评论遇到ERR_OSSL_EVP_UNSUPPORTED报错解决</title>
    <link href="https://blog.musnow.top/posts/1719748062/"/>
    <id>https://blog.musnow.top/posts/1719748062/</id>
    <published>2025-04-15T02:13:03.000Z</published>
    <updated>2025-09-21T01:43:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文记录了将vuepress-theme-vdoing更新站点评论artalk版本到2.9.1时遇到的<code>ERR_OSSL_EVP_UNSUPPORTED</code>编译报错以及解决办法</p><h2 id="1-说明">1. 说明</h2><p>这次更新hexo butterfly主题的时候，顺带更新了artalk评论系统的版本。目前我的artalk评论系统还有另外一个站点在用，也就是KOOK语音软件机器人SDK <code>khl.py</code>的文档站点：</p><ul><li>文档站点链接：<a href="https://khl-py.eu.org/">https://khl-py.eu.org/</a></li><li>文档仓库链接：<a href="https://github.com/musnows/khl.py.docs">https://github.com/musnows/khl.py.docs</a></li><li>SDK仓库链接：<a href="https://github.com/TWT233/khl.py">https://github.com/TWT233/khl.py</a></li></ul><p><a href="https://khl-py.eu.org/">https://khl-py.eu.org/</a>使用的是vuepress-theme-vdoing框架，为了让更新后的artalk评论系统在这个站点上依旧可用，需要更新vuepress使用的评论系统版本。</p><h2 id="2-更新">2. 更新</h2><p>由于站点本身并不需要更新，只是需要引入新版本的评论系统插件，所以只需要修改一下packages.json里面的vuepress-plugin-vdoing-comment插件版本就可以了，升级到最新的1.3.0</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;vuepress-plugin-vdoing-comment&quot;: &quot;^1.3.0&quot;</span><br></pre></td></tr></table></figure><p>升级了之后，删除本地<code>node_modules</code>和<code>packages-lock.json</code>文件，重新安装</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rm</span> -rf node_modules packages-lock.json</span><br><span class="line">npm install --save</span><br></pre></td></tr></table></figure><p>安装自然是成功的，没有出现问题。</p><h2 id="3-报错和解决">3. 报错和解决</h2><h3 id="3-1-报错">3.1. 报错</h3><p>使用npm run dev开启预览的时候，出现了编译报错</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">● Client █████████████████████████ compiling (0%)  </span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">ℹ ｢wds｣: Project is running at http://0.0.0.0:8080/</span><br><span class="line">ℹ ｢wds｣: webpack output is served from /</span><br><span class="line">ℹ ｢wds｣: Content not from webpack is served from /Users/mothra/data/hexo/khl.py.docs/docs/.vuepress/public</span><br><span class="line">ℹ ｢wds｣: 404s will fallback to /index.html</span><br><span class="line">Error: error:0308010C:digital envelope routines::unsupported</span><br><span class="line">    at new Hash (node:internal/crypto/hash:79:19)</span><br><span class="line">    at Object.createHash (node:crypto:139:10)</span><br><span class="line">    at module.exports (/Users/mothra/data/hexo/khl.py.docs/node_modules/webpack/lib/util/createHash.js:135:53)</span><br><span class="line">    at NormalModule._initBuildHash (/Users/mothra/data/hexo/khl.py.docs/node_modules/webpack/lib/NormalModule.js:417:16)</span><br><span class="line">    at handleParseError (/Users/mothra/data/hexo/khl.py.docs/node_modules/webpack/lib/NormalModule.js:471:10)</span><br><span class="line">    at /Users/mothra/data/hexo/khl.py.docs/node_modules/webpack/lib/NormalModule.js:503:5</span><br><span class="line">    at /Users/mothra/data/hexo/khl.py.docs/node_modules/webpack/lib/NormalModule.js:358:12</span><br><span class="line">    at /Users/mothra/data/hexo/khl.py.docs/node_modules/loader-runner/lib/LoaderRunner.js:373:3</span><br><span class="line">    at iterateNormalLoaders (/Users/mothra/data/hexo/khl.py.docs/node_modules/loader-runner/lib/LoaderRunner.js:214:10)</span><br><span class="line">    at iterateNormalLoaders (/Users/mothra/data/hexo/khl.py.docs/node_modules/loader-runner/lib/LoaderRunner.js:221:10)</span><br><span class="line">    at /Users/mothra/data/hexo/khl.py.docs/node_modules/loader-runner/lib/LoaderRunner.js:236:3</span><br><span class="line">    at runSyncOrAsync (/Users/mothra/data/hexo/khl.py.docs/node_modules/loader-runner/lib/LoaderRunner.js:130:11)</span><br><span class="line">    at iterateNormalLoaders (/Users/mothra/data/hexo/khl.py.docs/node_modules/loader-runner/lib/LoaderRunner.js:232:2)</span><br><span class="line">    at Array.&lt;anonymous&gt; (/Users/mothra/data/hexo/khl.py.docs/node_modules/loader-runner/lib/LoaderRunner.js:205:4)</span><br><span class="line">    at Storage.finished (/Users/mothra/data/hexo/khl.py.docs/node_modules/enhanced-resolve/lib/CachedInputFileSystem.js:55:16)</span><br><span class="line">    at /Users/mothra/data/hexo/khl.py.docs/node_modules/enhanced-resolve/lib/CachedInputFileSystem.js:91:9</span><br><span class="line">node:internal/crypto/hash:79</span><br><span class="line">  this[kHandle] = new _Hash(algorithm, xofLen, algorithmId, getHashCache());</span><br><span class="line">                  ^</span><br><span class="line"></span><br><span class="line">Error: error:0308010C:digital envelope routines::unsupported</span><br><span class="line">    at new Hash (node:internal/crypto/hash:79:19)</span><br><span class="line">    at Object.createHash (node:crypto:139:10)</span><br><span class="line">    at module.exports (/Users/mothra/data/hexo/khl.py.docs/node_modules/webpack/lib/util/createHash.js:135:53)</span><br><span class="line">    at NormalModule._initBuildHash (/Users/mothra/data/hexo/khl.py.docs/node_modules/webpack/lib/NormalModule.js:417:16)</span><br><span class="line">    at handleParseError (/Users/mothra/data/hexo/khl.py.docs/node_modules/webpack/lib/NormalModule.js:471:10)</span><br><span class="line">    at /Users/mothra/data/hexo/khl.py.docs/node_modules/webpack/lib/NormalModule.js:503:5</span><br><span class="line">    at /Users/mothra/data/hexo/khl.py.docs/node_modules/webpack/lib/NormalModule.js:358:12</span><br><span class="line">    at /Users/mothra/data/hexo/khl.py.docs/node_modules/loader-runner/lib/LoaderRunner.js:373:3</span><br><span class="line">    at iterateNormalLoaders (/Users/mothra/data/hexo/khl.py.docs/node_modules/loader-runner/lib/LoaderRunner.js:214:10)</span><br><span class="line">    at Array.&lt;anonymous&gt; (/Users/mothra/data/hexo/khl.py.docs/node_modules/loader-runner/lib/LoaderRunner.js:205:4)</span><br><span class="line">    at Storage.finished (/Users/mothra/data/hexo/khl.py.docs/node_modules/enhanced-resolve/lib/CachedInputFileSystem.js:55:16)</span><br><span class="line">    at /Users/mothra/data/hexo/khl.py.docs/node_modules/enhanced-resolve/lib/CachedInputFileSystem.js:91:9</span><br><span class="line">    at /Users/mothra/data/hexo/khl.py.docs/node_modules/graceful-fs/graceful-fs.js:123:16</span><br><span class="line">    at FSReqCallback.readFileAfterClose [as oncomplete] (node:internal/fs/read/context:68:3) &#123;</span><br><span class="line">  opensslErrorStack: [</span><br><span class="line">    &#x27;error:03000086:digital envelope routines::initialization error&#x27;,</span><br><span class="line">    &#x27;error:0308010C:digital envelope routines::unsupported&#x27;</span><br><span class="line">  ],</span><br><span class="line">  library: &#x27;digital envelope routines&#x27;,</span><br><span class="line">  reason: &#x27;unsupported&#x27;,</span><br><span class="line">  code: &#x27;ERR_OSSL_EVP_UNSUPPORTED&#x27;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Node.js v20.18.0</span><br></pre></td></tr></table></figure><h3 id="3-2-解决">3.2. 解决</h3><p>报错的直接原因是<code>ERR_OSSL_EVP_UNSUPPORTED</code>，问了AI，这个问题是因为新版本的npm不支持老版本的openssl，需要设置环境变量绕过这层检查，才可以正常部署。</p><p>需要修改packages.json里面的scripts部分，在原本的dev命令之前，都加上一个<code>export NODE_OPTIONS=--openssl-legacy-provider</code>环境变量设置的操作，让npm使用老版本的openssl兼容机制，这样就不会出现问题了。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;dev&quot;</span><span class="punctuation">:</span> <span class="string">&quot;export NODE_OPTIONS=--openssl-legacy-provider &amp;&amp; vuepress dev&quot;</span><span class="punctuation">,</span>  <span class="comment">// Mac/Linux</span></span><br><span class="line">  <span class="attr">&quot;dev:win&quot;</span><span class="punctuation">:</span> <span class="string">&quot;set NODE_OPTIONS=--openssl-legacy-provider &amp;&amp; vuepress dev&quot;</span> <span class="comment">// Windows</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>设置之后，再次运行npm run dev，站点预览正常。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/09/636c9281e2f49381b1274c70f248992d.webp" alt="image.png"></p><h3 id="3-3-提醒：按需添加">3.3. 提醒：按需添加</h3><p>注意，这个环境变量只有在出现了<code>ERR_OSSL_EVP_UNSUPPORTED</code>问题的时候才需要添加，如果你是使用Netlify或者Vercel部署你的站点，可能不会有这个报错，此时不要添加这个环境变量！</p><p>比如下图，使用Netlify部署的时候添加了这个环境变量，提示不支持<code>--openssl-legacy-provider</code>这个选项。不添加环境变量，反而能正常构建部署。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/09/39ce4715125e5d963782a56abd297691.webp" alt="image.png"></p>]]></content>
    
    
    <summary type="html">本文记录了将vuepress-theme-vdoing更新站点评论artalk版本到2.9.1时遇到的ERR_OSSL_EVP_UNSUPPORTED编译报错以及解决办法</summary>
    
    
    
    <category term="差生文具多" scheme="https://blog.musnow.top/categories/%E5%B7%AE%E7%94%9F%E6%96%87%E5%85%B7%E5%A4%9A/"/>
    
    <category term="博客建站" scheme="https://blog.musnow.top/categories/%E5%B7%AE%E7%94%9F%E6%96%87%E5%85%B7%E5%A4%9A/%E5%8D%9A%E5%AE%A2%E5%BB%BA%E7%AB%99/"/>
    
    
    <category term="博客建站" scheme="https://blog.musnow.top/tags/%E5%8D%9A%E5%AE%A2%E5%BB%BA%E7%AB%99/"/>
    
    <category term="Hexo" scheme="https://blog.musnow.top/tags/Hexo/"/>
    
  </entry>
  
</feed>
