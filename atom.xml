<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>慕雪的寒舍</title>
  
  <subtitle>雪下了一夜</subtitle>
  <link href="https://blog.musnow.top/atom.xml" rel="self"/>
  
  <link href="https://blog.musnow.top/"/>
  <updated>2025-09-15T23:55:50.000Z</updated>
  <id>https://blog.musnow.top/</id>
  
  <author>
    <name>慕雪年华</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【Agent.02】市面上常见的大模型有哪些？</title>
    <link href="https://blog.musnow.top/posts/6151856853/"/>
    <id>https://blog.musnow.top/posts/6151856853/</id>
    <published>2025-09-15T00:42:09.000Z</published>
    <updated>2025-09-15T23:55:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>欢迎阅读慕雪撰写的AI Agent专栏，本专栏目录如下</p><ol class="series-items"><li><a href="/posts/4710483697/" title="【AI】AI对26届计算机校招的影响">【AI】AI对26届计算机校招的影响</a></li><li><a href="/posts/6796656750/" title="【Agent.01】AI Agent智能体开发专题引言">【Agent.01】AI Agent智能体开发专题引言</a></li><li><a href="/posts/6151856853/" title="【Agent.02】市面上常见的大模型有哪些？">【Agent.02】市面上常见的大模型有哪些？</a></li></ol><p>本文是本专栏的正文第一篇。</p><h2 id="写在前面">写在前面</h2><p>要想更好的掌握AI，平日里就少不了和AI的交流。任何事情都是这样，只有用的更多，才有可能变得更加熟练，最后进行AI Agent开发的时候，也能够更加得心应手。</p><p>相比之下，如果现在还像从前一样只是啃B站视频或者书籍死学的同学，可能会逐步被AI时代淘汰。</p><p>本文收集了当前最主流的大模型，以及它们的官网、适用场景。建议大家在编程学习过程中把这一堆大模型全都自己试试，看看从你的角度出发，哪一个大模型的体验和效果最好。</p><h2 id="主流大模型一览">主流大模型一览</h2><p>下标囊括了当前最主流的大模型，以及它们的适用场景。大家都要多去试试这些模型的效果哦！</p><table><thead><tr><th style="text-align:center">大模型</th><th style="text-align:center">最新模型</th><th style="text-align:center">公司</th><th style="text-align:center">适用场景</th><th style="text-align:center">备注</th><th style="text-align:center">官网</th></tr></thead><tbody><tr><td style="text-align:center">GPT 系列</td><td style="text-align:center">GPT-4.5 Turbo</td><td style="text-align:center">OpenAI 🇺🇸</td><td style="text-align:center">通用对话、代码、多模态</td><td style="text-align:center">GPT应该是最早进入大众视野的大模型了</td><td style="text-align:center"><a href="https://chat.openai.com/">https://chat.openai.com/</a></td></tr><tr><td style="text-align:center">Gemini 系列</td><td style="text-align:center">Gemini 2.5 Pro</td><td style="text-align:center">Google / DeepMind 🇺🇸</td><td style="text-align:center">长文本、多模态、搜索增强</td><td style="text-align:center">谷歌的Gemini在长文本处理这块非常牛</td><td style="text-align:center"><a href="https://ai.google">https://ai.google</a><br><a href="https://aistudio.google.com/prompts/new_chat">https://aistudio.google.com/prompts/new_chat</a><br><a href="https://gemini.google.com/gem/brainstormer">https://gemini.google.com/gem/brainstormer</a><br><a href="https://notebooklm.google.com/notebook/">https://notebooklm.google.com/notebook/</a></td></tr><tr><td style="text-align:center">Claude 系列</td><td style="text-align:center">Claude 4 Opus</td><td style="text-align:center">Anthropic 🇺🇸</td><td style="text-align:center">长文档、安全对话</td><td style="text-align:center">Claude模型在Agent场景是目前最强大的模型</td><td style="text-align:center"><a href="https://anthropic.com">https://anthropic.com</a></td></tr><tr><td style="text-align:center">Llama 系列</td><td style="text-align:center">Llama 4 Maverick</td><td style="text-align:center">Meta 🇺🇸</td><td style="text-align:center">开源通用、代码、数学</td><td style="text-align:center">400B，可商用（限条件）</td><td style="text-align:center"><a href="https://ai.meta.com">https://ai.meta.com</a></td></tr><tr><td style="text-align:center">文心一言</td><td style="text-align:center">ERNIE-4.5</td><td style="text-align:center">百度 🇨🇳</td><td style="text-align:center">中文搜索、知识问答</td><td style="text-align:center">1.4T 参数，多模态+知识图谱</td><td style="text-align:center"><a href="https://yiyan.baidu.com">https://yiyan.baidu.com</a></td></tr><tr><td style="text-align:center">通义千问</td><td style="text-align:center">Qwen2.5-Max</td><td style="text-align:center">阿里巴巴 🇨🇳</td><td style="text-align:center">通用、音视频、多语言</td><td style="text-align:center">720B，20T token 预训练</td><td style="text-align:center"><a href="https://tongyi.aliyun.com">https://tongyi.aliyun.com</a><br><a href="https://chat.qwenlm.ai/">https://chat.qwenlm.ai/</a></td></tr><tr><td style="text-align:center">星火</td><td style="text-align:center">星火 4.0 Ultra</td><td style="text-align:center">科大讯飞 🇨🇳</td><td style="text-align:center">中文语音、教育、办公</td><td style="text-align:center">强语音合成/识别</td><td style="text-align:center"><a href="https://xinghuo.xfyun.cn">https://xinghuo.xfyun.cn</a></td></tr><tr><td style="text-align:center">混元</td><td style="text-align:center">Hunyuan-Pro</td><td style="text-align:center">腾讯 🇨🇳</td><td style="text-align:center">社交、游戏、客服</td><td style="text-align:center">千亿级，游戏 NPC 优化</td><td style="text-align:center"><a href="https://yuanbao.tencent.com">https://yuanbao.tencent.com</a></td></tr><tr><td style="text-align:center">豆包</td><td style="text-align:center">豆包 1.5 Pro</td><td style="text-align:center">字节跳动 🇨🇳</td><td style="text-align:center">短视频、客服、创作</td><td style="text-align:center">多模态，长上下文</td><td style="text-align:center"><a href="https://www.doubao.com">https://www.doubao.com</a></td></tr><tr><td style="text-align:center">Kimi</td><td style="text-align:center">Kimi-1.6</td><td style="text-align:center">月之暗面 🇨🇳</td><td style="text-align:center">长文本阅读、法律、金融</td><td style="text-align:center">200 万汉字上下文</td><td style="text-align:center"><a href="https://www.moonshot.cn">https://www.moonshot.cn</a><br><a href="https://www.kimi.com/">https://www.kimi.com/</a></td></tr><tr><td style="text-align:center">百川</td><td style="text-align:center">Baichuan4</td><td style="text-align:center">百川智能 🇨🇳</td><td style="text-align:center">医疗、中文问答</td><td style="text-align:center">医疗场景深度优化</td><td style="text-align:center"><a href="https://www.baichuan-ai.com">https://www.baichuan-ai.com</a></td></tr><tr><td style="text-align:center">DeepSeek</td><td style="text-align:center">DeepSeek-V3</td><td style="text-align:center">深度求索 🇨🇳</td><td style="text-align:center">金融、中文语义</td><td style="text-align:center">1.6T，部分开源</td><td style="text-align:center"><a href="https://chat.deepseek.com/">https://chat.deepseek.com/</a></td></tr><tr><td style="text-align:center">MiniMax</td><td style="text-align:center">MiniMax-Text-02</td><td style="text-align:center">MiniMax 🇨🇳</td><td style="text-align:center">多轮对话、语音合成</td><td style="text-align:center">千亿级，语音自然</td><td style="text-align:center"><a href="https://api.minimax.chat">https://api.minimax.chat</a></td></tr><tr><td style="text-align:center">InternLM</td><td style="text-align:center">InternLM3</td><td style="text-align:center">零一万物 🇨🇳</td><td style="text-align:center">开源通用、教育</td><td style="text-align:center">轻量长文本，可本地部署</td><td style="text-align:center"><a href="https://github.com/InternLM">https://github.com/InternLM</a></td></tr><tr><td style="text-align:center">盘古</td><td style="text-align:center">盘古 CV-3.0</td><td style="text-align:center">华为 🇨🇳</td><td style="text-align:center">工业视觉、遥感</td><td style="text-align:center">toB行业定制，我们用不了</td><td style="text-align:center"><a href="https://www.huaweicloud.com/product/pangu.html">https://www.huaweicloud.com/product/pangu.html</a></td></tr><tr><td style="text-align:center">Mistral</td><td style="text-align:center">Mistral Large 2</td><td style="text-align:center">Mistral AI 🇫🇷</td><td style="text-align:center">多语言、代码、推理</td><td style="text-align:center">123B，开源权重</td><td style="text-align:center"><a href="https://mistral.ai">https://mistral.ai</a></td></tr><tr><td style="text-align:center">Command</td><td style="text-align:center">Command R+</td><td style="text-align:center">Cohere 🇨🇦</td><td style="text-align:center">企业检索、RAG</td><td style="text-align:center">104B，商用友好</td><td style="text-align:center"><a href="https://cohere.com">https://cohere.com</a></td></tr><tr><td style="text-align:center">Grok</td><td style="text-align:center">Grok-3</td><td style="text-align:center">xAI 🇺🇸</td><td style="text-align:center">实时数据、社交对话</td><td style="text-align:center">X 平台深度集成</td><td style="text-align:center"><a href="https://x.ai">https://x.ai</a></td></tr><tr><td style="text-align:center">Falcon</td><td style="text-align:center">Falcon3-40B</td><td style="text-align:center">TII 🇦🇪</td><td style="text-align:center">多语言、开源</td><td style="text-align:center">可商用，工具调用</td><td style="text-align:center"><a href="https://huggingface.co/LLM360">https://huggingface.co/LLM360</a></td></tr><tr><td style="text-align:center">GLM</td><td style="text-align:center">GLM-4-32B</td><td style="text-align:center">清华&amp;智源 🇨🇳</td><td style="text-align:center">中英双语、工具调用</td><td style="text-align:center">开源，32B 轻量</td><td style="text-align:center"><a href="https://modelscope.cn/organization/THUDM">https://modelscope.cn/organization/THUDM</a></td></tr></tbody></table><h3 id="本地部署大模型">本地部署大模型</h3><p>除了上面这些可以在线使用的大模型，大家还可以尝试一下用<a href="https://ollama.com/">https://ollama.com/</a>和<a href="https://lmstudio.ai/">https://lmstudio.ai/</a>在本地部署大模型，依据你电脑配置的不同，可以在ollama的模型广场里面选择不同参数量的模型，建议直接用qwen3来测试。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ollama pull qwen3:1.7b</span><br></pre></td></tr></table></figure><p>举个例子：</p><ul><li>以游戏本为例，你能够本地部署的模型，就看你的显存大小是多少。</li><li>比如你是一个8GB显存的英伟达显卡，你就可以尝试部署4B的模型；如果你是一个16GB显存的显卡，就可以尝试部署7B或者14B的模型。</li><li>如果你不是游戏本，是核显商务本，也可以尝试部署一下1.7B的小模型（直接用CPU跑），也是可以在本地运行起来的。</li><li>如果是Arm的MAC电脑，部署模型直接看你的MAC有多少内存即可。</li></ul><p>你可能会问：线上的这些平台不是都提供了API吗，为什么还要尝试本地部署模型？小参数的模型不是很垃圾吗？</p><p>小参数的模型确实效果不如人意，但是对于本地部署模型而言，最重要的是你实操过ollama和LM Studio，知道本地部署模型需要做什么步骤。这就好比你在本地折腾过linux、docker、jenkins这些环境一样，只有本地折腾过，未来工作中遇到实际使用这些工具的时候，才不会抓瞎。</p><h2 id="The-end">The end</h2><p>本文主要还是为大家收集了主流的大模型以及在哪里使用它们。后续如果出现了新的性能还不错的大模型，会继续更新本文。</p><p>大家平日学习中要学会充分借助AI，但也不要过度依赖AI，特别是初学者！</p>]]></content>
    
    
    <summary type="html">本文将带大家了解当前主流的大模型，汇总了所有能使用这些模型的官方网站</summary>
    
    
    
    <category term="编程学习" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="Agent智能体开发" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/Agent%E6%99%BA%E8%83%BD%E4%BD%93%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="AI" scheme="https://blog.musnow.top/tags/AI/"/>
    
    <category term="Agent开发" scheme="https://blog.musnow.top/tags/Agent%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>【Agent.01】AI Agent智能体开发专题引言</title>
    <link href="https://blog.musnow.top/posts/6796656750/"/>
    <id>https://blog.musnow.top/posts/6796656750/</id>
    <published>2025-09-06T14:12:23.000Z</published>
    <updated>2025-09-15T00:59:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>慕雪即将更新一套AI Agent智能体开发的专栏，本文是这个专栏的引言。</p><ol class="series-items"><li><a href="/posts/4710483697/" title="【AI】AI对26届计算机校招的影响">【AI】AI对26届计算机校招的影响</a></li><li><a href="/posts/6796656750/" title="【Agent.01】AI Agent智能体开发专题引言">【Agent.01】AI Agent智能体开发专题引言</a></li><li><a href="/posts/6151856853/" title="【Agent.02】市面上常见的大模型有哪些？">【Agent.02】市面上常见的大模型有哪些？</a></li></ol><h2 id="1-写在前面">1. 写在前面</h2><p>在先前的<a href="https://blog.musnow.top/posts/4710483697">【AI】AI对26届计算机校招的影响</a>一文中，慕雪简述了一下当前AI发展对26届校招产生的影响。</p><p>目前校招的变化，还只是在笔试、面试形式上发生的影响，暂时还没有出现在面试内容中考核校招生对AI Agent开发理解程度的情况。但慕雪认为，开发岗中开始考核AI Agent开发相关内容，<strong>一定会发生</strong>，只是时间问题罢了。</p><p>以后的<strong>开发岗</strong>，包括前端、后端、客户端、测开，都一定会考核AI Agent开发相关的知识点，包括但不限于如下几点：</p><ul><li>基础：编程学习中是否会使用AI工具辅助？如何使用？能否很好的使用？<ul><li>目前美团秋招中引入的vibe coding环节本质上就是在考核这一层，算是AI时代的研发基本功。</li></ul></li><li>初级：是否能够编写一个很好的Prompt（Prompt工程，现在变成Context工程了）</li><li>中级：是否了解AI的Function Calling和MCP？是否调用过OpenAI格式接口与AI交互？<ul><li>最佳实践：为自己的前后端项目引入一个<strong>界面使用方式</strong>的AI问答机器人。</li></ul></li><li>高级：是否了解AI Agent？有没有编写过AI Agent为自己的项目赋能？<ul><li>最佳实践：在自己的项目中引入了AI Agent，并且这个Agent能够感知当前系统的状态，告知用户下一步应该做什么，<strong>最好是能够直接帮助用户操作</strong>。</li><li>QA最佳实践：在自己的项目中引入AI Agent，进行测试用例编写、测试用例覆盖率获取、优化测试用例的全环节。这部分可以和CI/CD结合。</li><li><strong>注意</strong>，了解AI Agent不只是了解Agent开发框架，还需要对主流Agent可以调用的工具进行了解，比如browser-use、codebase、git、命令行工具等等……</li></ul></li></ul><p>慕雪认为：明年27届秋招就会开始考核这些内容了。所以，如果你能够相比于其他竞争对手，<strong>提前</strong>了解AI Agent相关的信息，想办法在自己的项目中引入一个AI Agent，绝对能在互联网大厂的校招生招聘中大大的提分（特别是测试开发岗位）。</p><p>了解AI相关动态的第一步，就是把国内的“AI三大顶会”微信公众号关注起来：</p><ol><li>机器之心</li><li>量子位</li><li>新智元</li></ol><p>这三个公众号之所以称之为“顶会”，并不是它们有多权威，只是这三个公众号在传播AI行业最新发展动态上非常及时，且文中也不只是空谈理论，也会有实际测试的演示。对我们了解最新AI发展非常有帮助。</p><p>除了上面这三个“顶会”，InfoQ也可以关注一下。</p><h2 id="2-专栏内容">2. 专栏内容</h2><h3 id="2-1-说明">2.1. 说明</h3><p>本专栏将帮助大家，从写Prompt与AI交互开始，一直到在自己的项目中编写一个测试用例Agent的项目实战（选这个主题，是因为它和语言、项目不强依赖，基本上所有前后端项目都可以干上去）。</p><p>整个专栏不需要你对AI有任何了解，只需要了解Python基础语法即可。不会Python也没关系，Python是最好学的语言了，现在都有AI了，把文中涉及到的代码贴给AI让他给你解释解释，是最快的学习方式。</p><p>同时，整个专栏的所有资料都会在我的个人博客和我的Github上更新，不会涉及到任何知识付费内容！不过呢，后续为了测试，会涉及到调用<strong>硅基流动</strong>的OpenAI API，各位跟随本专栏学习的时候，会在硅基流动上会有一定API调用费用支出。</p><h3 id="2-2-目录">2.2. 目录</h3><p>本专栏目录如下：</p><ol><li>引言（本文）</li><li>当前有哪些常见的大模型呢？（大模型平台收集）</li><li>如何写好一个Prompt（其实慕雪也不是很会，所以只是抛砖引玉）</li><li>使用Python，编写第一个通过OpenAI API与大模型交互的代码（AI时代的hello world）</li><li>什么是Function Calling和MCP？（这部分其实已经有了，见本站<a href="https://blog.musnow.top/posts/2831928244">MCP协议介绍</a>)</li><li>什么是Agent？（概念引入）</li><li>使用OpenAI Agent框架，编写一个最简单的Agent范例</li><li>常用的Agent可调用工具有哪些？（引入主流MCP工具）</li><li>项目实战：在自己的项目中引入一个用例编写全流程Agent。</li></ol><p>注意，<strong>请不要把OpenAI API和OpenAPI给搞混了</strong>，OpenAI API专门指代OpenAI公司发布的与AI交互的API请求格式，而OpenAPI含义是某个系统对外开放的API。本质上，OpenAI API也是OpenAPI的一种。</p><h3 id="2-3-测试用例Agent实战">2.3. 测试用例Agent实战</h3><h4 id="2-3-1-Agent工作流程图">2.3.1. Agent工作流程图</h4><p>其中针对项目实战中的<strong>用例编写Agent</strong>做一定解释，常见的用例编写Agent涉及到如下环节</p><pre><code class="highlight mermaid">flowchart TD    A([Agent启动]) --&gt; C[生成/更新测试用例]    C --&gt; D[运行自动化测试]    D --&gt; E[收集覆盖率报告]    E --&gt; F&#123;覆盖率达标?&#125;    F --&gt;|否| G[定位未覆盖代码]    G --&gt; H[智能补充测试用例]    H --&gt; D    F --&gt;|是| I[生成测试报告]    I --&gt; J([Agent休眠/等待下次触发])        style A fill:#90EE90    style J fill:#FFB6C1</code></pre><p>在传统时代，上面的所有步骤，<strong>都涉及到人去做</strong>。即便传统的CI/CD工具（如Jenkins）能够帮助我们完成运行测试+覆盖率报告卡控的步骤，用例编写、覆盖率报告分析、补充用例的环节也还是需要人去做。</p><p>现在AI Agent的诞生，让测试用例编写的所有的流程都可以实现Agent“自回归”了。所谓自回归，就是Agent能够根据测试用例运行结果（谁失败了？）和覆盖率报告（哪里没覆盖到？）动态的修改测试用例，直到达成我们设定的覆盖率指标。人只需要去设定何时触发这个流程，剩下的所有事情都由AI代劳。</p><p>在传统的对话式AI交互的模式下，是无法实现AI自回归编写测试用例的。这个非常简单的流程图，直接体现了AI Agent对整个行业的巨大影响。你想想，原本需要一个对项目有了解的同学才可以编写这个项目的测试用例。现在AI来了，只要你会写Agent，直接咔咔编写一个Agent工作流和对于Prompt，一启动，AI框框干，压根不需要人的介入，我们只需要检查AI工作的结果对不对就行了。</p><p>长期来看，AI Agent的引入对项目开发效率的提升是非常大的，这也是为什么现在所有互联网公司都在整AI专项，AI相关的新闻更是常常刷屏。</p><h4 id="2-3-2-什么是测试用例覆盖率？">2.3.2. 什么是测试用例覆盖率？</h4><p>对不了解测试用例覆盖率指标的同学做一个简单的解释。</p><p>覆盖率指标包含函数覆盖率、行覆盖率、分支覆盖率：</p><ul><li>函数覆盖率：运行项目后，有哪些函数被调用了?</li><li>行覆盖率：运行项目后，有哪些代码行被执行了？</li><li>分支覆盖率（进阶）：运行项目后，代码中if判断相关的分支命中了几个？</li></ul><p>编程语言是C、C++、Object-C的项目，常用的覆盖率工具是<a href="https://github.com/linux-test-project/lcov">lcov</a>。本站之前编写过lcov工具安装配置的博客：<a href="https://blog.musnow.top/posts/1274282021">安装locv</a>，学C++方向的同学可以先试试开启自己项目的覆盖率统计并收集一下lcov报告。</p><blockquote><p>JAVA这边常用的覆盖率工具是<a href="https://www.jacoco.org/jacoco/">jacoco</a>，学JAVA的同学可以去了解一下。</p></blockquote><p>针对一个项目，常见的测试方式包含单元测试、集成测试（接口测试）、系统测试。其中，<strong>单元测试和集成测试</strong>是能够获取到测试用例覆盖率的。本Agent实战项目将以单元测试为例进行Agent用例编写，这也是能给你的项目加上一个AI Agent的最快、最稳妥的方式。</p><h2 id="3-The-end">3. The end</h2><p>由于专栏涉及到的内容比较多，慕雪平时工作也挺繁忙的，只有周末有时间更新。所以整个专栏的更新随缘。我尽量在26年的暑期实习招聘（27届暑期实习招聘）开始之前完成整个专栏。</p><p>所有内容都是慕雪本人对AI Agent开发的愚见，仅供参考，不保证有效性！更不保证学了本项目一定能在面试中有大优势！</p>]]></content>
    
    
    <summary type="html">慕雪即将更新一套AI Agent智能体开发的专栏，本文是这个专栏的引言</summary>
    
    
    
    <category term="编程学习" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="Agent智能体开发" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/Agent%E6%99%BA%E8%83%BD%E4%BD%93%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="AI" scheme="https://blog.musnow.top/tags/AI/"/>
    
    <category term="Agent开发" scheme="https://blog.musnow.top/tags/Agent%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>【AI】AI对26届计算机校招的影响</title>
    <link href="https://blog.musnow.top/posts/4710483697/"/>
    <id>https://blog.musnow.top/posts/4710483697/</id>
    <published>2025-08-31T07:12:29.000Z</published>
    <updated>2025-09-14T00:21:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>简单聊聊当前AI发展对26届计算机校招的影响，本文仅为慕雪的个人观点，仅供参考，请勿断章取义。有不同的观点，欢迎评论区讨论。</p><p>如果你不想看慕雪语句不通顺的瞎比比，请直接跳到最后看小结。</p><h2 id="写在前面">写在前面</h2><p>早在几十年前，人类就已经预见到人工智能蓬勃发展的未来。“人工智能取代人类”这一观点，更是不少影视作品与文学作品中反复探讨的核心主题。从《2001太空漫游》中的智能计算机HAL，到《终结者》系列中的天网系统，再到近年来层出不穷的人工智能题材电影与小说，社会对人工智能的想象往往带有深深的忧虑与警惕。这些作品不仅反映了人类对科技飞速发展的憧憬，同时也折射出人们对人工智能可能带来的失控风险、就业冲击乃至伦理困境的担忧。随着现实中的人工智能逐步走出实验室，进入生产、生活的方方面面，这一话题已不再只是虚构世界中的设想，而是真实世界必须直面的问题。</p><p>如果你在2025年有关注过大模型的发展，你大概听说过，今年是大模型迅猛发展的一年，要我说，真的可以算作“技术爆炸”的一年。不管是DeepSeek开源引爆业界对开源大语言模型的关注，还是cursor、copliot、claude-code等工具的火热，都是这“技术爆炸”的一部分。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/08/3a8db7a94b2b6fc9d75d2c6c8c5d5011.webp" alt="image.png"></p><p>大模型为我们的日常生活和学习工作都带来了种种便利，虽之而来的，就是大模型的出现对整个计算机行业的已有工作流程的“挑战”，这也包括了本文的主题，即大模型对计算机校招的挑战。</p><h2 id="最新动态">最新动态</h2><p>2025年8月，2026届秋招已经全面开始，从牛客网上的已有信息，慕雪发现了下面几个变动：</p><ol><li>美团开始在笔试和面试中直接引入大模型，面试新增AI Coding考察，笔试直接出现了允许使用AI辅助的算法题：<a href="https://www.nowcoder.com/feed/main/detail/4ecf6fe9bada45128a2b819aeceac39d?sourceSSR=search">帖子1</a>,<a href="https://www.nowcoder.com/feed/main/detail/3bb17f9dc7874b1ba2f8ebd8153c9b31?sourceSSR=search">帖子2</a>；</li><li>美团开发岗笔试题中出现了AI训练相关的题目：<a href="https://www.nowcoder.com/exam/test/90945132/detail?pid=63140272&amp;examPageSource=Company&amp;subTabName=written_page&amp;testCallback=https%3A%2F%2Fwww.nowcoder.com%2Fexam%2Fcompany%3FquestionJobId%3D10%26subTabName%3Dwritten_page&amp;testclass=%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91">牛客真题</a>；</li><li>大厂面试要求闭眼答题：<a href="https://mp.weixin.qq.com/s/uFUp5ryvBdlQjGcFAbviiQ">帖子</a>;</li><li>拼多多面试引入双机位：<a href="https://www.nowcoder.com/feed/main/detail/ebb09f6feede4afda3aad880877236ea?sourceSSR=search">帖子1</a>,<a href="https://www.nowcoder.com/feed/main/detail/e9f3a07f055e43288377b1799a423833?sourceSSR=search">帖子2</a>；</li><li>似乎更多大厂也要跟团开启双机位面试……</li><li>其他的信息还没收集到呢，如果有可以补偿在评论区。</li></ol><p>前两项变动，说明美团在校招中<strong>直接开始考察校招生的AI使用能力了</strong>。</p><p>大模型语言出现之后，传统的只靠人去考虑如何编程的时代已经过去了。现在我们可以使用各类大模型，直接把自己的需求点发给他，让AI给你写一套代码出来，然后再考虑往哪里插入。有了cursor这类工具之后，甚至考虑在哪里插入的事情都不需要做了，整个需求都可以让AI自己写出来，我们只需要去检查一下AI写的对不对就行了。</p><p>此时，每个人的效率都能在大模型的帮助下急剧提升，传统的经验积累被迅速缩短。现在一个同学的编程能力好不好，效率高不高，可以直接和他会不会使用AI、怎么使用AI、用的好不好挂钩。先前火过一段时间的“prompt工程师”便是这项能力的直接体现（只不过在网上怕是更多体现在卖课上了……）</p><blockquote><p>如果你不知道或者没有使用过cursor这类工具，现在必须要去了解并使用一下了。考虑到cursor之类的价格较贵，你可以先试用一下美团的<a href="https://nocode.cn/">nocode</a>和阿里的<a href="https://lingma.aliyun.com/">通灵义码</a>插件，这两个的效果和cursor都是类似的，而且<strong>免费</strong>，先用他们锻炼一下自己使用AI辅助编程的能力吧。</p></blockquote><p>而后两项变动，就是AI作弊相关的问题了。正如AI可以帮我们完成编程工作，AI在面试过程中帮面试者回答八股那更是一个信手拈来，这就导致面试官辛辛苦苦考察的一个同学，可能最后发现是靠作弊进的公司，本身是个水货，那多难受？</p><p>前排提醒，作弊这件事并不是有AI之后才出现的，线上面试作弊已经是见怪不怪了，只不过AI让作弊的手段从“场外援助”这种容易被发现的作弊手段变成了更难发现的“单人作战”。这对需要招聘的公司来说是不利的，为了转嫁这风险，只有三种手段：</p><ul><li>使用更严苛的反作弊措施，比如线上面试要求双机位、要求候选者闭眼答题……</li><li>斥巨资在全国各地组织线下面试，比如华为。</li><li>继续狠狠加大面试的难度！</li></ul><p>面试这件事本身就是前人挖坑后人跳坑的不利之举，除了那个考作弊拿到了offer的同学真正得利了，剩下的整个校招环境都被作弊破坏了。</p><p>慕雪告诫所有同学：不要有侥幸心理！校招面试作弊在任何公司都是无法忍受的红线问题，一旦有人举报你，或者你在入职之后被怀疑查出有作弊嫌疑，基本上都是丢了offer+被拉黑的结局。</p><blockquote><p><strong>纯猜想，不是真的</strong>：绝大部分公司都是用的牛客网提供的考试系统，每个公司都要求候选人绑定了手机号或者身份证号。此时牛客网从技术角度上看完全有能力为各个使用牛客网笔试系统的公司提供“联ban”服务，直接把有过作弊嫌疑的同学标记出来，所有公司都能直接自动拉黑这名同学了。</p><p>说不定牛客网现在就有这项“联ban”服务呢？只不过我们这些候选者不知道而已。</p></blockquote><p>其实还是那句话：在任何时候都不要想着靠作弊拿offer！</p><h2 id="小结">小结</h2><p>上面叭叭了那么多没用的东西，最终小结其实也就两点：</p><ol><li>未来的校招面试，会从考察八股、项目变成连带考察候选者是否会高效地使用AI工具。</li><li>AI的出现让校招面试作弊的情况变多，大厂只会采取更严苛的筛选机制排除作弊的“水货”。</li></ol><p>打铁还需自身硬，我们只有跟得上时代，才能不被时代抛弃。建议大家在编程学习，走到项目编写环节的时候，就可以引入AI工具为自己的项目编写工作赋能了。最好是能融合一个AI Agent到你的项目中去，成为你项目的一部分，哪在面试环节绝对会大加分。</p><p>但是！也不要过度依赖AI，如果你在刚开始学习，编写hello world的这个阶段就开始用AI工具帮你看编译器报错了，那会大大降低你的问题定位和解决问题的能力，在编程学习和工作中，这项能力是非常重要的！前期学习的时候，最好是不要借助AI的辅助！别捡了芝麻丢了西瓜哦~</p>]]></content>
    
    
    <summary type="html">简单聊聊当前AI发展对26届计算机校招的影响（纯纯粹粹的个人观点）</summary>
    
    
    
    <category term="编程学习" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="Agent智能体开发" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/Agent%E6%99%BA%E8%83%BD%E4%BD%93%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="测试开发" scheme="https://blog.musnow.top/tags/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91/"/>
    
    <category term="AI" scheme="https://blog.musnow.top/tags/AI/"/>
    
  </entry>
  
  <entry>
    <title>【win】关闭windows系统切换输入法的其他快捷键（除了win+空格）</title>
    <link href="https://blog.musnow.top/posts/9373074383/"/>
    <id>https://blog.musnow.top/posts/9373074383/</id>
    <published>2025-08-24T07:52:44.000Z</published>
    <updated>2025-08-24T08:34:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文将告诉大家如何关闭windows系统切换输入法的其他快捷键，避免打游戏的时候被卡输入法困扰。</p><h2 id="1-写在前面">1. 写在前面</h2><p>先说说什么是卡输入法吧：卡输入法的问题通常在<strong>国外游戏</strong>上比较常见，国内网游一般对中文输入法都做了特殊处理，才能让玩家在游戏内的聊天框里面打中文。国外游戏因为没有考虑过中文聊天的问题（比如战地2042），在中文输入法的情况下按键盘会弹出输入法输入框，直接无法操控游戏。</p><p>默认情况下，我们会使用<code>win+空格</code>快捷键切换不同的输入法，打游戏的时候为了不卡输入法，需要安装一个ENG英文输入法，在打游戏之前切换过去，然后锁掉键盘的win键位，这样在打游戏的时候才不会卡输入法。</p><p>但是，windows其实不止一个切换输入法的快捷键，默认还有另外两个快捷键也是会在游戏里面被误触的。</p><ul><li>ctrl+alt</li><li>ctrl+空格</li></ul><p>咱也不知道为什么win要设计多几个快捷键出来，只留一个win+空格不好吗？不过好在另外这两个快捷键是可以删除的，详细操作参考后文。</p><h2 id="2-如何安装英文输入法">2. 如何安装英文输入法</h2><p>既然提到了卡输入法的问题，顺带就把安装ENG输入法的教程也提一嘴吧。在windows设置里面（win10和win11通用）搜索“语言和区域”，找到如下界面，点击添加语言，在语言列表里面找到英语(美国)，添加一下就可以了</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/08/196e1ec70d7fa6d396be486c454eb50e.webp" alt="image.png"></p><p>此时你的电脑右下角语言栏会出现英语美国输入法的选项，如果出现了这个选项那就ok了，打游戏的时候切换过去就行了。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/08/e068176739c6e19ac494b38a80deaa96.webp" alt="image.png"></p><h2 id="3-关掉除了win-空格外的其他切换输入法快捷键">3. 关掉除了win+空格外的其他切换输入法快捷键</h2><p>接下来进入正题，说说怎么关掉其他切换输入法的快捷键。</p><p>右下角先切到win系统自带的中文输入法，右键进入输入法按键配置（或者直接在系统里面搜<code>时间和语言-语言和区域-按键</code>）</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/08/09c31a606abbddb9f88cf02f05ef1bf2.webp" alt="image.png"></p><p>这个操作会打开win11设置里面的<code>时间和语言-语言和区域-按键</code>，在这里面，把ctrl+空格和ctrl这两个中英文模式切换的快捷键都给取消勾选</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/08/9156e2698ed1ce0d227e6584599fea1e.webp" alt="image.png"></p><p>随后再回到<code>时间和语言-输入-高级键盘设置-输入语言热键</code>里面，会打开一个控制面板</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/08/7c708f44a2750c1ab108f8d445a3a5b9.webp" alt="image.png"></p><p>找到<strong>高级键设置</strong>，这里就能看到另外的输入法控制快捷键了。建议把这里面所有操作的快捷键全都删掉！</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/08/443bd63aad72da98226a83eb04794cda.webp" alt="image.png"></p><p>选中一个选项，点击更改按键顺序，在弹框中把启用按键顺序取消勾选，就可以删掉这个快捷键了</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/08/2a040984c4240d4f4e6d27df4b0f8238.webp" alt="image.png"></p><p>点击确定，回到上级菜单，可以看到这个快捷键是<strong>无</strong>了。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/08/a4bcd6d41ced6bd2b84e0fba40022a8b.webp" alt="image.png"></p><p>不过需要注意的是，在我的电脑上高级键设置里面的“中文（简体）输入法 - 输入法/非输入法切换”这个项目是没有办法改成<strong>无</strong>的。即便修改以后当前显示成无（截图里面的样子），但是点击右下角<strong>应用</strong>之后又会变成<code>ctrl+空格</code>。</p><p>我的个人理解：这个快捷键可以不用管他，因为这个选项“似乎”不会有什么实际影响，<strong>我们在打游戏的时候已经切换成ENG输入法了</strong>，不在“中文（简体）输入法”下，所以这个快捷键是不会生效的。</p><h2 id="4-写在最后的碎碎念">4. 写在最后的碎碎念</h2><p>反正删除了上面几个快捷键之后就OJBK了，不再会在打游戏的时候又莫名其妙的从ENG输入法变成中文输入法了。</p><h3 id="4-1-咋知道自己键盘能不能锁WIN呢？">4.1. 咋知道自己键盘能不能锁WIN呢？</h3><p>如果你的电脑键盘连锁WIN键的功能都没有，<strong>那作为一块游戏键盘它是非常非常非常不合格的。</strong> 在此情况下，如果你已经被卡中文输入法或者在游戏里误触win弹出开始菜单的问题困扰过，作为游戏玩家，还是建议你更换一块键盘。现在100元价位的国产机械键盘应该都是带了锁WIN这个功能的，购买之前可以问问客服。</p><p>如果你不知道自己的键盘有没有锁WIN键的功能，可以用下面的方式验证：</p><ul><li>先看看你的键盘上有没有FN功能键，<strong>如果有</strong>，尝试按出FN+WIN。按了之后，再单击WIN，此时如果没有弹出windows的开始菜单，说明这个键盘是有锁WIN功能的，这个时候已经锁上了，再次按FN+WIN就可以恢复不锁WIN的状态。</li><li>部分键盘的锁WIN功能可能是<strong>连击两次WIN</strong>或者<strong>长按WIN</strong>触发，但是这种比较少见，因为连击两次WIN或者长按WIN都是有可能在游戏里面误触的。</li><li>如果你的键盘上没有FN功能键位，那大概率是不支持锁WIN的，只能建议换键盘喽。</li></ul><p>另外，如果你是最近几年购买的<strong>游戏本</strong>，可以去游戏本自带的控制软件里面找一下选项。我的印象中，联想拯救者的官方控制台里面是有锁掉笔记本自带键盘的WIN键以及笔记自带触控板的选项的。其他品牌的游戏本不太清楚，如果也有这个功能，欢迎大家在评论区补充。</p><h3 id="4-2-关于笔记本是否需要外接键盘">4.2. 关于笔记本是否需要外接键盘</h3><p>这里再再稍微多嘴一下：几乎所有游戏本在打游戏的高性能状态下，键盘都是会超过38°C甚至还有40°C以上的，为了避免低温烫伤，强烈建议购买外置键盘！不要使用游戏本自带键盘玩游戏！</p><p>刚刚去搜了笔吧评测室几款2025年新出的游戏本，不得不说时代变啦，现在游戏本键盘竟然能控制在35°C以下了，实在是难能可贵。</p><blockquote><p>备注：华硕天选6Pro已经算是中端游戏本扛把子机型了，如果买的不是这个型号，键盘温度控制估计不会这么好。</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/08/e51ea71d8a83c3f8d210f102a0e87c0a.webp" alt="image.png"></p><p>不过需要注意的是，视频里面是在室温25°C环境下测试的，如果你的室温高于这个温度，笔记本的温度肯定会上升的。现在一块国产机械键盘80元就能到手了，手感怎么说都比笔记本自带的键盘好，还是建议大家不要省这个钱了，长期在打游戏、高负载工作的时候接触高温的笔记本键盘肯定是不好的。</p><p>如果你的桌子实在没地方放键盘，可以买一个 <strong>50cm*25cm,高度大于11cm</strong> 的显示器支架（某宝关键词搜“显示器支架”或者“笔记本支架”应该都能搜到，20元左右）把笔记本架起来，键盘放在支架下方，这样既能把笔记本屏幕拉的离自己近一点，又可以用外接键盘，岂不美哉。</p><p><strong>还得提醒一下各位轻薄本用户</strong>：别以为轻薄本自带键盘就不会有低温烫伤风险啦！轻薄本和全能本由于散热模组更小，在高负载的情况下笔记本键盘温度<strong>只会比游戏本更高</strong>！除非是不卷性能释放的高端轻薄本。</p><p>慕雪用过两款轻薄本，在高温的时候键盘那是<strong>碰都碰不得</strong>，当时烫的我不得已临时购置了一款键盘顶上，才解决问题。不得不说狗东次日达还是很爽的。</p><p>总而言之，只要你在使用笔记本电脑的时候，<strong>感觉笔记本键盘有点温热</strong>，还是强烈建议买块外接键盘吧，哪怕是30元的薄膜键盘也好。比起你的笔记本电脑来说，外接键盘的钱真的是小钱啦，别因小失大！顶多用外接键盘的时候麻烦点。</p><h2 id="THE-END">THE END</h2><p>感谢大家看到最后，又水了一期博客（不是），至少没让站点冷下来。</p>]]></content>
    
    
    <summary type="html">本文将告诉大家如何关闭windows系统切换输入法的其他快捷键，避免打游戏的时候被卡输入法困扰。</summary>
    
    
    
    <category term="差生文具多" scheme="https://blog.musnow.top/categories/%E5%B7%AE%E7%94%9F%E6%96%87%E5%85%B7%E5%A4%9A/"/>
    
    <category term="电脑使用小贴士" scheme="https://blog.musnow.top/categories/%E5%B7%AE%E7%94%9F%E6%96%87%E5%85%B7%E5%A4%9A/%E7%94%B5%E8%84%91%E4%BD%BF%E7%94%A8%E5%B0%8F%E8%B4%B4%E5%A3%AB/"/>
    
    
    <category term="Windows" scheme="https://blog.musnow.top/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>【Nginx】配置nginx拦截非浏览器请求</title>
    <link href="https://blog.musnow.top/posts/9909449770/"/>
    <id>https://blog.musnow.top/posts/9909449770/</id>
    <published>2025-08-09T07:56:25.000Z</published>
    <updated>2025-08-13T00:27:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>如题，我用nginx代理的artalk，感觉最近有很多不像是真人发出来的评论到我的博客里面，</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/08/b639f6443b797bb4a6d51d5c00bc3d69.webp" alt="image.png"></p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/08/3420114cfc6d6ddde103334c4d1eae47.webp" alt="image.png"></p><p>看了一下1panel里面ngnix的日志，在之前的错误日志里面看到了很多python requests发出来的请求，明显不是真人发的（他甚至不愿意模拟一下浏览器的referer）</p><p>在nginx反向代理配置的location体内的<strong>最开头</strong>加上如下内容，直接拦截掉这些非浏览器的UA</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果 User-Agent 中包含这些字段，直接拒绝（非浏览器请求）</span></span><br><span class="line"><span class="attribute">if</span> (<span class="variable">$http_user_agent</span> <span class="regexp">~* (curl|wget|httpie|python|Go-http-client|okhttp|java|bot|spider|crawler|Postman|Apache-HttpClient|HeadlessChrome|xx032_))</span> &#123;</span><br><span class="line">    <span class="attribute">return</span> <span class="number">403</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简单测试一下是否能够拦截，首先是直接浏览器访问博客站点，artalk评论正常，那就没问题。</p><p>然后用curl模拟一下请求，nginx设置了之后会直接403拒绝，配置成功。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ curl <span class="string">&quot;https://artk.musnow.top&quot;</span></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;<span class="built_in">head</span>&gt;&lt;title&gt;403 Forbidden&lt;/title&gt;&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;center&gt;&lt;h1&gt;403 Forbidden&lt;/h1&gt;&lt;/center&gt;</span><br><span class="line">&lt;hr&gt;&lt;center&gt;openresty&lt;/center&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>接下来要解决另外一个问题，我们拦截的时候不能把uptimerobot的uptime检测器也给拦截掉（因为uptimerobot返回403也是认为服务down了的，必须返回200）</p><p>官网上可以找到uptimerobot使用的是User-Agent：<a href="https://help.uptimerobot.com/en/articles/11358489-what-is-the-uptimerobot-user-agent-string">文档链接</a></p><blockquote><p>The user agent we use is: Mozilla/5.0+(compatible; UptimeRobot/2.0; <a href="http://www.uptimerobot.com/">http://www.uptimerobot.com/</a>)|</p></blockquote><p>所以只需要修改nginx配置为如下就可以了，先过滤掉uptimerobot再判断其他ua。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">###### 非浏览器请求拦截 ######</span></span><br><span class="line"><span class="comment"># 1. 默认不拦截</span></span><br><span class="line"><span class="attribute">set</span> <span class="variable">$block_request</span> <span class="number">0</span>;</span><br><span class="line"><span class="comment"># 2. 如果 User-Agent 匹配黑名单，就标记为需要拦截</span></span><br><span class="line"><span class="attribute">if</span> (<span class="variable">$http_user_agent</span> <span class="regexp">~* (curl|wget|httpie|python|Go-http-client|okhttp|java|bot|spider|crawler|Postman|Apache-HttpClient|HeadlessChrome|xx032_))</span> &#123;</span><br><span class="line">    <span class="attribute">set</span> <span class="variable">$block_request</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 3. 例外：如果是 UptimeRobot，则取消拦截标记</span></span><br><span class="line"><span class="attribute">if</span> (<span class="variable">$http_user_agent</span> <span class="regexp">~* &quot;UptimeRobot&quot;)</span> &#123;</span><br><span class="line">    <span class="attribute">set</span> <span class="variable">$block_request</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 4. 最终判断：如果标记仍然为1，则执行拦截</span></span><br><span class="line"><span class="attribute">if</span> (<span class="variable">$block_request</span> = <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="attribute">return</span> <span class="number">403</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">###### 非浏览器请求拦截 ######</span></span><br></pre></td></tr></table></figure><p>不过，上述拦截只是治标不治本，脚本里面写个ua就可以绕过这一层。我主要是想拦截那些演都不演的脚本，直接请求头是python requests真恶心人吧。</p><p>另外，根据AI提供的建议，上述的nginx配置性能会比较差，更推荐在http配置里面使用map来处理。但是我的个人站点日活特别低，也不在乎这个性能差距了。主要是在location里面写这一层拦截是比较方便的，我可以直接在1panel的面板里面修改，如果设置成map需要在nginx的根配置文件http块里面写，太麻烦了。</p>]]></content>
    
    
    <summary type="html">配置nginx拦截非浏览器请求，避免有脚本刷Artalk评论</summary>
    
    
    
    <category term="差生文具多" scheme="https://blog.musnow.top/categories/%E5%B7%AE%E7%94%9F%E6%96%87%E5%85%B7%E5%A4%9A/"/>
    
    <category term="博客建站" scheme="https://blog.musnow.top/categories/%E5%B7%AE%E7%94%9F%E6%96%87%E5%85%B7%E5%A4%9A/%E5%8D%9A%E5%AE%A2%E5%BB%BA%E7%AB%99/"/>
    
    
    <category term="博客建站" scheme="https://blog.musnow.top/tags/%E5%8D%9A%E5%AE%A2%E5%BB%BA%E7%AB%99/"/>
    
    <category term="Hexo" scheme="https://blog.musnow.top/tags/Hexo/"/>
    
    <category term="Nginx" scheme="https://blog.musnow.top/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>【JAVA】SDKMAN环境管理工具</title>
    <link href="https://blog.musnow.top/posts/4576584980/"/>
    <id>https://blog.musnow.top/posts/4576584980/</id>
    <published>2025-08-02T10:42:04.000Z</published>
    <updated>2025-08-04T00:12:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍了环境管理工具SDKMAN，他可以辅助我们管理多个版本的JDK、Gradle和Maven环境，并可快捷切换。</p><h2 id="1-前言">1. 前言</h2><p>在实际学习和工作中，我们经常会需要配置不懂JDK版本的环境，同时这些JAVA的项目有些使用了Gradle管理依赖项，有些又使用的是Maven，不同项目之间使用的工具链版本也不一定相同，这就需要我们安装不同版本的依赖工具。</p><p>如果完全依靠我们<strong>人工</strong>去安装不同版本的工具链并自己去选定工具所在目录和设置诸如<code>JAVA_HOME</code>环境变量，就很容易出错。大家都知道，编程开发这边很多纯命令行的工具是很难卸载干净的，纯靠自己人工管理，还非常容易把自己电脑上的环境弄得一团糟。</p><p>之前本站已经给大家引入过了不同版本python的管理工具<a href="https://blog.musnow.top/posts/4192678800">uv</a>，uv不仅可以管理不同版本的python，还可以帮我们代理python venv虚拟环境和依赖下载，方便我们快捷启动某个项目。</p><h2 id="2-下载安装">2. 下载安装</h2><blockquote><p>官网：<a href="https://sdkman.io/">https://sdkman.io/</a></p></blockquote><p>安装sdkman非常简单。直接用如下命令就可以了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -s <span class="string">&quot;https://get.sdkman.io&quot;</span> | bash</span><br></pre></td></tr></table></figure><p>需要注意的是，sdkman是对类unix系统设计的，所以并不支持windows。在mac上安装sdkman之前，需要先安装homebrew。</p><p>安装完毕了之后，需要执行一下这个source命令让sdkman生效（注意路径中的参数是你自己的用户名，sdkman的安装工具安装结束后会打印出这个source命令）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> <span class="string">&quot;/Users/mothra/.sdkman/bin/sdkman-init.sh&quot;</span></span><br></pre></td></tr></table></figure><p>使用<code>sdk help</code>命令确定是否已经安装成功，后续的操作都是用sdk命令来执行。</p><h2 id="3-基本使用">3. 基本使用</h2><h3 id="3-1-下载不同版本的工具">3.1. 下载不同版本的工具</h3><p>sdkman可以管理Maven、Gradle和JDK的版本，使用如下命令查看能够直接通过sdkman安装的版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sdk list 工具类型</span><br></pre></td></tr></table></figure><p>比如使用<code>sdk list java</code>就能得到可以安装的JDK版本</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/08/3a639a4e4f859936e0212781054817b5.webp" alt="image.png"></p><p>这里优先推荐安装亚马逊的JDK，因为其比较完善还免费商用。使用如下命令即可安装：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sdk install java 17.0.14-amzn</span><br></pre></td></tr></table></figure><p>这里的下载源不在国内，所以下载的时候可能因为网络问题出现波动，你懂的~</p><p>下载Gradle也是同理</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sdk list gradle         <span class="comment"># 查看可以安装的版本</span></span><br><span class="line">sdk install gradle 7.5  <span class="comment"># gradle没有不同的提供商，所以只需要版本号就行了</span></span><br></pre></td></tr></table></figure><h3 id="3-2-选择不同版本的工具">3.2. 选择不同版本的工具</h3><p>选择工具有两个方式，一个是在当前终端临时生效，另外一个是全局生效（默认值）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sdk use 工具 工具版本</span><br><span class="line">sdk default 工具 工具版本</span><br></pre></td></tr></table></figure><p>比如我想在当前终端使用JDK17，那就使用如下命令。想全局设置就把use改成default即可。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sdk use java 17.0.14-amzn</span><br></pre></td></tr></table></figure><h3 id="3-3-添加已有的JDK">3.3. 添加已有的JDK</h3><p>如果在下载sdkman之前已经有JDK了（比如idea自动下载的JDK），而且后续还想使用这个JDK，要怎么做？</p><blockquote><p>Python uv工具能自动扫描出已有的python解析器安装路径，但是sdkman没有扫描功能。</p></blockquote><p>首先我们需要知道当前已经安装的JDK的位置在哪里，如果你之前配置过<code>JAVA_HOME</code>环境变量，可以直接使用如下命令找到它</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/libexec/java_home -V</span><br></pre></td></tr></table></figure><p>比如我的mac上当前使用的是idea下载的JDK</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">❯ /usr/libexec/java_home -V</span><br><span class="line">Matching Java Virtual Machines (1):</span><br><span class="line">    23.0.1 (arm64) <span class="string">&quot;Oracle Corporation&quot;</span> - <span class="string">&quot;OpenJDK 23.0.1&quot;</span> /Users/mothra/Library/Java/JavaVirtualMachines/openjdk-23.0.1/Contents/Home</span><br><span class="line">/Users/mothra/Library/Java/JavaVirtualMachines/openjdk-23.0.1/Contents/Home</span><br></pre></td></tr></table></figure><p>如果我们想用sdkman管理这个JDK，需要将这个home路径加到sdkman的管理目录<code>~/.sdkman/candidates</code>下。这个目录中会有sdkman安装的各类JDK，同时我们也可以在这个路径下添加软连接，把我们自己安装的JDK引入进来。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /Users/mothra/.sdkman/var/metadata  <span class="comment"># 缓存目录</span></span><br><span class="line"><span class="built_in">mkdir</span> -p ~/.sdkman/candidates/java</span><br><span class="line"><span class="built_in">cd</span> ~/.sdkman/candidates/java</span><br><span class="line"><span class="comment"># 直接利用环境变量指向的路径，软连接到sdkman目录下</span></span><br><span class="line"><span class="built_in">ln</span> -s <span class="variable">$JAVA_HOME</span> 23.0.1-openjdk</span><br><span class="line"><span class="comment"># 刷新</span></span><br><span class="line">sdk flush java</span><br><span class="line"><span class="comment"># 使用</span></span><br><span class="line">sdk use java 23.0.1-openjdk</span><br></pre></td></tr></table></figure><p>命令执行输出如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">~/.sdkman/candidates/java             </span><br><span class="line">❯ ln -s $JAVA_HOME 23.0.1-openjdk</span><br><span class="line"></span><br><span class="line">~/.sdkman/candidates/java             </span><br><span class="line">❯ sdk use java 23.0.1-openjdk</span><br><span class="line">Setting java version 23.0.1-openjdk as default.</span><br><span class="line"></span><br><span class="line">Using java version 23.0.1-openjdk in this shell.</span><br></pre></td></tr></table></figure><p>刷新了之后，是可以在<code>sdk list java</code>的最底部看到我们添加的这个JDK的，其会被显示为Unclassified未分组状态</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/08/66323a66427a5f7f7491620945f24db0.webp" alt="image.png"></p><p>除了上面这种手动软连接的方式，更推荐的方式是直接使用install命令的第三个参数path来直接指定安装。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sdk install java 名字 路径</span><br></pre></td></tr></table></figure><p>注意确认你指定的JDK所在path是存在的！</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">❯ sdk install java 23openjdk <span class="variable">$JAVA_HOME</span></span><br><span class="line">Linking java 23openjdk to /Users/mothra/.sdkman/candidates/java/current</span><br><span class="line">Done installing!</span><br></pre></td></tr></table></figure><p>安装了以后同样是使用<code>sdk use java 23openjdk</code>指定名字来使用这个JDK</p><h2 id="4-The-end">4. The end</h2><p>到这里就结束啦，sdkman的基本使用就是上面的几个命令，很简单的操作，就解决了我们自己管理环境的种种麻烦。</p><p>不过需要注意的是，sdkman设置的环境只在终端里面生效，idea里面的项目JDK和Gradle设置大概率<strong>不会</strong>跟着sdkman设置的版本走，还是需要在idea里面单独设置的！</p>]]></content>
    
    
    <summary type="html">本文介绍了环境管理工具SDKMAN，他可以辅助我们管理多个版本的JDK、Gradle和Maven环境，并可快捷切换。</summary>
    
    
    
    <category term="编程学习" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="测试开发那些事" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91%E9%82%A3%E4%BA%9B%E4%BA%8B/"/>
    
    
    <category term="测试开发" scheme="https://blog.musnow.top/tags/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91/"/>
    
    <category term="JAVA" scheme="https://blog.musnow.top/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>【SLAM】在ROS下发布ORB_SLAM2的位姿（RGB-D）</title>
    <link href="https://blog.musnow.top/posts/1101664024/"/>
    <id>https://blog.musnow.top/posts/1101664024/</id>
    <published>2025-05-31T09:10:00.000Z</published>
    <updated>2025-06-02T01:46:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍了如何修改ORB_SLAM2的ROS Demo，使其能够在建图的同时发布位姿。本文只涉及ROS RGB-D的代码修改。</p><h2 id="修改代码">修改代码</h2><p>直接进入正题，需要修改的代码文件是<code>Examples/ROS/ORB_SLAM2/src/ros_rgbd.cc</code>这个demo文件。ORB_SLAM2本身其实已经存放了相机的位姿和路径数据了，也提供了获取数据的接口，我们要做的就是将其转成ROS能够支持的格式并通过Topic发布出去。</p><p>首先添加头文件</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;tf/transform_broadcaster.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;../../../include/Converter.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;nav_msgs/Path.h&gt;</span></span></span><br></pre></td></tr></table></figure><p>然后在ImageGrabber类后方，main函数之前全局声明下面三个变量，注意是<strong>全局声明</strong>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ros::Publisher pose_pub;</span><br><span class="line">nav_msgs::Path rgbd_path;</span><br><span class="line">ros::Publisher rgbd_path_pub;</span><br></pre></td></tr></table></figure><p>main函数中<code>ros::spin();</code>之<strong>前</strong>新增如下代码，这里设置了我们发布位姿和路径的两个Topic，后续需要在rviz里面订阅这两个Topic来看到发布的位姿数据。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 发布位姿</span></span><br><span class="line">pose_pub = nh.<span class="built_in">advertise</span>&lt;geometry_msgs::PoseStamped&gt;(<span class="string">&quot;ORB_SLAM/pose&quot;</span>, <span class="number">5</span>);</span><br><span class="line"><span class="comment">// 发布路径</span></span><br><span class="line">rgbd_path_pub = nh.<span class="built_in">advertise</span>&lt;nav_msgs::Path&gt;(<span class="string">&quot;ORB_SLAM/path&quot;</span>, <span class="number">10</span>);</span><br></pre></td></tr></table></figure><p>在<code>ImageGrabber::GrabRGBD</code>函数的最后修改，修改和添加如下内容。这里是用了一个<code>cv::Mat</code>存放了<code>mpSLAM-&gt;TrackRGBD</code>函数的返回结果（之前是没有用变量存放的）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 发布位姿</span></span><br><span class="line">cv::Mat Tcw;</span><br><span class="line">Tcw = mpSLAM-&gt;<span class="built_in">TrackRGBD</span>(cv_ptrRGB-&gt;image, cv_ptrD-&gt;image, cv_ptrRGB-&gt;header.stamp.<span class="built_in">toSec</span>());</span><br><span class="line"><span class="keyword">if</span> (!Tcw.<span class="built_in">empty</span>()) <span class="comment">// 注意需要判断是否为空，可能为空</span></span><br><span class="line">&#123;</span><br><span class="line">    geometry_msgs::PoseStamped pose;</span><br><span class="line">    pose.header.stamp = ros::Time::<span class="built_in">now</span>();</span><br><span class="line">    pose.header.frame_id = <span class="string">&quot;map&quot;</span>; <span class="comment">// 注意这里，必须是map而不是path</span></span><br><span class="line"></span><br><span class="line">    cv::Mat Rwc = Tcw.<span class="built_in">rowRange</span>(<span class="number">0</span>, <span class="number">3</span>).<span class="built_in">colRange</span>(<span class="number">0</span>, <span class="number">3</span>).<span class="built_in">t</span>(); <span class="comment">// Rotation information</span></span><br><span class="line">    cv::Mat twc = -Rwc * Tcw.<span class="built_in">rowRange</span>(<span class="number">0</span>, <span class="number">3</span>).<span class="built_in">col</span>(<span class="number">3</span>);      <span class="comment">// translation information</span></span><br><span class="line">    vector&lt;<span class="type">float</span>&gt; q = ORB_SLAM2::Converter::<span class="built_in">toQuaternion</span>(Rwc);</span><br><span class="line"></span><br><span class="line">    tf::Transform new_transform;</span><br><span class="line">    new_transform.<span class="built_in">setOrigin</span>(tf::<span class="built_in">Vector3</span>(twc.<span class="built_in">at</span>&lt;<span class="type">float</span>&gt;(<span class="number">0</span>, <span class="number">0</span>), twc.<span class="built_in">at</span>&lt;<span class="type">float</span>&gt;(<span class="number">0</span>, <span class="number">1</span>), twc.<span class="built_in">at</span>&lt;<span class="type">float</span>&gt;(<span class="number">0</span>, <span class="number">2</span>)));</span><br><span class="line">    <span class="function">tf::Quaternion <span class="title">quaternion</span><span class="params">(q[<span class="number">0</span>], q[<span class="number">1</span>], q[<span class="number">2</span>], q[<span class="number">3</span>])</span></span>;</span><br><span class="line">    new_transform.<span class="built_in">setRotation</span>(quaternion);</span><br><span class="line">    tf::<span class="built_in">poseTFToMsg</span>(new_transform, pose.pose);</span><br><span class="line">    pose_pub.<span class="built_in">publish</span>(pose); <span class="comment">// 发布位姿</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发布路径</span></span><br><span class="line">    rgbd_path.header.frame_id = <span class="string">&quot;map&quot;</span>;</span><br><span class="line">    rgbd_path.header.stamp = ros::Time::<span class="built_in">now</span>();</span><br><span class="line">    rgbd_path.poses.<span class="built_in">push_back</span>(pose);</span><br><span class="line">    rgbd_path_pub.<span class="built_in">publish</span>(rgbd_path);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到这里就修改完成了，先使用项目根目录下的<code>build.sh</code>脚本编译ORB_SLAM2普通版本，然后使用<code>build_ros.sh</code>脚本编译ROS版本。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ORB_SLAM2 <span class="comment"># 先进入文件夹</span></span><br><span class="line"><span class="built_in">export</span> ROS_PACKAGE_PATH=<span class="variable">$ROS_PACKAGE_PATH</span>:<span class="variable">$PWD</span>/Examples/ROS/ORB_SLAM2</span><br><span class="line">./build.sh</span><br><span class="line">./build_ros.sh</span><br></pre></td></tr></table></figure><p>下面给出完整的demo代码，也可以在<a href="https://github.com/musnows/ORB_SLAM2/commit/9e018fc5baea03f707e9d75d58c4b14471c375d6">Github</a>查看。</p><details class="toggle" ><summary class="toggle-button" style="">修改后ros_rgbd.cc的完整代码</summary><div class="toggle-content"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;chrono&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ros/ros.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cv_bridge/cv_bridge.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;message_filters/subscriber.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;message_filters/time_synchronizer.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;message_filters/sync_policies/approximate_time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;opencv2/core/core.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;../../../include/System.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;tf/transform_broadcaster.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;../../../include/Converter.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;nav_msgs/Path.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ImageGrabber</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">ImageGrabber</span>(ORB_SLAM2::System *pSLAM) : <span class="built_in">mpSLAM</span>(pSLAM) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">GrabRGBD</span><span class="params">(<span class="type">const</span> sensor_msgs::ImageConstPtr &amp;msgRGB, <span class="type">const</span> sensor_msgs::ImageConstPtr &amp;msgD)</span></span>;</span><br><span class="line"></span><br><span class="line">    ORB_SLAM2::System *mpSLAM;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">ros::Publisher pose_pub;</span><br><span class="line">nav_msgs::Path rgbd_path;</span><br><span class="line">ros::Publisher rgbd_path_pub;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ros::<span class="built_in">init</span>(argc, argv, <span class="string">&quot;RGBD&quot;</span>);</span><br><span class="line">    ros::<span class="built_in">start</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (argc != <span class="number">3</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cerr &lt;&lt; endl</span><br><span class="line">             &lt;&lt; <span class="string">&quot;Usage: rosrun ORB_SLAM2 RGBD path_to_vocabulary path_to_settings&quot;</span> &lt;&lt; endl;</span><br><span class="line">        ros::<span class="built_in">shutdown</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Create SLAM system. It initializes all system threads and gets ready to process frames.</span></span><br><span class="line">    <span class="function">ORB_SLAM2::System <span class="title">SLAM</span><span class="params">(argv[<span class="number">1</span>], argv[<span class="number">2</span>], ORB_SLAM2::System::RGBD, <span class="literal">true</span>)</span></span>;</span><br><span class="line">    SLAM.<span class="built_in">LoadMap</span>(<span class="string">&quot;/home/bill/work/3dslam/orb_slam2/MapPointandKeyFrame.bin&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function">ImageGrabber <span class="title">igb</span><span class="params">(&amp;SLAM)</span></span>;</span><br><span class="line"></span><br><span class="line">    ros::NodeHandle nh;</span><br><span class="line"></span><br><span class="line">    <span class="function">message_filters::Subscriber&lt;sensor_msgs::Image&gt; <span class="title">rgb_sub</span><span class="params">(nh, <span class="string">&quot;/camera/rgb/image_raw&quot;</span>, <span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="function">message_filters::Subscriber&lt;sensor_msgs::Image&gt; <span class="title">depth_sub</span><span class="params">(nh, <span class="string">&quot;/camera/depth/image_raw&quot;</span>, <span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="keyword">typedef</span> message_filters::sync_policies::ApproximateTime&lt;sensor_msgs::Image, sensor_msgs::Image&gt; sync_pol;</span><br><span class="line">    <span class="function">message_filters::Synchronizer&lt;sync_pol&gt; <span class="title">sync</span><span class="params">(sync_pol(<span class="number">10</span>), rgb_sub, depth_sub)</span></span>;</span><br><span class="line">    sync.<span class="built_in">registerCallback</span>(boost::<span class="built_in">bind</span>(&amp;ImageGrabber::GrabRGBD, &amp;igb, _1, _2));</span><br><span class="line">    pose_pub = nh.<span class="built_in">advertise</span>&lt;geometry_msgs::PoseStamped&gt;(<span class="string">&quot;ORB_SLAM/pose&quot;</span>, <span class="number">5</span>); <span class="comment">// 发布位姿</span></span><br><span class="line">    rgbd_path_pub = nh.<span class="built_in">advertise</span>&lt;nav_msgs::Path&gt;(<span class="string">&quot;ORB_SLAM/path&quot;</span>, <span class="number">10</span>);       <span class="comment">// 发布路径</span></span><br><span class="line"></span><br><span class="line">    ros::<span class="built_in">spin</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Stop all threads</span></span><br><span class="line">    SLAM.<span class="built_in">Shutdown</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Save camera trajectory</span></span><br><span class="line">    SLAM.<span class="built_in">SaveKeyFrameTrajectoryTUM</span>(<span class="string">&quot;KeyFrameTrajectory.txt&quot;</span>);</span><br><span class="line">    SLAM.<span class="built_in">SaveMap</span>(<span class="string">&quot;MapPointandKeyFrame.bin&quot;</span>);</span><br><span class="line"></span><br><span class="line">    ros::<span class="built_in">shutdown</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ImageGrabber::GrabRGBD</span><span class="params">(<span class="type">const</span> sensor_msgs::ImageConstPtr &amp;msgRGB, <span class="type">const</span> sensor_msgs::ImageConstPtr &amp;msgD)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// Copy the ros image message to cv::Mat.</span></span><br><span class="line">    cv_bridge::CvImageConstPtr cv_ptrRGB;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        cv_ptrRGB = cv_bridge::<span class="built_in">toCvShare</span>(msgRGB);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">catch</span> (cv_bridge::Exception &amp;e)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">ROS_ERROR</span>(<span class="string">&quot;cv_bridge exception: %s&quot;</span>, e.<span class="built_in">what</span>());</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cv_bridge::CvImageConstPtr cv_ptrD;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        cv_ptrD = cv_bridge::<span class="built_in">toCvShare</span>(msgD);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">catch</span> (cv_bridge::Exception &amp;e)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">ROS_ERROR</span>(<span class="string">&quot;cv_bridge exception: %s&quot;</span>, e.<span class="built_in">what</span>());</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 发布位姿</span></span><br><span class="line">    cv::Mat Tcw;</span><br><span class="line">    Tcw = mpSLAM-&gt;<span class="built_in">TrackRGBD</span>(cv_ptrRGB-&gt;image, cv_ptrD-&gt;image, cv_ptrRGB-&gt;header.stamp.<span class="built_in">toSec</span>());</span><br><span class="line">    <span class="keyword">if</span> (!Tcw.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        geometry_msgs::PoseStamped pose;</span><br><span class="line">        pose.header.stamp = ros::Time::<span class="built_in">now</span>();</span><br><span class="line">        pose.header.frame_id = <span class="string">&quot;map&quot;</span>; <span class="comment">// 注意这里，必须是map而不是path</span></span><br><span class="line"></span><br><span class="line">        cv::Mat Rwc = Tcw.<span class="built_in">rowRange</span>(<span class="number">0</span>, <span class="number">3</span>).<span class="built_in">colRange</span>(<span class="number">0</span>, <span class="number">3</span>).<span class="built_in">t</span>(); <span class="comment">// Rotation information</span></span><br><span class="line">        cv::Mat twc = -Rwc * Tcw.<span class="built_in">rowRange</span>(<span class="number">0</span>, <span class="number">3</span>).<span class="built_in">col</span>(<span class="number">3</span>);      <span class="comment">// translation information</span></span><br><span class="line">        vector&lt;<span class="type">float</span>&gt; q = ORB_SLAM2::Converter::<span class="built_in">toQuaternion</span>(Rwc);</span><br><span class="line"></span><br><span class="line">        tf::Transform new_transform;</span><br><span class="line">        new_transform.<span class="built_in">setOrigin</span>(tf::<span class="built_in">Vector3</span>(twc.<span class="built_in">at</span>&lt;<span class="type">float</span>&gt;(<span class="number">0</span>, <span class="number">0</span>), twc.<span class="built_in">at</span>&lt;<span class="type">float</span>&gt;(<span class="number">0</span>, <span class="number">1</span>), twc.<span class="built_in">at</span>&lt;<span class="type">float</span>&gt;(<span class="number">0</span>, <span class="number">2</span>)));</span><br><span class="line">        <span class="function">tf::Quaternion <span class="title">quaternion</span><span class="params">(q[<span class="number">0</span>], q[<span class="number">1</span>], q[<span class="number">2</span>], q[<span class="number">3</span>])</span></span>;</span><br><span class="line">        new_transform.<span class="built_in">setRotation</span>(quaternion);</span><br><span class="line">        tf::<span class="built_in">poseTFToMsg</span>(new_transform, pose.pose);</span><br><span class="line">        pose_pub.<span class="built_in">publish</span>(pose); <span class="comment">// 发布位姿</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 发布路径</span></span><br><span class="line">        rgbd_path.header.frame_id = <span class="string">&quot;map&quot;</span>;</span><br><span class="line">        rgbd_path.header.stamp = ros::Time::<span class="built_in">now</span>();</span><br><span class="line">        rgbd_path.poses.<span class="built_in">push_back</span>(pose);</span><br><span class="line">        rgbd_path_pub.<span class="built_in">publish</span>(rgbd_path);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div></details><p>截个图，证明一下俺的代码是能正常编译的。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/05/33ecd0262d5239e316d208e49c1f4230.webp" alt="image.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[ 77%] Linking CXX executable ../Stereo</span><br><span class="line">[ 88%] Linking CXX executable ../RGBD</span><br><span class="line">[ 88%] Built target Stereo</span><br><span class="line">[ 88%] Built target RGBD</span><br><span class="line">[100%] Linking CXX executable ../MonoAR</span><br><span class="line">[100%] Built target MonoAR</span><br></pre></td></tr></table></figure><h2 id="测试效果">测试效果</h2><p>先在一个终端里面执行roscore命令，在另外一个终端里面使用<strong>rviz</strong>命令启动前端查看器。</p><p>另外再开一个终端，以RGBD模式启动ORB_SLAM2程序，注意需要修改TUM1.yaml文件中的DepthMapFactor为<code>1.0</code>，该参数ROS需要修改为<code>1.0</code>，直接运行是<code>5000.0</code>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> ROS_PACKAGE_PATH=$ROS_PACKAGE_PATH:$PWD/Examples/ROS/ORB_SLAM2</span><br><span class="line">rosrun ORB_SLAM2 RGBD Vocabulary/ORBvoc.txt Examples/RGB-D/TUM<span class="number">1.</span>yaml</span><br></pre></td></tr></table></figure><p>在左下角add里面选择<code>by topic</code>，订阅我们刚刚在ORB_SLAM2中发布的两个topic，注意需要启动ORB_SLAM2之后才能看到这两个topic。</p><blockquote><p>下图是从参考博客里面借来的，因为我自己忘记截图了。</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/05/290a78acf0230dc816889465607c7ab3.webp" alt="image.png"></p><p>rviz订阅完毕这两个topic之后，就可以开始播放tum数据集的bag文件了</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rosbag play \</span><br><span class="line">    datasets/TUM/rgbd_dataset_freiburg1_desk.bag \</span><br><span class="line">    /camera/rgb/image_color:=/camera/rgb/image_raw \</span><br><span class="line">    /camera/depth/image:=/camera/depth/image_raw</span><br></pre></td></tr></table></figure><p>能够观察到红色的箭头代表相机位姿，绿色线条代表相机走过的路径。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/05/4726ebdf968856e3c73fef762580daad.webp" alt="image.png"></p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/05/fceab2ff6e68086b764c316f5fae8a1b.webp" alt="image.png"></p><p>至此，位姿发布功能测试成功。</p><h2 id="参考博客">参考博客</h2><p>这里要提醒一下，参考博客中给出的代码是错的，主要是frame_id设置的不对，在我的测试环境中frame_id必须要设置为map，而不是path。如果你在修改了代码之后遇到了<code>Fix Frame [map] does not exist</code>的报错，就说明你的frame_id设置错误了。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/05/1c22f2d0bf3f055aa645d5a3ef503d19.webp" alt="image.png"></p><p>参考博客：</p><ul><li><a href="https://blog.csdn.net/YiYeZhiNian/article/details/109384099">blog.csdn.net/YiYeZhiNian/article/details/109384099</a></li><li><a href="https://blog.csdn.net/qinqinxiansheng/article/details/108288646">blog.csdn.net/qinqinxiansheng/article/details/108288646</a></li><li><a href="https://github.com/raulmur/ORB_SLAM2/issues/597">github.com/raulmur/ORB_SLAM2/issues/597</a></li></ul>]]></content>
    
    
    <summary type="html">本文介绍了如何修改ORB_SLAM2的ROS Demo，使其能够在建图的同时发布位姿。本文只涉及ROS RGB-D的代码修改。</summary>
    
    
    
    <category term="编程学习" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="项目开发记录" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="Linux" scheme="https://blog.musnow.top/tags/Linux/"/>
    
    <category term="SLAM" scheme="https://blog.musnow.top/tags/SLAM/"/>
    
  </entry>
  
  <entry>
    <title>【SLAM】使用evo工具来绘制ORB_SLAM2轨迹图，评估ATE&#92;RPE指标</title>
    <link href="https://blog.musnow.top/posts/2657887526/"/>
    <id>https://blog.musnow.top/posts/2657887526/</id>
    <published>2025-05-29T04:09:24.000Z</published>
    <updated>2025-05-31T12:48:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍了如何使用evo工具来绘制ORB_SLAM2的轨迹图和进行ATE\RPE评估。</p><blockquote><p>参考博客：<a href="https://zhaoxuhui.top/blog/2021/03/27/evo-slam-trajectory-evaluation.html">SLAM轨迹精度评价工具evo简介与使用</a></p></blockquote><h2 id="1-说明">1. 说明</h2><p>为了让SLAM建图的结果能够更好的展示出来，我们可以使用github开源的evo工具集<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>来对ORB_SLAM2生成的相机轨迹进行绘制，展现出绘制后的结果图。同时进行ape和rpe评估，评估结果也是我们SLAM系统和其他SLAM系统进行对比的重要指标。</p><p>github开源地址：<a href="https://github.com/MichaelGrupp/evo">https://github.com/MichaelGrupp/evo</a></p><h2 id="2-工具安装">2. 工具安装</h2><p>evo工具可以直接使用pip来安装，命令如下，使用了清华镜像源。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install evo -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure><p>第一次安装的时候报错了，提示是缺少了Fortran compiler。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">customize UnixCCompiler</span><br><span class="line">customize UnixCCompiler using build_clib</span><br><span class="line">building &#x27;dfftpack&#x27; library</span><br><span class="line">error: library dfftpack has Fortran sources but no Fortran compiler found</span><br></pre></td></tr></table></figure><p>咨询GPT后，说是需要安装gfortran包</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get install -y gfortran</span><br></pre></td></tr></table></figure><blockquote><p>如果安装gfortran的时候连不上ports.ubuntu.com站点，可以使用如下命令修改镜像源。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> sed -i <span class="string">&#x27;s#ports.ubuntu.com#mirrors.ustc.edu.cn/ubuntu-ports#g&#x27;</span> /etc/apt/sources.list</span><br></pre></td></tr></table></figure></blockquote><p>默认情况下pip会把evo工具安装在用户家目录下，所以需要把这个目录放入PATH中才能使用evo命令。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$HOME</span>/.local/bin/</span><br></pre></td></tr></table></figure><h2 id="3-工具使用">3. 工具使用</h2><h3 id="3-1-轨迹绘制">3.1. 轨迹绘制</h3><p>绘制轨迹的命令如下，这里的参数包含了ORB_SLAM2运行后产生的相机轨迹结果CameraTrajectory.txt，以及用作参考（ref）的TUM数据集groundtruth真实值。同时提供<code>-a</code>选项来对齐相机轨迹结果和TUM数据集对真实值，<code>--plot</code>参数代表我们当前需要做的操作是显示轨迹图。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">evo_traj tum \</span><br><span class="line">    CameraTrajectory.txt \</span><br><span class="line">    --ref=datasets/TUM/rgbd_dataset_freiburg1_desk/groundtruth.txt \</span><br><span class="line">    --plot -a</span><br></pre></td></tr></table></figure><p>运行效果如下，可以看到蓝色的是我们运行出来的结果，灰色虚线是TUM数据集的真实值，二者基本拟合，效果不错。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/05/95e2da1799dad391d8d747a7e1da8472.webp" alt="image.png"></p><p>图中出现了一个报错，会导致我们没有办法挪动GUI中的图像（本来是可以3D挪动的）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">QStandardPaths: wrong ownership on runtime directory /run/user/1000, 1000 instead of 0</span><br></pre></td></tr></table></figure><p>解决办法就是修改下面两个目录的权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo chown root:root /run/user/1000</span><br><span class="line">sudo chmod 700 /run/user/1000</span><br></pre></td></tr></table></figure><p>修改之后重新启动工具，就可以正常显示并且移动了</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/05/8c8e54456d51520e90ae4e1aaece45f7.webp" alt="image.png"></p><h3 id="3-2-ATE-RPE评估">3.2. ATE\RPE评估</h3><p>除了绘制轨迹图外，evo工具还可以用来输出ORB_SLAM2运行结果的<strong>绝对位姿误差ATE</strong>，对应的命令是evo_ape。如果要显示<strong>相对位姿误差RPE</strong>就用evo_rpe命令。</p><p>本文只涉及evo工具使用，关于ATE和RPE这两个指标的含义，可以去参考TUM针对SLAM系统性能评估的论文：A benchmark for the evaluation of RGB-D SLAM systems<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup>。</p><p>在我参考的evo工具使用博客中有下面这一句话：</p><blockquote><p>大多数中论文的指标为测量绝对误差，在进行评估时，若经过了缩放，在命令行中应将真实轨迹（参考轨迹）放在估计轨迹（计算轨迹）前方，避免在缩放时参考轨迹错误而造成误差被错误缩放。</p></blockquote><p>说人话就是在使用这两个位姿评估命令的时候，groundtruth必须要在CameraTrajectory<strong>之前</strong>传入。示例命令如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">evo_ape tum \</span><br><span class="line">    datasets/TUM/rgbd_dataset_freiburg1_desk/groundtruth.txt \</span><br><span class="line">    CameraTrajectory.txt \</span><br><span class="line">    --plot -as</span><br></pre></td></tr></table></figure><p>运行之后会绘制出一张APE的结果图，展现了整体的APE波动。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/05/bcfc6d91837927a0b2aa5c21b72ea9c1.webp" alt="image.png"></p><p>终端中会显示各项指标的计算结果：</p><ul><li><code>max</code>：最大误差；</li><li><code>mean</code>：平均误差；</li><li><code>median</code>：误差中位数；</li><li><code>min</code>：最小误差；</li><li><code>rmse</code>：均方根误差；</li><li><code>sse</code>：和方差、误差平方和；</li><li><code>std</code>：标准差。</li></ul><p>下面这个是ORB_SLAM2针对tum fr1/desk序列的的运行结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">APE w.r.t. translation part (m)</span><br><span class="line">(with Sim(3) Umeyama alignment)</span><br><span class="line"></span><br><span class="line">       max    0.070657</span><br><span class="line">      mean    0.012891</span><br><span class="line">    median    0.010890</span><br><span class="line">       min    0.001658</span><br><span class="line">      rmse    0.015674</span><br><span class="line">       sse    0.140522</span><br><span class="line">       std    0.008916</span><br></pre></td></tr></table></figure><p>一般情况下，在论文中可以直接使用RMSE这个<strong>均方根误差</strong>来作为SLAM系统精度的对比指标，该指标越低代表系统误差越低，也就是系统越优秀。</p><h2 id="4-The-end">4. The end</h2><p>本文对evo工具的简单介绍就到这里啦。</p><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p>Grupp M. evo: Python package for the evaluation of odometry and SLAM [EB/OL]. <a href="https://github.com/MichaelGrupp/evo">https://github.com/MichaelGrupp/evo</a>, 2017. <a href="#fnref1" class="footnote-backref">↩︎</a></p></li><li id="fn2" class="footnote-item"><p>J. Sturm, N. Engelhard, F. Endres, W. Burgard and D. Cremers, “A benchmark for the evaluation of RGB-D SLAM systems,” 2012 IEEE/RSJ International Conference on Intelligent Robots and Systems, Vilamoura-Algarve, Portugal, 2012, pp. 573-580, doi: <a href="https://cvg.cit.tum.de/_media/spezial/bib/sturm12iros.pdf">10.1109/IROS.2012.6385773</a>. <a href="#fnref2" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content>
    
    
    <summary type="html">本文介绍了如何使用evo工具来绘制ORB_SLAM2的轨迹图和进行ATE&#92;RPE评估。</summary>
    
    
    
    <category term="编程学习" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="项目开发记录" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="Linux" scheme="https://blog.musnow.top/tags/Linux/"/>
    
    <category term="SLAM" scheme="https://blog.musnow.top/tags/SLAM/"/>
    
  </entry>
  
  <entry>
    <title>【Mac】拒绝parallels toolbox，从我做起！</title>
    <link href="https://blog.musnow.top/posts/9085567599/"/>
    <id>https://blog.musnow.top/posts/9085567599/</id>
    <published>2025-05-26T00:57:24.000Z</published>
    <updated>2025-05-26T01:53:09.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文是个纯吐槽文，写的比较随意，仅代表个人观点。</p></blockquote><p>前几天，为了尝试parallels虚拟机的“融合模式”，去官网重新下了最新版本的parallels虚拟机（AppStore里面的版本是没有融合模式的），当时买macbook air送了两年的标准版，可以直接激活使用。</p><p>简单来说，“融合模式”就是可以直接在mac里面以原生软件的方式打开windows虚拟机里面的软件，软件窗口直接在mac里面打开而不是在虚拟机里面打开，但尝试之后发现<strong>软件会非常糊</strong>，个人认为效果还不如直接切换桌面在虚拟机里面用。只是尝试了一小会之后就关闭了融合模式。</p><p>但是，问题就来了，随着这个官网下载的parallels一同安装的，还有一个<strong>parallels toolbox</strong>，我本来以为这个是用来控制虚拟机的软件，所以就直接允许安装了。没想到安装了之后是一系列烦人事情的开始。</p><blockquote><p>实际上：<code>parallels tools</code>是在虚拟机内部安装的，用于控制虚拟机，实现剪贴板同步等功能。<code>parallels toolbox</code>是在mac上安装的一个用来优化mac使用的软件，和虚拟机没有任何关系！</p></blockquote><p>我有另外一台windows台式机，更新完毕parallels虚拟机之后就去打游戏了，第二天回来继续用mac，一看，我靠，<strong>桌面上的文件夹怎么都没了</strong>？我的毕设论文和代码可都在桌面上啊，蛋糕了！</p><p>第一反应是更新parallels虚拟机重新初始化windows的时候把桌面的东西都清空了（因为我在这段时间只做过这一个可能影响电脑的操作），检查了一下windows虚拟机里面的回收站和mac自己的垃圾桶，都没有桌面文件夹，干！难道文件丢了？</p><blockquote><p>这里就得提一嘴<a href="https://blog.musnow.top/posts/3543423459/">备份</a>的重要性了，虽然我的东西都放在了桌面上，但是我的毕设论文是用wps同步过的，毕设代码也有git，即便这两个文件夹都丢了，也不会造成实际上的数据丢失，但烦人和恼火是肯定的！</p></blockquote><p>赶快打开vscode记录里面桌面上的工作空间，正常打开……诶？文件没丢？</p><p>再ls看一下，得嘞，桌面上的文件夹都在，还好还好</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">❯ ls ~/Desktop</span><br><span class="line">final  docker</span><br></pre></td></tr></table></figure><p>但是都在，为什么不显示呢？</p><p>那就只能是被设置成了隐藏文件夹，使用<code>command+shift+.</code>这个快捷键，可以在访达里面切换是否显示隐藏文件夹，切换了之后桌面上的文件夹就以暗色显示出来了，确实是被隐藏了。</p><p>那就取消隐藏文件夹吧，在命令行里面执行一下chflags命令来设置或取消隐藏文件夹。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chflags nohidden ~/Desktop <span class="comment"># 取消隐藏文件夹</span></span><br><span class="line">chflags hidden ~/Desktop   <span class="comment"># 隐藏文件夹</span></span><br></pre></td></tr></table></figure><p>好的，问题是解决了，但还得找到罪魁祸首。</p><p>那就是前面提到的parallels toolbox了，这个软件有一个“演示模式”，在mac连接到第二块屏幕的时候，<strong>隐藏桌面上所有文件</strong>。从这个功能的名称和意义来看，它肯定是有点用的，在会议演示的时候桌面上的所有文件都会被自动隐藏，不会被其他人看到你放在桌面上的文件。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/05/5f5f638c492b44fda55b311fad6cf94f.webp" alt="image.png"></p><p>但是！<strong>问题就在于这个演示模式在开启时没有任何说明</strong>，它修改了什么设置你都需要点进这个演示模式的设置里面才能看到，在状态栏也不会有任何现在正处于演示模式的提示，只有一个parallels toolbox的图标。</p><p>而且安装了parallels toolbox之后，<strong>演示模式就会自动开启</strong>，退出parallels toolbox软件也<strong>不会</strong>把桌面的隐藏文件夹恢复。对于像我这种mac长期链接显示器的用户而言，这个工具在安装了之后的效果就是桌面上的文件夹莫名其妙的消失了，这能不吓人吗！</p><p>问题还不止这一个，parallels toolbox软件同时修改了我的电源计划，而且肯定是系统设置里面没有的电源计划，导致我的mac现在在锁屏阶段不会自动熄屏（原本在锁屏页面上过20分钟后会自动关闭屏幕的），这也很烦人，导致我晚上要么把显示器关了要么手动点击mac的睡眠按钮或者直接把mac关机。卸载了parallels toolbox之后重启电脑才恢复。</p><p>总而言之，parallels toolbox软件虽然提供了一些可能有帮助的功能，但是它对系统设置的<strong>无声修改</strong>非常致命！如果是一个对电脑使用不够熟悉的小白，安装虚拟机时无意中安装了这个软件的时候，恐怕很难意识到自己的电脑出了什么问题，光是桌面文件夹消失了这一点就够让人胆战心惊的，我当时真的被吓到了。</p><p>parallels toolbox要么在开启这些辅助功能的时候弹窗明确说明每个功能的作用（我甚至都不记得演示模式开启的时候有没有弹窗提示了，印象里是完全没有的），要么就别自动开启这些功能，特别是<strong>演示模式</strong>功能。</p><p>真无语……</p>]]></content>
    
    
    <summary type="html">被parallels toolbox的演示模式功能给坑惨了，拒绝parallels toolbox，从我做起！</summary>
    
    
    
    <category term="差生文具多" scheme="https://blog.musnow.top/categories/%E5%B7%AE%E7%94%9F%E6%96%87%E5%85%B7%E5%A4%9A/"/>
    
    <category term="电脑使用小贴士" scheme="https://blog.musnow.top/categories/%E5%B7%AE%E7%94%9F%E6%96%87%E5%85%B7%E5%A4%9A/%E7%94%B5%E8%84%91%E4%BD%BF%E7%94%A8%E5%B0%8F%E8%B4%B4%E5%A3%AB/"/>
    
    
    <category term="MacBook" scheme="https://blog.musnow.top/tags/MacBook/"/>
    
  </entry>
  
  <entry>
    <title>【Hexo】将代码块中tab替换为空格（修改tab_replace）</title>
    <link href="https://blog.musnow.top/posts/7827607861/"/>
    <id>https://blog.musnow.top/posts/7827607861/</id>
    <published>2025-05-16T02:00:57.000Z</published>
    <updated>2025-08-02T09:08:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>通过修改hexo配置文件将代码块中出现的tab制表符改成4个空格。</p><h2 id="问题">问题</h2><p>最近发现本站部分代码块中缩进过于离谱，比如<a href="https://blog.musnow.top/posts/4192678800/">python uv</a>这篇博客。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/05/b261108bc9763f858aaa8977257a14e0.webp" alt="image.png"></p><p>检查了此处的md源码之后发现，代码块中的缩进是tab而不是空格，所以导致采用了html默认的8个空格来展示tab，导致缩进过长。</p><h2 id="解决">解决</h2><blockquote><p>参考：<a href="https://blog.csdn.net/qq_41948288/article/details/138728709">https://blog.csdn.net/qq_41948288/article/details/138728709</a></p></blockquote><p>hexo中代码块的渲染是由hexo本身负责的，绝大部分主题并没有引入独立的代码块渲染机制。所以代码块的配置项是在hexo自己的<code>_config.yaml</code>配置文件中。</p><p>hexo <code>_config.yaml</code>配置文件（我的是在第50行）的highlight就是代码块的配置，如下所示：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">highlight:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">line_number:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">auto_detect:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">tab_replace:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="attr">wrap:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">hljs:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">exclude_languages:</span> [<span class="string">&#x27;mermaid&#x27;</span>] <span class="comment"># 渲染的时候忽略代码语言</span></span><br></pre></td></tr></table></figure><p>其中有一个选项是tab_replace，默认是空，不会做任何替换操作。将其修改为4个空格即可。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">tab_replace:</span> <span class="string">&#x27;    &#x27;</span></span><br></pre></td></tr></table></figure><p>修改后，重新进行hexo cl和hexo g，就可以观察到生效后的代码块，不再出现过长的缩进了</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;mcpServers&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;工具名称&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;uv&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="string">&quot;--directory&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;工作路径&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;run&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;test.py&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>问题解决</p>]]></content>
    
    
    <summary type="html">通过修改hexo配置文件将代码块中出现的tab制表符改成4个空格，全主题通用</summary>
    
    
    
    <category term="差生文具多" scheme="https://blog.musnow.top/categories/%E5%B7%AE%E7%94%9F%E6%96%87%E5%85%B7%E5%A4%9A/"/>
    
    <category term="博客建站" scheme="https://blog.musnow.top/categories/%E5%B7%AE%E7%94%9F%E6%96%87%E5%85%B7%E5%A4%9A/%E5%8D%9A%E5%AE%A2%E5%BB%BA%E7%AB%99/"/>
    
    
    <category term="博客建站" scheme="https://blog.musnow.top/tags/%E5%8D%9A%E5%AE%A2%E5%BB%BA%E7%AB%99/"/>
    
    <category term="Hexo" scheme="https://blog.musnow.top/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>【MCP】了解远程MCP调用背后使用的SSE协议</title>
    <link href="https://blog.musnow.top/posts/2725694758/"/>
    <id>https://blog.musnow.top/posts/2725694758/</id>
    <published>2025-04-20T06:47:57.000Z</published>
    <updated>2025-08-11T13:46:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍了远程MCP使用的SSE协议，通过wireshark抓包的方式了解MCP客户端和服务端之间通过SSE协议交互涉及到的请求与响应。</p><h2 id="1-什么是SSE协议？">1. 什么是SSE协议？</h2><blockquote><p>参考：<a href="https://zhuanlan.zhihu.com/p/1894024642395619635">科普一下MCP时代重要的SSE协议</a>、<a href="https://blog.csdn.net/aerror/article/details/146208818">关于MCP SSE 服务器的工作原理</a></p></blockquote><p>MCP的远程服务是通过SSE（Server-Sent Events）启动的，SSE是一个基于HTTP的长连接协议。SSE在逻辑上是一个由客户端发起、由服务器同意而建立的<strong>从服务器向客户端发消息的单向管道</strong>。这个管道建立之后，<strong>客户端给服务器发消息时用传统方式发</strong>，服务器给客户端发消息时用这个管道发，双方就可以灵活地进行通信了。</p><p>MCP SSE客户端会发起多个请求，第一个请求是<code>/sse</code>路径，这是建立SSE长连接的第一步。服务端会使用chunked方式来回传数据，每次不告诉客户端数据量有多少，让客户端保持连接始终联通，即维护了一个长连接。后续每一次服务端与客户端的通讯，都会采用事件字节数、事件名称event、data三个字段来通信（服务端发送给客户端）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">事件字节数（十六进制）</span><br><span class="line">event: 事件名称</span><br><span class="line">data: 事件数据</span><br><span class="line">&lt;这里一定会有一个空行，作为单个事件结束标志&gt;</span><br></pre></td></tr></table></figure><p>其中第一行是消息的字节数，以十六进制给出。从第二行event开始一直到data结束，都是这个事件字节数的长度范围内（不包括末尾的<code>\r\n</code>）</p><blockquote><p>2025.08.11 备注：在更新之前的博客中，第一行的<strong>事件字节数</strong>被我错误的理解为了不变的事件ID，在此对受误导的读者表示抱歉！感谢评论区网友的指正！</p></blockquote><h2 id="2-实际测试：运行MCP服务端和QwenAgent">2. 实际测试：运行MCP服务端和QwenAgent</h2><p>因为使用sse远程方式启动mcp服务端时是在本地回环地址启动的， 所以可以通过wireshark工具监听到我们本地客户端与服务端之间传输的请求与响应，通过这种方式来进一步了解mcp每一步都请求了什么，响应了什么。</p><p>首先是用sse模式启动我们的mcp服务端demo，也就是官方python sdk中的<code>mcp-python-sdk/examples/servers/simple-tool</code>，设置端口为8000。注意修改命令中<code>--directory</code>之后的路径为你电脑上<code>simple-tool</code>的正确路径。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">uv run \</span><br><span class="line">    --directory mcp-python-sdk/examples/servers/simple-tool \</span><br><span class="line">    mcp-simple-tool \</span><br><span class="line">    --transport sse --port 8000</span><br></pre></td></tr></table></figure><p>然后再在wireshark里面监听<strong>本地回环</strong>地址，使用过滤器<code>tcp.port==8000</code>筛选出所有和8000端口有关的请求。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/04/960acbb8a0e910ffcaf90cfba3a6a669.webp" alt="image.png"></p><p>使用如下代码，运行一次QwenAgent，调用mcp工具。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> qwen_agent.agents <span class="keyword">import</span> Assistant</span><br><span class="line"><span class="comment"># DEBUG模式，列出详细处理日志</span></span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line">logging.basicConfig(level=logging.DEBUG, </span><br><span class="line">                    <span class="built_in">format</span>=<span class="string">&#x27;%(asctime)s - %(levelname)s - %(message)s&#x27;</span>, </span><br><span class="line">                    filename=<span class="string">&#x27;app.log&#x27;</span>, </span><br><span class="line">                    filemode=<span class="string">&#x27;a&#x27;</span>) </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">init_agent_service</span>():</span><br><span class="line">    llm_cfg = &#123;</span><br><span class="line">        <span class="string">&#x27;model&#x27;</span>: <span class="string">&#x27;Qwen/Qwen2.5-32B-Instruct&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;model_server&#x27;</span>: <span class="string">&#x27;https://api.siliconflow.cn/v1&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;api_key&#x27;</span>: <span class="string">&#x27;xxxx&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    system = (<span class="string">&#x27;你是一个强大的助手，可以帮用户处理问题。&#x27;</span>)</span><br><span class="line">    tools = [&#123;</span><br><span class="line">        <span class="string">&quot;mcpServers&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;exmaple-server&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;url&quot;</span>: <span class="string">&quot;http://127.0.0.1:8000/sse&quot;</span>,</span><br><span class="line">                <span class="string">&quot;disabled&quot;</span>: <span class="literal">False</span>,</span><br><span class="line">                <span class="string">&quot;timeout&quot;</span>: <span class="number">30</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;]</span><br><span class="line">    bot = Assistant(</span><br><span class="line">        llm=llm_cfg,</span><br><span class="line">        name=<span class="string">&#x27;网页查看助手&#x27;</span>,</span><br><span class="line">        description=<span class="string">&#x27;网页查看&#x27;</span>,</span><br><span class="line">        system_message=system,</span><br><span class="line">        function_list=tools,</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> bot</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">text=<span class="string">&#x27;这个网站是什么？https://blog.musnow.top/&#x27;</span></span>):</span><br><span class="line">    bot = init_agent_service()</span><br><span class="line">    messages = [&#123;<span class="string">&#x27;role&#x27;</span>: <span class="string">&#x27;user&#x27;</span>, <span class="string">&#x27;content&#x27;</span>: text&#125;]</span><br><span class="line">    <span class="comment"># 请求</span></span><br><span class="line">    <span class="keyword">for</span> response <span class="keyword">in</span> bot.run(messages):</span><br><span class="line">        logging.info(<span class="string">&#x27;bot response: &#x27;</span> + <span class="built_in">str</span>(response)) <span class="comment"># 这里也用logging打印</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>MCP服务端服务端的日志中会出现下面五条请求记录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">❯ uv run --directory /Users/mothra/data/code/python/openai/mcp-python-sdk/examples/servers/simple-tool mcp-simple-tool --transport sse --port 8000</span><br><span class="line">start server sse</span><br><span class="line">INFO:     Started server process [87086]</span><br><span class="line">INFO:     Waiting for application startup.</span><br><span class="line">INFO:     Application startup complete.</span><br><span class="line">INFO:     Uvicorn running on http://0.0.0.0:8000 (Press CTRL+C to quit)</span><br><span class="line">INFO:     127.0.0.1:49652 - &quot;GET /sse HTTP/1.1&quot; 200 OK</span><br><span class="line">INFO:     127.0.0.1:49654 - &quot;POST /?session_id=b53301ca408f4da4a12562ce2fde23de HTTP/1.1&quot; 202 Accepted</span><br><span class="line">INFO:     127.0.0.1:49656 - &quot;POST /?session_id=b53301ca408f4da4a12562ce2fde23de HTTP/1.1&quot; 202 Accepted</span><br><span class="line">INFO:     127.0.0.1:49658 - &quot;POST /?session_id=b53301ca408f4da4a12562ce2fde23de HTTP/1.1&quot; 202 Accepted</span><br><span class="line">INFO:     127.0.0.1:49668 - &quot;POST /?session_id=b53301ca408f4da4a12562ce2fde23de HTTP/1.1&quot; 202 Accepted</span><br></pre></td></tr></table></figure><h2 id="3-分析wireshark抓包结果">3. 分析wireshark抓包结果</h2><h3 id="3-1-第一条请求：-SSE">3.1. 第一条请求：/SSE</h3><p>首先在wireshark中找到第一条sse请求，在wireshark中能清晰的看到客户端从49652端口向8000端口发起<strong>TCP三次握手</strong>的记录。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/04/69148f26b67e74bd190c98224b0e15e9.webp" alt="image.png"></p><p>客户端发起的<code>/sse</code>接口的请求报文如下，没有什么特别的</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/sse</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>127.0.0.1:8000</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>python-httpx/0.28.1</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/event-stream</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Cache-Control</span><span class="punctuation">: </span>no-store</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>服务端的响应如下，这一串响应是在两个tcp报文中发出的，下图中用紫色荧光笔标注len不为0的就是服务端发出的两个报文。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/04/815180df9842b41001a215e6d4b373d2.webp" alt="image.png"></p><blockquote><p><strong>注意</strong>：这里的HTTP响应报文是一个chunked类型的，也就是这一条HTTP响应报文后续还一直会有其他内容（服务端和客户端之间的管道），直到客户端和服务端的交互结束了，这一条HTTP响应报文才算完整结束！</p></blockquote><p>这两个报文的内容拼接起来如下，为了更直观的展示HTTP报文格式，这里将HTTP协议的<code>\r\n</code>换行符也人工标识出来。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">200</span> OK\r\n</span><br><span class="line"><span class="attribute">date</span><span class="punctuation">: </span>Sun, 20 Apr 2025 06:00:38 GMT\r\n</span><br><span class="line"><span class="attribute">server</span><span class="punctuation">: </span>uvicorn\r\n</span><br><span class="line"><span class="attribute">cache-control</span><span class="punctuation">: </span>no-cache\r\n</span><br><span class="line"><span class="attribute">connection</span><span class="punctuation">: </span>keep-alive\r\n</span><br><span class="line"><span class="attribute">x-accel-buffering</span><span class="punctuation">: </span>no\r\n</span><br><span class="line"><span class="attribute">content-type</span><span class="punctuation">: </span>text/event-stream; charset=utf-8\r\n</span><br><span class="line"><span class="attribute">Transfer-Encoding</span><span class="punctuation">: </span>chunked\r\n</span><br><span class="line">\r\n</span><br><span class="line">51\r\n</span><br><span class="line"><span class="attribute">event</span><span class="punctuation">: </span>endpoint\r\n</span><br><span class="line"><span class="attribute">data</span><span class="punctuation">: </span>/messages/?session_id=b53301ca408f4da4a12562ce2fde23de\r\n</span><br><span class="line">\r\n\r\n</span><br></pre></td></tr></table></figure><p>这里便是服务端发出的第一个SSE协议事件数据了。其中：</p><ul><li>事件字节数是十六进制的51（十进制81，是从event开始一直到data结束共81字节）；</li><li>事件名称是endpoint（告诉客户端后续需要请求的接口路径是啥）‘</li><li>事件内容就是endpoint的具体值了。</li></ul><p>在data之后还额外出现了两个<code>\r\n</code>，这便是单个事件的结束标志。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">51</span><br><span class="line"><span class="attribute">event</span><span class="punctuation">: </span>endpoint</span><br><span class="line"><span class="attribute">data</span><span class="punctuation">: </span>/messages/?session_id=b53301ca408f4da4a12562ce2fde23de</span><br><span class="line">&lt;空行&gt;</span><br></pre></td></tr></table></figure><p>这个endpoint响应就是告诉客户端，后续的请求全都要使用<code>/messages/?session_id=b53301ca408f4da4a12562ce2fde23de</code>这个路径来发起，这个路径中包含本次会话的session id，客户端使用这个路径，服务端就能够知道要在哪一个管道里面向客户端发回结果。</p><p>在QwenAgent的debug日志中（底层mcp交互用的是httpx库）也能观察到这个事件，客户端收到了服务端提供的endpoint URL。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">2025-04-20 14:32:01,570 - INFO - HTTP Request: GET http://127.0.0.1:8000/sse &quot;HTTP/1.1 200 OK&quot;</span><br><span class="line">2025-04-20 14:32:01,570 - DEBUG - SSE connection established</span><br><span class="line">2025-04-20 14:32:01,570 - DEBUG - receive_response_body.started request=&lt;Request [b&#x27;GET&#x27;]&gt;</span><br><span class="line">2025-04-20 14:32:01,570 - DEBUG - Received SSE event: endpoint</span><br><span class="line">2025-04-20 14:32:01,570 - INFO - Received endpoint URL: http://127.0.0.1:8000/messages/?session_id=b53301ca408f4da4a12562ce2fde23de</span><br></pre></td></tr></table></figure><h3 id="3-2-第二条请求：初始化">3.2. 第二条请求：初始化</h3><p>第二条客户端的请求如下，这里已经开始使用服务端刚刚返回的endpoint了。请求体部分是json格式的内容，initialize代表是初始化MCP客户端，告诉服务端当前客户端使用的协议版本protocolVersion、支持的能力capabilities、jsonrpc版本等等信息</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/messages/?session_id=b53301ca408f4da4a12562ce2fde23de</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>127.0.0.1:8000</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>python-httpx/0.28.1</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>194</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/event-stream</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/json</span><br><span class="line"></span><br><span class="line"><span class="language-json"><span class="punctuation">&#123;</span><span class="attr">&quot;method&quot;</span><span class="punctuation">:</span><span class="string">&quot;initialize&quot;</span><span class="punctuation">,</span><span class="attr">&quot;params&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;protocolVersion&quot;</span><span class="punctuation">:</span><span class="string">&quot;2024-11-05&quot;</span><span class="punctuation">,</span><span class="attr">&quot;capabilities&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;sampling&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="attr">&quot;roots&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;listChanged&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">true</span></span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="attr">&quot;clientInfo&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;mcp&quot;</span><span class="punctuation">,</span><span class="attr">&quot;version&quot;</span><span class="punctuation">:</span><span class="string">&quot;0.1.0&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="attr">&quot;jsonrpc&quot;</span><span class="punctuation">:</span><span class="string">&quot;2.0&quot;</span><span class="punctuation">,</span><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">&#125;</span></span></span><br></pre></td></tr></table></figure><p>针对这次请求，服务端发回的响应就比较简单了，一个Accepted告诉客户端他的请求已经被接受了，并没有返回实际性的内容。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">202</span> Accepted</span><br><span class="line"><span class="attribute">date</span><span class="punctuation">: </span>Sun, 20 Apr 2025 06:00:38 GMT</span><br><span class="line"><span class="attribute">server</span><span class="punctuation">: </span>uvicorn</span><br><span class="line"><span class="attribute">content-length</span><span class="punctuation">: </span>8</span><br><span class="line"></span><br><span class="line"><span class="language-ebnf"><span class="attribute">Accepted</span></span></span><br></pre></td></tr></table></figure><p>这正是前文提到过的SSE协议的特性，服务端传回的数据不会使用HTTP响应直接传回，<strong>而是会在第一次/sse请求后建立的长连接管道里面传回</strong>！上述响应只是针对客户端的POST请求，依照HTTP协议的要求发出的而已（HTTP要求每一个req都需要有一个res）</p><p>如下图所示，在服务端返回Accepted响应之后，就能观察到一个服务端向客户端发出的len不为0的TCP报文，这个报文中就包含了服务端针对客户端这次发起的初始化请求的实际事件响应。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/04/7a567ad3ca62c706b0d93587ea3212a9.webp" alt="image.png"></p><p>这个报文的内容如下，e9是当前消息的长度（十进制233），event事件名称是一个message，data中就包含了服务端对这次初始化请求的响应，返回了服务端的jsonrpc版本、支持的协议版本protocolVersion、支持的能力capabilities、服务端的信息serverInfo。</p><p>同样的，这里也是额外出现了两个<code>\r\n</code>作为事件结束标志。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">e9\r\n</span><br><span class="line"><span class="attribute">event</span><span class="punctuation">: </span>message\r\n</span><br><span class="line"><span class="attribute">data</span><span class="punctuation">: </span>&#123;&quot;jsonrpc&quot;:&quot;2.0&quot;,&quot;id&quot;:0,&quot;result&quot;:&#123;&quot;protocolVersion&quot;:&quot;2024-11-05&quot;,&quot;capabilities&quot;:&#123;&quot;experimental&quot;:&#123;&#125;,&quot;tools&quot;:&#123;&quot;listChanged&quot;:false&#125;&#125;,&quot;serverInfo&quot;:&#123;&quot;name&quot;:&quot;mcp-website-fetcher&quot;,&quot;version&quot;:&quot;1.6.1.dev14+babb477&quot;&#125;&#125;&#125;\r\n</span><br><span class="line">\r\n\r\n</span><br></pre></td></tr></table></figure><h3 id="3-3-第三条请求：初始化成功告知">3.3. 第三条请求：初始化成功告知</h3><p>第三条请求就是客户端告诉服务端自己已经准备好了，初始化成功initialized。同样会有一对POST和Accepted的HTTP请求，这里不再赘述</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/messages/?session_id=b53301ca408f4da4a12562ce2fde23de</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>127.0.0.1:8000</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>python-httpx/0.28.1</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>54</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/event-stream</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/json</span><br><span class="line"></span><br><span class="line"><span class="language-json"><span class="punctuation">&#123;</span><span class="attr">&quot;method&quot;</span><span class="punctuation">:</span><span class="string">&quot;notifications/initialized&quot;</span><span class="punctuation">,</span><span class="attr">&quot;jsonrpc&quot;</span><span class="punctuation">:</span><span class="string">&quot;2.0&quot;</span><span class="punctuation">&#125;</span></span></span><br></pre></td></tr></table></figure><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">202</span> Accepted</span><br><span class="line"><span class="attribute">date</span><span class="punctuation">: </span>Sun, 20 Apr 2025 06:00:38 GMT</span><br><span class="line"><span class="attribute">server</span><span class="punctuation">: </span>uvicorn</span><br><span class="line"><span class="attribute">content-length</span><span class="punctuation">: </span>8</span><br><span class="line"></span><br><span class="line"><span class="language-ebnf"><span class="attribute">Accepted</span></span></span><br></pre></td></tr></table></figure><p>从抓包结果中可以看到，这一条请求到下一条请求之间没有服务端向客户端发出len不为0的TCP报文，因为这一次请求只是客户端告知服务端自己已经准备好了，服务端没必要额外返回任何信息。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/04/7629117d0ef69dbcbf91511e93b6d3dc.webp" alt="image.png"></p><h3 id="3-4-第四条请求：请求工具列表">3.4. 第四条请求：请求工具列表</h3><p>第四条请求就是客户端向服务端请求服务端提供的工具列表了</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/messages/?session_id=b53301ca408f4da4a12562ce2fde23de</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>127.0.0.1:8000</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>python-httpx/0.28.1</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>46</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/event-stream</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/json</span><br><span class="line"></span><br><span class="line"><span class="language-json"><span class="punctuation">&#123;</span><span class="attr">&quot;method&quot;</span><span class="punctuation">:</span><span class="string">&quot;tools/list&quot;</span><span class="punctuation">,</span><span class="attr">&quot;jsonrpc&quot;</span><span class="punctuation">:</span><span class="string">&quot;2.0&quot;</span><span class="punctuation">,</span><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span><span class="number">1</span><span class="punctuation">&#125;</span></span></span><br></pre></td></tr></table></figure><p>服务端照常进行了Accepted响应</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">202</span> Accepted</span><br><span class="line"><span class="attribute">date</span><span class="punctuation">: </span>Sun, 20 Apr 2025 06:00:38 GMT</span><br><span class="line"><span class="attribute">server</span><span class="punctuation">: </span>uvicorn</span><br><span class="line"><span class="attribute">content-length</span><span class="punctuation">: </span>8</span><br><span class="line"></span><br><span class="line"><span class="language-ebnf"><span class="attribute">Accepted</span></span></span><br></pre></td></tr></table></figure><p>随后在管道里面发出的TCP报文中，就包含了服务端当前支持的工具，以及工具的参数和参数的类型与释义。这里第一行依旧是消息的十六进制字节数，109对应十进制265。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">109\r\n</span><br><span class="line"><span class="attribute">event</span><span class="punctuation">: </span>message\r\n</span><br><span class="line"><span class="attribute">data</span><span class="punctuation">: </span>&#123;&quot;jsonrpc&quot;:&quot;2.0&quot;,&quot;id&quot;:1,&quot;result&quot;:&#123;&quot;tools&quot;:[&#123;&quot;name&quot;:&quot;fetch&quot;,&quot;description&quot;:&quot;Fetches a website and returns its content&quot;,&quot;inputSchema&quot;:&#123;&quot;type&quot;:&quot;object&quot;,&quot;required&quot;:[&quot;url&quot;],&quot;properties&quot;:&#123;&quot;url&quot;:&#123;&quot;type&quot;:&quot;string&quot;,&quot;description&quot;:&quot;URL to fetch&quot;&#125;&#125;&#125;&#125;]&#125;&#125;\r\n</span><br><span class="line">\r\n\r\n</span><br></pre></td></tr></table></figure><p>从日志中看，QwenAgent会把这部分内容转换为prompt发送给AI，让AI来调用这个工具。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2025-04-20 14:32:01,637 - DEBUG - Request options: &#123;&#x27;method&#x27;: &#x27;post&#x27;, &#x27;url&#x27;: &#x27;/chat/completions&#x27;, &#x27;files&#x27;: None, &#x27;json_data&#x27;: &#123;&#x27;messages&#x27;: [&#123;&#x27;role&#x27;: &#x27;system&#x27;, &#x27;content&#x27;: &#x27;你是一个强大的助手，可以帮用户处理问题。\n\n# Tools\n\nYou may call one or more functions to assist with the user query.\n\nYou are provided with function signatures within &lt;tools&gt;&lt;/tools&gt; XML tags:\n&lt;tools&gt;\n&#123;&quot;type&quot;: &quot;function&quot;, &quot;function&quot;: &#123;&quot;name&quot;: &quot;exmaple-server-fetch&quot;, &quot;description&quot;: &quot;Fetches a website and returns its content&quot;, &quot;parameters&quot;: &#123;&quot;type&quot;: &quot;object&quot;, &quot;properties&quot;: &#123;&quot;url&quot;: &#123;&quot;type&quot;: &quot;string&quot;, &quot;description&quot;: &quot;URL to fetch&quot;&#125;&#125;, &quot;required&quot;: [&quot;url&quot;]&#125;&#125;&#125;\n&lt;/tools&gt;\n\nFor each function call, return a json object with function name and arguments within &lt;tool_call&gt;&lt;/tool_call&gt; XML tags:\n&lt;tool_call&gt;\n&#123;&quot;name&quot;: &lt;function-name&gt;, &quot;arguments&quot;: &lt;args-json-object&gt;&#125;\n&lt;/tool_call&gt;&#x27;&#125;, &#123;&#x27;role&#x27;: &#x27;user&#x27;, &#x27;content&#x27;: &#x27;这个网站是什么？https://blog.musnow.top/&#x27;&#125;], &#x27;model&#x27;: &#x27;Qwen/Qwen2.5-32B-Instruct&#x27;, &#x27;seed&#x27;: 44742000, &#x27;stream&#x27;: True&#125;&#125;</span><br></pre></td></tr></table></figure><p>其中上下文信息如下，可以看到这里并没有使用function call的请求格式，而是直接在system的prompt里把工具相关信息以XML格式发送给AI了。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#x27;messages&#x27;<span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line">        &#x27;role&#x27;<span class="punctuation">:</span></span><br><span class="line">        &#x27;system&#x27;<span class="punctuation">,</span></span><br><span class="line">        &#x27;content&#x27;<span class="punctuation">:</span></span><br><span class="line">        &#x27;你是一个强大的助手，可以帮用户处理问题。\n\n# Tools\n\nYou may call one or more functions to assist with the user query.\n\nYou are provided with function signatures within &lt;tools&gt;&lt;/tools&gt; XML tags<span class="punctuation">:</span>\n&lt;tools&gt;\n<span class="punctuation">&#123;</span><span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;function&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;function&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;exmaple-server-fetch&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Fetches a website and returns its content&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;parameters&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;object&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;URL to fetch&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="attr">&quot;required&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;url&quot;</span><span class="punctuation">]</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span>\n&lt;/tools&gt;\n\nFor each function call<span class="punctuation">,</span> return a json object with function name and arguments within &lt;tool_call&gt;&lt;/tool_call&gt; XML tags<span class="punctuation">:</span>\n&lt;tool_call&gt;\n<span class="punctuation">&#123;</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> &lt;function-name&gt;<span class="punctuation">,</span> <span class="attr">&quot;arguments&quot;</span><span class="punctuation">:</span> &lt;args-json-object&gt;<span class="punctuation">&#125;</span>\n&lt;/tool_call&gt;&#x27;</span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span></span><br><span class="line">        &#x27;role&#x27;<span class="punctuation">:</span> &#x27;user&#x27;<span class="punctuation">,</span></span><br><span class="line">        &#x27;content&#x27;<span class="punctuation">:</span> &#x27;这个网站是什么？https<span class="punctuation">:</span><span class="comment">//blog.musnow.top/&#x27;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><p>在输出的bot response中，能看到AI针对这个tools生成了请求参数，url参数的值也是正确的，和我们提出的问题保持了一致。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">t = [&#123;</span><br><span class="line">    <span class="string">&#x27;role&#x27;</span>: <span class="string">&#x27;assistant&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;content&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;reasoning_content&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;网页查看助手&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;function_call&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;exmaple-server-fetch&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;arguments&#x27;</span>: <span class="string">&#x27;&#123;&quot;url&quot;: &quot;https://blog.musnow.top/&quot;&#125;&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure><h3 id="3-5-第五条请求：调用工具">3.5. 第五条请求：调用工具</h3><p>在日志中能观察到，在AI生成了包含function_call的响应之后，QwenAgent的SDK就开始准备调用远程MCP工具了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">2025-04-20 15:32:49,370 - INFO - bot response: [&#123;&#x27;role&#x27;: &#x27;assistant&#x27;, &#x27;content&#x27;: &#x27;&#x27;, &#x27;reasoning_content&#x27;: &#x27;&#x27;, &#x27;name&#x27;: &#x27;网页查看助手&#x27;, &#x27;function_call&#x27;: &#123;&#x27;name&#x27;: &#x27;exmaple-server-fetch&#x27;, &#x27;arguments&#x27;: &#x27;&#123;&quot;url&quot;: &quot;https://blog.musnow.top/&quot;&#125;&#x27;&#125;&#125;]</span><br><span class="line">2025-04-20 15:32:49,370 - DEBUG - receive_response_body.complete</span><br><span class="line">2025-04-20 15:32:49,371 - DEBUG - response_closed.started</span><br><span class="line">2025-04-20 15:32:49,371 - DEBUG - response_closed.complete</span><br><span class="line">2025-04-20 15:32:49,373 - DEBUG - Sending client message: root=JSONRPCRequest(method=&#x27;tools/call&#x27;, params=&#123;&#x27;name&#x27;: &#x27;fetch&#x27;, &#x27;arguments&#x27;: &#123;&#x27;url&#x27;: &#x27;https://blog.musnow.top/&#x27;&#125;&#125;, jsonrpc=&#x27;2.0&#x27;, id=2)</span><br></pre></td></tr></table></figure><p>此时发起的请求如下，请求体中包含了需要请求的工具名称fetch，以及传输过来的参数arguments</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/messages/?session_id=b53301ca408f4da4a12562ce2fde23de</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>127.0.0.1:8000</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>python-httpx/0.28.1</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>119</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/event-stream</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/json</span><br><span class="line"></span><br><span class="line"><span class="language-json"><span class="punctuation">&#123;</span><span class="attr">&quot;method&quot;</span><span class="punctuation">:</span><span class="string">&quot;tools/call&quot;</span><span class="punctuation">,</span><span class="attr">&quot;params&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;fetch&quot;</span><span class="punctuation">,</span><span class="attr">&quot;arguments&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;url&quot;</span><span class="punctuation">:</span><span class="string">&quot;https://blog.musnow.top/&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="attr">&quot;jsonrpc&quot;</span><span class="punctuation">:</span><span class="string">&quot;2.0&quot;</span><span class="punctuation">,</span><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span><span class="number">2</span><span class="punctuation">&#125;</span></span></span><br></pre></td></tr></table></figure><p>服务端还是会返回一个accpet响应</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 202 Accepted</span><br><span class="line">date: Sun, 20 Apr 2025 06:00:39 GMT</span><br><span class="line">server: uvicorn</span><br><span class="line">content-length: 8</span><br><span class="line"></span><br><span class="line">Accepted</span><br></pre></td></tr></table></figure><p>随后，MCP服务端会根据这个请求，调用实际的工具，并最终返回结果。由于这个请求结果的content是慕雪个人博客首页的html源码，所以内容非常之大，这里就不贴出来完整的事件data了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">f0bd</span><br><span class="line">event: message</span><br><span class="line">data: &#123;&quot;jsonrpc&quot;:&quot;2.0&quot;,&quot;id&quot;:2,&quot;result&quot;:&#123;&quot;content&quot;:[&#123;&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;&lt;!DOCTYPE html&gt;&lt;html lang=\&quot;zh-CN\&quot; data-theme=\&quot;light\&quot;&gt;&lt;head&gt;&lt;meta charset=\&quot;UTF-8\&quot;&gt;&lt;meta http-equiv=\&quot;X-UA-Compatible\&quot; content=\&quot;IE=edge\&quot;&gt;&lt;meta name=\&quot;viewport\&quot; content=\&quot;width=device-width, initial-scale=1.0,viewport-fit=cover\&quot;&gt;&lt;title&gt;慕雪的寒舍 - 雪下了一夜&lt;/title&gt;</span><br></pre></td></tr></table></figure><p>可以看到，服务端通过三次TCP报文才把整个首页的html完整传输给客户端。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/04/a529e0c2bae9294ce4903ef635dc112e.webp" alt="image.png"></p><p>到这里，针对<code>/sse</code>接口的HTTP响应就完整结束了，MCP服务端以tools调用结果返回为标志来结束HTTP响应。</p><p>在wireshark拼接出来的完整HTTP响应中可以观察到，tools调用结果的json完整结束了，这个HTTP响应就是结束了，<strong>随后便出现了TCP四次挥手的报文</strong>。其中调用工具的响应json末尾会包含一个字段<code>&quot;isErr&quot;</code>，应该是用于标识本次mcp工具调用是否成功的，为false代表调用成功。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/04/9d00d0ef699833554e935274a84bb4fb.webp" alt="image.png"></p><h3 id="3-6-工具调用结果交付AI处理">3.6. 工具调用结果交付AI处理</h3><p>在收到工具调用结果之后，日志中就能够观察到QwenAgent将这个工具调用结果拼接在prompt里面发送给AI了。这里我把html文档的内容全部删掉了，改成了“首页HTML内容”，保留了其他字段。</p><p>首先这里能看到完整的MCP服务端工具调用结果的响应，包含jsonrpc字段、id字段、result字段、isError字段。其中工具调用结果是在result/content里面返回的。</p><p>QwenAgent的SDK依旧是在消息上下文里面将MCP工具的响应结果通过<code>&lt;tool_response&gt;\n首页HTML内容\n&lt;/tool_response&gt;</code>的拼接了起来，以user身份发送给了AI。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">2025-04-20 14:33:18,289 - DEBUG - Received SSE event: message</span><br><span class="line">2025-04-20 14:33:18,291 - DEBUG - Received server message: root=JSONRPCResponse(jsonrpc=&#x27;2.0&#x27;, id=2, result=&#123;&#x27;content&#x27;: [&#123;&#x27;type&#x27;: &#x27;text&#x27;, &#x27;text&#x27;: &#x27;首页HTML内容&#x27;&#125;], &#x27;isError&#x27;: False&#125;)</span><br><span class="line">2025-04-20 14:33:18,330 - DEBUG - Request options: &#123;&#x27;method&#x27;: &#x27;post&#x27;, &#x27;url&#x27;: &#x27;/chat/completions&#x27;, &#x27;files&#x27;: None, &#x27;json_data&#x27;: &#123;&#x27;messages&#x27;: [&#123;&#x27;role&#x27;: &#x27;system&#x27;, &#x27;content&#x27;: &#x27;你是一个强大的助手，可以帮用户处理问题。\n\n# Tools\n\nYou may call one or more functions to assist with the user query.\n\nYou are provided with function signatures within &lt;tools&gt;&lt;/tools&gt; XML tags:\n&lt;tools&gt;\n&#123;&quot;type&quot;: &quot;function&quot;, &quot;function&quot;: &#123;&quot;name&quot;: &quot;exmaple-server-fetch&quot;, &quot;description&quot;: &quot;Fetches a website and returns its content&quot;, &quot;parameters&quot;: &#123;&quot;type&quot;: &quot;object&quot;, &quot;properties&quot;: &#123;&quot;url&quot;: &#123;&quot;type&quot;: &quot;string&quot;, &quot;description&quot;: &quot;URL to fetch&quot;&#125;&#125;, &quot;required&quot;: [&quot;url&quot;]&#125;&#125;&#125;\n&lt;/tools&gt;\n\nFor each function call, return a json object with function name and arguments within &lt;tool_call&gt;&lt;/tool_call&gt; XML tags:\n&lt;tool_call&gt;\n&#123;&quot;name&quot;: &lt;function-name&gt;, &quot;arguments&quot;: &lt;args-json-object&gt;&#125;\n&lt;/tool_call&gt;&#x27;&#125;, &#123;&#x27;role&#x27;: &#x27;user&#x27;, &#x27;content&#x27;: &#x27;这个网站是什么？https://blog.musnow.top/&#x27;&#125;, &#123;&#x27;role&#x27;: &#x27;assistant&#x27;, &#x27;content&#x27;: &#x27;&lt;tool_call&gt;\n&#123;&quot;name&quot;: &quot;exmaple-server-fetch&quot;, &quot;arguments&quot;: &#123;&quot;url&quot;: &quot;https://blog.musnow.top/&quot;&#125;&#125;\n&lt;/tool_call&gt;&#x27;&#125;, &#123;&#x27;role&#x27;: &#x27;user&#x27;, &#x27;content&#x27;: &#x27;&lt;tool_response&gt;\n首页HTML内容\n&lt;/tool_response&gt;&#x27;&#125;], &#x27;model&#x27;: &#x27;Qwen/Qwen2.5-32B-Instruct&#x27;, &#x27;seed&#x27;: 181793637, &#x27;stream&#x27;: True&#125;&#125;</span><br><span class="line">2025-04-20 14:33:18,330 - DEBUG - Sending HTTP Request: POST https://api.siliconflow.cn/v1/chat/completions</span><br></pre></td></tr></table></figure><p>最终，AI理解并处理“首页HTML内容”，输出了回答</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#x27;role&#x27;: &#x27;assistant&#x27;, &#x27;content&#x27;: &#x27;该网站名为&quot;慕雪的寒舍 - 雪下了一夜&quot;，由作者&quot;慕雪年华&quot;创建。该网站看起来是一个个人博客，包含了各种类型的文章，例如编程学习、博客建站等。网站中的文章包含了不同的主题，如使用Python管理虚拟环境、MCP协议的理解和使用等。此外，网站顶部和底部列出了作者的一些社交链接和其他网站。&#x27;, &#x27;reasoning_content&#x27;: &#x27;&#x27;, &#x27;name&#x27;: &#x27;网页查看助手&#x27;&#125;</span><br></pre></td></tr></table></figure><p>不过，这里日志中出现了一个奇怪的地方，那就是代码里面打印的bot response上下文中的工具调用格式又变成了<code>function_call</code>，<strong>这里应该是QwenAgent SDK针对mcp工具在对外输出的response里面做的额外解析处理</strong>，并没有把内部通过prompt让AI调用MCP工具的格式输出出来，在最终输出的时候还是会使用<code>function_call</code>的格式来标识AI和MCP工具的调用，方便用户解析。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2025-04-20 15:32:57,549 - INFO - bot response: [&#123;&#x27;role&#x27;: &#x27;assistant&#x27;, &#x27;content&#x27;: &#x27;&#x27;, &#x27;reasoning_content&#x27;: &#x27;&#x27;, &#x27;name&#x27;: &#x27;网页查看助手&#x27;, &#x27;function_call&#x27;: &#123;&#x27;name&#x27;: &#x27;exmaple-server-fetch&#x27;, &#x27;arguments&#x27;: &#x27;&#123;&quot;url&quot;: &quot;https://blog.musnow.top/&quot;&#125;&#x27;&#125;&#125;, &#123;&#x27;role&#x27;: &#x27;function&#x27;, &#x27;content&#x27;: &#x27;首页HTML内容&#x27;, &#x27;reasoning_content&#x27;: &#x27;&#x27;, &#x27;name&#x27;: &#x27;exmaple-server-fetch&#x27;&#125;, &#123;&#x27;role&#x27;: &#x27;assistant&#x27;, &#x27;content&#x27;: &#x27;该网站名为&quot;慕雪的寒舍 - 雪下了一夜&quot;，由作者&quot;慕雪年华&quot;创建。该网站看起来是一个个人博客，包含了各种类型的文章，例如编程学习、博客建站等。网站中的文章包含了不同的主题，如使用Python管理虚拟环境、MCP协议的理解和使用等。此外，网站顶部和底部列出了作者的一些社交链接和其他网站。&#x27;, &#x27;reasoning_content&#x27;: &#x27;&#x27;, &#x27;name&#x27;: &#x27;网页查看助手&#x27;&#125;]</span><br></pre></td></tr></table></figure><p>从前文的日志分析中我们已经能够确定QwenAgent在调用工具的时候是直接通过prompt的方式让AI识别mcp工具的。在之前的博客中也提到过，这是MCP工具集成在Agent中的两种方式之一（另外一个方式就是直接使用AI的function call功能来调用），两种方式并没有好坏之分，只是将MCP集成到Agent中的不同的实现方式而已。</p><hr><p>我顺带测试了一下QwenAgent的自定义工具是否也是用prompt方式的，果不其然，通过QwenAgent提供的<code>@register_tool</code>注册的自定义工具也是通过prompt方式让AI来调用的。</p><p>以下是运行<code>Qwen-Agent/examples/assistant_add_custom_tool.py</code>时DEBUG日志中prompt内容，这里也是通过prompt让AI了解了自定义工具<code>my_image_gen</code>的调用方式。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2025-04-20 16:17:52,865 - DEBUG - Request options: &#123;&#x27;method&#x27;: &#x27;post&#x27;, &#x27;url&#x27;: &#x27;/chat/completions&#x27;, &#x27;files&#x27;: None, &#x27;json_data&#x27;: &#123;&#x27;messages&#x27;: [&#123;&#x27;role&#x27;: &#x27;system&#x27;, &#x27;content&#x27;: &#x27;According to the user\&#x27;s request, you first draw a picture and then automatically run code to download the picture and select an image operation from the given document to process the image\n\n# 知识库\n\n## 来自 [文件](doc.pdf) 的内容：\n\n```\n# Python Image Processing Tutorial: Downloading Images and Performing Flip Operations \n\nIn  this  tutorial,  we  will  learn  how  to  download  images  using  Python  and  perform  basic  image \noperations such as flipping and rotating using the Pillow library. \n ## Prerequisites \n Before we begin, make sure you have the following libraries installed in your Python environment: \n\n- `requests`: for downloading images \n- `Pillow`: for image processing \n If you haven\&#x27;t installed these libraries yet, you can install them using pip: \n\n```bash \npip install requests Pillow \n``` \n ## Step 1: Downloading an Image \n First, we need to download an image. We will use the `requests` library to accomplish this task. \n\n``` \nimport requests \n\ndef download_image(url, filename): \n\tresponse = requests.get(url) \n\tif response.status_code == 200: \n\twith open(filename, \&#x27;wb\&#x27;) as file: \n\tfile.write(response.content) \n\telse: \n\tprint(f&quot;Error: Failed to download image from &#123;url&#125;&quot;) \n\n# Example usage \nimage_url = &quot;https://example.com/image.jpg&quot;    # Replace with the URL of the image you want to \ndownload \nfilename = &quot;downloaded_image.jpg&quot; \ndownload_image(image_url, filename) \n``` \n ## Step 2: Opening and Displaying the Image \n Next, we will use the `Pillow` library to open and display the image we just downloaded. \n\n``` \nfrom PIL import Image \n\ndef open_and_show_image(filename): \n\timage = Image.open(filename) \n\timage.show() \n\n# Example usage \nopen_and_show_image(filename) \n``` \n ## Step 3: Flipping and Rotating the Image \n\nNow we can perform flip and rotate operations on the image. The `Pillow` library provides several \nmethods for image manipulation. \n\n``` \ndef flip_image(filename, mode=\&#x27;horizontal\&#x27;): \n\timage = Image.open(filename) \n\tif mode == \&#x27;horizontal\&#x27;: \n\tflipped_image = image.transpose(Image.FLIP_LEFT_RIGHT) \n\telif mode == \&#x27;vertical\&#x27;: \n\tflipped_image = image.transpose(Image.FLIP_TOP_BOTTOM) \n\telse: \n\tprint(&quot;Error: Mode should be \&#x27;horizontal\&#x27; or \&#x27;vertical\&#x27;&quot;) \n\treturn \n\tflipped_image.show() \n\treturn flipped_image \n\ndef rotate_image(filename, degrees): \n\timage = Image.open(filename) \n\trotated_image = image.rotate(degrees) \n\trotated_image.show() \n\treturn rotated_image \n\n# Example usage \nflipped_image = flip_image(filename, mode=\&#x27;horizontal\&#x27;)    # Horizontally flip \nflipped_image.save(&quot;flipped_horizontal.jpg&quot;)    # Save the horizontally flipped image \n\nflipped_image = flip_image(filename, mode=\&#x27;vertical\&#x27;)    # Vertically flip \nflipped_image.save(&quot;flipped_vertical.jpg&quot;)    # Save the vertically flipped image \n\nrotated_image = rotate_image(filename, 90)    # Rotate by 90 degrees \nrotated_image.save(&quot;rotated_90.jpg&quot;)    # Save the rotated image \n\n``` \n ## Step 4: Saving the Modified Image \n\nIn the examples above, we have seen how to save flipped and rotated images. You can use the \n`save` method to save any modified image. \n\n``` \n# Save the image \ndef save_image(image, filename): \n\timage.save(filename) \n\n# Example usage \nsave_image(flipped_image, &quot;flipped_image.jpg&quot;) \nsave_image(rotated_image, &quot;rotated_image.jpg&quot;) \n``` \n\nBy  now,  you  have  learned  how  to  download  images  using  Python  and  perform  basic  image \noperations using the Pillow library. You can extend these basics to implement more complex image \nprocessing functions as needed. \n\n```\n\n# Tools\n\nYou may call one or more functions to assist with the user query.\n\nYou are provided with function signatures within &lt;tools&gt;&lt;/tools&gt; XML tags:\n&lt;tools&gt;\n&#123;&quot;type&quot;: &quot;function&quot;, &quot;function&quot;: &#123;&quot;name&quot;: &quot;my_image_gen&quot;, &quot;description&quot;: &quot;AI painting (image generation) service, input text description, and return the image URL drawn based on text information.&quot;, &quot;parameters&quot;: [&#123;&quot;name&quot;: &quot;prompt&quot;, &quot;type&quot;: &quot;string&quot;, &quot;description&quot;: &quot;Detailed description of the desired image content, in English&quot;, &quot;required&quot;: true&#125;]&#125;&#125;\n&#123;&quot;type&quot;: &quot;function&quot;, &quot;function&quot;: &#123;&quot;name&quot;: &quot;code_interpreter&quot;, &quot;description&quot;: &quot;Python code sandbox, which can be used to execute Python code.&quot;, &quot;parameters&quot;: [&#123;&quot;name&quot;: &quot;code&quot;, &quot;type&quot;: &quot;string&quot;, &quot;description&quot;: &quot;The python code.&quot;, &quot;required&quot;: true&#125;]&#125;&#125;\n&lt;/tools&gt;\n\nFor each function call, return a json object with function name and arguments within &lt;tool_call&gt;&lt;/tool_call&gt; XML tags:\n&lt;tool_call&gt;\n&#123;&quot;name&quot;: &lt;function-name&gt;, &quot;arguments&quot;: &lt;args-json-object&gt;&#125;\n&lt;/tool_call&gt;&#x27;&#125;, &#123;&#x27;role&#x27;: &#x27;user&#x27;, &#x27;content&#x27;: &#x27;画一只猫的图片&#x27;&#125;], &#x27;model&#x27;: &#x27;Qwen/Qwen2.5-32B-Instruct&#x27;, &#x27;seed&#x27;: 652077296, &#x27;stream&#x27;: True&#125;&#125;</span><br><span class="line">2025-04-20 16:17:52,865 - DEBUG - Sending HTTP Request: POST https://api.siliconflow.cn/v1/chat/completions</span><br></pre></td></tr></table></figure><h2 id="4-The-end">4. The end</h2><p>今天心血来潮，通过抓包看了一下MCP客户端和服务端到底是怎么交互的，也算是学到了不少新知识，SSE协议也是第一次听说。如果对MCP或SSE有任何问题，欢迎评论讨论。</p><p>这次测试也借机了解了QwenAgent SDK底层是如何让Qwen大模型去处理tools的，采用的是prompt方案。所以QwenAgent在对接其他<strong>非Qwen大模型</strong>的时候<strong>基本不可用</strong>，比如我尝试了硅基流动的<code>THUDM/GLM-4-9B-0414</code>和<code>deepseek-ai/DeepSeek-V3</code>，都没办法正常处理QwenAgent提供的prompt，其中GLM-4-9B-0414尝试输出工具调用参数，但并不符合QwenAgent的需要，没有办法被SDK识别，程序直接停止运行了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># THUDM/chatglm3-6b 输出，工具调用方式不正确</span></span><br><span class="line">[&#123;<span class="string">&#x27;role&#x27;</span>: <span class="string">&#x27;assistant&#x27;</span>, <span class="string">&#x27;content&#x27;</span>: <span class="string">&#x27;mcp-simple-tool-fetch\n&#123;&quot;url&quot;: &quot;https://blog.musnow.top/&quot;&#125;&#x27;</span>, <span class="string">&#x27;reasoning_content&#x27;</span>: <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;网页查看助手&#x27;</span>&#125;] </span><br></pre></td></tr></table></figure><p>DeepSeek-V3尝试了多次，也是会出现<strong>无法正常输出工具调用参数</strong>的问题，勉强能成功一两次。这里给出DeepSeek成功处理的上下文，如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 请求体，包含工具prompt</span></span><br><span class="line">&#123;<span class="string">&#x27;method&#x27;</span>: <span class="string">&#x27;post&#x27;</span>, <span class="string">&#x27;url&#x27;</span>: <span class="string">&#x27;/chat/completions&#x27;</span>, <span class="string">&#x27;files&#x27;</span>: <span class="literal">None</span>, <span class="string">&#x27;json_data&#x27;</span>: &#123;<span class="string">&#x27;messages&#x27;</span>: [&#123;<span class="string">&#x27;role&#x27;</span>: <span class="string">&#x27;system&#x27;</span>, <span class="string">&#x27;content&#x27;</span>: <span class="string">&#x27;你是一个强大的助手，可以帮用户处理问题。\n\n# Tools\n\nYou may call one or more functions to assist with the user query.\n\nYou are provided with function signatures within &lt;tools&gt;&lt;/tools&gt; XML tags:\n&lt;tools&gt;\n&#123;&quot;type&quot;: &quot;function&quot;, &quot;function&quot;: &#123;&quot;name&quot;: &quot;mcp-simple-tool-fetch&quot;, &quot;description&quot;: &quot;Fetches a website and returns its content&quot;, &quot;parameters&quot;: &#123;&quot;type&quot;: &quot;object&quot;, &quot;properties&quot;: &#123;&quot;url&quot;: &#123;&quot;type&quot;: &quot;string&quot;, &quot;description&quot;: &quot;URL to fetch&quot;&#125;&#125;, &quot;required&quot;: [&quot;url&quot;]&#125;&#125;&#125;\n&lt;/tools&gt;\n\nFor each function call, return a json object with function name and arguments within &lt;tool_call&gt;&lt;/tool_call&gt; XML tags:\n&lt;tool_call&gt;\n&#123;&quot;name&quot;: &lt;function-name&gt;, &quot;arguments&quot;: &lt;args-json-object&gt;&#125;\n&lt;/tool_call&gt;&#x27;</span>&#125;, &#123;<span class="string">&#x27;role&#x27;</span>: <span class="string">&#x27;user&#x27;</span>, <span class="string">&#x27;content&#x27;</span>: <span class="string">&#x27;这个网站是什么？https://blog.musnow.top/&#x27;</span>&#125;], <span class="string">&#x27;model&#x27;</span>: <span class="string">&#x27;deepseek-ai/DeepSeek-V3&#x27;</span>, <span class="string">&#x27;seed&#x27;</span>: <span class="number">832221696</span>, <span class="string">&#x27;stream&#x27;</span>: <span class="literal">True</span>&#125;&#125;</span><br><span class="line"><span class="comment"># deepseek 成功输出工具调用参数</span></span><br><span class="line">[&#123;<span class="string">&#x27;role&#x27;</span>: <span class="string">&#x27;assistant&#x27;</span>, <span class="string">&#x27;content&#x27;</span>: <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;reasoning_content&#x27;</span>: <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;网页查看助手&#x27;</span>, <span class="string">&#x27;function_call&#x27;</span>: &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;mcp-simple-tool-fetch&#x27;</span>, <span class="string">&#x27;arguments&#x27;</span>: <span class="string">&#x27;&#123;&quot;url&quot;: &quot;https://blog.musnow.top/&quot;&#125;&#x27;</span>&#125;&#125;]</span><br><span class="line"><span class="comment"># deepseek 也正常识别出了工具返回结果，并输出了总结</span></span><br><span class="line">&#123;<span class="string">&#x27;role&#x27;</span>: <span class="string">&#x27;assistant&#x27;</span>, <span class="string">&#x27;content&#x27;</span>: <span class="string">&#x27;这个网站是“慕雪的寒舍”，是一个个人博客网站，由“慕雪年华”维护。博客主要涵盖了编程学习、技术教程、项目开发记录等内容，包括Python、SLAM（实时定位与地图构建）、图床工具、ROS（机器人操作系统）等技术方向的文章。此外，博客还展示了作者的书影评价、个人生活记录等内容。\n\n以下是一些关键信息：\n- **博客名称**：慕雪的寒舍  \n- **作者**：慕雪年华  \n- **简介**：爱折腾的代码初学者  \n- **内容分类**：编程学习、博客建站、工具推荐等  \n- **文章数量**：441篇  \n- **标签**：Hexo、Linux、Python、C语言等  \n\n此外，博客还提供了友链、关于页面、留言功能等社交互动模块。如果你对技术类内容感兴趣，可以进一步探索该博客的详细内容。&#x27;</span>, <span class="string">&#x27;reasoning_content&#x27;</span>: <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;网页查看助手&#x27;</span>&#125;</span><br></pre></td></tr></table></figure><p>总而言之，QwenAgent的这个prompt只有在使用Qwen自家模型的时候识别度才好，使用其他家模型的时候非常容易出现tools无法正常识别的情况。不过这也是意料之中了，毕竟人家都叫QwenAgent SDK了，本来就不是面向所有大模型的通用SDK。</p>]]></content>
    
    
    <summary type="html">本文介绍了远程MCP使用的SSE协议，通过wireshark抓包的方式了解MCP客户端和服务端之间通过SSE协议交互涉及到的请求与响应。</summary>
    
    
    
    <category term="编程学习" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="Agent智能体开发" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/Agent%E6%99%BA%E8%83%BD%E4%BD%93%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="Python" scheme="https://blog.musnow.top/tags/Python/"/>
    
    <category term="MCP" scheme="https://blog.musnow.top/tags/MCP/"/>
    
    <category term="AI" scheme="https://blog.musnow.top/tags/AI/"/>
    
  </entry>
  
  <entry>
    <title>【MCP】详细了解MCP协议：和function call的区别何在？如何使用MCP？</title>
    <link href="https://blog.musnow.top/posts/2831928244/"/>
    <id>https://blog.musnow.top/posts/2831928244/</id>
    <published>2025-04-19T00:56:01.000Z</published>
    <updated>2025-09-14T01:07:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍了MCP大模型上下文协议的的概念，并对比了MCP协议和function call的区别，同时用python sdk为例介绍了mcp的使用方式。</p><h2 id="1-什么是MCP？">1. 什么是MCP？</h2><blockquote><p>官网：<a href="https://modelcontextprotocol.io/introduction">https://modelcontextprotocol.io/introduction</a></p></blockquote><p>2025年，Anthropic提出了MCP协议。MCP全称为Model Context Protocol，翻译过来是大模型上下文协议。这个协议的主要为<strong>AI大模型和外部工具</strong>（比如让AI去查询信息，或者让AI操作本地文件）之间的交互提供了一个统一的处理协议。我们常用的USB TypeC接口（USB-C）统一了USB接口的样式，MCP协议就好比AI大模型中的USB-C，统一了大模型与工具的对接方式。</p><p>MCP协议采用了C/S架构，也就是服务端、客户端架构，能支持在客户端设备上调用远程Server提供的服务，同时也支持stdio流式传输模式，<strong>也就是在客户端本地启动mcp服务端</strong>。只需要在配置文件中新增MCP服务端，就能用上这个MCP服务器提供的各种工具，大大提高了大模型使用外部工具的便捷性。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/04/fef69c3cdacdc7927b494ed945c9210a.webp" alt="image.png"></p><p>MCP是开源协议，能让所有AI厂商、AI工具都将MCP集成到自己的客户端中，从而扩大MCP的可用面。毕竟只有用的人越多，协议才能不断发展，不断变得更好。</p><h2 id="2-了解function-call">2. 了解function call</h2><p>在MCP没有出来之前，我们的AI Agent开发如果想调用外部工具需要针对不同的AI大模型SDK编写不同的代码，其中最为常用的是openai提供的function call的处理逻辑。</p><p>本小节参考博客：</p><ul><li><a href="https://www.cnblogs.com/ruipeng/p/18216610">深入探讨Function Calling：实现外部函数调用的工作原理</a>；</li><li><a href="https://www.cnblogs.com/mingupupu/p/18385274">来自OpenAI官网的Function calling介绍与最佳实践</a></li></ul><h3 id="2-1-function-call-demo">2.1. function call demo</h3><h4 id="2-1-1-配置工具，AI提供参数">2.1.1. 配置工具，AI提供参数</h4><p>当我们调用 OpenAI Chat Completions 接口时，可以通过tools参数传入可供使用的外部工具。这个工具的调用中就包含了工具的作用，工具需要传入的参数，以及参数的释义。其中<code>tool_choice</code>字段设置为auto代表让大模型自动选择tools，设置为none时不会调用外部工具。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;tool_choice&quot;</span><span class="punctuation">:</span> <span class="string">&quot;auto&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;messages&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;role&quot;</span><span class="punctuation">:</span> <span class="string">&quot;system&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;你是一个天气查询助手&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;role&quot;</span><span class="punctuation">:</span> <span class="string">&quot;user&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;帮我查询上海的天气&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;tools&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;function&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;function&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;get_weather&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;获取指定城市的天气&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;parameters&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;object&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;city&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">              <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">              <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;城市名&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">          <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;required&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;city&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>对应的python openai代码如下，我们将tools部分放入一个包含dict的list，作为create函数的tools参数即可。同时tool_choice传入auto代表自动选择工具。这里我用了硅基流动提供的Qwen2.5模型作为演示，运行下面这个代码需要修改api_key为正确值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> openai <span class="comment"># 1.75.0</span></span><br><span class="line"><span class="keyword">import</span> json <span class="comment"># 后续会用到json</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    client = openai.OpenAI(</span><br><span class="line">        api_key=<span class="string">&quot;xxxxx&quot;</span>,</span><br><span class="line">        base_url=<span class="string">&quot;https://api.siliconflow.cn/v1&quot;</span>)</span><br><span class="line">    tools = [&#123;</span><br><span class="line">        <span class="string">&quot;type&quot;</span>: <span class="string">&quot;function&quot;</span>,</span><br><span class="line">        <span class="string">&quot;function&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;name&quot;</span>: <span class="string">&quot;get_weather&quot;</span>,</span><br><span class="line">            <span class="string">&quot;description&quot;</span>: <span class="string">&quot;获取指定城市的天气&quot;</span>,</span><br><span class="line">            <span class="string">&quot;parameters&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;type&quot;</span>: <span class="string">&quot;object&quot;</span>,</span><br><span class="line">                <span class="string">&quot;properties&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;city&quot;</span>: &#123;</span><br><span class="line">                        <span class="string">&quot;type&quot;</span>: <span class="string">&quot;string&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;description&quot;</span>: <span class="string">&quot;城市名&quot;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="string">&quot;required&quot;</span>: [<span class="string">&quot;city&quot;</span>],</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;]</span><br><span class="line">    res = client.chat.completions.create(model=<span class="string">&quot;Qwen/Qwen2.5-32B-Instruct&quot;</span>,</span><br><span class="line">                                         messages=[&#123;</span><br><span class="line">                                             <span class="string">&quot;role&quot;</span>: <span class="string">&quot;system&quot;</span>,</span><br><span class="line">                                             <span class="string">&quot;content&quot;</span>: <span class="string">&quot;你是一个天气查询助手&quot;</span></span><br><span class="line">                                         &#125;, &#123;</span><br><span class="line">                                             <span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>,</span><br><span class="line">                                             <span class="string">&quot;content&quot;</span>: <span class="string">&quot;帮我查询上海的天气&quot;</span></span><br><span class="line">                                         &#125;],</span><br><span class="line">                                         tools=tools,</span><br><span class="line">                                         tool_choice=<span class="string">&quot;auto&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;content:&quot;</span>,res.choices[<span class="number">0</span>].message.content)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;tools:&quot;</span>,res.choices[<span class="number">0</span>].message.tool_calls)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;message:&quot;</span>, res.choices[<span class="number">0</span>].message.to_dict())</span><br></pre></td></tr></table></figure><p>运行程序，发出请求后，大模型就会根据用户提出的问题和提供的tools，来为这个tools编写需要提供的参数。此时content会是空，不会输出内容，tool_calls中会包含调用的工具和参数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">❯ uv run main.py</span><br><span class="line">content: </span><br><span class="line">tools: [ChatCompletionMessageToolCall(id=&#x27;01964be6e485603d6a2a0acbbc7eba91&#x27;, function=Function(arguments=&#x27;&#123;&quot;city&quot;: &quot;上海&quot;&#125;&#x27;, name=&#x27;get_weather&#x27;), type=&#x27;function&#x27;)]</span><br><span class="line">message: &#123;&#x27;content&#x27;: &#x27;&#x27;, &#x27;role&#x27;: &#x27;assistant&#x27;, &#x27;tool_calls&#x27;: [&#123;&#x27;id&#x27;: &#x27;01964be6e485603d6a2a0acbbc7eba91&#x27;, &#x27;function&#x27;: &#123;&#x27;arguments&#x27;: &#x27;&#123;&quot;city&quot;: &quot;上海&quot;&#125;&#x27;, &#x27;name&#x27;: &#x27;get_weather&#x27;&#125;, &#x27;type&#x27;: &#x27;function&#x27;&#125;]&#125;</span><br></pre></td></tr></table></figure><p>对应如下json格式响应，包含了我们的参数</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;role&quot;</span><span class="punctuation">:</span> <span class="string">&quot;assistant&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;tool_calls&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;01964be6e485603d6a2a0acbbc7eba91&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;function&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;function&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;get_weather&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;arguments&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&#123;\n  \&quot;city\&quot;: \&quot;上海\&quot;\n&#125;&quot;</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="2-1-2-调用工具并让AI二次处理">2.1.2. 调用工具并让AI二次处理</h4><p>随后，我们就可以根据这个大模型返回的参数来调用我们的函数，并得到函数的返回结果，再次与大模型进行对话。此时需要按下面的方式维护对话上下文，首先需要将第一次请求AI返回的结果插入到上下文中（<code>&quot;role&quot;: &quot;assistant&quot;</code>的json字符串），然后再插入工具调用的数据，格式如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;role&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tool&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;工具调用结果&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;tool_call_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ai调用工具时返回的id&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>其中content代表工具调用的结果（字符串形式，内容可以是json），并且需要用<code>tool_call_id</code>来标识这是哪一个工具调用的请求，必须要和<code>&quot;role&quot;: &quot;assistant&quot;</code>响应中的id对应。</p><p>二次AI交互对应python代码如下，在上文提供的python代码之后追加</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 插入结果，再次对话</span></span><br><span class="line">messages.append(res.choices[<span class="number">0</span>].message.to_dict()) <span class="comment"># ai第一次返回的数据</span></span><br><span class="line"><span class="comment"># 工具调用的参数</span></span><br><span class="line">tool_call = res.choices[<span class="number">0</span>].message.tool_calls[<span class="number">0</span>]</span><br><span class="line">arguments = json.loads(tool_call.function.arguments)</span><br><span class="line">messages.append(&#123;</span><br><span class="line">    <span class="string">&quot;role&quot;</span>: <span class="string">&quot;tool&quot;</span>,</span><br><span class="line">    <span class="string">&quot;content&quot;</span>: get_weather(arguments[<span class="string">&#x27;city&#x27;</span>]),</span><br><span class="line">    <span class="string">&quot;tool_call_id&quot;</span>: tool_call.<span class="built_in">id</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment"># 二次请求</span></span><br><span class="line">res = client.chat.completions.create(model=model,</span><br><span class="line">                                     messages=messages,</span><br><span class="line">                                     tools=tools,</span><br><span class="line">                                     tool_choice=<span class="string">&quot;auto&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;content:&quot;</span>, res.choices[<span class="number">0</span>].message.content)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;tools:&quot;</span>, res.choices[<span class="number">0</span>].message.tool_calls)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;message:&quot;</span>, res.choices[<span class="number">0</span>].message.to_dict())</span><br></pre></td></tr></table></figure><p>其中get_weather函数如下，为了测试是写死的值，返回一个json字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_weather</span>(<span class="params">location</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#123;&quot;Celsius&quot;: 27, &quot;type&quot;: &quot;sunny&quot;&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>最终运行结果，AI成功根据我们工具调用的返回值来输出了对话方式的天气情况，包括温度和晴天。这样我们就完成了一个完整的tools调用和AI再处理的过程了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">❯ uv run main.py</span><br><span class="line">content: </span><br><span class="line">tools: [ChatCompletionMessageToolCall(id=&#x27;01964be6e485603d6a2a0acbbc7eba91&#x27;, function=Function(arguments=&#x27;&#123;&quot;city&quot;: &quot;上海&quot;&#125;&#x27;, name=&#x27;get_weather&#x27;), type=&#x27;function&#x27;)]</span><br><span class="line">message: &#123;&#x27;content&#x27;: &#x27;&#x27;, &#x27;role&#x27;: &#x27;assistant&#x27;, &#x27;tool_calls&#x27;: [&#123;&#x27;id&#x27;: &#x27;01964be6e485603d6a2a0acbbc7eba91&#x27;, &#x27;function&#x27;: &#123;&#x27;arguments&#x27;: &#x27;&#123;&quot;city&quot;: &quot;上海&quot;&#125;&#x27;, &#x27;name&#x27;: &#x27;get_weather&#x27;&#125;, &#x27;type&#x27;: &#x27;function&#x27;&#125;]&#125;</span><br><span class="line">-------------------</span><br><span class="line">content: 上海当前的天气是晴天，温度是27摄氏度。</span><br><span class="line">tools: None</span><br><span class="line">message: &#123;&#x27;content&#x27;: &#x27;上海当前的天气是晴天，温度是27摄氏度。&#x27;, &#x27;role&#x27;: &#x27;assistant&#x27;&#125;</span><br></pre></td></tr></table></figure><details class="toggle" ><summary class="toggle-button" style="">本次function call的完整上下文和代码</summary><div class="toggle-content"><p>完整json上下文信息</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;role&quot;</span><span class="punctuation">:</span> <span class="string">&quot;system&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;你是一个天气查询助手&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;role&quot;</span><span class="punctuation">:</span> <span class="string">&quot;user&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;帮我查询上海的天气&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;role&quot;</span><span class="punctuation">:</span> <span class="string">&quot;assistant&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;tool_calls&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;01964beeb9ee27098b74149d86560b35&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;function&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;arguments&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&#123;\&quot;city\&quot;: \&quot;上海\&quot;&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;get_weather&quot;</span></span><br><span class="line">                <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;function&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;role&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tool&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&#123;\&quot;Celsius\&quot;: 27, \&quot;type\&quot;: \&quot;sunny\&quot;&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;tool_call_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;01964beeb9ee27098b74149d86560b35&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;role&quot;</span><span class="punctuation">:</span> <span class="string">&quot;assistant&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;上海当前的天气是晴天，温度是27摄氏度。&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><p>完整代码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> openai <span class="comment"># 1.75.0</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_weather</span>(<span class="params">location</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#123;&quot;Celsius&quot;: 27, &quot;type&quot;: &quot;sunny&quot;&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">model=<span class="string">&quot;Qwen/Qwen2.5-32B-Instruct&quot;</span></span>):</span><br><span class="line">    client = openai.OpenAI(</span><br><span class="line">        api_key=<span class="string">&quot;xxxx&quot;</span>,</span><br><span class="line">        base_url=<span class="string">&quot;https://api.siliconflow.cn/v1&quot;</span>)</span><br><span class="line">    tools = [&#123;</span><br><span class="line">        <span class="string">&quot;type&quot;</span>: <span class="string">&quot;function&quot;</span>,</span><br><span class="line">        <span class="string">&quot;function&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;name&quot;</span>: <span class="string">&quot;get_weather&quot;</span>,</span><br><span class="line">            <span class="string">&quot;description&quot;</span>: <span class="string">&quot;获取指定城市的天气&quot;</span>,</span><br><span class="line">            <span class="string">&quot;parameters&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;type&quot;</span>: <span class="string">&quot;object&quot;</span>,</span><br><span class="line">                <span class="string">&quot;properties&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;city&quot;</span>: &#123;</span><br><span class="line">                        <span class="string">&quot;type&quot;</span>: <span class="string">&quot;string&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;description&quot;</span>: <span class="string">&quot;城市名&quot;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="string">&quot;required&quot;</span>: [<span class="string">&quot;city&quot;</span>],</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;]</span><br><span class="line">    messages = [&#123;</span><br><span class="line">        <span class="string">&quot;role&quot;</span>: <span class="string">&quot;system&quot;</span>,</span><br><span class="line">        <span class="string">&quot;content&quot;</span>: <span class="string">&quot;你是一个天气查询助手&quot;</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        <span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>,</span><br><span class="line">        <span class="string">&quot;content&quot;</span>: <span class="string">&quot;帮我查询上海的天气&quot;</span></span><br><span class="line">    &#125;]</span><br><span class="line">    res = client.chat.completions.create(model=model,</span><br><span class="line">                                         messages=messages,</span><br><span class="line">                                         tools=tools,</span><br><span class="line">                                         tool_choice=<span class="string">&quot;auto&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;content:&quot;</span>, res.choices[<span class="number">0</span>].message.content)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;tools:&quot;</span>, res.choices[<span class="number">0</span>].message.tool_calls)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;message:&quot;</span>, res.choices[<span class="number">0</span>].message.to_dict())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;-------------------&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 插入结果，再次对话</span></span><br><span class="line">    messages.append(res.choices[<span class="number">0</span>].message.to_dict())</span><br><span class="line">    tool_call = res.choices[<span class="number">0</span>].message.tool_calls[<span class="number">0</span>]</span><br><span class="line">    arguments = json.loads(tool_call.function.arguments)</span><br><span class="line">    messages.append(&#123;</span><br><span class="line">        <span class="string">&quot;role&quot;</span>: <span class="string">&quot;tool&quot;</span>,</span><br><span class="line">        <span class="string">&quot;content&quot;</span>: get_weather(arguments[<span class="string">&#x27;city&#x27;</span>]),</span><br><span class="line">        <span class="string">&quot;tool_call_id&quot;</span>: tool_call.<span class="built_in">id</span></span><br><span class="line">    &#125;)</span><br><span class="line">    res = client.chat.completions.create(model=model,</span><br><span class="line">                                         messages=messages,</span><br><span class="line">                                         tools=tools,</span><br><span class="line">                                         tool_choice=<span class="string">&quot;auto&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;content:&quot;</span>, res.choices[<span class="number">0</span>].message.content)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;tools:&quot;</span>, res.choices[<span class="number">0</span>].message.tool_calls)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;message:&quot;</span>, res.choices[<span class="number">0</span>].message.to_dict())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure></div></details><h4 id="2-1-3-tool-choice设置为none">2.1.3. tool_choice设置为none</h4><p>这里也测试一下把<code>tool_choice</code>设置为<strong>none</strong>的情况，此时即便传入了tools，AI也不会认为有外部工具，会直接返回文字说明。<code>tool_choice</code>还有另外一个可选值是required，也就是必须要调用外部工具。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">❯ uv run main.py</span><br><span class="line">content: 我无法提供实时数据或即时查询服务，因为我当前的功能不包括访问互联网获取最新信息。你可以通过查询各类天气应用查看上海最新的天气情况，或者提供具体日期，我可以教你如何根据这些信息来判断和理解天气状况。如果你有任何关于天气的一般性问题，或需要了解某些天气条件的影响，也欢迎向我询问。</span><br><span class="line">tools: None</span><br><span class="line">message: &#123;&#x27;content&#x27;: &#x27;我无法提供实时数据或即时查询服务，因为我当前的功能不包括访问互联网获取最新信息。你可以通过查询各类天气应用查看上海最新的天气情况，或者提供具体日期，我可以教你如何根据这些信息来判断和理解天气状况。如果你有任何关于天气的一般性问题，或需要了解某些天气条件的影响，也欢迎向我询问。&#x27;, &#x27;role&#x27;: &#x27;assistant&#x27;&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-function-call的问题">2.2. function call的问题</h3><p>如下是一次function call的流程图</p><pre><code class="highlight mermaid">graph TD    A[编写tools，并提供tools参数配置] --&gt; |调用OpenAI Chat Completions接口，提供tools|C[AI理解tools的作用和参数，并返回调用参数]    C --&gt; |脚本处理AI返回的参数，调用tools，获取结果|E[AI获取tools结果，解析并生成自然语言回答]</code></pre><p>经过这个流程会发现一个问题，即便是简单的调用一个只有单参数的获取天气的函数，在使用openai这个第三方库的情况下都需要费很大劲，<strong>主要是tools的调用操作需要我们自己编写脚本实现</strong>，如果我们整个AI处理流程涉及到更多tools函数的时候，就很难处理了。</p><p>为了解决这个问题，openai在2025年新开源的<a href="https://github.com/openai/openai-agents-python/">OpenAI Agent SDK</a>中提供了更加便捷的tools工具调用的处理，只需要编写一个工具类，在Agent初始化的时候传入，Agent就能自动识别这个工具类中的方法并调用工具（自动给本地的函数传入参数）。示例代码可以参考开源仓库中的<a href="https://github.com/openai/openai-agents-python/blob/main/examples/tools/web_search.py">example</a>。</p><p>不过这还是没有解决一个最根本的问题，<strong>那就是外部工具调用方式的不统一</strong>。光是我现在知道的Agent开发SDK就有三个（OpenAI、QwenAgent、谷歌ADK），这三个SDK都会有一套自己的tools调用逻辑，而且openai和qwen的SDK更是只支持自家的模型，这样就会导致即便是同一个tools，在使用不同的SDK的时候，也需要针对这个SDK去重新编写一套tools的调用逻辑，很是麻烦。</p><p>了解了这个背景之后，想必你能理解MCP协议的重要性了，它规范了tools的调用方式，同一个tools我们只需要编写一次MCP Server，就能够在众多支持mcp的AI Agent里面被调用，解决了针对不同AI模型或SDK对tools进行单独适配的痛点！</p><h2 id="3-MCP协议详解">3. MCP协议详解</h2><p>接下来让我们简单了解一下MCP协议是怎么提供统一的tools调用方式的。在这之前，需要先注明几个名词</p><ul><li>MCP Hosts：如 Claude Desktop、IDE 或 AI 工具，希望通过 MCP 访问数据的程序（也就是AI Agent程序）</li><li>MCP Clients：用于维护和服务器链接的一对一工具</li><li>MCP Servers：通过MCP协议提供特定能力</li><li>本地数据源：MCP服务器可以安装访问本地的文件、数据库和服务</li><li>远程服务：MCP服务器可通过各类API链接互联网上的外部系统</li></ul><p>其中要注意MCP Hosts和Clients的区别，为了更好的区分，后文会用AI来指代MCP Hosts，毕竟MCP工具的输出结果都是会让AI来处理的。</p><h3 id="3-1-MCP-Server">3.1. MCP Server</h3><h4 id="3-1-1-tools">3.1.1. tools</h4><p>以官方的<a href="https://github.com/modelcontextprotocol/python-sdk/tree/main/examples/servers/simple-tool">MCP Server Demo</a>为例，在tools模式下，Server主要提供的是两个能力，一个是获取当前服务器支持的tools，另外一个就是call tool调用工具的能力。</p><p>其中，获取当前支持的tools会返回tools列表、每个tools的inputSchema参数和参数的type/description释义。这一点和function call是类似的，只不过mcp的sdk将其包装成了一个types.Tool类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.list_tools()</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">list_tools</span>() -&gt; <span class="built_in">list</span>[types.Tool]:</span><br><span class="line">    <span class="keyword">return</span> [</span><br><span class="line">        types.Tool(</span><br><span class="line">            name=<span class="string">&quot;fetch&quot;</span>,</span><br><span class="line">            description=<span class="string">&quot;Fetches a website and returns its content&quot;</span>,</span><br><span class="line">            inputSchema=&#123;</span><br><span class="line">                <span class="string">&quot;type&quot;</span>: <span class="string">&quot;object&quot;</span>,</span><br><span class="line">                <span class="string">&quot;required&quot;</span>: [<span class="string">&quot;url&quot;</span>],</span><br><span class="line">                <span class="string">&quot;properties&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;url&quot;</span>: &#123;</span><br><span class="line">                        <span class="string">&quot;type&quot;</span>: <span class="string">&quot;string&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;description&quot;</span>: <span class="string">&quot;URL to fetch&quot;</span>,</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">        )</span><br><span class="line">    ]</span><br></pre></td></tr></table></figure><p>除了人工编写这部分参数列表，我们还可以参考<a href="https://github.com/modelcontextprotocol/servers/blob/main/src/git/src/mcp_server_git/server.py">mcp_server_git</a>的实现，借助pydantic来定义每一个方法的参数列表，并使用<code>schema()</code>自动获取参数释义。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Tool(</span><br><span class="line">    name=GitTools.DIFF_STAGED,</span><br><span class="line">    description=<span class="string">&quot;Shows changes that are staged for commit&quot;</span>,</span><br><span class="line">    inputSchema=GitDiffStaged.schema(),</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>举个例子，运行下面的代码，可以得到GitStatus这个类定义的两个入参的名称、类型和说明</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pydantic <span class="keyword">import</span> BaseModel</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GitStatus</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    repo_path: <span class="built_in">str</span></span><br><span class="line">    hello_text: <span class="built_in">str</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行会提示schema函数已经弃用，建议使用model_json_schema替代</span></span><br><span class="line"><span class="built_in">print</span>(GitStatus.model_json_schema())</span><br><span class="line"><span class="comment"># 输出如下</span></span><br><span class="line"><span class="comment"># &#123;&#x27;properties&#x27;: &#123;&#x27;repo_path&#x27;: &#123;&#x27;title&#x27;: &#x27;Repo Path&#x27;, &#x27;type&#x27;: &#x27;string&#x27;&#125;, &#x27;hello_text&#x27;: &#123;&#x27;title&#x27;: &#x27;Hello Text&#x27;, &#x27;type&#x27;: &#x27;string&#x27;&#125;&#125;, &#x27;required&#x27;: [&#x27;repo_path&#x27;, &#x27;hello_text&#x27;], &#x27;title&#x27;: &#x27;GitStatus&#x27;, &#x27;type&#x27;: &#x27;object&#x27;&#125;</span></span><br></pre></td></tr></table></figure><p>需要注意的是，这里获取到的title释义是直接根据<strong>参数名称</strong>来的，并没有人工编写的description那么准确。所以使用这种方式传入inputSchema的时候，需要我们尽可能地标准命名参数名称，<strong>让AI能通过参数名称直接推断出这个参数要传入什么内容</strong>。</p><p>调用函数的操作就和function call类似了，MCP协议传入的同样也是arguments列表，需要我们将其解析并调用我们实际编写的函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.call_tool()</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">fetch_tool</span>(<span class="params"></span></span><br><span class="line"><span class="params">    name: <span class="built_in">str</span>, arguments: <span class="built_in">dict</span></span></span><br><span class="line"><span class="params"></span>) -&gt; <span class="built_in">list</span>[types.TextContent | types.ImageContent | types.EmbeddedResource]:</span><br><span class="line">    <span class="keyword">if</span> name != <span class="string">&quot;fetch&quot;</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">f&quot;Unknown tool: <span class="subst">&#123;name&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;url&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> arguments:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;Missing required argument &#x27;url&#x27;&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> fetch_website(arguments[<span class="string">&quot;url&quot;</span>]) <span class="comment"># 调用实际函数</span></span><br></pre></td></tr></table></figure><p>除了这种复杂的方式，mcp sdk还提供了一个<a href="https://github.com/modelcontextprotocol/python-sdk/blob/main/examples/fastmcp/desktop.py">FastMcp</a>，只需要我们在编写的函数上加一个<code>@mcp.tool()</code>装饰器，就能立马把我们的普通函数变成mcp tools，非常方便。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> mcp.server.fastmcp <span class="keyword">import</span> FastMCP</span><br><span class="line">mcp = FastMCP(<span class="string">&quot;Demo&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@mcp.tool()</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">a: <span class="built_in">int</span>, b: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Add two numbers&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line"></span><br><span class="line">mcp.run() <span class="comment"># 运行server</span></span><br></pre></td></tr></table></figure><p>使用这种方式对时候，装饰器会自动去获取我们函数的参数以及参数的类型，并生成<code>types.Tool</code>返回给客户端。这个装饰器有两个参数，name在不传入的时候默认为函数名称，description在不传入的时候默认为函数的docstring（也就是函数下的<code>&quot;&quot;&quot;</code>注释）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name: Optional name for the tool (defaults to function name)</span><br><span class="line">description: Optional description of what the tool does</span><br></pre></td></tr></table></figure><p>从SDK的源码中可以找到，装饰器会调用<code>Tool.from_function</code>来生成<code>types.Tool</code>类型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add_tool</span>(<span class="params"></span></span><br><span class="line"><span class="params">    self,</span></span><br><span class="line"><span class="params">    fn: <span class="type">Callable</span>[..., <span class="type">Any</span>],</span></span><br><span class="line"><span class="params">    name: <span class="built_in">str</span> | <span class="literal">None</span> = <span class="literal">None</span>,</span></span><br><span class="line"><span class="params">    description: <span class="built_in">str</span> | <span class="literal">None</span> = <span class="literal">None</span>,</span></span><br><span class="line"><span class="params"></span>) -&gt; Tool:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Add a tool to the server.&quot;&quot;&quot;</span></span><br><span class="line">    tool = Tool.from_function(fn, name=name, description=description)</span><br><span class="line">    existing = <span class="variable language_">self</span>._tools.get(tool.name) <span class="comment"># 判断是否有同名函数已经被注册过了</span></span><br><span class="line">    <span class="keyword">if</span> existing:</span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.warn_on_duplicate_tools:</span><br><span class="line">            logger.warning(<span class="string">f&quot;Tool already exists: <span class="subst">&#123;tool.name&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> existing <span class="comment"># 直接返回已注册的同名函数，不返回本次新注册的函数</span></span><br><span class="line">    <span class="comment"># 新注册函数</span></span><br><span class="line">    <span class="variable language_">self</span>._tools[tool.name] = tool</span><br><span class="line">    <span class="keyword">return</span> tool</span><br></pre></td></tr></table></figure><p>在<code>Tool.from_function</code>函数中会注册name和description</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">func_name = name <span class="keyword">or</span> fn.__name__</span><br><span class="line"><span class="keyword">if</span> func_name == <span class="string">&quot;&lt;lambda&gt;&quot;</span>: <span class="comment"># lambda表达式没有函数名，必须传入name参数</span></span><br><span class="line">    <span class="keyword">raise</span> ValueError(<span class="string">&quot;You must provide a name for lambda functions&quot;</span>)</span><br><span class="line">func_doc = description <span class="keyword">or</span> fn.__doc__ <span class="keyword">or</span> <span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure><h4 id="3-1-2-prompts和resources">3.1.2. prompts和resources</h4><p>除了最常用的tools，mcp还提供了prompts和resources两种服务方式，其中prompt是用于定义一些常用操作的提示词，此时客户端可以直接去获取这些提示词和ai交互，避免我们针对某一个流程重复编写提示词；resources是定义一个url格式，当我们的交流中出现这个url格式的时候，ai就可以调用这个工具去做一些特定操作，比如请求某个api或者操作数据库。</p><p>但很不幸的是，以上都是慕雪的个人简单理解，由于prompt和resources实在没有找到可以参考的博客或如何使用的demo，我并不是很理解它们在AI工具中是怎么被使用以及是在什么时候被使用的。网上针对MCP的教程也主要集中于tools层面。</p><p>后续如果对这俩有更多了解了，再回来补充本文。</p><h3 id="3-2-客户端配置本地和远程MCP-Server">3.2. 客户端配置本地和远程MCP Server</h3><p>在MCP SDK中主要提供了两种server启动的方式，一个是stdio流式传输（本地）的方式，另外一个是sse远程API的方式。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TRANSPORTS = <span class="type">Literal</span>[<span class="string">&quot;stdio&quot;</span>, <span class="string">&quot;sse&quot;</span>]</span><br></pre></td></tr></table></figure><p>这两种方式分别对应了两种服务器的配置方式。如果是本地的mcp服务器，需要使用命令来指定mcp服务器代码文件所在路径，并启动它。这个代码可以是github上克隆的仓库，也可以是通过npm或其他方式安装到本地的可执行文件。</p><h4 id="3-2-1-本地（stdio）">3.2.1. 本地（stdio）</h4><p>以python编写的MCP Server为例，需要通过如下方式启动某一个MCP Server，其中<code>--directory</code>指定的工作路径，必须指定这个工作路径才能找到<code>mcp-simple-tool</code>的代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 官方 mcp-simple-tool demo</span></span><br><span class="line">uv run --directory /Users/mothra/data/code/python/openai/mcp-python-sdk/examples/servers/simple-tool mcp-simple-tool</span><br></pre></td></tr></table></figure><p>此时是采用stdio方式启动的server，对应配置文件如下（可供Agent SDK调用）</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;mcpServers&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;mcp-simple-tool&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;uv&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;run&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;--directory&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;/Users/mothra/data/code/python/openai/mcp-python-sdk/examples/servers/simple-tool&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;mcp-simple-tool&quot;</span></span><br><span class="line">            <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>当客户端需要使用这个MCP Server的时候，会自动根据我们配置的命令去尝试在本地启动这个mcp服务端，然后和它交互。所以，如果使用stdio来配置MCP Server但本地却没有uv环境的时候，程序是无法启动的。</p><p>以CherryStudio为例，在mcp配置中，以stdio格式添加我们这个配置，点击右上角保存，保存成功则代表配置正常。保存失败则需要检查配置的命令和路径是否出错</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/04/08b84f73e3c9751178714d6dbce3b404.webp" alt="image.png"></p><p>此时勾选底部的MCP服务器，和AI对话，给出一个URL，他会自动调用工具去下载这个URL的html文件，并解析和输出他对这个HTML文件的理解。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/04/d1d1d4c8e51a89067a001cb918f8f457.webp" alt="image.png"></p><p>需要注意的是CherryStudio的mcpServers json配置文件并不是标准mcpServers的格式，多了一些字段，估计是方便前端设计。在AI的初次输出中也会把GdTGt4qMFpnyYqBxaqTrM输出出来，因为在标准mcpServers配置中GdTGt4qMFpnyYqBxaqTrM字段就是mcp服务端的名称。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;mcpServers&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;GdTGt4qMFpnyYqBxaqTrM&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;isActive&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;网页获取&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;stdio&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;通过url获取网页内容&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;registryUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;uv&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;run&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;--directory&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;/Users/mothra/data/code/python/openai/mcp-python-sdk/examples/servers/simple-tool&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;mcp-simple-tool&quot;</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>标准的mcpServers的格式并不需要那些额外字段，只需要我在前文给出的基础mspServers配置就可以了。以Qwen-Agent为例，只需要把json填入tools中就可以调用mcp服务器了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> qwen_agent.agents <span class="keyword">import</span> Assistant</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">init_agent_service</span>():</span><br><span class="line">    llm_cfg = &#123;</span><br><span class="line">        <span class="string">&#x27;model&#x27;</span>: <span class="string">&#x27;Qwen/Qwen2.5-32B-Instruct&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;model_server&#x27;</span>: <span class="string">&#x27;https://api.siliconflow.cn/v1&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;api_key&#x27;</span>: <span class="string">&#x27;xxxx&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    system = (<span class="string">&#x27;你是一个强大的助手，可以帮用户处理问题。&#x27;</span>)</span><br><span class="line">    tools = [&#123;</span><br><span class="line">        <span class="string">&quot;mcpServers&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;mcp-simple-tool&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;command&quot;</span>:</span><br><span class="line">                <span class="string">&quot;uv&quot;</span>,</span><br><span class="line">                <span class="string">&quot;args&quot;</span>: [</span><br><span class="line">                    <span class="string">&quot;run&quot;</span>, <span class="string">&quot;--directory&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;/Users/mothra/data/code/python/openai/mcp-python-sdk/examples/servers/simple-tool&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;mcp-simple-tool&quot;</span></span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;]</span><br><span class="line">    bot = Assistant(</span><br><span class="line">        llm=llm_cfg,</span><br><span class="line">        name=<span class="string">&#x27;网页查看助手&#x27;</span>,</span><br><span class="line">        description=<span class="string">&#x27;网页查看&#x27;</span>,</span><br><span class="line">        system_message=system,</span><br><span class="line">        function_list=tools,</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> bot</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">text=<span class="string">&#x27;这个网站是什么？https://blog.musnow.top/&#x27;</span></span>):</span><br><span class="line">    bot = init_agent_service()</span><br><span class="line">    messages = [&#123;<span class="string">&#x27;role&#x27;</span>: <span class="string">&#x27;user&#x27;</span>, <span class="string">&#x27;content&#x27;</span>: text&#125;]</span><br><span class="line">    <span class="comment"># 请求</span></span><br><span class="line">    <span class="keyword">for</span> response <span class="keyword">in</span> bot.run(messages):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;bot response:&#x27;</span>, response)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>Qwen最终的输出如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#x27;role&#x27;: &#x27;assistant&#x27;, &#x27;content&#x27;: &#x27;这个网址是一个个人博客站点，名字叫做“慕雪的寒舍”。站点描述自己为“爱折腾的代码初学者”。\n\n博客主要内容包含了编程学习（如Python、C、ROS等）、博客建站的相关知识以及一些编程相关的项目开发记录。\n\n网站首页还展示了近期发表的文章、公告、分类和标签等信息方便用户查找和浏览。\n\n总之，这是一个包含了编程学习和项目开发记录内容的个人技术博客。&#x27;, &#x27;reasoning_content&#x27;: &#x27;&#x27;, &#x27;name&#x27;: &#x27;网页查看助手&#x27;&#125;</span><br></pre></td></tr></table></figure><h4 id="3-2-2-远程（sse）">3.2.2. 远程（sse）</h4><p>远程调用的配置就需要服务器的url了。首先通过如下方式启动demo，提供命令行参数sse以远程方式启动，port指定端口8000</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uv run --directory /Users/mothra/data/code/python/openai/mcp-python-sdk/examples/servers/simple-tool mcp-simple-tool --transport sse --port 8000</span><br></pre></td></tr></table></figure><p>此时终端会输出当前进程PID以及服务端的url</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">INFO:     Started server process [17058]</span><br><span class="line">INFO:     Waiting for application startup.</span><br><span class="line">INFO:     Application startup complete.</span><br><span class="line">INFO:     Uvicorn running on http://0.0.0.0:8000 (Press CTRL+C to quit)</span><br></pre></td></tr></table></figure><p>对应mcpServers配置文件，其中<strong>disabled</strong>是当前server是否被禁用，设置false为启用这个server，<strong>timeout</strong>是链接服务端的超时时间。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;mcpServers&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;exampleServer&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://127.0.0.1:8000/sse&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;disabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;timeout&quot;</span><span class="punctuation">:</span> <span class="number">30</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>在cherrystudio中填写 <code>http://0.0.0.0:8000/sse</code>作为sse服务地址</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/04/58c071e226b752b3071a8677e574ef02.webp" alt="image.png"></p><p>同样可以正常调用，输出结果</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/04/0587057a2eb1b032ab58cd848f0b82e5.webp" alt="image.png"></p><p>注意，在QwenAgent SDK中必须使用<code>http://127.0.0.1:8000/sse</code>才能正常连接这个远程服务器，不能使用<code>http://0.0.0.0:8000/sse</code>，否则会出现502 Bad Gateway错误，详见<a href="https://github.com/QwenLM/Qwen-Agent/issues/501">issue</a>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">INFO:mcp.client.sse:Connecting to SSE endpoint: http://0.0.0.0:8000/sse/</span><br><span class="line">DEBUG:httpcore.connection:connect_tcp.started host=&#x27;127.0.0.1&#x27; port=7897 local_address=None timeout=5 socket_options=None</span><br><span class="line">DEBUG:httpcore.connection:connect_tcp.complete return_value=&lt;httpcore._backends.anyio.AnyIOStream object at 0x1075a3c70&gt;</span><br><span class="line">DEBUG:httpcore.http11:send_request_headers.started request=&lt;Request [b&#x27;GET&#x27;]&gt;</span><br><span class="line">DEBUG:httpcore.http11:send_request_headers.complete</span><br><span class="line">DEBUG:httpcore.http11:send_request_body.started request=&lt;Request [b&#x27;GET&#x27;]&gt;</span><br><span class="line">DEBUG:httpcore.http11:send_request_body.complete</span><br><span class="line">DEBUG:httpcore.http11:receive_response_headers.started request=&lt;Request [b&#x27;GET&#x27;]&gt;</span><br><span class="line">DEBUG:httpcore.http11:receive_response_headers.complete return_value=(b&#x27;HTTP/1.1&#x27;, 502, b&#x27;Bad Gateway&#x27;, [(b&#x27;Connection&#x27;, b&#x27;close&#x27;), (b&#x27;Content-Length&#x27;, b&#x27;0&#x27;)])</span><br><span class="line">INFO:httpx:HTTP Request: GET http://0.0.0.0:8000/sse/ &quot;HTTP/1.1 502 Bad Gateway&quot;</span><br><span class="line">DEBUG:httpcore.http11:response_closed.started</span><br><span class="line">DEBUG:httpcore.http11:response_closed.complete</span><br><span class="line">2025-04-19 15:51:29,240 - mcp_manager.py - 206 - INFO - Failed to connect to server: unhandled errors in a TaskGroup (1 sub-exception)</span><br><span class="line">INFO:qwen_agent_logger:Failed to connect to server: unhandled errors in a TaskGroup (1 sub-exception)</span><br><span class="line">2025-04-19 15:51:29,247 - mcp_manager.py - 91 - INFO - Error executing function: &#x27;NoneType&#x27; object is not iterable</span><br><span class="line">INFO:qwen_agent_logger:Error executing function: &#x27;NoneType&#x27; object is not iterable</span><br></pre></td></tr></table></figure><p>修改了tools的配置为远程url，其他代码保持不变</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> qwen_agent.agents <span class="keyword">import</span> Assistant</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line">logging.basicConfig(level=logging.DEBUG)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">init_agent_service</span>():</span><br><span class="line">    llm_cfg = &#123;</span><br><span class="line">        <span class="string">&#x27;model&#x27;</span>: <span class="string">&#x27;Qwen/Qwen2.5-32B-Instruct&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;model_server&#x27;</span>: <span class="string">&#x27;https://api.siliconflow.cn/v1&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;api_key&#x27;</span>: <span class="string">&#x27;xxxx&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    system = (<span class="string">&#x27;你是一个强大的助手，可以帮用户处理问题。&#x27;</span>)</span><br><span class="line">    tools = [&#123;</span><br><span class="line">        <span class="string">&quot;mcpServers&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;exmaple-server&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;url&quot;</span>: <span class="string">&quot;http://127.0.0.1:8000/sse&quot;</span>,</span><br><span class="line">                <span class="string">&quot;disabled&quot;</span>: <span class="literal">False</span>,</span><br><span class="line">                <span class="string">&quot;timeout&quot;</span>: <span class="number">30</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;]</span><br><span class="line">    bot = Assistant(</span><br><span class="line">        llm=llm_cfg,</span><br><span class="line">        name=<span class="string">&#x27;网页查看助手&#x27;</span>,</span><br><span class="line">        description=<span class="string">&#x27;网页查看&#x27;</span>,</span><br><span class="line">        system_message=system,</span><br><span class="line">        function_list=tools,</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> bot</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">text=<span class="string">&#x27;这个网站是什么？https://blog.musnow.top/&#x27;</span></span>):</span><br><span class="line">    bot = init_agent_service()</span><br><span class="line">    messages = [&#123;<span class="string">&#x27;role&#x27;</span>: <span class="string">&#x27;user&#x27;</span>, <span class="string">&#x27;content&#x27;</span>: text&#125;]</span><br><span class="line">    <span class="comment"># 请求</span></span><br><span class="line">    <span class="keyword">for</span> response <span class="keyword">in</span> bot.run(messages):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;bot response:&#x27;</span>, response)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>QwenAgent正常调用工具并返回网页的结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#x27;role&#x27;: &#x27;assistant&#x27;, &#x27;content&#x27;: &#x27;这是一个名为&quot;慕雪的寒舍&quot;的博客网站。博客的作者是慕雪年华。网站上有很多关于编程学习、技术分享的文章，同时，博客还提供了分类、标签、归档等功能来帮助读者查找信息。它看起来像是一个个人的技术博客。&#x27;, &#x27;reasoning_content&#x27;: &#x27;&#x27;, &#x27;name&#x27;: &#x27;网页查看助手&#x27;&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/04/508dbaded94578dec7febdb6858fe7de.webp" alt="image.png"></p><h3 id="3-3-使用MCP协议后的tools调用流程图">3.3. 使用MCP协议后的tools调用流程图</h3><p>使用MCP协议后，流程图就变成了下面这样，此时ai工具就从tools中解放了出来，我们可以随心所欲地添加任何我们需要的MCP Server配置，最终ai能自动调用这些外部工具并处理他们的结果，不再需要像function call一样人工编写脚本处理大模型生成的参数，也不需要在不同Agent SDK中独立为tools编写适配代码了。</p><pre><code class="highlight mermaid">graph TD;    A[ai工具加载mcp配置] --&gt; |启动和连接mcp服务器|B    B[mcp client] --&gt; |链接服务器，获取已有工具，调用工具|C[MCP Server]     C --&gt;|返回已有工具，返回工具调用结果|B</code></pre><p>在让AI调用外部工具的方面，MCP协议还是非常重要的。</p><p>不过需要注意的是，MCP和function call并不是完全独立的关系。目前MCP Host中接入MCP工具有两种方式，一个是prompt的方式，另外一个就是function call方式。也就是说，在部分ai工具中，<strong>会直接使用function call功能来让ai识别MCP工具并调用</strong>。MCP主要的助力在于统一了调用这些外部工具的配置项和服务端的实现方式，让我们编写的外部工具能做到一次编写多处使用。</p><h2 id="5-The-end">5. The end</h2><p>关于MCP协议的介绍到这里就结束啦，主要介绍的还是MCP TOOLS方面的内容，有任何问题欢迎评论区讨论。</p>]]></content>
    
    
    <summary type="html">本文介绍了MCP大模型上下文协议的的概念，并对比了MCP协议和function call的区别，同时用python sdk为例介绍了mcp的使用方式。</summary>
    
    
    
    <category term="编程学习" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="Agent智能体开发" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/Agent%E6%99%BA%E8%83%BD%E4%BD%93%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="Python" scheme="https://blog.musnow.top/tags/Python/"/>
    
    <category term="MCP" scheme="https://blog.musnow.top/tags/MCP/"/>
    
    <category term="AI" scheme="https://blog.musnow.top/tags/AI/"/>
    
  </entry>
  
  <entry>
    <title>【Python】使用uv管理python虚拟环境</title>
    <link href="https://blog.musnow.top/posts/4192678800/"/>
    <id>https://blog.musnow.top/posts/4192678800/</id>
    <published>2025-04-14T13:29:43.000Z</published>
    <updated>2025-08-17T08:52:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍了python虚拟环境管理工具uv，包括uv的作用、uv的常用命令等等。</p><blockquote><p>参考：<a href="https://zhuanlan.zhihu.com/p/27452300746">UV - 管理Python 版本、环境、第三方包</a></p></blockquote><h2 id="1-介绍uv">1. 介绍uv</h2><p>官网：<a href="https://docs.astral.sh/uv/">https://docs.astral.sh/uv/</a></p><p>uv是一个python虚拟环境管理工具，可以用来替代pip、pyenv、virtualenv等等工具。根据官网的介绍，使用uv来管理虚拟环境，相比于pip能得到至少10倍以上的性能提升。</p><p>uv工具有如下功能：</p><ul><li>管理python版本；</li><li>管理第三方库（Python packages）的版本；</li><li>拥有全局的第三方库的缓存，能减少磁盘空间占用；</li><li>安装uv不需要python环境，可以通过curl或pip安装；</li><li>多平台支持：macOS、Linux、Windows;</li></ul><p>试用过后，感觉uv还是很不错的，于是编写本文，推荐给大家。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/04/aaa8558a5e2d0fa98f7e21687a22c62a.webp" alt="image.png"></p><h2 id="2-安装uv">2. 安装uv</h2><p>文档：<a href="https://docs.astral.sh/uv/getting-started/installation/">https://docs.astral.sh/uv/getting-started/installation/</a></p><p>在linux和mac上的安装直接使用curl或者wget命令即可</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl -LsSf https://astral.sh/uv/install.sh | sh</span><br><span class="line"><span class="comment"># 或者wget（效果一样）</span></span><br><span class="line">wget -qO- https://astral.sh/uv/install.sh | sh</span><br></pre></td></tr></table></figure><p>在windows上的安装命令如下</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">powershell -ExecutionPolicy ByPass -c <span class="string">&quot;irm https://astral.sh/uv/install.ps1 | iex&quot;</span></span><br></pre></td></tr></table></figure><p>在mac上安装之后，终端输出如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">❯ curl -LsSf https://astral.sh/uv/install.sh | sh</span><br><span class="line">downloading uv 0.6.14 aarch64-apple-darwin</span><br><span class="line">no checksums to verify</span><br><span class="line">installing to /Users/mothra/.local/bin</span><br><span class="line">  uv</span><br><span class="line">  uvx</span><br><span class="line">everything&#x27;s installed!</span><br><span class="line"></span><br><span class="line">To add $HOME/.local/bin to your PATH, either restart your shell or run:</span><br><span class="line"></span><br><span class="line">    source $HOME/.local/bin/env (sh, bash, zsh)</span><br><span class="line">    source $HOME/.local/bin/env.fish (fish)</span><br></pre></td></tr></table></figure><p>这里给出了提示，必须把<code>$HOME/.local/bin</code>这个路径加到环境变量PATH里面才可以正常使用uv工具。设置之后，使用<code>uv --version</code>命令确认安装成功。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">❯ uv --version</span><br><span class="line">uv 0.6.14 (a4cec56dc 2025-04-09)</span><br></pre></td></tr></table></figure><h3 id="2-1-卸载uv">2.1. 卸载uv</h3><p>卸载uv之前，先执行如下命令删除所有本地缓存文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">uv cache clean</span><br><span class="line"><span class="built_in">rm</span> -r <span class="string">&quot;<span class="subst">$(uv python dir)</span>&quot;</span></span><br><span class="line"><span class="built_in">rm</span> -r <span class="string">&quot;<span class="subst">$(uv tool dir)</span>&quot;</span></span><br></pre></td></tr></table></figure><p>然后再删除uv的二进制文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mac/linux</span></span><br><span class="line"><span class="built_in">rm</span> ~/.local/bin/uv ~/.local/bin/uvx</span><br><span class="line"><span class="comment"># windows</span></span><br><span class="line"><span class="built_in">rm</span> <span class="variable">$HOME</span>.<span class="built_in">local</span>\bin\uv.exe</span><br><span class="line"><span class="built_in">rm</span> <span class="variable">$HOME</span>.<span class="built_in">local</span>\bin\uvx.exe</span><br></pre></td></tr></table></figure><h2 id="3-基本使用">3. 基本使用</h2><h3 id="3-1-管理python版本">3.1. 管理python版本</h3><p>使用如下命令，显示出当前环境中所有可用的python版本（包括已经安装的和可以安装的）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uv python list</span><br></pre></td></tr></table></figure><p>在我的电脑上，输出如下，我的电脑上安装了python 3.9.6（xcode开发者工具安装的）、python 3.10.11、python 3.13.1版本，这几个版本都可以用uv来调用。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">❯ uv python list</span><br><span class="line">cpython-3.14.0a6-macos-aarch64-none                 &lt;download available&gt;</span><br><span class="line">cpython-3.14.0a6+freethreaded-macos-aarch64-none    &lt;download available&gt;</span><br><span class="line">cpython-3.13.3-macos-aarch64-none                   &lt;download available&gt;</span><br><span class="line">cpython-3.13.3+freethreaded-macos-aarch64-none      &lt;download available&gt;</span><br><span class="line">cpython-3.13.1-macos-aarch64-none                   /opt/homebrew/bin/python3.13 -&gt; ../Cellar/python@3.13/3.13.1/bin/python3.13</span><br><span class="line">cpython-3.13.1-macos-aarch64-none                   /opt/homebrew/bin/python3 -&gt; ../Cellar/python@3.13/3.13.1/bin/python3</span><br><span class="line">cpython-3.13.0a3-macos-aarch64-none                 /usr/local/bin/python3.13 -&gt; ../../../Library/Frameworks/Python.framework/Versions/3.13/bin/python3.13</span><br><span class="line">cpython-3.12.10-macos-aarch64-none                  &lt;download available&gt;</span><br><span class="line">cpython-3.11.12-macos-aarch64-none                  &lt;download available&gt;</span><br><span class="line">cpython-3.10.17-macos-aarch64-none                  &lt;download available&gt;</span><br><span class="line">cpython-3.10.11-macos-aarch64-none                  /usr/local/bin/python3.10 -&gt; ../../../Library/Frameworks/Python.framework/Versions/3.10/bin/python3.10</span><br><span class="line">cpython-3.10.11-macos-aarch64-none                  /usr/local/bin/python3 -&gt; ../../../Library/Frameworks/Python.framework/Versions/3.10/bin/python3</span><br><span class="line">cpython-3.10.11-macos-aarch64-none                  /Library/Frameworks/Python.framework/Versions/3.10/bin/python3.10</span><br><span class="line">cpython-3.10.11-macos-aarch64-none                  /Library/Frameworks/Python.framework/Versions/3.10/bin/python3 -&gt; python3.10</span><br><span class="line">cpython-3.9.22-macos-aarch64-none                   &lt;download available&gt;</span><br><span class="line">cpython-3.9.6-macos-aarch64-none                    /usr/bin/python3</span><br><span class="line">cpython-3.8.20-macos-aarch64-none                   &lt;download available&gt;</span><br></pre></td></tr></table></figure><p>如果需要安装其他版本的python，使用如下命令</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uv python install 3.12</span><br></pre></td></tr></table></figure><p>除了标准python之外，还可以安装其他的Python实现，比如PyPy实现的python</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uv python install pypy@3.10</span><br></pre></td></tr></table></figure><p>查找某个python版本的路径</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">❯ uv python find 3.10</span><br><span class="line">/Library/Frameworks/Python.framework/Versions/3.10/bin/python3.10</span><br></pre></td></tr></table></figure><p>查看已经安装的python版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uv python list</span><br></pre></td></tr></table></figure><h3 id="3-2-选用python版本">3.2. 选用python版本</h3><p>在具体的某个项目中，进入项目目录，使用如下命令指定选用的python版本</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uv python pin 版本号</span><br></pre></td></tr></table></figure><p>这个命令会在指定目录下创建一个<code>.python-version</code>文件，内容如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">❯ uv python pin 3.10                                    </span><br><span class="line">Pinned `.python-version` to `3.10`</span><br><span class="line"></span><br><span class="line">❯ cat .python-version  </span><br><span class="line">3.10</span><br></pre></td></tr></table></figure><p>注意，这里选用的python版本只和uv管理的虚拟环境有关系，和我们全局的python、python3命令都没有关系。</p><h3 id="3-3-创建虚拟环境（项目）">3.3. 创建虚拟环境（项目）</h3><p>创建项目有两种方式，第一种方式，先创建好项目目录，然后设置python版本并初始化uv虚拟环境</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">uv python pin 3.10</span><br><span class="line">uv init <span class="comment"># 初始化</span></span><br></pre></td></tr></table></figure><p>执行了uv init之后，会在当前目录下创建几个文件，同时也会在当前目录下执行git init创建出一个新的git仓库来</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">~/data/code/python/test_code                                                                                                      </span><br><span class="line">❯ uv python pin 3.13</span><br><span class="line">Pinned `.python-version` to `3.13`</span><br><span class="line"></span><br><span class="line">~/data/code/python/test_code                                                                                                      </span><br><span class="line">❯ uv init           </span><br><span class="line">Initialized project `test-code`</span><br><span class="line"></span><br><span class="line">~/data/code/python/test_code main ?6                                                                                              </span><br><span class="line">❯ ls</span><br><span class="line">README.md      main.py        pyproject.toml</span><br></pre></td></tr></table></figure><p>另外一个方式是在init之后添加一个项目名，会自动创建项目文件夹</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uv init 项目名</span><br></pre></td></tr></table></figure><p>如果需要指定项目使用的python版本，可以追加命令行参数<code>--python 版本</code>。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uv init 项目名 --python 3.10</span><br></pre></td></tr></table></figure><p>如果在初始化项目<strong>之后</strong>需要修改python版本，可以手动修改<code>pyproject.toml</code>配置文件里面的requires-python版本，同时修改本地<code>.python-version</code>里面指定的python版本。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">requires-python = &quot;&gt;=3.10&quot;</span><br></pre></td></tr></table></figure><h3 id="3-4-添加依赖">3.4. 添加依赖</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uv add 依赖项</span><br></pre></td></tr></table></figure><p>比如添加requests库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uv add requests</span><br></pre></td></tr></table></figure><p>还可以指定具体版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uv add requests==版本号</span><br></pre></td></tr></table></figure><p>执行了这个命令后，会在当前目录下创建<code>.venv</code>虚拟环境目录（在vscode里面可以选择这个目录作为虚拟环境，否则代码解析会有问题），并添加我们要的依赖项，同时会新增一个uv.lock文件，用于存放依赖项版本相关的信息。pyproject.toml文件中的dependencies字段也会包含需要的依赖项。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">~/data/code/python/test_code main ?6                                                                                              </span><br><span class="line">❯ uv add requests</span><br><span class="line">Using CPython 3.13.1 interpreter at: /opt/homebrew/opt/python@3.13/bin/python3.13</span><br><span class="line">Creating virtual environment at: .venv</span><br><span class="line">Resolved 6 packages in 13.85s</span><br><span class="line">Prepared 5 packages in 5.55s</span><br><span class="line">Installed 5 packages in 13ms</span><br><span class="line"> + certifi==2025.1.31</span><br><span class="line"> + charset-normalizer==3.4.1</span><br><span class="line"> + idna==3.10</span><br><span class="line"> + requests==2.32.3</span><br><span class="line"> + urllib3==2.4.0</span><br></pre></td></tr></table></figure><p>而且，从这个输出中也能看到，它自动使用了<code>.python-version</code>指定的3.13版本的python，和当前我们全局目录下的python3指向什么版本没有关系（我的全局python3指向的是3.10版本）</p><h3 id="3-5-运行程序">3.5. 运行程序</h3><p>依赖添加好后，就可以使用uv来运行python程序了</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uv run 程序文件名 [命令行参数]</span><br></pre></td></tr></table></figure><p>uv会自动按照我们的配置来运行程序，无序我们手动维护依赖项，也不需要手动去source各式各样的虚拟环境了。</p><h3 id="3-6-uvx命令">3.6. uvx命令</h3><p>随着uv下载的还有一个uvx命令，uvx命令本质上是uv tool run命令的别名，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">uvx python main.py</span><br><span class="line"><span class="comment"># 等价于</span></span><br><span class="line">uv run main.py</span><br><span class="line"><span class="comment"># 等价于</span></span><br><span class="line">uv tool run python main.py</span><br></pre></td></tr></table></figure><p>实际例子，如下这两个命令是等价的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">❯ uvx --directory ~/data/code/python/test_code python main.py</span><br><span class="line">Hello from test-code!</span><br><span class="line">    </span><br><span class="line">❯ uv tool run --directory ~/data/code/python/test_code python main.py</span><br><span class="line">Hello from test-code!</span><br></pre></td></tr></table></figure><h3 id="3-7-小结">3.7. 小结</h3><p>基本操作就是这些了，更多复杂的操作详见uv的官网。</p><h2 id="4-设置下载包的镜像源">4. 设置下载包的镜像源</h2><blockquote><p>参考：<a href="https://blog.csdn.net/qq_41472205/article/details/145686414">https://blog.csdn.net/qq_41472205/article/details/145686414</a></p></blockquote><p>uv下载第三方库本质上也是通过pypi源下载的，所以在国内网络环境中默认链接速度会很慢，可以在项目目录的pyproject.toml中添加如下内容来使用清华源</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[[tool.uv.index]]</span><br><span class="line">url = &quot;https://pypi.tuna.tsinghua.edu.cn/simple&quot;</span><br><span class="line">default = true</span><br></pre></td></tr></table></figure><p>运行uv add命令的时候也可以指定镜像源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uv add --default-index https://pypi.tuna.tsinghua.edu.cn/simple requests</span><br></pre></td></tr></table></figure><p>uv也提供了全局的配置项，可以通过环境变量<code>UV_DEFAULT_INDEX</code>配置镜像源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> UV_DEFAULT_INDEX=https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure><p>全局的配置项优先级低于pyproject.toml中配置的镜像源。如果pyproject.toml里面配置了镜像源，则会使用pyproject.toml的配置。</p><h3 id="4-1-关于uv镜像源冲突问题的坑">4.1. 关于uv镜像源冲突问题的坑</h3><p><strong>注意注意注意</strong>！</p><p>当你的uv项目文件pyproject.toml包含了一个镜像源A，但是你把<code>UV_DEFAULT_INDEX</code>设置成镜像源B的时候，在这个配置条件下，执行uv run，uv就会启动软件包的版本检查。</p><p>此时，如果你当前的网络无法访问pyproject.toml里面写好的镜像源A，那么这个软件包检查就会一直阻塞你的uv运行。即便本地的.venv环境已经有了这个项目需要的依赖项，uv依旧会进行这次启动检查。</p><p>解决方案有几种：</p><ul><li>删除pyproject.toml里面的镜像源配置；</li><li>unset环境变量<code>UV_DEFAULT_INDEX</code>；</li><li>保持<code>UV_DEFAULT_INDEX</code>和pyproject.toml里面的镜像源相同；</li><li>不要使用镜像源，一直使用官方的pypi源，用其他方式解决pypi的链接问题（你懂的）；</li></ul><p>这个问题特别烦人，特别是第一次遇到的时候，会让你觉得uv好像挂掉了，没办法run程序了。实际上他是卡在请求镜像源的步骤上了。</p><blockquote><p>不过我个人觉得uv这个检查也不是很合理，明明本地的.venv是有效的，为啥还要去请求网络检查镜像源？就不能优先判断一下本地.venv和pyproject.toml/uv.lock里面的包版本是不是一样的，是一样的直接跳过这次检查不就好了呗。</p></blockquote><p>从我的测试上看，这个启动时的镜像源检查似乎也没有超时时间（测试的时候至少超过1分钟也没有继续后续操作，unset环境变量之后才恢复正常）</p><p>因为镜像源无法联通，导致一个本地的python项目无法运行，也挺无语的。</p><h2 id="5-大模型mcp协议和uv">5. 大模型mcp协议和uv</h2><p>最近，ai agent中mcp协议的推出，让慕雪了解到了uv工具。对于mcp而言，mcp server的开发可以使用python来编写，此时python环境的管理就非常重要了。</p><p>以常见的mcp客户端配置举例，示例配置如下，其中test.py是我们编写的一个mcp服务器。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;mcpServers&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;工具名称&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;uv&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="string">&quot;--directory&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;工作路径&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;run&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;test.py&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>下图是mcp server和mcp client交互的简要逻辑（这只是个简要的流程）</p><pre><code class="highlight mermaid">graph TD;    A[ai工具加载mcp配置] --&gt; |启动mcp服务器|B    B[mcp client] --&gt; |链接服务器，调用工具|C[mcp server]     C --&gt;|返回工具调用结果|B</code></pre><p>其中第一步，ai工具加载mcp配置的时候，就需要去根据我们填写的mcpSever的配置来通过uv启动我们的服务端了，此时如果还是用python自带的venv来管理虚拟环境就不够用了，因为这里没有办法指定虚拟环境的路径，也没有人去<code>source venv/bin/activate</code>那个虚拟环境，所以mcp需要一个解决方案来更好的管理python的虚拟环境，此时uv就登场了。</p><p>使用了uv，直接执行uv run就可以了，uv工具自动帮我们维护了虚拟环境，并使用了指定环境来运行我们的服务端代码，一切问题都解决啦！</p><p>而且，mcp强制使用uv，也进一步规范了使用python编写mcp server的格式，再也不用担心某些开源python项目的根目录下连requirements.txt都没有的尴尬情况了。</p>]]></content>
    
    
    <summary type="html">本文介绍了python虚拟环境管理工具uv，包括uv的作用、uv的常用命令等等。</summary>
    
    
    
    <category term="编程学习" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="Python" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/Python/"/>
    
    
    <category term="Python" scheme="https://blog.musnow.top/tags/Python/"/>
    
    <category term="MCP" scheme="https://blog.musnow.top/tags/MCP/"/>
    
    <category term="AI" scheme="https://blog.musnow.top/tags/AI/"/>
    
  </entry>
  
  <entry>
    <title>【图床】Picgo/Piclist图片上传之前转webp（pic2webp插件）</title>
    <link href="https://blog.musnow.top/posts/5825720428/"/>
    <id>https://blog.musnow.top/posts/5825720428/</id>
    <published>2025-04-10T12:29:36.000Z</published>
    <updated>2025-08-24T09:07:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍了picgo、piclist的图片上传之前转webp的pic2webp插件，webp格式的压缩率优于截图常用的png格式，能降低站点图床运行压力，同时提升博客内图片加载体验。</p><h2 id="1-说明">1. 说明</h2><p>慕雪在编写博客的时候，都是使用snipaste软件截图并粘贴在obsidain、typora中，粘贴过程中会自动使用picgo（目前使用的是piclist，二者功能基本一致）将图片上传至图床，并返回markdown格式的图片链接。</p><p>不过，诸如snipaste截图软件，返回的截图基本都是PNG格式的，在压缩率上并不是特别理想。将PNG格式转成webp格式，至少能减少图片30%的体积，同时图片的质量没有明显变化，对于本站教程类、知识记录类博客的插图来说清晰度足够。</p><h2 id="2-安装pic2webp插件">2. 安装pic2webp插件</h2><blockquote><p>插件开源地址：<a href="https://github.com/lemonsuo/picgo-plugin-pic2webp">https://github.com/lemonsuo/picgo-plugin-pic2webp</a></p></blockquote><p>在piclist的插件列表中搜索webp，安装pic2webp插件。安装了之后，无序任何配置，只要启用插件，所有经过piclist上传的图片，在上传之前都会转成webp格式。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/04/f1efd4f400650545cfda0313bf72edbe.webp" alt="image.png"></p><h3 id="2-1-遇到的问题">2.1. 遇到的问题</h3><p>既然那么无脑，为啥还要编写本文呢？那是因为我在安装插件的时候遇到了问题：<a href="https://github.com/lemonsuo/picgo-plugin-pic2webp/issues/1">无法安装插件，提示Please verify that the package.json has a valid “main” entry</a>；</p><p>ERROR日志如下所示，picgo和piclist的插件其实都是使用npm安装的，在下面的报错中，提到了package.json的main entry可能无效，其实就是<strong>文件不存在</strong>。在插件源码中能找到package.json，其中main的定义为<code>&quot;main&quot;: &quot;dist/index.js&quot;</code>，这里的问题就在于<code>node_modules</code>目录下的插件里面没有<code>dist/index.js</code>文件，导致插件安装失败。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">2025-04-09 08:59:53 [PicList ERROR] </span><br><span class="line">------Error Stack Begin------</span><br><span class="line">Error: Cannot find module &#x27;/Users/mothra/Library/Application Support/piclist/node_modules/picgo-plugin-pic2webp/dist/index.js&#x27;. Please verify that the package.json has a valid &quot;main&quot; entry</span><br><span class="line">    at tryPackage (node:internal/modules/cjs/loader:371:19)</span><br><span class="line">    at Module._findPath (node:internal/modules/cjs/loader:584:18)</span><br><span class="line">    at Module._resolveFilename (node:internal/modules/cjs/loader:949:27)</span><br><span class="line">    at n._resolveFilename (node:electron/js2c/browser_init:2:109827)</span><br><span class="line">    at Module._load (node:internal/modules/cjs/loader:811:27)</span><br><span class="line">    at f._load (node:electron/js2c/asar_bundle:2:13377)</span><br><span class="line">    at Module.require (node:internal/modules/cjs/loader:1035:19)</span><br><span class="line">    at require (node:internal/modules/cjs/helpers:102:18)</span><br><span class="line">    at Bt.getPlugin (/Applications/PicList.app/Contents/Resources/app.asar/node_modules/piclist/dist/index.cjs.js:1:38151)</span><br><span class="line">    at Bt.registerPlugin (/Applications/PicList.app/Contents/Resources/app.asar/node_modules/piclist/dist/index.cjs.js:1:37274)</span><br><span class="line">-------Error Stack End------- </span><br></pre></td></tr></table></figure><p>既然直接通过GUI安装插件失败了，那就尝试一下手动安装，所以编写了本文，记录手动安装的步骤。</p><h3 id="2-2-本地手动安装">2.2. 本地手动安装</h3><p>在github下载仓库<a href="https://github.com/lemonsuo/picgo-plugin-pic2webp/archive/refs/tags/1.0.0.zip">zip压缩包</a>，然后解压到本地某一个目录中（确保该目录不要变动也不要删除，否则插件也会失效），进入目录中，执行<code>npm install</code>和<code>npm run build</code>命令，构建插件。构建完毕之后，就会有<code>dist/index.js</code>文件了。</p><p>慕雪使用的是<code>npm 10.8.2</code>，构建插件的时候没有遇到任何报错，一切顺利。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">~/data/code/other/picgo-plugin-pic2webp-1.0.0                                9s</span><br><span class="line">❯ npm run build</span><br><span class="line"></span><br><span class="line">&gt; picgo-plugin-pic2webp@1.0.0 build</span><br><span class="line">&gt; tsc -p .</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">~/data/code/other/picgo-plugin-pic2webp-1.0.0                                  </span><br><span class="line">❯ ls</span><br><span class="line">License           logo.ico          package.json</span><br><span class="line">README.md         node_modules      src</span><br><span class="line">dist              package-lock.json tsconfig.json</span><br></pre></td></tr></table></figure><p>然后，再在piclist的插件列表中，点击这个下箭头按钮，选择本地目录，安装插件即可。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/04/d51568050a84d54fafc729b04abd3eea.webp" alt="image.png"></p><h2 id="3-插件效果">3. 插件效果</h2><p>以下是同一张图片的PNG和插件转换后的WEBP的效果，被插件处理后的WEBP</p><table><thead><tr><th>PNG</th><th>WEBP</th></tr></thead><tbody><tr><td><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/04/afb6ebffe4262eeea5b6985789d21b2f.png" alt="png图片"></td><td><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/04/1557c739ddb67c9e22ccc4e243c340b5.webp" alt="webp图片"></td></tr><tr><td>图片大小：72KB</td><td>图片大小：24KB</td></tr></tbody></table><p>对比来看，WEBP的图片并没有非常明显的压缩痕迹，对于博客的插图来说完全够用了！相比于图片质量，图像大小的显著变化更加值得。毕竟，图片占用空间越小，维护成本就更低，加载速度也更快，对于博客访问者和维护者来说都是一件好事。</p><p><strong>从2025年4月10日起，本站所有博客插图一律使用WEBP上传，不支持WEBP的浏览器将无法查看本站图片</strong>！</p><h2 id="4-优化插件压缩比">4. 优化插件压缩比</h2><p>先前测试的时候，感觉下载的这个插件还算ok，但是用了一段时间，感觉它的画质还是压缩的太狠了！我虽然希望能降低图片大小，但是因此损失过多质量不利于博客的长久有效性（特别是某些图片压缩质量后可能会丢失一些细节）</p><blockquote><p>修改后的仓库：<a href="https://github.com/musnows/picgo-plugin-pic2webp">https://github.com/musnows/picgo-plugin-pic2webp</a></p></blockquote><p>所以，借助AI了解了一下仓库的代码，修改了压缩质量的参数。原始的代码中，使用了80%压缩比例，这里我把它改成90%</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">await</span> webp_converter.<span class="title function_">cwebp</span>(pic, webp, <span class="string">`-q 80`</span>, <span class="string">&#x27;-v&#x27;</span>);</span><br><span class="line"><span class="comment">// 修改后</span></span><br><span class="line"><span class="keyword">await</span> webp_converter.<span class="title function_">cwebp</span>(pic, webp, <span class="string">`-q 90`</span>, <span class="string">&#x27;-v&#x27;</span>);</span><br></pre></td></tr></table></figure><p>修改以后，质量对比一下，如下是压缩比90%的图片，大小为30kb</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/08/10322bba60842be8e477094acded4190.webp" alt="image.png"></p>]]></content>
    
    
    <summary type="html">本文介绍了picgo、piclist的图片上传之前转webp的pic2webp插件，webp格式的压缩率优于截图常用的png格式，能降低站点图床运行压力，同时提升博客内图片加载体验。</summary>
    
    
    
    <category term="差生文具多" scheme="https://blog.musnow.top/categories/%E5%B7%AE%E7%94%9F%E6%96%87%E5%85%B7%E5%A4%9A/"/>
    
    <category term="博客建站" scheme="https://blog.musnow.top/categories/%E5%B7%AE%E7%94%9F%E6%96%87%E5%85%B7%E5%A4%9A/%E5%8D%9A%E5%AE%A2%E5%BB%BA%E7%AB%99/"/>
    
    
    <category term="博客建站" scheme="https://blog.musnow.top/tags/%E5%8D%9A%E5%AE%A2%E5%BB%BA%E7%AB%99/"/>
    
    <category term="Hexo" scheme="https://blog.musnow.top/tags/Hexo/"/>
    
    <category term="图床" scheme="https://blog.musnow.top/tags/%E5%9B%BE%E5%BA%8A/"/>
    
  </entry>
  
  <entry>
    <title>【SLAM】使用ROS的camera_calibration工具标定D435相机</title>
    <link href="https://blog.musnow.top/posts/9762190903/"/>
    <id>https://blog.musnow.top/posts/9762190903/</id>
    <published>2025-04-07T00:09:24.000Z</published>
    <updated>2025-05-29T06:08:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍了如何使用ROS的camera_calibration工具标定D435相机，包括标定工具的安装和标定的步骤。阅读本文之前，请先参考<a href="https://blog.musnow.top/posts/3771271576/">博客</a>安装ROS环境。</p><p>本文参考资料：</p><ul><li>主要参考博客：<a href="https://zhaoxuhui.top/blog/2021/02/02/ros-camera-calibration.html#3-%E6%89%93%E5%BC%80%E6%A0%87%E5%AE%9A%E5%B7%A5%E5%85%B7" title="利用ROS的Camera Calibration工具进行相机标定(USB相机与D435i)">利用ROS的Camera Calibration工具进行相机标定(USB相机与D435i)</a>；</li><li>ROS官网：<a href="http://wiki.ros.org/action/fullsearch/camera_calibration">wiki.ros.org/action/fullsearch/camera_calibration</a>；</li><li>可选，使用intel官方Depth Quality Tool进行标定：<a href="https://blog.csdn.net/ahelloyou/article/details/106966192">realsense D435 标定(calibration)_d435标定-CSDN博客</a>；</li></ul><h2 id="1-安装标定工具">1. 安装标定工具</h2><p>使用如下命令安装<code>camera_calibration</code>工具</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get install -y \</span><br><span class="line">    ros-melodic-rostest \</span><br><span class="line">    ros-melodic-camera-calibration</span><br></pre></td></tr></table></figure><p>命令执行结果如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">king@ubuntu:~/slam/ORB_SLAM2$ sudo apt-get install -y \</span><br><span class="line">&gt;     ros-melodic-rostest \</span><br><span class="line">&gt;     ros-melodic-camera-calibration</span><br><span class="line">Reading package lists... Done</span><br><span class="line">Building dependency tree     </span><br><span class="line">Reading state information... Done</span><br><span class="line">ros-melodic-camera-calibration is already the newest version (1.15.2-1bionic.20221025.191201).</span><br><span class="line">ros-melodic-rostest is already the newest version (1.14.13-1bionic.20221025.183909).</span><br><span class="line">ros-melodic-rostest set to manually installed.</span><br><span class="line">The following packages were automatically installed and are no longer required:</span><br><span class="line">  fonts-liberation2 fonts-opensymbol gir1.2-goa-1.0 gir1.2-gst-plugins-base-1.0 gir1.2-gstreamer-1.0 gir1.2-gudev-1.0 gir1.2-snapd-1 gir1.2-udisks-2.0 grilo-plugins-0.3-base gstreamer1.0-gtk3 libcdr-0.1-1 libclucene-contribs1v5 libclucene-core1v5 libcmis-0.5-5v5 libcolamd2</span><br><span class="line">  libdazzle-1.0-0 libe-book-0.1-1 libedataserverui-1.2-2 libeot0 libepubgen-0.1-1 libetonyek-0.1-1 libevent-2.1-6 libexiv2-14 libfreerdp-client2-2 libfreerdp2-2 libgc1c2 libgee-0.8-2 libgexiv2-2 libgom-1.0-0 libgpgmepp6 libgpod-common libgpod4 liblangtag-common liblangtag1</span><br><span class="line">  liblirc-client0 liblua5.3-0 libmediaart-2.0-0 libmspub-0.1-1 libodfgen-0.1-1 libqqwing2v5 librevenge-0.0-0 libsgutils2-2 libssh-4 libsuitesparseconfig5 libvncclient1 libwinpr2-2 libxapian30 libxmlsec1-nss lp-solve media-player-info python3-mako python3-markupsafe</span><br><span class="line">  syslinux syslinux-common syslinux-legacy usb-creator-common</span><br><span class="line">Use &#x27;sudo apt autoremove&#x27; to remove them.</span><br><span class="line">0 upgraded, 0 newly installed, 0 to remove and 3 not upgraded.</span><br></pre></td></tr></table></figure><h2 id="2-准备棋盘格标定板">2. 准备棋盘格标定板</h2><p>ROS camera_calibration工具基于OpenCV和张正友标定法对相机进行标定。张正友标定法核心工具就是棋盘格标定板。如果有条件，可以去淘宝购买标准的棋盘格标定板。一般情况下，直接用A4纸打印出标定板也足够使用。</p><p>A4纸格式标定板下载链接：<a href="https://gitcode.com/Open-source-documentation-tutorial/3bb25/blob/main/%E6%A3%8B%E7%9B%98%E6%A0%BC-A4.pdf">A4尺寸张正友标定法专用棋盘格</a>；</p><p>在线生成标定板：<a href="https://calib.io/pages/camera-calibration-pattern-generator">Camera Calibration Pattern Generator – calib.io</a>；</p><h2 id="3-启动D435和标定工具">3. 启动D435和标定工具</h2><h3 id="3-1-启动命令">3.1. 启动命令</h3><p>先链接D435，然后启动相机和标定工具（不需要额外启动roscore）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 终端a启动相机</span></span><br><span class="line">roslaunch realsense2_camera rs_camera.launch</span><br><span class="line"><span class="comment"># 终端b启动标定工具（RGB相机）</span></span><br><span class="line">rosrun camera_calibration cameracalibrator.py \</span><br><span class="line">    --size 8x6 --square 0.025 \</span><br><span class="line">    --no-service-check \</span><br><span class="line">    image:=/camera/color/image_raw \</span><br><span class="line">    camera:=/camera/color</span><br></pre></td></tr></table></figure><p>命令执行结果如下</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/04/e737131db52258715c73bec8f6444566.png" alt="image.png"></p><h3 id="3-2-命令参数介绍">3.2. 命令参数介绍</h3><p>启动命令参数介绍：</p><ul><li><code>--size 8x6</code>代表棋盘格内部的角点数量（不是格子数量），棋盘格一般是<code>9x7</code>个格子，但是计算的时候只使用棋盘格的内部角点。</li><li><code>--square 0.025</code>是每个棋盘格的边长（米），也就是2.5厘米。上文给出的A4棋盘格打印出来之后就是2.5厘米的，可以用尺子量一下验证一下。</li></ul><p>命令最后的topic映射，我们需要映射成D435的RGB相机或者红外相机，分别对其进行标定。三个相机对应的topic如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/camera/color/image_raw          <span class="comment"># RGB相机</span></span><br><span class="line">/camera/infra1/image_rect_raw    <span class="comment"># 左红外</span></span><br><span class="line">/camera/infra2/image_rect_raw    <span class="comment"># 右红外</span></span><br></pre></td></tr></table></figure><p>映射<code>image</code>是获取相机拍摄的图像，映射<code>camera:=/camera/color</code>的作用是让ROS能找到我们相机的<code>/camera/color/image_raw</code>和<code>/camera/color/camera_info</code>。</p><p>注意，默认情况下是不存在infra红外相机的topic的，是因为红外的topic没有被打开广播。使用如下命令主动开启红外摄像头的topic广播。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">roslaunch realsense2_camera rs_camera.launch \</span><br><span class="line">    enable_infra1:=<span class="literal">true</span> enable_infra2:=<span class="literal">true</span></span><br></pre></td></tr></table></figure><p>此时可以看到topic列表，里面包含了infra的topic</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">[root:/]# rostopic list</span><br><span class="line">/camera/color/camera_info</span><br><span class="line">/camera/color/image_raw</span><br><span class="line">/camera/color/image_raw/compressed</span><br><span class="line">/camera/color/image_raw/compressed/parameter_descriptions</span><br><span class="line">/camera/color/image_raw/compressed/parameter_updates</span><br><span class="line">/camera/color/image_raw/compressedDepth</span><br><span class="line">/camera/color/image_raw/compressedDepth/parameter_descriptions</span><br><span class="line">/camera/color/image_raw/compressedDepth/parameter_updates</span><br><span class="line">/camera/color/image_raw/theora</span><br><span class="line">/camera/color/image_raw/theora/parameter_descriptions</span><br><span class="line">/camera/color/image_raw/theora/parameter_updates</span><br><span class="line">/camera/color/metadata</span><br><span class="line">/camera/depth/camera_info</span><br><span class="line">/camera/depth/image_rect_raw</span><br><span class="line">/camera/depth/image_rect_raw/compressed</span><br><span class="line">/camera/depth/image_rect_raw/compressed/parameter_descriptions</span><br><span class="line">/camera/depth/image_rect_raw/compressed/parameter_updates</span><br><span class="line">/camera/depth/image_rect_raw/compressedDepth</span><br><span class="line">/camera/depth/image_rect_raw/compressedDepth/parameter_descriptions</span><br><span class="line">/camera/depth/image_rect_raw/compressedDepth/parameter_updates</span><br><span class="line">/camera/depth/image_rect_raw/theora</span><br><span class="line">/camera/depth/image_rect_raw/theora/parameter_descriptions</span><br><span class="line">/camera/depth/image_rect_raw/theora/parameter_updates</span><br><span class="line">/camera/depth/metadata</span><br><span class="line">/camera/extrinsics/depth_to_color</span><br><span class="line">/camera/extrinsics/depth_to_infra1</span><br><span class="line">/camera/extrinsics/depth_to_infra2</span><br><span class="line">/camera/infra1/camera_info</span><br><span class="line">/camera/infra1/image_rect_raw</span><br><span class="line">/camera/infra1/image_rect_raw/compressed</span><br><span class="line">/camera/infra1/image_rect_raw/compressed/parameter_descriptions</span><br><span class="line">/camera/infra1/image_rect_raw/compressed/parameter_updates</span><br><span class="line">/camera/infra1/image_rect_raw/compressedDepth</span><br><span class="line">/camera/infra1/image_rect_raw/compressedDepth/parameter_descriptions</span><br><span class="line">/camera/infra1/image_rect_raw/compressedDepth/parameter_updates</span><br><span class="line">/camera/infra1/image_rect_raw/theora</span><br><span class="line">/camera/infra1/image_rect_raw/theora/parameter_descriptions</span><br><span class="line">/camera/infra1/image_rect_raw/theora/parameter_updates</span><br><span class="line">/camera/infra1/metadata</span><br><span class="line">/camera/infra2/camera_info</span><br><span class="line">/camera/infra2/image_rect_raw</span><br><span class="line">/camera/infra2/image_rect_raw/compressed</span><br><span class="line">/camera/infra2/image_rect_raw/compressed/parameter_descriptions</span><br><span class="line">/camera/infra2/image_rect_raw/compressed/parameter_updates</span><br><span class="line">/camera/infra2/image_rect_raw/compressedDepth</span><br><span class="line">/camera/infra2/image_rect_raw/compressedDepth/parameter_descriptions</span><br><span class="line">/camera/infra2/image_rect_raw/compressedDepth/parameter_updates</span><br><span class="line">/camera/infra2/image_rect_raw/theora</span><br><span class="line">/camera/infra2/image_rect_raw/theora/parameter_descriptions</span><br><span class="line">/camera/infra2/image_rect_raw/theora/parameter_updates</span><br><span class="line">/camera/infra2/metadata</span><br><span class="line">/camera/realsense2_camera_manager/bond</span><br><span class="line">/camera/rgb_camera/auto_exposure_roi/parameter_descriptions</span><br><span class="line">/camera/rgb_camera/auto_exposure_roi/parameter_updates</span><br><span class="line">/camera/rgb_camera/parameter_descriptions</span><br><span class="line">/camera/rgb_camera/parameter_updates</span><br><span class="line">/camera/stereo_module/auto_exposure_roi/parameter_descriptions</span><br><span class="line">/camera/stereo_module/auto_exposure_roi/parameter_updates</span><br><span class="line">/camera/stereo_module/parameter_descriptions</span><br><span class="line">/camera/stereo_module/parameter_updates</span><br><span class="line">/diagnostics</span><br><span class="line">/rosout</span><br><span class="line">/rosout_agg</span><br><span class="line">/tf</span><br><span class="line">/tf_static</span><br><span class="line">[root:/]# </span><br></pre></td></tr></table></figure><p>因为ROS会主动查询相机的<code>set_camera_info</code>节点，如果相机不存在此节点就会报错。可以添加<code>--no-service-check</code>参数跳过检查。如果不加这个参数，就会出现“Service not found”的报错。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root:/]# rosrun camera_calibration cameracalibrator.py \</span><br><span class="line">&gt;     --size 8x6 --square 0.025 \</span><br><span class="line">&gt;     image:=/camera/color/image_raw \</span><br><span class="line">&gt;     camera:=/camera/color</span><br><span class="line">Waiting for service /camera/color/set_camera_info ...</span><br><span class="line">Service not found</span><br></pre></td></tr></table></figure><h2 id="4-开始标定">4. 开始标定</h2><h3 id="4-1-标定步骤">4.1. 标定步骤</h3><p>启动了标定工具，且显示出摄像头的画面之后，将棋盘标定板放在<strong>平面</strong>上（一定要是平面），<strong>然后从不同方向移动摄像头拍摄标定板</strong>，ROS会自动拍摄多角度的标定板图片。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/04/68e19416b1b2cd97faa533ae2272e3d1.png" alt="image.png"></p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/04/1bc53f02e9b36185f82369ae6349cfbd.png" alt="image.png"></p><p>标定完成后，calibration按钮会变绿可供点击。点击calibration后，save和commit按钮会亮起，点击save按钮之后会将标定结果数据写入到<code>/tmp</code>目录下去。注意一定要将其cp挪出来，因为linux的tmp目录每次启动系统都会清理掉。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(&#x27;Wrote calibration data to&#x27;, &#x27;/tmp/calibrationdata.tar.gz&#x27;)</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/04/044b7300423283efcd757d952abc87bf.png" alt="image.png"></p><p>而commit按钮就是将我们的标定结果写入到相机的固件中，后续<code>rostopic echo /camera/color/camera_info</code>的时候就会输出此次的标定结果。</p><h3 id="4-2-标定输出">4.2. 标定输出</h3><p>标定过程中，终端输出如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">*** Added sample 34, p_x = 0.593, p_y = 0.624, p_size = 0.568, skew = 0.121</span><br><span class="line">*** Added sample 35, p_x = 0.488, p_y = 0.598, p_size = 0.560, skew = 0.335</span><br><span class="line">*** Added sample 36, p_x = 0.433, p_y = 0.486, p_size = 0.575, skew = 0.358</span><br><span class="line">*** Added sample 37, p_x = 0.544, p_y = 0.345, p_size = 0.580, skew = 0.248</span><br><span class="line">*** Added sample 38, p_x = 0.522, p_y = 0.179, p_size = 0.568, skew = 0.055</span><br><span class="line">*** Added sample 39, p_x = 0.511, p_y = 0.019, p_size = 0.591, skew = 0.106</span><br><span class="line">*** Added sample 40, p_x = 0.496, p_y = 0.547, p_size = 0.577, skew = 0.143</span><br><span class="line">*** Added sample 41, p_x = 0.502, p_y = 0.344, p_size = 0.599, skew = 0.004</span><br></pre></td></tr></table></figure><p>标定完成后会输出相机内参。其中camera matrix是相机的内参矩阵（对应开头矩阵K），distortion是相机的畸变系数（对应开头的矩阵D），R是旋转举证，P是投影矩阵。<code>[narrow_stereo]</code>之后的内容是opencv格式的ost.txt标定文件格式，可以用于发布<code>camera_info</code>话题</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">**** Calibrating ****</span><br><span class="line">mono pinhole calibration...</span><br><span class="line">D = [0.1234477524818914, -0.24186083107572148, 0.010573738134724179, -0.0018947635408389889, 0.0]</span><br><span class="line">K = [609.8463473151232, 0.0, 318.16312952971543, 0.0, 610.5650055668543, 255.8048346565674, 0.0, 0.0, 1.0]</span><br><span class="line">R = [1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0]</span><br><span class="line">P = [621.8898315429688, 0.0, 317.1112464092075, 0.0, 0.0, 620.319091796875, 259.4397678761525, 0.0, 0.0, 0.0, 1.0, 0.0]</span><br><span class="line">None</span><br><span class="line"># oST version 5.0 parameters</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[image]</span><br><span class="line"></span><br><span class="line">width</span><br><span class="line">640</span><br><span class="line"></span><br><span class="line">height</span><br><span class="line">480</span><br><span class="line"></span><br><span class="line">[narrow_stereo]</span><br><span class="line"></span><br><span class="line">camera matrix</span><br><span class="line">609.846347 0.000000 318.163130</span><br><span class="line">0.000000 610.565006 255.804835</span><br><span class="line">0.000000 0.000000 1.000000</span><br><span class="line"></span><br><span class="line">distortion</span><br><span class="line">0.123448 -0.241861 0.010574 -0.001895 0.000000</span><br><span class="line"></span><br><span class="line">rectification</span><br><span class="line">1.000000 0.000000 0.000000</span><br><span class="line">0.000000 1.000000 0.000000</span><br><span class="line">0.000000 0.000000 1.000000</span><br><span class="line"></span><br><span class="line">projection</span><br><span class="line">621.889832 0.000000 317.111246 0.000000</span><br><span class="line">0.000000 620.319092 259.439768 0.000000</span><br><span class="line">0.000000 0.000000 1.000000 0.000000</span><br><span class="line"></span><br><span class="line">(&#x27;Wrote calibration data to&#x27;, &#x27;/tmp/calibrationdata.tar.gz&#x27;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="5-关闭红外点阵投影">5. 关闭红外点阵投影</h2><p>参考：<a href="https://zhaoxuhui.top/blog/2020/09/09/intel-realsense-d435i-installation-and-use.html#4%E7%BA%A2%E5%A4%96%E5%8F%91%E5%B0%84%E5%99%A8%E7%9A%84%E5%BC%80%E5%85%B3">https://zhaoxuhui.top/blog/2020/09/09/intel-realsense-d435i-installation-and-use.html#4%E7%BA%A2%E5%A4%96%E5%8F%91%E5%B0%84%E5%99%A8%E7%9A%84%E5%BC%80%E5%85%B3</a>；</p><p>前文给出的标定步骤对于RGB相机和红外相机都是一样的操作，但是在标定红外相机的时候，需要将D435的红外投影给关闭，否则会影响标定结果（因为画面里面全是红外点阵投影）。</p><p>首先启动相机：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">roslaunch realsense2_camera rs_camera.launch \</span><br><span class="line">    enable_infra1:=<span class="literal">true</span> enable_infra2:=<span class="literal">true</span></span><br></pre></td></tr></table></figure><p>然后启动ROS的前端工具，启动Reconfigure节点，随后会打开一个工具</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rosrun rqt_reconfigure rqt_reconfigure</span><br></pre></td></tr></table></figure><p>找到<code>stereo_module</code>，然后找到<code>emitter_enabled</code>选项，将其关闭即可</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/04/a4cae51651e97200ff58d8c661bdb9bc.png" alt="image.png"></p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/04/9ea9b24a840d6630f210d38ccaffe1ed.png" alt="image.png"></p><p>关闭了之后，再尝试启动标定工具，可以看到没有红外投影点阵了。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/04/7d22bea0a73c705e70e2d4ec8d49a0ec.png" alt="image.png"></p><h2 id="6-The-end">6. The end</h2><p>D435相机的标定步骤就是这些啦，希望能帮到大家。</p>]]></content>
    
    
    <summary type="html">本文介绍了如何使用ROS的camera_calibration工具标定D435相机，包括标定工具的安装和标定的步骤。</summary>
    
    
    
    <category term="编程学习" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="项目开发记录" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="Linux" scheme="https://blog.musnow.top/tags/Linux/"/>
    
    <category term="SLAM" scheme="https://blog.musnow.top/tags/SLAM/"/>
    
    <category term="RealSenseD435" scheme="https://blog.musnow.top/tags/RealSenseD435/"/>
    
  </entry>
  
  <entry>
    <title>【SLAM】在ORB_SLAM2的ROS模式下使用RealSense D435相机</title>
    <link href="https://blog.musnow.top/posts/9149643829/"/>
    <id>https://blog.musnow.top/posts/9149643829/</id>
    <published>2025-04-06T09:09:24.000Z</published>
    <updated>2025-04-06T10:52:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍了如何在ORB_SLAM2项目中使用RealSense D435相机作为RGB-D输入源，包括ROS下启动D435相机、ORB_SLAM2订阅Topic、ORB_SLAM2读取realsense-viewer录制的rosbag文件等步骤。。</p><h2 id="1-前言">1. 前言</h2><p>先前已经编写了<a href="https://blog.musnow.top/posts/7873538113/">如何用TUM数据集运行ORB_SLAM3</a>以及<a href="https://blog.musnow.top/posts/5090585017/">如何在ROS模式下运行ORB_SLAM3</a>的博客，ORB_SLAM3是基于ORB_SLAM2的，甚至代码仓库中还有遗留的ORB_SLAM2命名空间namespace没有修正，二者不管是用TUM RGB-D数据集直接运行还是在ROS模式下运行的命令都<strong>完全一致</strong>。所以，在阅读本文之前，先参考上面给出的两篇博客，安装ORB_SLAM2的依赖库和ROS环境。</p><p>注意：若想在ROS模式下运行ORB_SLAM2，则一定要安装OpenCV 3.2.0版本，否则会因为系统中存在多个不同版本的OpenCV从而导致动态库链接错误！</p><p>RealSense D435在Ubuntu 18.04中realsense驱动安装的步骤也在<a href="https://blog.musnow.top/posts/9107049817/">【SLAM】ubuntu 18.04 安装 RealSense D435 相机驱动（ARM64/AMD64）</a>一文里面介绍过了，继续阅读本文之前，需要先把D435的驱动搞定。</p><p>测试使用的操作系统为 Ubuntu 18.04 LTS，平台为AMD64。</p><h2 id="2-运行步骤">2. 运行步骤</h2><h3 id="2-1-编译ORB-SLAM2">2.1. 编译ORB_SLAM2</h3><p>阅读到这里，就默认你已经根据上面给出的参考博客把相关依赖项、ROS环境和realsense驱动都已经安装完毕了，这里给出ORB_SLAM2的编译步骤，和ORB_SLAM3也是如出一辙的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/raulmur/ORB_SLAM2.git</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> ORB_SLAM2</span><br><span class="line"><span class="built_in">chmod</span> +x build.sh</span><br><span class="line">./build.sh</span><br></pre></td></tr></table></figure><p>注意，编译之前需要先修改<a href="https://github.com/raulmur/ORB_SLAM2/blob/master/build.sh">build.sh</a>脚本，把所有<code>make -j</code>修改成<code>make -j4</code>，避免make编译的时候无止尽地吃掉所有系统资源，这个在ORB_SLAM3的博客中也提到过。</p><blockquote><p>make命令<code>-j</code>选项后面跟着的数字是<strong>编译使用的线程数量</strong>，建议改成linux系统cpu线程数量的一半或者2/3，避免吃光所有系统资源。选项<code>-j</code>后面不跟数字的时候，编译项目时会无止尽地吃掉所有系统内存和CPU，直到被操作系统KILL掉，编译失败（在我的测试环境中是这个现象）。</p></blockquote><p>编译完毕普通版本后，再编译ROS版本，同样需要把<code>build_ros.sh</code>脚本里面的<code>make -j</code>改成<code>make -j4</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> +x ./build_ros.sh</span><br><span class="line">./build_ros.sh</span><br></pre></td></tr></table></figure><p>如果你的依赖项环境一切正常，这两个脚本无需任何额外操作即可编译成功。</p><h3 id="2-2-ROS下启动D435相机">2.2. ROS下启动D435相机</h3><p>参考博客：</p><ul><li><a href="https://www.jianshu.com/p/9e3d31ba35da" title="基于深度相机 RealSense D435i 的 ORB SLAM 2 - 简书">基于深度相机 RealSense D435i 的 ORB SLAM 2 - 简书</a>；</li><li><a href="https://github.com/IntelRealSense/realsense-ros">github.com/IntelRealSense/realsense-ros</a>；</li></ul><p>使用如下命令安装D435的ROS驱动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get install -y ros-melodic-rgbd-launch \</span><br><span class="line">    ros-melodic-realsense2-camera \</span><br><span class="line">    ros-melodic-realsense2-description</span><br></pre></td></tr></table></figure><p>安装完毕驱动后，系统中会多出realsense相机的ROS启动文件，可以使用<code>roscd realsense2_camera</code>命令进入apt安装的ros realsense的工作空间，这里就有各种launch文件。</p><p>我们需要的是<code>rs_rgbd.launch</code>这个启动文件，以RGB-D模式启动我们的D435相机。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">king@ubuntu:~/slam$ roscd realsense2_camera</span><br><span class="line">king@ubuntu:/opt/ros/melodic/share/realsense2_camera$ ls</span><br><span class="line">cmake  launch  msg  nodelet_plugins.xml  package.xml  rviz  srv</span><br><span class="line">king@ubuntu:/opt/ros/melodic/share/realsense2_camera$ ls launch/</span><br><span class="line">demo_pointcloud.launch      rs_aligned_depth.launch           rs_from_file.launch         rs_t265.launch</span><br><span class="line">demo_t265.launch            rs_camera.launch                  rs_multiple_devices.launch</span><br><span class="line">includes                    rs_d400_and_t265.launch           rs_rgbd.launch</span><br><span class="line">opensource_tracking.launch  rs_d435_camera_with_model.launch  rs_rtabmap.launch</span><br></pre></td></tr></table></figure><p>注意检查一下<code>rs_rgbd.launch</code>启动文件中的下面这两个选项是否为true，如果不是，需要修改为true。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">&quot;enable_sync&quot;</span>         <span class="attr">default</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">&quot;align_depth&quot;</span>         <span class="attr">default</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>这两个参数的前者是让不同传感器数据（Depth, RGB, IMU）实现时间同步，即具有相同的 timestamp；后者会增加若干 rostopic，其中我们比较关心的是 <code>/camera/aligned_depth_to_color/image_raw</code>这个主题，对应D435相机的深度图像数据。</p><p>确认启动文件配置无误后，用下面的roslaunch命令就可以启动D435相机了。<strong>执行启动命令之前，需要先在另外一个终端执行roscore命令</strong>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">roslaunch realsense2_camera rs_rgbd.launch</span><br></pre></td></tr></table></figure><p>命令执行结果如下</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/04/c3c8958b59c5adceca3bbfa60e35cbec.png" alt="image.png"></p><p>使用<code>rostopic list</code>能看到D435相机发布的<strong>topic列表</strong>，如下所示。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">[root:/]# rostopic list</span><br><span class="line">/camera/align_to_color/parameter_descriptions</span><br><span class="line">/camera/align_to_color/parameter_updates</span><br><span class="line">/camera/aligned_depth_to_color/camera_info</span><br><span class="line">/camera/aligned_depth_to_color/image_raw</span><br><span class="line">/camera/aligned_depth_to_color/image_raw/compressed</span><br><span class="line">/camera/aligned_depth_to_color/image_raw/compressed/parameter_descriptions</span><br><span class="line">/camera/aligned_depth_to_color/image_raw/compressed/parameter_updates</span><br><span class="line">/camera/aligned_depth_to_color/image_raw/compressedDepth</span><br><span class="line">/camera/aligned_depth_to_color/image_raw/compressedDepth/parameter_descriptions</span><br><span class="line">/camera/aligned_depth_to_color/image_raw/compressedDepth/parameter_updates</span><br><span class="line">/camera/aligned_depth_to_color/image_raw/theora</span><br><span class="line">/camera/aligned_depth_to_color/image_raw/theora/parameter_descriptions</span><br><span class="line">/camera/aligned_depth_to_color/image_raw/theora/parameter_updates</span><br><span class="line">/camera/color/camera_info</span><br><span class="line">/camera/color/image_raw</span><br><span class="line">/camera/color/image_raw/compressed</span><br><span class="line">/camera/color/image_raw/compressed/parameter_descriptions</span><br><span class="line">/camera/color/image_raw/compressed/parameter_updates</span><br><span class="line">/camera/color/image_raw/compressedDepth</span><br><span class="line">/camera/color/image_raw/compressedDepth/parameter_descriptions</span><br><span class="line">/camera/color/image_raw/compressedDepth/parameter_updates</span><br><span class="line">/camera/color/image_raw/theora</span><br><span class="line">/camera/color/image_raw/theora/parameter_descriptions</span><br><span class="line">/camera/color/image_raw/theora/parameter_updates</span><br><span class="line">/camera/color/image_rect_color</span><br><span class="line">/camera/color/image_rect_color/compressed</span><br><span class="line">/camera/color/image_rect_color/compressed/parameter_descriptions</span><br><span class="line">/camera/color/image_rect_color/compressed/parameter_updates</span><br><span class="line">/camera/color/image_rect_color/compressedDepth</span><br><span class="line">/camera/color/image_rect_color/compressedDepth/parameter_descriptions</span><br><span class="line">/camera/color/image_rect_color/compressedDepth/parameter_updates</span><br><span class="line">/camera/color/image_rect_color/theora</span><br><span class="line">/camera/color/image_rect_color/theora/parameter_descriptions</span><br><span class="line">/camera/color/image_rect_color/theora/parameter_updates</span><br><span class="line">/camera/color/metadata</span><br><span class="line">/camera/color_rectify_color/parameter_descriptions</span><br><span class="line">/camera/color_rectify_color/parameter_updates</span><br><span class="line">/camera/depth/camera_info</span><br><span class="line">/camera/depth/image_rect_raw</span><br><span class="line">/camera/depth/image_rect_raw/compressed</span><br><span class="line">/camera/depth/image_rect_raw/compressed/parameter_descriptions</span><br><span class="line">/camera/depth/image_rect_raw/compressed/parameter_updates</span><br><span class="line">/camera/depth/image_rect_raw/compressedDepth</span><br><span class="line">/camera/depth/image_rect_raw/compressedDepth/parameter_descriptions</span><br><span class="line">/camera/depth/image_rect_raw/compressedDepth/parameter_updates</span><br><span class="line">/camera/depth/image_rect_raw/theora</span><br><span class="line">/camera/depth/image_rect_raw/theora/parameter_descriptions</span><br><span class="line">/camera/depth/image_rect_raw/theora/parameter_updates</span><br><span class="line">/camera/depth/metadata</span><br><span class="line">/camera/depth_registered/points</span><br><span class="line">/camera/extrinsics/depth_to_color</span><br><span class="line">/camera/realsense2_camera_manager/bond</span><br><span class="line">/camera/rgb_camera/parameter_descriptions</span><br><span class="line">/camera/rgb_camera/parameter_updates</span><br><span class="line">/camera/stereo_module/parameter_descriptions</span><br><span class="line">/camera/stereo_module/parameter_updates</span><br><span class="line">/diagnostics</span><br><span class="line">/rosout</span><br><span class="line">/rosout_agg</span><br><span class="line">/tf</span><br><span class="line">/tf_static</span><br><span class="line">[root:/]# </span><br></pre></td></tr></table></figure><p>其中我们需要的是<code>/camera/color/image_raw</code> 和 <code>/camera/aligned_depth_to_color/image_raw</code> 这两个topic，分别对应 RGB 图像和深度图像数据流。</p><h3 id="2-3-ORB-SLAM2在ROS下订阅D435发布的topic">2.3. ORB_SLAM2在ROS下订阅D435发布的topic</h3><p>接下来需要创建一个相机内参文件（类似<code>Examples/RGB-D/TUM1.yaml</code>），填写D435相机的内外参数。内外参数最好的获取方式是通过ROS的camera_calibration工具，需要打印一个棋盘格标定板对D435相机进行标定。</p><p>本文不介绍如何标定D435相机，直接使用D435相机发布的相机信息的<code>/camera/color/camera_info</code>主题，通过如下命令获取D435相机的内外参数，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rostopic <span class="built_in">echo</span> /camera/color/camera_info</span><br></pre></td></tr></table></figure><p>该命令的输出结果如下所示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">header: </span><br><span class="line">  seq: 8477</span><br><span class="line">  stamp: </span><br><span class="line">    secs: 1740896373</span><br><span class="line">    nsecs: 113253355</span><br><span class="line">  frame_id: &quot;camera_color_optical_frame&quot;</span><br><span class="line">height: 480</span><br><span class="line">width: 640</span><br><span class="line">distortion_model: &quot;plumb_bob&quot;</span><br><span class="line">D: [0.0, 0.0, 0.0, 0.0, 0.0]</span><br><span class="line">K: [605.8230590820312, 0.0, 323.6572570800781, 0.0, 604.4893798828125, 242.0369110107422, 0.0, 0.0, 1.0]</span><br><span class="line">R: [1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0]</span><br><span class="line">P: [605.8230590820312, 0.0, 323.6572570800781, 0.0, 0.0, 604.4893798828125, 242.0369110107422, 0.0, 0.0, 0.0, 1.0, 0.0]</span><br><span class="line">binning_x: 0</span><br><span class="line">binning_y: 0</span><br><span class="line">roi: </span><br><span class="line">  x_offset: 0</span><br><span class="line">  y_offset: 0</span><br><span class="line">  height: 0</span><br><span class="line">  width: 0</span><br><span class="line">  do_rectify: False</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>这个输出中：</p><ul><li><code>K</code> 是 <strong>相机内参矩阵</strong>（<code>fx</code>, <code>fy</code>, <code>cx</code>, <code>cy</code>）</li><li><code>D</code> 是 <strong>畸变系数</strong>（ORB_SLAM2 只用前 4 个 <code>k1, k2, p1, p2</code>）</li><li><code>width</code> 和 <code>height</code> 是相机拍摄的图像分辨率；</li></ul><p>Camera.bf的计算公式如下，其中baseline是D435两颗摄像头之间的间距，官方的参数是50mm，将其和fx相乘就能得到bf。</p><p>$$<br>bf=baseline×fx=0.05×605.8230590820312≈30.29<br>$$</p><p>收集了这些数据后，参考ORB_SLAM2代码仓库中的<code>Examples/ROS/ORB_SLAM2/Asus.yaml</code>文件，把上述命令的结果中的参数写到文件<code>Examples/RGB-D/RealSenseD435.yaml</code>中。</p><p>最终我依照上述命令结果制作了如下yaml文件，每一个参数都取值都用注释标注出来了，没有中文注释的部分保持不变，不用修改。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">%YAML:1.0</span></span><br><span class="line"><span class="comment">#--------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># 通过`rostopic echo /camera/color/camera_info`获取并编写</span></span><br><span class="line"><span class="comment">#--------------------------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 相机内参 Camera Parameters</span></span><br><span class="line"><span class="attr">Camera.fx:</span> <span class="number">605.8230590820312</span>  <span class="comment"># K[0]</span></span><br><span class="line"><span class="attr">Camera.fy:</span> <span class="number">604.4893798828125</span>  <span class="comment"># K[4]</span></span><br><span class="line"><span class="attr">Camera.cx:</span> <span class="number">323.6572570800781</span>  <span class="comment"># K[2]</span></span><br><span class="line"><span class="attr">Camera.cy:</span> <span class="number">242.0369110107422</span>  <span class="comment"># K[5]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 畸变参数 (D)</span></span><br><span class="line"><span class="attr">Camera.k1:</span> <span class="number">0.0</span>  <span class="comment"># D[0]</span></span><br><span class="line"><span class="attr">Camera.k2:</span> <span class="number">0.0</span>  <span class="comment"># D[1]</span></span><br><span class="line"><span class="attr">Camera.p1:</span> <span class="number">0.0</span>  <span class="comment"># D[2]</span></span><br><span class="line"><span class="attr">Camera.p2:</span> <span class="number">0.0</span>  <span class="comment"># D[3]</span></span><br><span class="line"><span class="attr">Camera.k3:</span> <span class="number">0.0</span>  <span class="comment"># D[4]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 图像分辨率</span></span><br><span class="line"><span class="string">Camera.width:640</span></span><br><span class="line"><span class="string">Camera.height:480</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Camera frames per second 相机帧数</span></span><br><span class="line"><span class="string">Camera.fps:30.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># IR projector baseline times fx (aprox.)</span></span><br><span class="line"><span class="comment"># bf = baseline × fx = 0.05 × 605.8230590820312 ≈ 30.29</span></span><br><span class="line"><span class="comment"># baseline是d435两个摄像头的基线距离，为50mm</span></span><br><span class="line"><span class="string">Camera.bf:30.29</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Color order of the images (0: BGR, 1: RGB. It is ignored if images are grayscale)</span></span><br><span class="line"><span class="string">Camera.RGB:1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Close/Far threshold. Baseline times.</span></span><br><span class="line"><span class="string">ThDepth:40.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Deptmap values factor，将深度像素值转化为实际距离，原来单位是mm，转化成m</span></span><br><span class="line"><span class="string">DepthMapFactor:1000.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下面这部分都不需要修改，直接从Asus.yaml复制过来</span></span><br><span class="line"><span class="comment">#--------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># ORB Parameters</span></span><br><span class="line"><span class="comment">#--------------------------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ORB Extractor: Number of features per image</span></span><br><span class="line"><span class="attr">ORBextractor.nFeatures:</span> <span class="number">1000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ORB Extractor: Scale factor between levels in the scale pyramid     </span></span><br><span class="line"><span class="attr">ORBextractor.scaleFactor:</span> <span class="number">1.2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ORB Extractor: Number of levels in the scale pyramid    </span></span><br><span class="line"><span class="attr">ORBextractor.nLevels:</span> <span class="number">8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ORB Extractor: Fast threshold</span></span><br><span class="line"><span class="comment"># Image is divided in a grid. At each cell FAST are extracted imposing a minimum response.</span></span><br><span class="line"><span class="comment"># Firstly we impose iniThFAST. If no corners are detected we impose a lower value minThFAST</span></span><br><span class="line"><span class="comment"># You can lower these values if your images have low contrast            </span></span><br><span class="line"><span class="attr">ORBextractor.iniThFAST:</span> <span class="number">20</span></span><br><span class="line"><span class="attr">ORBextractor.minThFAST:</span> <span class="number">7</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#--------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Viewer Parameters</span></span><br><span class="line"><span class="comment">#--------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="attr">Viewer.KeyFrameSize:</span> <span class="number">0.05</span></span><br><span class="line"><span class="attr">Viewer.KeyFrameLineWidth:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">Viewer.GraphLineWidth:</span> <span class="number">0.9</span></span><br><span class="line"><span class="string">Viewer.PointSize:2</span></span><br><span class="line"><span class="attr">Viewer.CameraSize:</span> <span class="number">0.08</span></span><br><span class="line"><span class="attr">Viewer.CameraLineWidth:</span> <span class="number">3</span></span><br><span class="line"><span class="attr">Viewer.ViewpointX:</span> <span class="number">0</span></span><br><span class="line"><span class="attr">Viewer.ViewpointY:</span> <span class="number">-0.7</span></span><br><span class="line"><span class="attr">Viewer.ViewpointZ:</span> <span class="number">-1.8</span></span><br><span class="line"><span class="attr">Viewer.ViewpointF:</span> <span class="number">500</span></span><br></pre></td></tr></table></figure><h3 id="2-4-运行ORB-SLAM2">2.4. 运行ORB_SLAM2</h3><p>相机参数文件准备好之后，就可以启动ORB_SLAM2了，先执行export命令设置一下ROS的环境变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> ROS_PACKAGE_PATH=<span class="variable">$ROS_PACKAGE_PATH</span>:<span class="variable">$PWD</span>/Examples/ROS/ORB_SLAM2</span><br></pre></td></tr></table></figure><p>启动命令如下，这里指定了我们刚刚自己制作的yaml文件，然后指定了两个topic的绑定</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">rosrun ORB_SLAM2 RGBD \</span><br><span class="line">    Vocabulary/ORBvoc.txt \</span><br><span class="line">    Examples/RGB-D/RealSenseD435.yaml \</span><br><span class="line">    /camera/rgb/image_raw:=/camera/color/image_raw \</span><br><span class="line">    /camera/depth_registered/image_raw:=/camera/aligned_depth_to_color/image_raw</span><br></pre></td></tr></table></figure><p>命令中<code>:=</code>左侧为订阅的topic，右侧为输入的topic，ORB_SLAM2订阅的topic可以在<code>Examples/ROS/ORB_SLAM2/src/ros_rgbd.cc</code>代码里面找到</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">message_filters::Subscriber&lt;sensor_msgs::Image&gt; <span class="title">rgb_sub</span><span class="params">(nh, <span class="string">&quot;/camera/rgb/image_raw&quot;</span>, <span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="function">message_filters::Subscriber&lt;sensor_msgs::Image&gt; <span class="title">depth_sub</span><span class="params">(nh, <span class="string">&quot;camera/depth_registered/image_raw&quot;</span>, <span class="number">1</span>)</span></span>;</span><br></pre></td></tr></table></figure><p>一切正常的话，应该已经可以在ORB_SLAM2的GUI中看到D435相机拍摄到的画面了。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/04/68402467357181a2c1c9a5ff3b54ac32.png" alt="image.png"></p><p>缓慢移动D435相机，可以在GUI中观察SLAM的追踪和建图结果。注意必须缓慢移动相机，过快移动相机会导致ORB_SLAM2直接丢跟踪（tracking lost）。</p><p><strong>至此，在ORB_SLAM2中通过ROS使用D435相机的全步骤结束</strong>。</p><h3 id="2-5-可能遇到的问题">2.5. 可能遇到的问题</h3><p>roslaunch启动D435相机的时候可能会直接报错，如下所示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">king@ubuntu:/opt/ros/melodic/share/realsense2_camera$ roslaunch realsense2_camera rs_rgbd.launch</span><br><span class="line">... logging to /home/king/.ros/log/292703ba-f72c-11ef-a6ca-000c29839929/roslaunch-ubuntu-11850.log</span><br><span class="line">Checking log directory for disk usage. This may take a while.</span><br><span class="line">Press Ctrl-C to interrupt</span><br><span class="line">Done checking log file disk usage. Usage is &lt;1GB.</span><br><span class="line"></span><br><span class="line">Resource not found: rgbd_launch</span><br><span class="line">ROS path [0]=/opt/ros/melodic/share/ros</span><br><span class="line">ROS path [1]=/opt/ros/melodic/share</span><br><span class="line">The traceback for the exception was written to the log file</span><br></pre></td></tr></table></figure><p>这个问题是因为缺少安装一个ros的包，安装了之后就OK了，可以正常执行roslaunch命令了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get install -y ros-melodic-rgbd-launch</span><br></pre></td></tr></table></figure><p>前文的D435 ROS驱动安装命令中已经包含了这个软件包了。</p><h2 id="3-ORB-SLAM2读取realsense-viewer录制的rosbag文件">3. ORB_SLAM2读取realsense-viewer录制的rosbag文件</h2><p>D435相机的realsense-viewer软件是可以直接提前录制视频成rosbag格式的<code>.bag</code>文件的，这样能方便我们用同一个数据集测试SLAM系统，并以此改进SLAM算法。本质上和TUM数据集提供的rosbag格式文件没有什么区别。</p><p>在realsense-viewer中同时开启深度相机和RGB相机，点击record录制视频后，默认会存放在<code>~/Documents</code>文件夹下，找到录制的bag文件，使用<code>rostopic -b 文件名</code>的方式查看录制的bag文件中的topic列表，需要找到下面这两个主题，分别对应深度数据和彩色数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/device_0/sensor_1/Color_0/image/data</span><br><span class="line">/device_0/sensor_0/Depth_0/image/data</span><br></pre></td></tr></table></figure><p>修改ORB_SLAM2的启动命令如下，主要是订阅的主题不同。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">rosrun ORB_SLAM2 RGBD \</span><br><span class="line">    Vocabulary/ORBvoc.txt \</span><br><span class="line">    Examples/RGB-D/RealSenseD435.yaml \</span><br><span class="line">    /camera/rgb/image_raw:=/device_0/sensor_1/Color_0/image/data \</span><br><span class="line">    /camera/depth_registered/image_raw:=/device_0/sensor_0/Depth_0/image/data</span><br></pre></td></tr></table></figure><p>启动之后，使用rosplay发布bag文件中的topic即可，注意修改命令中的<code>exmaple.bag</code>为你录制的bag文件的路径</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rosbag play exmaple.bag \</span><br><span class="line">    --topics \</span><br><span class="line">    /device_0/sensor_1/Color_0/image/data \</span><br><span class="line">    /device_0/sensor_0/Depth_0/image/data</span><br></pre></td></tr></table></figure><p>如图所示，ORB_SLAM2同样可以读取D435提前录制的视频。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/04/c461138807328f77bf4c5972e1278969.png" alt="image.png"></p><h2 id="4-The-end">4. The end</h2><p>关于ORB_SLAM2和SLAM的专题博客到这里就基本结束啦，能记录的点都已经写成博客了，后续如果有其他的再继续更新吧。主要是希望能帮到其他SLAM初学者学会咋运行ORB_SLAM2。</p><p>为了毕设临时学了这么多东西，挺累人的说实话。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2023/02/202211031204848.jpg" alt="QQ图片20220507141811"></p>]]></content>
    
    
    <summary type="html">本文介绍了如何在ORB_SLAM2项目中使用RealSense D435相机作为RGB-D输入源，包括ROS下启动D435相机、ORB_SLAM2订阅Topic、ORB_SLAM2读取realsense-viewer录制的rosbag文件等步骤。</summary>
    
    
    
    <category term="编程学习" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="项目开发记录" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="Linux" scheme="https://blog.musnow.top/tags/Linux/"/>
    
    <category term="SLAM" scheme="https://blog.musnow.top/tags/SLAM/"/>
    
    <category term="RealSenseD435" scheme="https://blog.musnow.top/tags/RealSenseD435/"/>
    
  </entry>
  
  <entry>
    <title>【SLAM】使用realsense-viewer对Realsense D435进行自校准</title>
    <link href="https://blog.musnow.top/posts/8572288919/"/>
    <id>https://blog.musnow.top/posts/8572288919/</id>
    <published>2025-04-06T00:51:08.000Z</published>
    <updated>2025-04-06T09:09:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍了如何使用realsense-viewer的自校准工具对RealSense D435相机进行自校准。</p><blockquote><p>阅读本文前，请先参考本站博客<a href="https://blog.musnow.top/posts/9107049817/">【SLAM】ubuntu 18.04 安装 RealSense D435 相机驱动（ARM64/AMD64）</a>安装realsense-viewer工具。</p></blockquote><h2 id="说明">说明</h2><p>官网：<a href="https://www.intelrealsense.com/self-calibration-for-depth-cameras/">www.intelrealsense.com/self-calibration-for-depth-cameras/</a>；</p><p>先前的博客提到过，RealSense D435基于双目视觉方案获取场景中的深度，双目视觉的数学原理中，有一个参数是<strong>基线长度</strong>，即左右相机之间的距离。为了确保D435相机在使用寿命内能够保持良好的校准和性能，D400系列的相机都采用了激光熔融钢笼（laser-fused steel cages）的设计，保证两颗摄像头稳固的保持在它们的位置上，也就是保证<strong>基线长度</strong>不出现变化。</p><p>不过，再好的设计随着时间的推移也是可能退化的，比如相机暴露在极端的温度循环（突然从低温环境进入高温环境）、过度的冲击（撞到东西了）或者高频振动中，就可能会导致相机出现失真。失真分为两种情况：</p><ul><li>外部失真：与安装传感器的加强筋的微小弯曲有关；</li><li>内部失真：传感器镜头位置的微小移动引起；</li></ul><p>不管咋样，相机都可能出现失真的情况，这就需要我们对相机的内外参数进行校准，让相机的固件适应相机的失真，从而恢复原本的精度。</p><h2 id="使用realsense-viewer进行自校准">使用realsense-viewer进行自校准</h2><p>解决失真问题，最好的方式还是使用<strong>张正友标定法</strong>来对相机进行标定，重新获取相机的内外参数，常用的张正友标定法工具是ROS的camera_calibration。为了简化这个问题的处理，intel在realsense-viewer中集成了一个板载校准工具，让我们可以对D435相机进行临时的校准。</p><p>将D435相机用USB 3.0数据线链接电脑后，打开realsense-viewer，选择左上角more里面的<code>on-chip calibration</code>板载校准，就可以打开自带的校准工具。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/04/afe602ce28ec381ae3618e4de90f2edd.png" alt="image.png"></p><p>此时界面右侧会弹出来一个窗口，选择calibration。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/04/91bd2e644ae5f53e38bbc51b8a6655de.png" alt=""></p><p>随后将相机<strong>直面一个白色墙壁</strong>且保持静止，等待相机自动扫描。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/04/1298e9625ec0444e258c845560b4e98e.png" alt="image.png"></p><p>这个过程中可能会出现红色报错，比如<code>invalid value in rs2_run_on_chip_calibration</code>，不用管他，再次对准墙壁retry重试，总是能成功的。</p><p>如下图所示，右上角显示的health-check的值小于0.25，就可以接受，将其apply new写入相机固件中。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/04/3081ea9bf586e629546460aca518fac5.png" alt="image.png"></p><p>上述步骤可以运行多次，每次只要health-check的值变小了就可以apply到固件中。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/04/5ab253299d507e6102c0b998faddb993.png" alt="image.png"></p><p>至此，便完成了相机自校准的步骤。</p><h2 id="结语">结语</h2><p>除了自校准工具，intel同时提供了一个<strong>动态校准</strong> (Dynamic Calibrator) 工具，官网：<a href="https://www.intel.cn/content/www/cn/zh/download/645988/intel-realsense-d400-series-dynamic-calibration-tool.html">https://www.intel.cn/content/www/cn/zh/download/645988/intel-realsense-d400-series-dynamic-calibration-tool.html</a></p><p>其借鉴了张正友标定法的思路，也是采用特定格式的标定板对相机进行校准。慕雪暂未尝试过此工具，具体操作步骤可以参考b站视频：<a href="https://www.bilibili.com/video/av825234267?vd_source=b302188e80c9f377914b70d6f93c84dc&amp;spm_id_from=333.788.videopod.sections">[2023Q2更新] Intel英特尔RealSense实感深度摄像头 动态校准(Dynamic Calibrator) 操作步骤讲解 D400系列适用</a>。</p>]]></content>
    
    
    <summary type="html">本文介绍了如何使用realsense-viewer的自校准工具对RealSense D435相机进行自校准</summary>
    
    
    
    <category term="编程学习" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="项目开发记录" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="Linux" scheme="https://blog.musnow.top/tags/Linux/"/>
    
    <category term="SLAM" scheme="https://blog.musnow.top/tags/SLAM/"/>
    
    <category term="RealSenseD435" scheme="https://blog.musnow.top/tags/RealSenseD435/"/>
    
  </entry>
  
  <entry>
    <title>【SLAM】解决ORB_SLAM2运行时出现的&quot;maybe forgot to call initializeOptimization()&quot;警告</title>
    <link href="https://blog.musnow.top/posts/2588231435/"/>
    <id>https://blog.musnow.top/posts/2588231435/</id>
    <published>2025-04-05T06:51:23.000Z</published>
    <updated>2025-04-05T13:33:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文说明了如何解决ORB_SLAM2在ubuntu18.04运行时可能出现的&quot;forgot to call initializeOptimization()&quot;警告，包括代码修改和修复结果验证。</p><blockquote><p>为了让博客的seo更加优化，遵循bing站长工具的建议，把每篇博客的description都适当加长一些。</p></blockquote><h2 id="问题说明">问题说明</h2><p>在Ubuntu 18.04上运行ORB_SLAM2的时候可能遇到如下g2o警告</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virtual int g2o::SparseOptimizer::optimize(int, bool): 0 vertices to optimize, maybe forgot to call initializeOptimization()</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/04/db21d9845f7fe82b622c96110cc989a9.png" alt="image.png"></p><p>在github仓库中找到了相关的issue：<a href="https://github.com/raulmur/ORB_SLAM2/issues/463">github.com/raulmur/ORB_SLAM2/issues/463</a>；</p><p>根据<a href="https://github.com/raulmur/ORB_SLAM2/issues/211">github.com/raulmur/ORB_SLAM2/issues/211</a>里面的描述，这个报错是g2o提出的，而且是一个harmless报错，也就是它虽然爆出来了但是没关系，也不会影响进程运行。</p><h2 id="修复代码">修复代码</h2><p>虽然这问题不会影响运行吧，但对于有些许强迫症的我来说，更想知道怎么操作才能修复掉这个告警。根据issue 211里面的文字描述，找到了代码修改点：</p><blockquote><p>Did you find where the problem is? I met the same problem in PoseOptimization because after n iterations probably all correspondences is bad. I just add the following check.<br><code>if((nInitialCorrespondences-nBad)&lt;5) break;</code><br>It fixes my problem. Hope it helps.</p><p>I put this in the function Optimizer::PoseOptimization. Try to find the place where it performs 4 optimizations (for loop in there). At the end of each optimization, I add this check to make sure there are still enough vertices in the optimized graph.</p></blockquote><p>修改点是ORB_SLAM2代码<code>src/Optimizer.cc</code>中的441行之后。在函数<code>Optimizer::PoseOptimization</code>的<code>for(size_t it=0; it&lt;4; it++)</code>的末尾添加。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(optimizer.<span class="built_in">edges</span>().<span class="built_in">size</span>()&lt;<span class="number">10</span>)</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"><span class="comment">// 441行之后添加下面的代码</span></span><br><span class="line"><span class="keyword">if</span>((nInitialCorrespondences-nBad)&lt;<span class="number">5</span>)</span><br><span class="line">    <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><p>具体的修改位置可以参考我fork的源码提交记录：<a href="https://github.com/musnows/ORB_SLAM2/commit/4840cdccdee0842896a637e57de47acecb7d75ac">https://github.com/musnows/ORB_SLAM2/commit/4840cdccdee0842896a637e57de47acecb7d75ac</a>，截图如下：</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/04/cb9bfb985699aeb80b6a486d2b46e988.png" alt="image.png"></p><p>新增代码后完整for循环代码如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/Optimizer.cc</span></span><br><span class="line"><span class="comment">// 函数 Optimizer::PoseOptimization</span></span><br><span class="line"><span class="type">int</span> nBad=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">size_t</span> it=<span class="number">0</span>; it&lt;<span class="number">4</span>; it++)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    vSE3-&gt;<span class="built_in">setEstimate</span>(Converter::<span class="built_in">toSE3Quat</span>(pFrame-&gt;mTcw));</span><br><span class="line">    optimizer.<span class="built_in">initializeOptimization</span>(<span class="number">0</span>);</span><br><span class="line">    optimizer.<span class="built_in">optimize</span>(its[it]);</span><br><span class="line"></span><br><span class="line">    nBad=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">size_t</span> i=<span class="number">0</span>, iend=vpEdgesMono.<span class="built_in">size</span>(); i&lt;iend; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        g2o::EdgeSE3ProjectXYZOnlyPose* e = vpEdgesMono[i];</span><br><span class="line"></span><br><span class="line">        <span class="type">const</span> <span class="type">size_t</span> idx = vnIndexEdgeMono[i];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(pFrame-&gt;mvbOutlier[idx])</span><br><span class="line">        &#123;</span><br><span class="line">            e-&gt;<span class="built_in">computeError</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">const</span> <span class="type">float</span> chi2 = e-&gt;<span class="built_in">chi2</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(chi2&gt;chi2Mono[it])</span><br><span class="line">        &#123;                </span><br><span class="line">            pFrame-&gt;mvbOutlier[idx]=<span class="literal">true</span>;</span><br><span class="line">            e-&gt;<span class="built_in">setLevel</span>(<span class="number">1</span>);</span><br><span class="line">            nBad++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            pFrame-&gt;mvbOutlier[idx]=<span class="literal">false</span>;</span><br><span class="line">            e-&gt;<span class="built_in">setLevel</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(it==<span class="number">2</span>)</span><br><span class="line">            e-&gt;<span class="built_in">setRobustKernel</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">size_t</span> i=<span class="number">0</span>, iend=vpEdgesStereo.<span class="built_in">size</span>(); i&lt;iend; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        g2o::EdgeStereoSE3ProjectXYZOnlyPose* e = vpEdgesStereo[i];</span><br><span class="line"></span><br><span class="line">        <span class="type">const</span> <span class="type">size_t</span> idx = vnIndexEdgeStereo[i];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(pFrame-&gt;mvbOutlier[idx])</span><br><span class="line">        &#123;</span><br><span class="line">            e-&gt;<span class="built_in">computeError</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">const</span> <span class="type">float</span> chi2 = e-&gt;<span class="built_in">chi2</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(chi2&gt;chi2Stereo[it])</span><br><span class="line">        &#123;</span><br><span class="line">            pFrame-&gt;mvbOutlier[idx]=<span class="literal">true</span>;</span><br><span class="line">            e-&gt;<span class="built_in">setLevel</span>(<span class="number">1</span>);</span><br><span class="line">            nBad++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;                </span><br><span class="line">            e-&gt;<span class="built_in">setLevel</span>(<span class="number">0</span>);</span><br><span class="line">            pFrame-&gt;mvbOutlier[idx]=<span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(it==<span class="number">2</span>)</span><br><span class="line">            e-&gt;<span class="built_in">setRobustKernel</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(optimizer.<span class="built_in">edges</span>().<span class="built_in">size</span>()&lt;<span class="number">10</span>)</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="comment">// 添加如下代码</span></span><br><span class="line">    <span class="keyword">if</span>((nInitialCorrespondences-nBad)&lt;<span class="number">5</span>)</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;     </span><br></pre></td></tr></table></figure><h2 id="问题解决">问题解决</h2><p>修改之后，重新编译ORB_SLAM2，再次运行，告警应该消失了。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/04/7c1f4bdc9b998cb8aad2c61d3b10ef6f.png" alt="image.png"></p><p>至此，问题解决~</p>]]></content>
    
    
    <summary type="html">本文说明了如何解决ORB_SLAM2在ubuntu18.04运行时可能出现的&quot;maybe forgot to call initializeOptimization()&quot;警告，包括代码修改和修复结果验证</summary>
    
    
    
    <category term="编程学习" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="项目开发记录" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="Linux" scheme="https://blog.musnow.top/tags/Linux/"/>
    
    <category term="SLAM" scheme="https://blog.musnow.top/tags/SLAM/"/>
    
  </entry>
  
  <entry>
    <title>【SLAM】ubuntu 18.04 安装 RealSense D435 相机驱动（ARM64/AMD64）</title>
    <link href="https://blog.musnow.top/posts/9107049817/"/>
    <id>https://blog.musnow.top/posts/9107049817/</id>
    <published>2025-04-04T12:04:47.000Z</published>
    <updated>2025-04-06T08:36:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>ubuntu 18.04 安装 realsense d435 驱动和 realsense-viewer。</p><h2 id="RealSense-D435简介">RealSense D435简介</h2><p>RealSense D435是英特尔推出的一款RGB-D相机：<a href="https://www.intelrealsense.com/depth-camera-d435/">官网</a>，后文使用D435简称此相机。</p><p>RGB-D相机和我们平时使用的相机的不同之处在于，RGB-D相机可以在拍摄彩色画面（RGB）的同时，提供拍摄场景的深度数据（Depth），D435就是这样的一款相机。</p><p>D435采用的是RGB-D相机中的<strong>双目视觉方案</strong>来获取深度数据，介绍双目视觉方案之前，需要先引入<strong>视差</strong>的概念。我们左眼和右眼看到同一个物品的位置是不同的，这个位置的不同被称作“视差”。举个例子，你可以把一个物品放在你的正前方，尝试单独闭上左眼或右眼，你面前的这个物品在左眼和右眼看到的画面中会出现位置变化，这便是“视差”的现象。</p><blockquote><p>关于双目视觉方案的原理可以进一步阅读：<a href="https://zhuanlan.zhihu.com/p/361195131">【知乎】视觉深度、标定、立体匹配</a>，本文只做基础介绍。</p></blockquote><p>所谓<strong>双目视觉方案</strong>，就是模拟人的双眼，用两颗焦距相同的镜头（下图中的Left/Right Imager，D435使用的是两颗红外镜头），从不同的角度拍摄图像，然后通过特征匹配计算<strong>视差</strong>，进而推导场景的深度。</p><p>双目视觉方案的主要缺陷在于场景中的纹理较弱的情况下，<strong>比如白墙，两颗摄像头看到的都是一个相对光滑的平面</strong>，这种弱纹理场景无法找到足够的匹配点，视差计算精度降低，进一步导致推导出的深度数据精度降低。为此，D435在双目视觉方案的基础上，新增了一个<strong>红外点阵投影仪</strong>（下图中的IR Projector），向场景中投射肉眼不可见的红外点阵，以加强环境中的纹理，辅助双目视觉匹配，提高深度数据的精度。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/04/9ff735152042b328f2125ed811d9a8ec.png" alt="image.png"></p><p>RealSense D435相机需要通过一根USB 3.1 TypeC高速数据线与电脑相连，一定要是USB 3.0及以上的数据线，<strong>不能使用USB 2.0数据线</strong>，传输速率不够。这里特别提醒一下，手机厂家给的数据线一般都不能用（尝试过vivo和华为的TypeC线，都只识别出了USB 2.0），即便链接手机的时候支持USB 3.0，链接D435相机的时候也可能无法支持，建议购买一根绿联的USB 3.0 TypeC数据线。</p><p>准备好相机和USB 3.0数据线后，就可以开始本文的驱动安装操作了。</p><h2 id="在AMD64上安装realsense驱动">在AMD64上安装realsense驱动</h2><blockquote><p>操作系统：AMD64，Ubuntu 18.04 LTS，VMware虚拟机安装</p></blockquote><p>x86的机器安装realsense驱动比较简单，直接根据github仓库中的文档进行安装就可以了：<a href="https://github.com/IntelRealSense/librealsense/blob/master/doc/distribution_linux.md">https://github.com/IntelRealSense/librealsense/blob/master/doc/distribution_linux.md</a>；</p><p>这里把安装命令拷贝如下，注意安装过程中不要将D435链接至电脑。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">mkdir</span> -p /etc/apt/keyrings</span><br><span class="line"></span><br><span class="line">curl -sSf https://librealsense.intel.com/Debian/librealsense.pgp | <span class="built_in">sudo</span> <span class="built_in">tee</span> /etc/apt/keyrings/librealsense.pgp &gt; /dev/null</span><br><span class="line"></span><br><span class="line"><span class="comment"># add new server</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;deb [signed-by=/etc/apt/keyrings/librealsense.pgp] https://librealsense.intel.com/Debian/apt-repo `lsb_release -cs` main&quot;</span> | \</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">tee</span> /etc/apt/sources.list.d/librealsense.list</span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> apt-get update -y</span><br></pre></td></tr></table></figure><p>命令执行结果如下图所示</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/04/dda63d9b9072de8bd7f3d7e014d62f11.png" alt="image.png"></p><p>随后安装四个软件包，前两个必装，后两个选装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get install librealsense2-dkms</span><br><span class="line"><span class="built_in">sudo</span> apt-get install librealsense2-utils</span><br><span class="line"><span class="comment"># 可选</span></span><br><span class="line"><span class="built_in">sudo</span> apt-get install librealsense2-dev <span class="comment"># 可以使用-lrealsense2来编译代码</span></span><br><span class="line"><span class="built_in">sudo</span> apt-get install librealsense2-dbg</span><br></pre></td></tr></table></figure><p>安装好了之后查看版本信息，确保包含realsense字样。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">king@ubuntu:~$ modinfo uvcvideo | grep &quot;version:&quot;</span><br><span class="line">version:        1.1.2.realsense-1.3.18</span><br><span class="line">srcversion:     51A4A0210E91BE50A7BA2BB</span><br><span class="line">king@ubuntu:~$ dkms status</span><br><span class="line">librealsense2-dkms, 1.3.18, 5.4.0-150-generic, x86_64: installed</span><br></pre></td></tr></table></figure><p>现在可以插上D435相机了（注意VMware中选择D435链接至虚拟机），使用<code>realsense-viewer</code>命令启动软件，如下图所示，此时就是已经识别到我们的D435相机了。这里有一个很明显的USB 2.1的标识，代表我们的数据线不支持USB 3.0，这会影响到D435相机的数据传输。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/04/5518ca3d1d9953fd27c7024db94fbf14.png" alt="image.png"></p><p>以绿联的USB 3.0数据线为例，插上之后会显示USB 3.2，此时就是符合需求的。在左侧面板中，可以分别打开深度相机和RGB相机，开启之后会在右侧的主界面中显示相机拍摄的画面。在Stereo Module选项关闭状态的时候，还可以勾选上左右红外相机，让红外相机的原始图像也显示在右侧界面中。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/04/c5c06627856ef2bdf5daebd5eda0048c.png" alt="image.png"></p><p>在我的测试中，执行了realsense-viewer命令还会出现如下警告</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">king@ubuntu:~$ realsense-viewer</span><br><span class="line"> 05/04 18:06:56,380 INFO [139813411274368] (backend-v4l2.cpp:646) Cannot access /sys/class/video4linux</span><br></pre></td></tr></table></figure><p>虽然出现了这个警告，但似乎并不影响realsense-viewer程序的使用，整个操作、录制视频的过程都没有出现崩溃。我执行realsense-viewer命令的时候D435相机并没有连接到电脑上，不确定是否和相机没有链接有关系。</p><h3 id="ROS环境下使用D435">ROS环境下使用D435</h3><p>如果想要在ROS环境下使用D435相机，还需要安装ROS的realsense驱动（请先保证本地已经安装ROS环境）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get install -y ros-melodic-realsense2-camera</span><br><span class="line"><span class="built_in">sudo</span> apt-get install -y ros-melodic-realsense2-description</span><br><span class="line"><span class="built_in">sudo</span> apt-get install -y ros-melodic-rgbd-launch</span><br></pre></td></tr></table></figure><p>至此，AMD64下的realsense驱动就已经安装好了，可以正常使用相机了。你可以尝试用如下命令在ROS环境下启动D435相机，开始广播深度和彩色图像的Topic。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">roslaunch realsense2_camera rs_camera.launch</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/04/c3c8958b59c5adceca3bbfa60e35cbec.png" alt="image.png"></p><h2 id="在ARM64上安装realsense驱动">在ARM64上安装realsense驱动</h2><blockquote><p>操作系统：ARM64（MAC M3），Ubuntu 22.04 LTS虚拟机，Docker启动的ubuntu:18.04容器</p></blockquote><p>在ARM64的设备上安装realsense驱动就有点难办了，不能直接一股脑执行上面的安装命令了，需要我们从源码编译realsense，这里给出几个参考博客：</p><ul><li><a href="https://blog.csdn.net/qq_45779334/article/details/123595872" title="Ubuntu18.04——基于X86和Arm安装并配置Realsense-ros环境_librealsense-CSDN博客">Ubuntu18.04——基于X86和Arm安装并配置Realsense-ros环境_librealsense-CSDN博客</a></li><li><a href="https://blog.csdn.net/qq_45779334/article/details/124304087" title="Ubuntu——librealsense编译报错：The RandR headers were not found等类似报错解决方案汇总-CSDN博客">Ubuntu——librealsense编译报错：The RandR headers were not found等类似报错解决方案汇总-CSDN博客</a></li><li><a href="https://github.com/IntelRealSense/librealsense/blob/master/doc/installation_jetson.md">github.com/IntelRealSense/librealsense/blob/master/doc/installat…</a></li></ul><p>首先安装如下依赖项</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get install -y cmake git </span><br><span class="line"><span class="built_in">sudo</span> apt-get install -y libusb-1.0-0-dev pkg-config</span><br><span class="line"><span class="built_in">sudo</span> apt-get install -y libglfw3-dev libgl1-mesa-dev libglu1-mesa-dev</span><br><span class="line"><span class="built_in">sudo</span> apt-get install -y openssl libssl-dev</span><br></pre></td></tr></table></figure><p>克隆源代码，进入目录中，cmake构建项目</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 克隆代码</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/IntelRealSense/librealsense.git</span><br><span class="line"><span class="built_in">cd</span> ~/librealsense</span><br><span class="line"><span class="built_in">mkdir</span> build &amp;&amp; <span class="built_in">cd</span> build</span><br><span class="line"><span class="comment"># 使用RSUSB版本的后端</span></span><br><span class="line">cmake .. \</span><br><span class="line">    -DBUILD_EXAMPLES=<span class="literal">true</span> \</span><br><span class="line">    -DCMAKE_BUILD_TYPE=release \</span><br><span class="line">    -DFORCE_RSUSB_BACKEND=ON</span><br><span class="line">make -j4</span><br><span class="line"><span class="built_in">sudo</span> make install</span><br></pre></td></tr></table></figure><p>cmake构建成功的截图如下，构建过程中涉及从github拉代码，可能会出现各类网络问题，自行解决啦。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/04/12674f5bc9229f9d7b0f2541daf9fef7.png" alt="image.png"></p><p>make编译完成的输出如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[ 98%] Building CXX object tools/depth-quality/CMakeFiles/rs-depth-quality.dir/depth-quality-model.cpp.o</span><br><span class="line">[ 99%] Linking CXX executable ../../Release/realsense-viewer</span><br><span class="line">[ 99%] Built target realsense-viewer</span><br><span class="line">[ 99%] Building CXX object tools/depth-quality/CMakeFiles/rs-depth-quality.dir/__/__/third-party/imgui/imgui.cpp.o</span><br><span class="line">[ 99%] Building CXX object tools/depth-quality/CMakeFiles/rs-depth-quality.dir/__/__/third-party/imgui/imgui_draw.cpp.o</span><br><span class="line">[ 99%] Building CXX object tools/depth-quality/CMakeFiles/rs-depth-quality.dir/__/__/third-party/imgui/imgui_impl_glfw.cpp.o</span><br><span class="line">[ 99%] Building C object tools/depth-quality/CMakeFiles/rs-depth-quality.dir/__/__/third-party/glad/glad.c.o</span><br><span class="line">[100%] Building C object tools/depth-quality/CMakeFiles/rs-depth-quality.dir/__/__/third-party/tinyfiledialogs/tinyfiledialogs.c.o</span><br><span class="line">[100%] Linking CXX executable ../../Release/rs-depth-quality</span><br><span class="line">[100%] Built target rs-depth-quality</span><br><span class="line">[root:/work/pkg/librealsense-master/build]#</span><br></pre></td></tr></table></figure><p>make install的部分输出如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">-- Installing: /usr/local/bin/rs-fw-update</span><br><span class="line">-- Set runtime path of &quot;/usr/local/bin/rs-fw-update&quot; to &quot;&quot;</span><br><span class="line">-- Installing: /usr/local/bin/rs-embed</span><br><span class="line">-- Installing: /usr/local/bin/rs-data-collect</span><br><span class="line">-- Set runtime path of &quot;/usr/local/bin/rs-data-collect&quot; to &quot;&quot;</span><br><span class="line">-- Installing: /usr/local/bin/realsense-viewer</span><br><span class="line">-- Set runtime path of &quot;/usr/local/bin/realsense-viewer&quot; to &quot;&quot;</span><br><span class="line">-- Installing: /root/Documents/librealsense2/presets</span><br><span class="line">-- Installing: /root/Documents/librealsense2/presets/sample.preset</span><br><span class="line">-- Installing: /usr/local/bin/rs-depth-quality</span><br><span class="line">-- Set runtime path of &quot;/usr/local/bin/rs-depth-quality&quot; to &quot;&quot;</span><br><span class="line">-- Installing: /usr/local/bin/rs-rosbag-inspector</span><br><span class="line">-- Set runtime path of &quot;/usr/local/bin/rs-rosbag-inspector&quot; to &quot;&quot;</span><br><span class="line">-- Installing: /usr/local/bin/rs-benchmark</span><br><span class="line">-- Set runtime path of &quot;/usr/local/bin/rs-benchmark&quot; to &quot;&quot;</span><br><span class="line">-- Installing: /usr/local/lib/libfw.a</span><br><span class="line">[root:/work/pkg/librealsense-master/build]#</span><br></pre></td></tr></table></figure><p>此时环境中就已经有realsense-viewer了，可以使用该命令启动程序了</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/04/361dee9ef034e5b20477450d54bd7df0.png" alt="image.png"></p><p>将D435通过数据线连接MAC，可以在MAC的设备详情中找到USB一栏，确定是链接在USB 3.1总线而不是USB 2.0总线上。设备详情页面通过按下option+点击左上角苹果图标，点击<strong>系统信息</strong>可以打开。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/04/fb1a566d217183488c3bbc5263e80f17.png" alt="image.png"></p><p>在parallels顶栏的设备选项中，在USB与蓝牙设置中找到D435相机，勾选它让它直连虚拟机。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/04/7eb4dd27f928597139e4374513372589.png" alt="image.png"></p><p>注意，docker容器必须用特权模式创建，才能和宿主机共享USB设备，可以在容器内终端执行命令确认相机是否已经连接。插入d435相机后需要重启容器，才能看到USB设备。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root:/]# ls /dev/video* -l</span><br><span class="line">crw-rw---- 1 root video 81, 0 Mar  2 13:16 /dev/video0</span><br><span class="line">crw-rw---- 1 root video 81, 1 Mar  2 13:16 /dev/video1</span><br><span class="line">crw-rw---- 1 root video 81, 2 Mar  2 13:16 /dev/video2</span><br><span class="line">crw-rw---- 1 root video 81, 3 Mar  2 13:16 /dev/video3</span><br><span class="line">crw-rw---- 1 root video 81, 4 Mar  2 13:16 /dev/video4</span><br><span class="line">crw-rw---- 1 root video 81, 5 Mar  2 13:16 /dev/video5</span><br><span class="line">crw-rw---- 1 root video 81, 6 Mar  2 13:16 /dev/video6</span><br><span class="line">crw-rw---- 1 root video 81, 7 Mar  2 13:16 /dev/video7</span><br><span class="line">crw-rw---- 1 root video 81, 8 Mar  2 13:16 /dev/video8</span><br><span class="line">crw-rw---- 1 root video 81, 9 Mar  2 13:16 /dev/video9</span><br><span class="line">[root:/]#</span><br></pre></td></tr></table></figure><p>此时再执行realsense-viewer命令，已经能正常使用相机了</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/04/891768ed886d032b2465526554ad5afd.png" alt="image.png"></p><p>因为在docker容器内是以root身份执行的realsense-viewer，右上角会弹出一个提示</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/04/85bf9f17b266cda941532e646efeffc5.png" alt="image.png"></p><p>可以根据里面的命令修复一下，就不会弹出这个提示了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> ~/.99-realsense-libusb.rules /etc/udev/rules.d/99-realsense-libusb.rules &amp;&amp; udevadm control --reload-rules &amp;&amp; udevadm trigger</span><br></pre></td></tr></table></figure><h3 id="ROS环境下使用D435-2">ROS环境下使用D435</h3><p>如果想在ROS环境下使用realsense-viewer，同样是安装依赖包，安装了之后就能和x86的机器一样正常使用相机了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get install -y \</span><br><span class="line">    ros-melodic-realsense2-camera \</span><br><span class="line">    ros-melodic-realsense2-description \</span><br><span class="line">    ros-melodic-rgbd-launch</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/04/4f00ed19bde18cb665c0d9dad0597703.png" alt="image.png"></p><p>不过，在我的测试中，在ARM64上使用D435相机执行ORB-SLAM2的时候会出现严重掉帧（在x86机器上不会出现），不确定是否和我在虚拟机里面套娃docker有关系。建议还是优先使用x86设备来操作D435相机。</p><h2 id="The-end">The end</h2><p>希望本文能帮到你，主要是提供了arm64设备上安装realsense驱动的方式，很多博客针对这部分的记录都不够详细。</p>]]></content>
    
    
    <summary type="html">本文介绍了在 ubuntu 18.04 中安装 realsense d435 驱动和 realsense-viewer，本文内容同时适用于ARM64/AMD64平台</summary>
    
    
    
    <category term="编程学习" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="项目开发记录" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="Linux" scheme="https://blog.musnow.top/tags/Linux/"/>
    
    <category term="SLAM" scheme="https://blog.musnow.top/tags/SLAM/"/>
    
    <category term="RealSenseD435" scheme="https://blog.musnow.top/tags/RealSenseD435/"/>
    
  </entry>
  
  <entry>
    <title>【SLAM】将realsense-viewer录制的rosbag视频导出成图片序列（RealSense D435）</title>
    <link href="https://blog.musnow.top/posts/1391481152/"/>
    <id>https://blog.musnow.top/posts/1391481152/</id>
    <published>2025-04-04T07:08:46.000Z</published>
    <updated>2025-04-06T08:30:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍了如何将realsense-viewer录制的rosbag格式的视频导出成图片序列，方便合并成mp4视频或插入到论文中。</p><h2 id="说明">说明</h2><p>Intel提供的realsense-viewer软件录制的视频都是rosbag格式的，为了编写论文，需要从录制的视频中截取一两帧作为论文插图，所以需要使用工具把rosbag中的视频导出为图片。</p><p>最简单的方式肯定是直接rosplay播放bag里面的视频流然后使用image_view读取视频流然后截图，但是这个方式不太好，因为手动截图非常容易出现分辨率差异（框选的区域不一样），而且rosplay播放视频的时候不能暂停，也不好精确的截到自己想要的那张图片。</p><p>更好的方式是使用ros自带的工具把rosbag里面的视频流直接导出成图片序列，避免自己手动截图。在最终导出的图片序列里面选一两个插入到论文里面就ok了。</p><h2 id="操作">操作</h2><p>首先，realsense-viewer录制的视频默认存放在用户的<code>~/Documents</code>文件夹里面，命名格式一般是今天的日期加上一串数字，比如<code>20250331_172324.bag</code>。首先要做的是确定我们需要的视频数据topic名称，使用如下命令查看</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rostopic list -b example.bag</span><br></pre></td></tr></table></figure><p>以我使用的RealSense D435为例，图像topic是下面这俩个，分别对应深度数据和RGB数据。我要的是RGB数据。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/device_0/sensor_1/Color_0/image/data</span><br><span class="line">/device_0/sensor_0/Depth_0/image/data</span><br></pre></td></tr></table></figure><p>先使用另外一个终端A，开启roscore，然后在终端B里面执行如下命令，工具<strong>会在这个命令执行的目录中输出图片序列</strong>。这个命令中使用了extract_images工具，并通过<code>_sec_per_frame</code>指定每0.01秒截取一张图片，通过<code>image:=</code>订阅的topic正是我需要的RGB图像topic。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rosrun image_view extract_images \</span><br><span class="line">    _sec_per_frame:=0.01 \</span><br><span class="line">    image:=/device_0/sensor_1/Color_0/image/data</span><br></pre></td></tr></table></figure><p>再开启一个终端C，执行rosbag play命令来播放bag文件里面的视频，其中<code>--topics</code>选项用于列出我们想要广播的topic是谁。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rosbag play exmaple.bag \</span><br><span class="line">    --topics /device_0/sensor_1/Color_0/image/data</span><br></pre></td></tr></table></figure><p>执行之后，extract_images工具就会自动从这个订阅的topic中截取视频流，输出到执行这个命令的PWD里面了，如下所示。图片文件的默认命名格式是<code>frame%04.jpg</code>，工具会自动命名序号。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">king@ubuntu:~/Documents$ ls images/</span><br><span class="line">frame0000.jpg  frame0164.jpg  frame0328.jpg  frame0492.jpg  frame0656.jpg</span><br><span class="line">frame0001.jpg  frame0165.jpg  frame0329.jpg  frame0493.jpg  frame0657.jpg</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>图片输出结果如下图所示：</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.musnow.top/i/2025/04/89508777ffaf43eabd0273d73f406fd4.png" alt="image.png"></p><p>注：如果你想把这些图片重新组成一个mp4格式的视频，可以用ffmpeg工具实现。</p><h2 id="The-end">The end</h2><p>至此，问题解决。</p>]]></content>
    
    
    <summary type="html">本文介绍了如何将realsense-viewer录制的rosbag格式的视频导出成图片序列，方便合并成mp4视频或插入到论文中（Realsense D435）</summary>
    
    
    
    <category term="编程学习" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="项目开发记录" scheme="https://blog.musnow.top/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="Linux" scheme="https://blog.musnow.top/tags/Linux/"/>
    
    <category term="SLAM" scheme="https://blog.musnow.top/tags/SLAM/"/>
    
    <category term="RealSenseD435" scheme="https://blog.musnow.top/tags/RealSenseD435/"/>
    
  </entry>
  
</feed>
